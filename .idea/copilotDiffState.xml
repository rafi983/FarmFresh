<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/farmers/migrate/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/farmers/migrate/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    let migratedCount = 0;&#10;    let skippedCount = 0;&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;        migratedCount++;&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;        skippedCount++;&#10;      }&#10;    }&#10;&#10;    // Get final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Farmer migration completed&quot;,&#10;      results: {&#10;        farmersFound: farmerUsers.length,&#10;        migrated: migratedCount,&#10;        skipped: skippedCount,&#10;        totalFarmersInCollection: totalFarmers&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;Migration error:&quot;, error);&#10;    return NextResponse.json(&#10;      { &#10;        success: false, &#10;        error: &quot;Failed to migrate farmers&quot;,&#10;        message: error.message &#10;      },&#10;      { status: 500 }&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/[id]/can-review/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/[id]/can-review/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = params; // product ID&#10;    const { searchParams } = new URL(request.url);&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;&#10;    console.log(&quot; Can-review API called:&quot;, { productId: id, userId });&#10;&#10;    if (!userId) {&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;User not authenticated&quot; },&#10;        { status: 401 },&#10;      );&#10;    }&#10;&#10;    if (!id) {&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;Product ID required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;&#10;    // Build query to check if user has purchased and received this product&#10;    const userIdConditions = [{ userId: userId }]; // Direct string match&#10;&#10;    // Only add ObjectId condition if userId is a valid ObjectId format&#10;    if (ObjectId.isValid(userId)) {&#10;      userIdConditions.push({ userId: new ObjectId(userId) });&#10;    }&#10;&#10;    // Build product ID conditions&#10;    const productIdConditions = [id];&#10;    if (ObjectId.isValid(id)) {&#10;      productIdConditions.push(new ObjectId(id));&#10;    }&#10;&#10;    console.log(&quot; Checking purchase history:&quot;, {&#10;      userIdConditions,&#10;      productIdConditions,&#10;      userId,&#10;      productId: id,&#10;    });&#10;&#10;    // Check if user has a delivered order with this product&#10;    const purchaseQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          &quot;items.productId&quot;: { $in: productIdConditions },&#10;        },&#10;        {&#10;          status: &quot;delivered&quot;, // Only delivered orders are eligible for reviews&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&quot; Purchase query:&quot;, JSON.stringify(purchaseQuery, null, 2));&#10;&#10;    const purchaseCheck = await ordersCollection.findOne(purchaseQuery);&#10;&#10;    console.log(&#10;      &quot; Purchase check result:&quot;,&#10;      purchaseCheck ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;&#10;    if (!purchaseCheck) {&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason:&#10;          &quot;You must purchase and receive this product before writing a review&quot;,&#10;        hasPurchased: false,&#10;      });&#10;    }&#10;&#10;    // Check if user has already reviewed this product&#10;    const existingReviewQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          productId: { $in: productIdConditions },&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&#10;      &quot; Checking existing review query:&quot;,&#10;      JSON.stringify(existingReviewQuery, null, 2),&#10;    );&#10;&#10;    const existingReview = await reviewsCollection.findOne(existingReviewQuery);&#10;&#10;    console.log(&#10;      &quot; Existing review check:&quot;,&#10;      existingReview ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;&#10;    if (existingReview) {&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason: &quot;You have already reviewed this product&quot;,&#10;        hasPurchased: true,&#10;        hasReviewed: true,&#10;        existingReview: {&#10;          id: existingReview._id,&#10;          rating: existingReview.rating,&#10;          comment: existingReview.comment,&#10;          createdAt: existingReview.createdAt,&#10;        },&#10;      });&#10;    }&#10;&#10;    // User has purchased and received the product, and hasn't reviewed it yet&#10;    console.log(&quot;✅ User can review this product&quot;);&#10;&#10;    return NextResponse.json({&#10;      canReview: true,&#10;      reason: &quot;You can write a review for this product&quot;,&#10;      hasPurchased: true,&#10;      hasReviewed: false,&#10;      orderDetails: {&#10;        orderId: purchaseCheck._id,&#10;        orderDate: purchaseCheck.createdAt,&#10;        deliveredDate: purchaseCheck.updatedAt,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error in can-review API:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        canReview: false,&#10;        reason: &quot;Server error while checking review eligibility&quot;,&#10;        error:&#10;          process.env.NODE_ENV === &quot;development&quot; ? error.message : undefined,&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = params; // product ID&#10;    const { searchParams } = new URL(request.url);&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;&#10;    console.log(&quot; Can-review API called:&quot;, { productId: id, userId });&#10;    console.log(&quot; Full request details:&quot;, {&#10;      url: request.url,&#10;      searchParams: Array.from(searchParams.entries()),&#10;      headers: Object.fromEntries(request.headers.entries()),&#10;    });&#10;&#10;    if (!userId) {&#10;      console.log(&quot;❌ No userId provided&quot;);&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;User not authenticated&quot; },&#10;        { status: 401 },&#10;      );&#10;    }&#10;&#10;    if (!id) {&#10;      console.log(&quot;❌ No product ID provided&quot;);&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;Product ID required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;&#10;    console.log(&quot; Database connection established&quot;);&#10;&#10;    // Build query to check if user has purchased and received this product&#10;    const userIdConditions = [{ userId: userId }]; // Direct string match&#10;&#10;    // Only add ObjectId condition if userId is a valid ObjectId format&#10;    if (ObjectId.isValid(userId)) {&#10;      userIdConditions.push({ userId: new ObjectId(userId) });&#10;    }&#10;&#10;    // Build product ID conditions&#10;    const productIdConditions = [id];&#10;    if (ObjectId.isValid(id)) {&#10;      productIdConditions.push(new ObjectId(id));&#10;    }&#10;&#10;    console.log(&quot; Checking purchase history:&quot;, {&#10;      userIdConditions,&#10;      productIdConditions,&#10;      userId,&#10;      productId: id,&#10;    });&#10;&#10;    // Check if user has a delivered order with this product&#10;    const purchaseQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          &quot;items.productId&quot;: { $in: productIdConditions },&#10;        },&#10;        {&#10;          status: &quot;delivered&quot;, // Only delivered orders are eligible for reviews&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&quot; Purchase query:&quot;, JSON.stringify(purchaseQuery, null, 2));&#10;&#10;    const purchaseCheck = await ordersCollection.findOne(purchaseQuery);&#10;&#10;    console.log(&#10;      &quot; Purchase check result:&quot;,&#10;      purchaseCheck ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;    &#10;    if (purchaseCheck) {&#10;      console.log(&quot; Found matching order:&quot;, {&#10;        orderId: purchaseCheck._id,&#10;        userId: purchaseCheck.userId,&#10;        status: purchaseCheck.status,&#10;        items: purchaseCheck.items?.map(item =&gt; ({&#10;          productId: item.productId,&#10;          name: item.name,&#10;        })),&#10;        createdAt: purchaseCheck.createdAt,&#10;        updatedAt: purchaseCheck.updatedAt,&#10;      });&#10;    }&#10;&#10;    if (!purchaseCheck) {&#10;      console.log(&quot;❌ No delivered order found for this user-product combination&quot;);&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason:&#10;          &quot;You must purchase and receive this product before writing a review&quot;,&#10;        hasPurchased: false,&#10;        debug: {&#10;          query: purchaseQuery,&#10;          userIdConditions,&#10;          productIdConditions,&#10;        },&#10;      });&#10;    }&#10;&#10;    // Check if user has already reviewed this product&#10;    const existingReviewQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          productId: { $in: productIdConditions },&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&#10;      &quot; Checking existing review query:&quot;,&#10;      JSON.stringify(existingReviewQuery, null, 2),&#10;    );&#10;&#10;    const existingReview = await reviewsCollection.findOne(existingReviewQuery);&#10;&#10;    console.log(&#10;      &quot; Existing review check:&quot;,&#10;      existingReview ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;&#10;    if (existingReview) {&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason: &quot;You have already reviewed this product&quot;,&#10;        hasPurchased: true,&#10;        hasReviewed: true,&#10;        existingReview: {&#10;          id: existingReview._id,&#10;          rating: existingReview.rating,&#10;          comment: existingReview.comment,&#10;          createdAt: existingReview.createdAt,&#10;        },&#10;      });&#10;    }&#10;&#10;    // User has purchased and received the product, and hasn't reviewed it yet&#10;    console.log(&quot;✅ User can review this product&quot;);&#10;&#10;    return NextResponse.json({&#10;      canReview: true,&#10;      reason: &quot;You can write a review for this product&quot;,&#10;      hasPurchased: true,&#10;      hasReviewed: false,&#10;      orderDetails: {&#10;        orderId: purchaseCheck._id,&#10;        orderDate: purchaseCheck.createdAt,&#10;        deliveredDate: purchaseCheck.updatedAt,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error in can-review API:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        canReview: false,&#10;        reason: &quot;Server error while checking review eligibility&quot;,&#10;        error:&#10;          process.env.NODE_ENV === &quot;development&quot; ? error.message : undefined,&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ProductCard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ProductCard.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.reviewCount || product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ReorderModal.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ReorderModal.js" />
              <option name="originalContent" value="import { useState, useEffect } from &quot;react&quot;;&#10;&#10;export default function ReorderModal({&#10;  isOpen,&#10;  onClose,&#10;  validationResult,&#10;  onProceedWithAvailable,&#10;  onProceedWithAll,&#10;  loading,&#10;}) {&#10;  const [showDetails, setShowDetails] = useState(false);&#10;  const [activeTab, setActiveTab] = useState(&quot;summary&quot;);&#10;  const [isVisible, setIsVisible] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isOpen) {&#10;      setIsVisible(true);&#10;    } else {&#10;      setIsVisible(false);&#10;    }&#10;  }, [isOpen]);&#10;&#10;  if (!isOpen || !validationResult) return null;&#10;&#10;  const { summary, validation, pricing, originalOrder } = validationResult;&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const getPriceChangeColor = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;text-red-500&quot;;&#10;    if (change &lt; 0) return &quot;text-emerald-500&quot;;&#10;    return &quot;text-gray-600&quot;;&#10;  };&#10;&#10;  const getPriceChangeIcon = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;fas fa-arrow-up&quot;;&#10;    if (change &lt; 0) return &quot;fas fa-arrow-down&quot;;&#10;    return &quot;fas fa-minus&quot;;&#10;  };&#10;&#10;  // Calculate total value of available stock&#10;  const calculateAvailableStockValue = () =&gt; {&#10;    return validation.availableItems.reduce((total, item) =&gt; {&#10;      return total + item.price * item.stock;&#10;    }, 0);&#10;  };&#10;&#10;  const getStatusColor = (type) =&gt; {&#10;    switch (type) {&#10;      case &quot;available&quot;:&#10;        return &quot;from-emerald-500 to-green-600&quot;;&#10;      case &quot;unavailable&quot;:&#10;        return &quot;from-red-500 to-rose-600&quot;;&#10;      case &quot;price-change&quot;:&#10;        return &quot;from-orange-500 to-amber-600&quot;;&#10;      case &quot;stock-issue&quot;:&#10;        return &quot;from-yellow-500 to-orange-500&quot;;&#10;      default:&#10;        return &quot;from-blue-500 to-indigo-600&quot;;&#10;    }&#10;  };&#10;&#10;  const tabs = [&#10;    { id: &quot;summary&quot;, label: &quot;Summary&quot;, icon: &quot;fas fa-chart-pie&quot; },&#10;    { id: &quot;items&quot;, label: &quot;Items&quot;, icon: &quot;fas fa-boxes&quot; },&#10;    { id: &quot;pricing&quot;, label: &quot;Pricing&quot;, icon: &quot;fas fa-calculator&quot; },&#10;  ];&#10;&#10;  return (&#10;    &lt;div&#10;      className={`fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 transition-all duration-300 ${isVisible ? &quot;opacity-100&quot; : &quot;opacity-0&quot;}`}&#10;    &gt;&#10;      &lt;div&#10;        className={`bg-white dark:bg-gray-900 rounded-3xl w-full max-w-5xl max-h-[95vh] overflow-hidden shadow-2xl border border-gray-200 dark:border-gray-700 transform transition-all duration-300 ${isVisible ? &quot;scale-100 translate-y-0&quot; : &quot;scale-95 translate-y-4&quot;}`}&#10;      &gt;&#10;        {/* Enhanced Header */}&#10;        &lt;div className=&quot;relative bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-700 text-white p-8&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-black/10&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;relative z-10&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-white/20 rounded-2xl backdrop-blur-sm&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-sync-alt text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold tracking-tight&quot;&gt;&#10;                      Reorder Validation&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-blue-100 text-lg&quot;&gt;&#10;                      Order from{&quot; &quot;}&#10;                      {new Date(originalOrder.orderDate).toLocaleDateString(&#10;                        &quot;en-US&quot;,&#10;                        {&#10;                          weekday: &quot;long&quot;,&#10;                          year: &quot;numeric&quot;,&#10;                          month: &quot;long&quot;,&#10;                          day: &quot;numeric&quot;,&#10;                        },&#10;                      )}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Quick Status Pills */}&#10;                &lt;div className=&quot;flex flex-wrap gap-2 mt-4&quot;&gt;&#10;                  {summary.reorderSuccess &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-emerald-500/20 text-emerald-100 rounded-full text-sm font-medium border border-emerald-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Reorder Available&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.priceChangesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-orange-500/20 text-orange-100 rounded-full text-sm font-medium border border-orange-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;                      Price Changes&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.stockIssuesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-yellow-500/20 text-yellow-100 rounded-full text-sm font-medium border border-yellow-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse mr-1&quot;&gt;&lt;/i&gt;&#10;                      Stock Issues&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;p-3 hover:bg-white/20 rounded-2xl transition-all duration-200 group&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-times text-xl group-hover:rotate-90 transition-transform duration-200&quot;&gt;&lt;/i&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Tab Navigation */}&#10;        &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;          &lt;div className=&quot;flex space-x-1 p-2&quot;&gt;&#10;            {tabs.map((tab) =&gt; (&#10;              &lt;button&#10;                key={tab.id}&#10;                onClick={() =&gt; setActiveTab(tab.id)}&#10;                className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${&#10;                  activeTab === tab.id&#10;                    ? &quot;bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-md border border-blue-200 dark:border-blue-800&quot;&#10;                    : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-white/50 dark:hover:bg-gray-700/50&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`${tab.icon} text-sm`}&gt;&lt;/i&gt;&#10;                &lt;span&gt;{tab.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Content */}&#10;        &lt;div className=&quot;p-8 overflow-y-auto max-h-[calc(95vh-280px)]&quot;&gt;&#10;          {/* Summary Tab */}&#10;          {activeTab === &quot;summary&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-8&quot;&gt;&#10;              {/* Enhanced Summary Cards */}&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-emerald-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        {summary.availableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-emerald-600 dark:text-emerald-400 text-sm&quot;&gt;&#10;                      Ready for reorder&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/30 dark:to-rose-900/20 rounded-2xl p-6 border border-red-200 dark:border-red-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-red-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-red-600 dark:text-red-400&quot;&gt;&#10;                        {summary.unavailableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-red-800 dark:text-red-300&quot;&gt;&#10;                      Unavailable&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm&quot;&gt;&#10;                      Currently out of stock&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/30 dark:to-amber-900/20 rounded-2xl p-6 border border-orange-200 dark:border-orange-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-orange-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                        {summary.priceChangesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                      Price Changes&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-orange-600 dark:text-orange-400 text-sm&quot;&gt;&#10;                      Updated pricing&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/20 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-yellow-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                        {summary.stockIssuesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                      Stock Issues&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm&quot;&gt;&#10;                      Limited availability&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Price Comparison */}&#10;              &lt;div className=&quot;bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-8 border border-gray-200 dark:border-gray-700 shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                    Price Comparison&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Original Total&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-receipt text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatPrice(originalOrder.total)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Previous order&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        New Estimated&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-blue-600 dark:text-blue-400&quot;&gt;&#10;                      {formatPrice(pricing.estimatedTotal)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Current pricing&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Difference&#10;                      &lt;/span&gt;&#10;                      &lt;i&#10;                        className={`${getPriceChangeIcon(pricing.totalDifference)} text-gray-400`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`text-2xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                    &gt;&#10;                      {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                      {formatPrice(pricing.totalDifference)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {pricing.totalDifference &lt; 0&#10;                        ? &quot;You save&quot;&#10;                        : &quot;Additional cost&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Stock Value&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Total inventory value&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Items Tab */}&#10;          {activeTab === &quot;items&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {/* Available Items */}&#10;              {validation.availableItems.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/20 dark:to-green-900/10 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;text-xl font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items ({validation.availableItems.length})&#10;                    &lt;/h4&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    {validation.availableItems.map((item, index) =&gt; (&#10;                      &lt;div&#10;                        key={index}&#10;                        className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-emerald-200 dark:border-emerald-800 hover:shadow-md transition-shadow&quot;&#10;                      &gt;&#10;                        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                          &lt;img&#10;                            src={&#10;                              item.image ||&#10;                              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=60&amp;h=60&amp;fit=crop&quot;&#10;                            }&#10;                            alt={item.productName}&#10;                            className=&quot;w-16 h-16 rounded-xl object-cover border border-gray-200 dark:border-gray-700&quot;&#10;                          /&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                              {item.productName}&#10;                            &lt;/h5&gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4 mt-2 text-sm&quot;&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Qty:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Stock:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium text-emerald-600&quot;&gt;&#10;                                  {item.stock}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Price:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {formatPrice(item.price)}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Issue Items */}&#10;              {(validation.unavailableItems.length &gt; 0 ||&#10;                validation.priceChanges.length &gt; 0 ||&#10;                validation.stockIssues.length &gt; 0) &amp;&amp; (&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Unavailable Items */}&#10;                  {validation.unavailableItems.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/20 dark:to-rose-900/10 rounded-2xl p-6 border border-red-200 dark:border-red-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-red-800 dark:text-red-300&quot;&gt;&#10;                          Unavailable Items (&#10;                          {validation.unavailableItems.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.unavailableItems.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-red-200 dark:border-red-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Qty: {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Price Changes */}&#10;                  {validation.priceChanges.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/20 dark:to-amber-900/10 rounded-2xl p-6 border border-orange-200 dark:border-orange-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                          Price Changes ({validation.priceChanges.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.priceChanges.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-orange-200 dark:border-orange-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mt-1&quot;&gt;&#10;                                  Was {formatPrice(item.originalPrice)} → Now{&quot; &quot;}&#10;                                  {formatPrice(item.currentPrice)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span&#10;                                  className={`text-sm font-semibold ${getPriceChangeColor(item.priceDifference)}`}&#10;                                &gt;&#10;                                  {item.priceDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                                  {item.priceChangePercent}%&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Stock Issues */}&#10;                  {validation.stockIssues.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/20 dark:to-orange-900/10 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                          Stock Issues ({validation.stockIssues.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.stockIssues.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-yellow-200 dark:border-yellow-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;div&gt;Wanted: {item.requestedQuantity}&lt;/div&gt;&#10;                                &lt;div&gt;Available: {item.availableStock}&lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pricing Tab */}&#10;          {activeTab === &quot;pricing&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/10 rounded-2xl p-8 border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-8&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-blue-800 dark:text-blue-300&quot;&gt;&#10;                    Detailed Pricing Breakdown&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;                  {/* Original Order */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-history text-gray-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      Original Order&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.originalSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;{formatPrice(50)}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;&#10;                            {formatPrice(originalOrder.total)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* New Estimated */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      New Estimated&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedDeliveryFee)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold text-blue-600&quot;&gt;&#10;                            {formatPrice(pricing.estimatedTotal)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Comparison Summary */}&#10;                &lt;div className=&quot;mt-8 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 rounded-2xl p-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Price Difference&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference &lt; 0&#10;                          ? &quot;You'll save&quot;&#10;                          : &quot;Additional cost&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-right&quot;&gt;&#10;                      &lt;div&#10;                        className={`text-3xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                      &gt;&#10;                        {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                        {formatPrice(pricing.totalDifference)}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference !== 0 &amp;&amp;&#10;                          `${Math.abs((pricing.totalDifference / originalOrder.total) * 100).toFixed(1)}% ${pricing.totalDifference &lt; 0 ? &quot;less&quot; : &quot;more&quot;}`}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Available Stock Value */}&#10;                &lt;div className=&quot;mt-6 bg-gradient-to-r from-emerald-100 to-green-200 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                        Total Available Stock Value&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        Combined value of all inventory&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Footer */}&#10;        &lt;div className=&quot;bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 border-t border-gray-200 dark:border-gray-700 p-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-between items-center&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    Ready to reorder {summary.availableCount} items&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              {!summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-red-600 dark:text-red-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    No items available for reorder&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;px-8 py-3 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-2xl font-semibold transition-all duration-200 hover:scale-105&quot;&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;&#10;              {summary.availableCount &gt; 0 &amp;&amp; (&#10;                &lt;button&#10;                  onClick={onProceedWithAvailable}&#10;                  disabled={loading}&#10;                  className=&quot;px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-2xl font-semibold transition-all duration-200 disabled:opacity-50 flex items-center space-x-2 hover:scale-105 shadow-lg hover:shadow-xl&quot;&#10;                &gt;&#10;                  {loading &amp;&amp; &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;}&#10;                  &lt;i className=&quot;fas fa-cart-plus&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Add {summary.availableCount} Items&lt;/span&gt;&#10;                  &lt;span className=&quot;bg-white/20 px-2 py-1 rounded-full text-sm&quot;&gt;&#10;                    {formatPrice(pricing.estimatedTotal)}&#10;                  &lt;/span&gt;&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from &quot;react&quot;;&#10;&#10;export default function ReorderModal({&#10;  isOpen,&#10;  onClose,&#10;  validationResult,&#10;  onProceedWithAvailable,&#10;  onProceedWithAll,&#10;  loading,&#10;}) {&#10;  const [showDetails, setShowDetails] = useState(false);&#10;  const [activeTab, setActiveTab] = useState(&quot;summary&quot;);&#10;  const [isVisible, setIsVisible] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isOpen) {&#10;      setIsVisible(true);&#10;    } else {&#10;      setIsVisible(false);&#10;    }&#10;  }, [isOpen]);&#10;&#10;  if (!isOpen || !validationResult) return null;&#10;&#10;  const { summary, validation, pricing, originalOrder } = validationResult;&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const getPriceChangeColor = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;text-red-500&quot;;&#10;    if (change &lt; 0) return &quot;text-emerald-500&quot;;&#10;    return &quot;text-gray-600&quot;;&#10;  };&#10;&#10;  const getPriceChangeIcon = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;fas fa-arrow-up&quot;;&#10;    if (change &lt; 0) return &quot;fas fa-arrow-down&quot;;&#10;    return &quot;fas fa-minus&quot;;&#10;  };&#10;&#10;  // Calculate total value of available stock&#10;  const calculateAvailableStockValue = () =&gt; {&#10;    return validation.availableItems.reduce((total, item) =&gt; {&#10;      return total + item.price * item.stock;&#10;    }, 0);&#10;  };&#10;&#10;  const getStatusColor = (type) =&gt; {&#10;    switch (type) {&#10;      case &quot;available&quot;:&#10;        return &quot;from-emerald-500 to-green-600&quot;;&#10;      case &quot;unavailable&quot;:&#10;        return &quot;from-red-500 to-rose-600&quot;;&#10;      case &quot;price-change&quot;:&#10;        return &quot;from-orange-500 to-amber-600&quot;;&#10;      case &quot;stock-issue&quot;:&#10;        return &quot;from-yellow-500 to-orange-500&quot;;&#10;      default:&#10;        return &quot;from-blue-500 to-indigo-600&quot;;&#10;    }&#10;  };&#10;&#10;  const tabs = [&#10;    { id: &quot;summary&quot;, label: &quot;Summary&quot;, icon: &quot;fas fa-chart-pie&quot; },&#10;    { id: &quot;items&quot;, label: &quot;Items&quot;, icon: &quot;fas fa-boxes&quot; },&#10;    { id: &quot;pricing&quot;, label: &quot;Pricing&quot;, icon: &quot;fas fa-calculator&quot; },&#10;  ];&#10;&#10;  return (&#10;    &lt;div&#10;      className={`fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 transition-all duration-300 ${isVisible ? &quot;opacity-100&quot; : &quot;opacity-0&quot;}`}&#10;    &gt;&#10;      &lt;div&#10;        className={`bg-white dark:bg-gray-900 rounded-3xl w-full max-w-5xl max-h-[90vh] overflow-hidden shadow-2xl border border-gray-200 dark:border-gray-700 transform transition-all duration-300 flex flex-col ${isVisible ? &quot;scale-100 translate-y-0&quot; : &quot;scale-95 translate-y-4&quot;}`}&#10;      &gt;&#10;        {/* Enhanced Header */}&#10;        &lt;div className=&quot;relative bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-700 text-white p-6 flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-black/10&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;relative z-10&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-white/20 rounded-2xl backdrop-blur-sm&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-sync-alt text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold tracking-tight&quot;&gt;&#10;                      Reorder Validation&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-blue-100 text-lg&quot;&gt;&#10;                      Order from{&quot; &quot;}&#10;                      {new Date(originalOrder.orderDate).toLocaleDateString(&#10;                        &quot;en-US&quot;,&#10;                        {&#10;                          weekday: &quot;long&quot;,&#10;                          year: &quot;numeric&quot;,&#10;                          month: &quot;long&quot;,&#10;                          day: &quot;numeric&quot;,&#10;                        },&#10;                      )}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Quick Status Pills */}&#10;                &lt;div className=&quot;flex flex-wrap gap-2 mt-4&quot;&gt;&#10;                  {summary.reorderSuccess &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-emerald-500/20 text-emerald-100 rounded-full text-sm font-medium border border-emerald-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Reorder Available&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.priceChangesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-orange-500/20 text-orange-100 rounded-full text-sm font-medium border border-orange-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;                      Price Changes&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.stockIssuesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-yellow-500/20 text-yellow-100 rounded-full text-sm font-medium border border-yellow-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse mr-1&quot;&gt;&lt;/i&gt;&#10;                      Stock Issues&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;p-3 hover:bg-white/20 rounded-2xl transition-all duration-200 group&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-times text-xl group-hover:rotate-90 transition-transform duration-200&quot;&gt;&lt;/i&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Tab Navigation */}&#10;        &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex space-x-1 p-2&quot;&gt;&#10;            {tabs.map((tab) =&gt; (&#10;              &lt;button&#10;                key={tab.id}&#10;                onClick={() =&gt; setActiveTab(tab.id)}&#10;                className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${&#10;                  activeTab === tab.id&#10;                    ? &quot;bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-md border border-blue-200 dark:border-blue-800&quot;&#10;                    : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-white/50 dark:hover:bg-gray-700/50&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`${tab.icon} text-sm`}&gt;&lt;/i&gt;&#10;                &lt;span&gt;{tab.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Content */}&#10;        &lt;div className=&quot;p-6 overflow-y-auto flex-1 min-h-0&quot;&gt;&#10;          {/* Summary Tab */}&#10;          {activeTab === &quot;summary&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-8&quot;&gt;&#10;              {/* Enhanced Summary Cards */}&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-emerald-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        {summary.availableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-emerald-600 dark:text-emerald-400 text-sm&quot;&gt;&#10;                      Ready for reorder&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/30 dark:to-rose-900/20 rounded-2xl p-6 border border-red-200 dark:border-red-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-red-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-red-600 dark:text-red-400&quot;&gt;&#10;                        {summary.unavailableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-red-800 dark:text-red-300&quot;&gt;&#10;                      Unavailable&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm&quot;&gt;&#10;                      Currently out of stock&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/30 dark:to-amber-900/20 rounded-2xl p-6 border border-orange-200 dark:border-orange-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-orange-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                        {summary.priceChangesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                      Price Changes&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-orange-600 dark:text-orange-400 text-sm&quot;&gt;&#10;                      Updated pricing&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/20 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-yellow-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                        {summary.stockIssuesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                      Stock Issues&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm&quot;&gt;&#10;                      Limited availability&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Price Comparison */}&#10;              &lt;div className=&quot;bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-8 border border-gray-200 dark:border-gray-700 shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                    Price Comparison&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Original Total&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-receipt text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatPrice(originalOrder.total)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Previous order&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        New Estimated&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-blue-600 dark:text-blue-400&quot;&gt;&#10;                      {formatPrice(pricing.estimatedTotal)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Current pricing&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Difference&#10;                      &lt;/span&gt;&#10;                      &lt;i&#10;                        className={`${getPriceChangeIcon(pricing.totalDifference)} text-gray-400`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`text-2xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                    &gt;&#10;                      {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                      {formatPrice(pricing.totalDifference)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {pricing.totalDifference &lt; 0&#10;                        ? &quot;You save&quot;&#10;                        : &quot;Additional cost&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Stock Value&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Total inventory value&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Items Tab */}&#10;          {activeTab === &quot;items&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {/* Available Items */}&#10;              {validation.availableItems.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/20 dark:to-green-900/10 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;text-xl font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items ({validation.availableItems.length})&#10;                    &lt;/h4&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    {validation.availableItems.map((item, index) =&gt; (&#10;                      &lt;div&#10;                        key={index}&#10;                        className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-emerald-200 dark:border-emerald-800 hover:shadow-md transition-shadow&quot;&#10;                      &gt;&#10;                        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                          &lt;img&#10;                            src={&#10;                              item.image ||&#10;                              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=60&amp;h=60&amp;fit=crop&quot;&#10;                            }&#10;                            alt={item.productName}&#10;                            className=&quot;w-16 h-16 rounded-xl object-cover border border-gray-200 dark:border-gray-700&quot;&#10;                          /&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                              {item.productName}&#10;                            &lt;/h5&gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4 mt-2 text-sm&quot;&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Qty:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Stock:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium text-emerald-600&quot;&gt;&#10;                                  {item.stock}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Price:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {formatPrice(item.price)}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Issue Items */}&#10;              {(validation.unavailableItems.length &gt; 0 ||&#10;                validation.priceChanges.length &gt; 0 ||&#10;                validation.stockIssues.length &gt; 0) &amp;&amp; (&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Unavailable Items */}&#10;                  {validation.unavailableItems.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/20 dark:to-rose-900/10 rounded-2xl p-6 border border-red-200 dark:border-red-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-red-800 dark:text-red-300&quot;&gt;&#10;                          Unavailable Items (&#10;                          {validation.unavailableItems.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.unavailableItems.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-red-200 dark:border-red-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Qty: {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Price Changes */}&#10;                  {validation.priceChanges.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/20 dark:to-amber-900/10 rounded-2xl p-6 border border-orange-200 dark:border-orange-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                          Price Changes ({validation.priceChanges.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.priceChanges.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-orange-200 dark:border-orange-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mt-1&quot;&gt;&#10;                                  Was {formatPrice(item.originalPrice)} → Now{&quot; &quot;}&#10;                                  {formatPrice(item.currentPrice)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span&#10;                                  className={`text-sm font-semibold ${getPriceChangeColor(item.priceDifference)}`}&#10;                                &gt;&#10;                                  {item.priceDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                                  {item.priceChangePercent}%&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Stock Issues */}&#10;                  {validation.stockIssues.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/20 dark:to-orange-900/10 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                          Stock Issues ({validation.stockIssues.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.stockIssues.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-yellow-200 dark:border-yellow-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;div&gt;Wanted: {item.requestedQuantity}&lt;/div&gt;&#10;                                &lt;div&gt;Available: {item.availableStock}&lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pricing Tab */}&#10;          {activeTab === &quot;pricing&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/10 rounded-2xl p-8 border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-8&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-blue-800 dark:text-blue-300&quot;&gt;&#10;                    Detailed Pricing Breakdown&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;                  {/* Original Order */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-history text-gray-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      Original Order&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.originalSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;{formatPrice(50)}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;&#10;                            {formatPrice(originalOrder.total)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* New Estimated */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      New Estimated&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedDeliveryFee)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold text-blue-600&quot;&gt;&#10;                            {formatPrice(pricing.estimatedTotal)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Comparison Summary */}&#10;                &lt;div className=&quot;mt-8 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 rounded-2xl p-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Price Difference&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference &lt; 0&#10;                          ? &quot;You'll save&quot;&#10;                          : &quot;Additional cost&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-right&quot;&gt;&#10;                      &lt;div&#10;                        className={`text-3xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                      &gt;&#10;                        {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                        {formatPrice(pricing.totalDifference)}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference !== 0 &amp;&amp;&#10;                          `${Math.abs((pricing.totalDifference / originalOrder.total) * 100).toFixed(1)}% ${pricing.totalDifference &lt; 0 ? &quot;less&quot; : &quot;more&quot;}`}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Available Stock Value */}&#10;                &lt;div className=&quot;mt-6 bg-gradient-to-r from-emerald-100 to-green-200 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                        Total Available Stock Value&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        Combined value of all inventory&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Footer */}&#10;        &lt;div className=&quot;bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 border-t border-gray-200 dark:border-gray-700 p-6 flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-between items-center&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    Ready to reorder {summary.availableCount} items&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              {!summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-red-600 dark:text-red-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    No items available for reorder&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;px-8 py-3 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-2xl font-semibold transition-all duration-200 hover:scale-105&quot;&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;&#10;              {summary.availableCount &gt; 0 &amp;&amp; (&#10;                &lt;button&#10;                  onClick={onProceedWithAvailable}&#10;                  disabled={loading}&#10;                  className=&quot;px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-2xl font-semibold transition-all duration-200 disabled:opacity-50 flex items-center space-x-2 hover:scale-105 shadow-lg hover:shadow-xl&quot;&#10;                &gt;&#10;                  {loading &amp;&amp; &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;}&#10;                  &lt;i className=&quot;fas fa-cart-plus&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Add {summary.availableCount} Items&lt;/span&gt;&#10;                  &lt;span className=&quot;bg-white/20 px-2 py-1 rounded-full text-sm&quot;&gt;&#10;                    {formatPrice(pricing.estimatedTotal)}&#10;                  &lt;/span&gt;&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hooks/useReorder.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hooks/useReorder.js" />
              <option name="originalContent" value="import { useState, useCallback } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;&#10;export function useReorder() {&#10;  const [loading, setLoading] = useState(false);&#10;  const [validationResult, setValidationResult] = useState(null);&#10;  const [showReorderModal, setShowReorderModal] = useState(false);&#10;  const router = useRouter();&#10;  const { addToCart } = useCart(); // Use addToCart instead of addMultipleToCart&#10;&#10;  const validateReorder = useCallback(async (orderId, userId) =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const response = await fetch(`/api/orders/${orderId}/reorder`, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ userId }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error(&quot;Failed to validate reorder&quot;);&#10;      }&#10;&#10;      const result = await response.json();&#10;      setValidationResult(result);&#10;&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;      */&#10;      */&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Always show modal for testing purposes&#10;      // Comment out the auto-proceed logic below:&#10;      // Always show modal for testing purposes&#10;&#10;      // Always show modal for testing purposes&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      // Always show modal for testing purposes&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;      */&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;      // Always show modal for testing purposes&#10;&#10;      // Always show modal for testing purposes&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      /*&#10;      // Auto-proceed if everything is available and no price changes&#10;      if (&#10;        result.summary.fullReorderPossible &amp;&amp;&#10;      // Always show modal for testing purposes&#10;      ) {&#10;        return await proceedWithReorder(&#10;      */&#10;          result.validation.availableItems,&#10;          false,&#10;        );&#10;      }&#10;      */&#10;&#10;      // Always show modal for testing purposes&#10;      setShowReorderModal(true);&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;Reorder validation failed:&quot;, error);&#10;      throw error;&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  const proceedWithReorder = useCallback(&#10;    async (items, showConfirmation = true) =&gt; {&#10;      try {&#10;        if (!items || items.length === 0) {&#10;          throw new Error(&quot;No items available for reorder&quot;);&#10;        }&#10;&#10;        // Add items to cart one by one using the existing addToCart function&#10;        let successCount = 0;&#10;        for (const item of items) {&#10;          const cartItem = {&#10;            id: item.productId,&#10;            productId: item.productId,&#10;            name: item.productName,&#10;            productName: item.productName,&#10;            price: item.price,&#10;            farmerId: item.farmerId,&#10;            farmerName: item.farmerName,&#10;            image: item.image,&#10;            stock: item.stock,&#10;            category: item.category,&#10;          };&#10;&#10;          const success = await addToCart(cartItem, item.quantity);&#10;          if (success) {&#10;            successCount++;&#10;          }&#10;        }&#10;&#10;        if (showConfirmation) {&#10;          // Show success notification&#10;          const message = `Successfully added ${successCount} item${&#10;            successCount &gt; 1 ? &quot;s&quot; : &quot;&quot;&#10;          } to your cart!`;&#10;          alert(message); // Replace with your notification system&#10;        }&#10;&#10;        // Close modal and redirect&#10;        setShowReorderModal(false);&#10;        setValidationResult(null);&#10;        router.push(&quot;/cart&quot;);&#10;&#10;        return { success: true, itemsAdded: successCount };&#10;      } catch (error) {&#10;        console.error(&quot;Failed to add reorder items to cart:&quot;, error);&#10;        throw error;&#10;      }&#10;    },&#10;    [addToCart, router],&#10;  );&#10;&#10;  const cancelReorder = useCallback(() =&gt; {&#10;    setShowReorderModal(false);&#10;    setValidationResult(null);&#10;  }, []);&#10;&#10;  // Helper function to handle partial reorder (only available items)&#10;  const proceedWithAvailableItems = useCallback(() =&gt; {&#10;    if (validationResult?.validation.availableItems) {&#10;      return proceedWithReorder(validationResult.validation.availableItems);&#10;    }&#10;  }, [validationResult, proceedWithReorder]);&#10;&#10;  // Helper function to get reorder status summary&#10;  const getReorderSummary = useCallback((result) =&gt; {&#10;    if (!result) return null;&#10;&#10;    const { summary, validation } = result;&#10;&#10;    return {&#10;      canReorder: summary.reorderSuccess,&#10;      isFullReorder: summary.fullReorderPossible,&#10;      availableItems: summary.availableCount,&#10;      totalItems: summary.totalOriginalItems,&#10;      issues: {&#10;        unavailable: summary.unavailableCount,&#10;        priceChanges: summary.priceChangesCount,&#10;        stockIssues: summary.stockIssuesCount,&#10;        farmerIssues: summary.farmerIssuesCount,&#10;      },&#10;      pricing: result.pricing,&#10;      items: validation,&#10;    };&#10;  }, []);&#10;&#10;  return {&#10;    loading,&#10;    validationResult,&#10;    showReorderModal,&#10;    validateReorder,&#10;    proceedWithReorder,&#10;    proceedWithAvailableItems,&#10;    cancelReorder,&#10;    getReorderSummary,&#10;    setShowReorderModal,&#10;  };&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useCallback } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;&#10;export function useReorder() {&#10;  const [loading, setLoading] = useState(false);&#10;  const [validationResult, setValidationResult] = useState(null);&#10;  const [showReorderModal, setShowReorderModal] = useState(false);&#10;  const router = useRouter();&#10;  const { addToCart } = useCart(); // Use addToCart instead of addMultipleToCart&#10;&#10;  const validateReorder = useCallback(async (orderId, userId) =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const response = await fetch(`/api/orders/${orderId}/reorder`, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ userId }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error(&quot;Failed to validate reorder&quot;);&#10;      }&#10;&#10;      const result = await response.json();&#10;      setValidationResult(result);&#10;&#10;      // Auto-proceed if everything is available and no price changes&#10;      if (&#10;        result.summary.fullReorderPossible &amp;&amp;&#10;        result.summary.priceChangesCount === 0&#10;      ) {&#10;        return await proceedWithReorder(&#10;          result.validation.availableItems,&#10;          false,&#10;        );&#10;      }&#10;&#10;      // Show modal for cases that need user attention&#10;      setShowReorderModal(true);&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;Reorder validation failed:&quot;, error);&#10;      throw error;&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  const proceedWithReorder = useCallback(&#10;    async (items, showConfirmation = true) =&gt; {&#10;      try {&#10;        if (!items || items.length === 0) {&#10;          throw new Error(&quot;No items available for reorder&quot;);&#10;        }&#10;&#10;        // Add items to cart one by one using the existing addToCart function&#10;        let successCount = 0;&#10;        for (const item of items) {&#10;          const cartItem = {&#10;            id: item.productId,&#10;            productId: item.productId,&#10;            name: item.productName,&#10;            productName: item.productName,&#10;            price: item.price,&#10;            farmerId: item.farmerId,&#10;            farmerName: item.farmerName,&#10;            image: item.image,&#10;            stock: item.stock,&#10;            category: item.category,&#10;          };&#10;&#10;          const success = await addToCart(cartItem, item.quantity);&#10;          if (success) {&#10;            successCount++;&#10;          }&#10;        }&#10;&#10;        if (showConfirmation) {&#10;          // Show success notification&#10;          const message = `Successfully added ${successCount} item${&#10;            successCount &gt; 1 ? &quot;s&quot; : &quot;&quot;&#10;          } to your cart!`;&#10;          alert(message); // Replace with your notification system&#10;        }&#10;&#10;        // Close modal and redirect&#10;        setShowReorderModal(false);&#10;        setValidationResult(null);&#10;        router.push(&quot;/cart&quot;);&#10;&#10;        return { success: true, itemsAdded: successCount };&#10;      } catch (error) {&#10;        console.error(&quot;Failed to add reorder items to cart:&quot;, error);&#10;        throw error;&#10;      }&#10;    },&#10;    [addToCart, router],&#10;  );&#10;&#10;  const cancelReorder = useCallback(() =&gt; {&#10;    setShowReorderModal(false);&#10;    setValidationResult(null);&#10;  }, []);&#10;&#10;  // Helper function to handle partial reorder (only available items)&#10;  const proceedWithAvailableItems = useCallback(() =&gt; {&#10;    if (validationResult?.validation.availableItems) {&#10;      return proceedWithReorder(validationResult.validation.availableItems);&#10;    }&#10;  }, [validationResult, proceedWithReorder]);&#10;&#10;  // Helper function to get reorder status summary&#10;  const getReorderSummary = useCallback((result) =&gt; {&#10;    if (!result) return null;&#10;&#10;    const { summary, validation } = result;&#10;&#10;    return {&#10;      canReorder: summary.reorderSuccess,&#10;      isFullReorder: summary.fullReorderPossible,&#10;      availableItems: summary.availableCount,&#10;      totalItems: summary.totalOriginalItems,&#10;      issues: {&#10;        unavailable: summary.unavailableCount,&#10;        priceChanges: summary.priceChangesCount,&#10;        stockIssues: summary.stockIssuesCount,&#10;        farmerIssues: summary.farmerIssuesCount,&#10;      },&#10;      pricing: result.pricing,&#10;      items: validation,&#10;    };&#10;  }, []);&#10;&#10;  return {&#10;    loading,&#10;    validationResult,&#10;    showReorderModal,&#10;    validateReorder,&#10;    proceedWithReorder,&#10;    proceedWithAvailableItems,&#10;    cancelReorder,&#10;    getReorderSummary,&#10;    setShowReorderModal,&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/migrate-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/migrate-farmers.js" />
              <option name="updatedContent" value="// Script to migrate farmers from users collection to farmers collection&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function migrateFarmers() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;✅ Migration completed!&quot;);&#10;    &#10;    // Show final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    console.log(` Total farmers in collection: ${totalFarmers}`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Migration error:&quot;, error);&#10;  }&#10;}&#10;&#10;migrateFarmers();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js" />
              <option name="updatedContent" value="// MongoDB Atlas Performance Optimization Script&#10;// Run this script to create optimized indexes for better Atlas performance&#10;&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function createAtlasOptimizedIndexes() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log(&quot; Starting MongoDB Atlas index optimization...&quot;);&#10;&#10;    // Products Collection - Optimized for products page performance&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    console.log(&quot; Optimizing products collection indexes...&quot;);&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, category: 1, featured: 1, createdAt: -1 },&#10;      { name: &quot;products_main_query_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, featured: 1, averageRating: -1 },&#10;      { name: &quot;products_featured_rating_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, price: 1 },&#10;      { name: &quot;products_price_filter_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, purchaseCount: -1 },&#10;      { name: &quot;products_popularity_idx&quot;, background: true }&#10;    );&#10;&#10;    // Orders Collection - Optimized for farmer dashboard and orders pages&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    console.log(&quot; Optimizing orders collection indexes...&quot;);&#10;    &#10;    // Critical farmer query indexes&#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_orders_main_idx&quot;, background: true }&#10;    );&#10;    &#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_email_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Customer order indexes&#10;    await ordersCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;customer_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Status filtering&#10;    await ordersCollection.createIndex(&#10;      { status: 1, createdAt: -1 },&#10;      { name: &quot;status_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Reviews Collection - For faster review loading&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    console.log(&quot;⭐ Optimizing reviews collection indexes...&quot;);&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { productId: 1, createdAt: -1 },&#10;      { name: &quot;product_reviews_idx&quot;, background: true }&#10;    );&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_product_review_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    // Favorites Collection - For user favorites&#10;    const favoritesCollection = db.collection(&quot;favorites&quot;);&#10;    console.log(&quot;❤️ Optimizing favorites collection indexes...&quot;);&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_favorites_idx&quot;, background: true, unique: true }&#10;    );&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;user_favorites_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Carts Collection - For cart operations&#10;    const cartsCollection = db.collection(&quot;carts&quot;);&#10;    console.log(&quot; Optimizing carts collection indexes...&quot;);&#10;    &#10;    await cartsCollection.createIndex(&#10;      { userId: 1 },&#10;      { name: &quot;user_cart_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    console.log(&quot;✅ Atlas optimization complete!&quot;);&#10;    console.log(&quot; Performance improvements applied for:&quot;);&#10;    console.log(&quot;   • Products page - faster filtering and sorting&quot;);&#10;    console.log(&quot;   • Farmer dashboard - optimized order queries&quot;);&#10;    console.log(&quot;   • Farmer orders page - improved farmer-specific queries&quot;);&#10;    console.log(&quot;   • Reviews and favorites - faster user interactions&quot;);&#10;    &#10;    return true;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error optimizing indexes:&quot;, error);&#10;    return false;&#10;  }&#10;}&#10;&#10;// Atlas-specific query optimization hints&#10;async function optimizeAtlasQueries() {&#10;  console.log(&quot; Applying Atlas-specific optimizations...&quot;);&#10;  &#10;  const client = await clientPromise;&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;  &#10;  // Enable collection-level read preferences for better performance&#10;  const collections = ['products', 'orders', 'reviews', 'favorites', 'carts'];&#10;  &#10;  for (const collectionName of collections) {&#10;    const collection = db.collection(collectionName);&#10;    &#10;    // Set read preference to secondary for read-heavy operations&#10;    collection.readPreference = 'secondaryPreferred';&#10;    &#10;    console.log(` Optimized read preference for ${collectionName}`);&#10;  }&#10;  &#10;  console.log(&quot;✅ Query optimizations applied!&quot;);&#10;}&#10;&#10;// Main execution function&#10;async function main() {&#10;  console.log(&quot; MongoDB Atlas Performance Optimization&quot;);&#10;  console.log(&quot;=========================================&quot;);&#10;  &#10;  const indexSuccess = await createAtlasOptimizedIndexes();&#10;  &#10;  if (indexSuccess) {&#10;    await optimizeAtlasQueries();&#10;    console.log(&quot; Your FarmFresh app is now optimized for Atlas!&quot;);&#10;    console.log(&quot; Expected performance improvements:&quot;);&#10;    console.log(&quot;   • Products page: 60-80% faster&quot;);&#10;    console.log(&quot;   • Farmer dashboard: 70-90% faster&quot;); &#10;    console.log(&quot;   • Order queries: 50-70% faster&quot;);&#10;  } else {&#10;    console.log(&quot;❌ Optimization failed. Check your MongoDB connection.&quot;);&#10;  }&#10;}&#10;&#10;// Run if called directly&#10;if (import.meta.url === `file://${process.argv[1]}`) {&#10;  main().catch(console.error);&#10;}&#10;&#10;export { createAtlasOptimizedIndexes, optimizeAtlasQueries };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>