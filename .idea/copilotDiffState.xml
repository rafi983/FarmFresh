<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/api/orders/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/orders/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;    const orderId = searchParams.get(&quot;orderId&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const productId = searchParams.get(&quot;productId&quot;);&#10;    const limit = parseInt(searchParams.get(&quot;limit&quot;)) || null;&#10;&#10;    console.log(&quot;Orders API - Params:&quot;, {&#10;      userId,&#10;      orderId,&#10;      farmerId,&#10;      farmerEmail,&#10;      productId,&#10;      limit,&#10;    });&#10;&#10;    if (!userId &amp;&amp; !orderId &amp;&amp; !farmerId &amp;&amp; !farmerEmail &amp;&amp; !productId) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;User ID, Order ID, Farmer ID, Farmer Email, or Product ID is required&quot;,&#10;        },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    if (orderId) {&#10;      // Get specific order&#10;      const order = await db&#10;        .collection(&quot;orders&quot;)&#10;        .findOne({ _id: new ObjectId(orderId) });&#10;&#10;      if (!order) {&#10;        return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;      }&#10;&#10;      return NextResponse.json({ order });&#10;    } else if (productId) {&#10;      // Get orders containing a specific product&#10;      console.log(&quot;Fetching orders for productId:&quot;, productId);&#10;&#10;      const productSearchCriteria = [&#10;        { &quot;products.productId&quot;: productId },&#10;        { &quot;products._id&quot;: productId },&#10;        { &quot;items.productId&quot;: productId },&#10;        { &quot;items._id&quot;: productId },&#10;      ];&#10;&#10;      // Also try ObjectId if the productId is a valid ObjectId&#10;      if (ObjectId.isValid(productId)) {&#10;        productSearchCriteria.push(&#10;          { &quot;products.productId&quot;: new ObjectId(productId) },&#10;          { &quot;products._id&quot;: new ObjectId(productId) },&#10;          { &quot;items.productId&quot;: new ObjectId(productId) },&#10;          { &quot;items._id&quot;: new ObjectId(productId) },&#10;        );&#10;      }&#10;&#10;      let query = { $or: productSearchCriteria };&#10;      let orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .find(query)&#10;        .sort({ createdAt: -1 });&#10;&#10;      if (limit) {&#10;        orders = orders.limit(limit);&#10;      }&#10;&#10;      const ordersArray = await orders.toArray();&#10;&#10;      console.log(&#10;        `Found ${ordersArray.length} orders containing product ${productId}`,&#10;      );&#10;&#10;      // Filter and transform orders to show only items for this product&#10;      const filteredOrders = ordersArray&#10;        .map((order) =&gt; {&#10;          // Find items/products that match the productId&#10;          const matchingItems = [];&#10;&#10;          // Check both 'products' and 'items' arrays (different orders might use different structures)&#10;          if (order.products) {&#10;            const products = order.products.filter(&#10;              (item) =&gt;&#10;                item.productId === productId ||&#10;                item._id === productId ||&#10;                (ObjectId.isValid(productId) &amp;&amp;&#10;                  (item.productId?.toString() === productId ||&#10;                    item._id?.toString() === productId)),&#10;            );&#10;            matchingItems.push(...products);&#10;          }&#10;&#10;          if (order.items) {&#10;            const items = order.items.filter(&#10;              (item) =&gt;&#10;                item.productId === productId ||&#10;                item._id === productId ||&#10;                (ObjectId.isValid(productId) &amp;&amp;&#10;                  (item.productId?.toString() === productId ||&#10;                    item._id?.toString() === productId)),&#10;            );&#10;            matchingItems.push(...items);&#10;          }&#10;&#10;          return {&#10;            ...order,&#10;            products: matchingItems,&#10;            items: matchingItems, // Ensure both fields are available&#10;            matchingItemsCount: matchingItems.length,&#10;          };&#10;        })&#10;        .filter((order) =&gt; order.matchingItemsCount &gt; 0); // Only include orders with matching items&#10;&#10;      console.log(&#10;        `Filtered to ${filteredOrders.length} orders with matching product items`,&#10;      );&#10;&#10;      return NextResponse.json({&#10;        orders: filteredOrders,&#10;        total: filteredOrders.length,&#10;      });&#10;    } else if (farmerId || farmerEmail) {&#10;      // Get orders for farmer - orders containing their products&#10;      console.log(&#10;        &quot;Fetching orders for farmer - farmerId:&quot;,&#10;        farmerId,&#10;        &quot;farmerEmail:&quot;,&#10;        farmerEmail,&#10;      );&#10;&#10;      const farmerSearchCriteria = [];&#10;&#10;      if (farmerId) {&#10;        farmerSearchCriteria.push(&#10;          { farmerIds: farmerId },&#10;          { farmerIds: farmerId.toString() },&#10;          { &quot;items.farmerId&quot;: farmerId },&#10;          { &quot;items.farmerId&quot;: farmerId.toString() },&#10;        );&#10;&#10;        if (ObjectId.isValid(farmerId)) {&#10;          farmerSearchCriteria.push(&#10;            { farmerIds: new ObjectId(farmerId) },&#10;            { &quot;items.farmerId&quot;: new ObjectId(farmerId) },&#10;          );&#10;        }&#10;      }&#10;&#10;      if (farmerEmail) {&#10;        farmerSearchCriteria.push(&#10;          { farmerEmails: farmerEmail },&#10;          { &quot;items.farmerEmail&quot;: farmerEmail },&#10;        );&#10;      }&#10;&#10;      const orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .find({ $or: farmerSearchCriteria })&#10;        .sort({ createdAt: -1 })&#10;        .toArray();&#10;&#10;      console.log(&quot;Farmer orders found:&quot;, orders.length);&#10;&#10;      // Filter items in each order to only show items from this farmer&#10;      const filteredOrders = orders.map((order) =&gt; ({&#10;        ...order,&#10;        items: order.items.filter((item) =&gt; {&#10;          // Helper function to check if item belongs to this farmer&#10;          const itemBelongsToFarmer = () =&gt; {&#10;            // If we have farmerId, check against it&#10;            if (farmerId) {&#10;              // Direct string comparison&#10;              if (&#10;                item.farmerId === farmerId ||&#10;                item.farmerId === farmerId.toString()&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // ObjectId comparison if farmerId is valid ObjectId&#10;              if (&#10;                ObjectId.isValid(farmerId) &amp;&amp;&#10;                item.farmerId?.toString() === farmerId&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // Check if farmerId is stored as email (legacy orders)&#10;              if (farmerEmail &amp;&amp; item.farmerId === farmerEmail) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            // If we have farmerEmail, check against farmerEmail field or farmerId field&#10;            if (farmerEmail) {&#10;              if (&#10;                item.farmerEmail === farmerEmail ||&#10;                item.farmerId === farmerEmail&#10;              ) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            return false;&#10;          };&#10;&#10;          return itemBelongsToFarmer();&#10;        }),&#10;        // Recalculate totals for farmer's items only&#10;        farmerSubtotal: order.items&#10;          .filter((item) =&gt; {&#10;            // Use the same logic for subtotal calculation&#10;            if (farmerId) {&#10;              // Direct string comparison&#10;              if (&#10;                item.farmerId === farmerId ||&#10;                item.farmerId === farmerId.toString()&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // ObjectId comparison if farmerId is valid ObjectId&#10;              if (&#10;                ObjectId.isValid(farmerId) &amp;&amp;&#10;                item.farmerId?.toString() === farmerId&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // Check if farmerId is stored as email (legacy orders)&#10;              if (farmerEmail &amp;&amp; item.farmerId === farmerEmail) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            // If we have farmerEmail, check against farmerEmail field or farmerId field&#10;            if (farmerEmail) {&#10;              if (&#10;                item.farmerEmail === farmerEmail ||&#10;                item.farmerId === farmerEmail&#10;              ) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            return false;&#10;          })&#10;          .reduce((sum, item) =&gt; sum + item.price * item.quantity, 0),&#10;      }));&#10;&#10;      console.log(`Found ${orders.length} total orders for farmer`);&#10;&#10;      // Log each order before filtering&#10;      orders.forEach((order, index) =&gt; {&#10;        console.log(`Order ${index + 1} (${order._id}):`, {&#10;          totalItems: order.items?.length || 0,&#10;          itemsFarmers:&#10;            order.items?.map((item) =&gt; ({&#10;              name: item.name || item.productName,&#10;              farmerId: item.farmerId,&#10;              farmerEmail: item.farmerEmail,&#10;            })) || [],&#10;          status: order.status,&#10;        });&#10;      });&#10;&#10;      console.log(&#10;        `Filtered orders (with farmer items):`,&#10;        filteredOrders.filter((order) =&gt; order.items.length &gt; 0).length,&#10;      );&#10;&#10;      // Log why orders are being filtered out&#10;      filteredOrders.forEach((order, index) =&gt; {&#10;        if (order.items.length === 0) {&#10;          console.log(&#10;            `Order ${order._id} filtered out - no matching items for farmer`,&#10;          );&#10;        } else {&#10;          console.log(&#10;            `Order ${order._id} kept - has ${order.items.length} matching items`,&#10;          );&#10;        }&#10;      });&#10;&#10;      console.log(&#10;        `Sample filtered order:`,&#10;        filteredOrders.find((order) =&gt; order.items.length &gt; 0),&#10;      );&#10;&#10;      return NextResponse.json({&#10;        orders: filteredOrders.filter((order) =&gt; order.items.length &gt; 0),&#10;        message: `Found ${filteredOrders.filter((order) =&gt; order.items.length &gt; 0).length} orders for farmer`,&#10;      });&#10;    } else {&#10;      // Get orders for customer&#10;      console.log(&quot;Fetching orders for customer - userId:&quot;, userId);&#10;&#10;      const customerSearchCriteria = { userId: userId };&#10;&#10;      // Try different ID formats&#10;      if (ObjectId.isValid(userId)) {&#10;        customerSearchCriteria.$or = [&#10;          { userId: userId },&#10;          { userId: new ObjectId(userId) },&#10;        ];&#10;        delete customerSearchCriteria.userId;&#10;      }&#10;&#10;      const orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .find(customerSearchCriteria)&#10;        .sort({ createdAt: -1 })&#10;        .toArray();&#10;&#10;      console.log(&quot;Customer orders found:&quot;, orders.length);&#10;&#10;      return NextResponse.json({&#10;        orders,&#10;        message: `Found ${orders.length} orders for customer`,&#10;      });&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;Orders API error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Internal server error&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const orderData = await request.json();&#10;&#10;    console.log(&quot;Creating new order:&quot;, orderData);&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Check and update stock for each item (without transactions)&#10;    for (const item of orderData.items) {&#10;      const productId = item.productId;&#10;      const orderQuantity = item.quantity;&#10;&#10;      console.log(&#10;        `Processing stock update for product: ${productId}, quantity: ${orderQuantity}`,&#10;      );&#10;&#10;      // Get current product&#10;      const product = await db&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(productId) });&#10;&#10;      if (!product) {&#10;        console.error(`Product not found for ID: ${productId}`);&#10;        throw new Error(`Product ${item.name} not found`);&#10;      }&#10;&#10;      console.log(&#10;        `Found product: ${product.name}, current stock: ${product.stock}`,&#10;      );&#10;      console.log(&#10;        `Product farmer info:`,&#10;        product.farmer&#10;          ? &quot;has farmer object&quot;&#10;          : product.farmerId&#10;            ? &quot;has farmerId&quot;&#10;            : &quot;no farmer info&quot;,&#10;      );&#10;&#10;      // Check if sufficient stock is available&#10;      if (product.stock &lt; orderQuantity) {&#10;        throw new Error(&#10;          `Insufficient stock for ${item.name}. Available: ${product.stock}, Requested: ${orderQuantity}`,&#10;        );&#10;      }&#10;&#10;      // Update product stock&#10;      const newStock = product.stock - orderQuantity;&#10;      const updateResult = await db.collection(&quot;products&quot;).updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        {&#10;          $set: {&#10;            stock: newStock,&#10;            updatedAt: new Date(),&#10;          },&#10;        },&#10;      );&#10;&#10;      console.log(&#10;        `Stock update for ${item.name}: ${product.stock} -&gt; ${newStock}`,&#10;      );&#10;      console.log(&#10;        `Update result - matched: ${updateResult.matchedCount}, modified: ${updateResult.modifiedCount}`,&#10;      );&#10;    }&#10;&#10;    // Add timestamps to order&#10;    const newOrder = {&#10;      ...orderData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    };&#10;&#10;    // Create the order&#10;    const result = await db.collection(&quot;orders&quot;).insertOne(newOrder);&#10;&#10;    console.log(&quot;Order created with ID:&quot;, result.insertedId);&#10;&#10;    // Return success response&#10;    return NextResponse.json({&#10;      message: &quot;Order created successfully&quot;,&#10;      orderId: result.insertedId,&#10;      order: { ...newOrder, _id: result.insertedId },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Create order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function PATCH(request) {&#10;  try {&#10;    const { orderId, ...updateData } = await request.json();&#10;&#10;    if (!orderId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Order ID is required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get the current order to check status changes (without transactions)&#10;    const currentOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    if (!currentOrder) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Check if order status is being changed to cancelled/returned&#10;    const isBeingCancelled =&#10;      updateData.status &amp;&amp;&#10;      (updateData.status === &quot;cancelled&quot; || updateData.status === &quot;returned&quot;) &amp;&amp;&#10;      currentOrder.status !== &quot;cancelled&quot; &amp;&amp;&#10;      currentOrder.status !== &quot;returned&quot;;&#10;&#10;    // If order is being cancelled, restore stock&#10;    if (isBeingCancelled &amp;&amp; currentOrder.items) {&#10;      console.log(&#10;        `Order ${orderId} is being cancelled/returned, restoring stock...`,&#10;      );&#10;&#10;      for (const item of currentOrder.items) {&#10;        const productId = item.productId;&#10;        const orderQuantity = item.quantity;&#10;&#10;        // Get current product&#10;        const product = await db&#10;          .collection(&quot;products&quot;)&#10;          .findOne({ _id: new ObjectId(productId) });&#10;&#10;        if (product) {&#10;          // Restore product stock&#10;          const newStock = product.stock + orderQuantity;&#10;          await db.collection(&quot;products&quot;).updateOne(&#10;            { _id: new ObjectId(productId) },&#10;            {&#10;              $set: {&#10;                stock: newStock,&#10;                updatedAt: new Date(),&#10;              },&#10;            },&#10;          );&#10;&#10;          console.log(&#10;            `Restored stock for ${item.name}: ${product.stock} -&gt; ${newStock}`,&#10;          );&#10;        } else {&#10;          console.warn(`Product ${productId} not found when restoring stock`);&#10;        }&#10;      }&#10;    }&#10;&#10;    // Update the order&#10;    const result = await db.collection(&quot;orders&quot;).updateOne(&#10;      { _id: new ObjectId(orderId) },&#10;      {&#10;        $set: {&#10;          ...updateData,&#10;          updatedAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order updated successfully&quot;,&#10;      stockRestored: isBeingCancelled&#10;        ? &quot;Stock has been restored for cancelled order&quot;&#10;        : &quot;No stock changes needed&quot;,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Update order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;    const orderId = searchParams.get(&quot;orderId&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const productId = searchParams.get(&quot;productId&quot;);&#10;    const limit = parseInt(searchParams.get(&quot;limit&quot;)) || null;&#10;&#10;    if (!userId &amp;&amp; !orderId &amp;&amp; !farmerId &amp;&amp; !farmerEmail &amp;&amp; !productId) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;User ID, Order ID, Farmer ID, Farmer Email, or Product ID is required&quot;,&#10;        },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    if (orderId) {&#10;      // Get specific order&#10;      const order = await db&#10;        .collection(&quot;orders&quot;)&#10;        .findOne({ _id: new ObjectId(orderId) });&#10;&#10;      if (!order) {&#10;        return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;      }&#10;&#10;      return NextResponse.json({ order });&#10;    } else if (productId) {&#10;      // Get orders containing a specific product&#10;      console.log(&quot;Fetching orders for productId:&quot;, productId);&#10;&#10;      const productSearchCriteria = [&#10;        { &quot;products.productId&quot;: productId },&#10;        { &quot;products._id&quot;: productId },&#10;        { &quot;items.productId&quot;: productId },&#10;        { &quot;items._id&quot;: productId },&#10;      ];&#10;&#10;      // Also try ObjectId if the productId is a valid ObjectId&#10;      if (ObjectId.isValid(productId)) {&#10;        productSearchCriteria.push(&#10;          { &quot;products.productId&quot;: new ObjectId(productId) },&#10;          { &quot;products._id&quot;: new ObjectId(productId) },&#10;          { &quot;items.productId&quot;: new ObjectId(productId) },&#10;          { &quot;items._id&quot;: new ObjectId(productId) },&#10;        );&#10;      }&#10;&#10;      let query = { $or: productSearchCriteria };&#10;      let orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .find(query)&#10;        .sort({ createdAt: -1 });&#10;&#10;      if (limit) {&#10;        orders = orders.limit(limit);&#10;      }&#10;&#10;      const ordersArray = await orders.toArray();&#10;&#10;      console.log(&#10;        `Found ${ordersArray.length} orders containing product ${productId}`,&#10;      );&#10;&#10;      // Filter and transform orders to show only items for this product&#10;      const filteredOrders = ordersArray&#10;        .map((order) =&gt; {&#10;          // Find items/products that match the productId&#10;          const matchingItems = [];&#10;&#10;          // Check both 'products' and 'items' arrays (different orders might use different structures)&#10;          if (order.products) {&#10;            const products = order.products.filter(&#10;              (item) =&gt;&#10;                item.productId === productId ||&#10;                item._id === productId ||&#10;                (ObjectId.isValid(productId) &amp;&amp;&#10;                  (item.productId?.toString() === productId ||&#10;                    item._id?.toString() === productId)),&#10;            );&#10;            matchingItems.push(...products);&#10;          }&#10;&#10;          if (order.items) {&#10;            const items = order.items.filter(&#10;              (item) =&gt;&#10;                item.productId === productId ||&#10;                item._id === productId ||&#10;                (ObjectId.isValid(productId) &amp;&amp;&#10;                  (item.productId?.toString() === productId ||&#10;                    item._id?.toString() === productId)),&#10;            );&#10;            matchingItems.push(...items);&#10;          }&#10;&#10;          return {&#10;            ...order,&#10;            products: matchingItems,&#10;            items: matchingItems, // Ensure both fields are available&#10;            matchingItemsCount: matchingItems.length,&#10;          };&#10;        })&#10;        .filter((order) =&gt; order.matchingItemsCount &gt; 0); // Only include orders with matching items&#10;&#10;      console.log(&#10;        `Filtered to ${filteredOrders.length} orders with matching product items`,&#10;      );&#10;&#10;      return NextResponse.json({&#10;        orders: filteredOrders,&#10;        total: filteredOrders.length,&#10;      });&#10;    } else if (farmerId || farmerEmail) {&#10;      // Get orders for farmer - orders containing their products&#10;      console.log(&#10;        &quot;Fetching orders for farmer - farmerId:&quot;,&#10;        farmerId,&#10;        &quot;farmerEmail:&quot;,&#10;        farmerEmail,&#10;      );&#10;&#10;      const farmerSearchCriteria = [];&#10;&#10;      if (farmerId) {&#10;        farmerSearchCriteria.push(&#10;          { farmerIds: farmerId },&#10;          { farmerIds: farmerId.toString() },&#10;          { &quot;items.farmerId&quot;: farmerId },&#10;          { &quot;items.farmerId&quot;: farmerId.toString() },&#10;        );&#10;&#10;        if (ObjectId.isValid(farmerId)) {&#10;          farmerSearchCriteria.push(&#10;            { farmerIds: new ObjectId(farmerId) },&#10;            { &quot;items.farmerId&quot;: new ObjectId(farmerId) },&#10;          );&#10;        }&#10;      }&#10;&#10;      if (farmerEmail) {&#10;        farmerSearchCriteria.push(&#10;          { farmerEmails: farmerEmail },&#10;          { &quot;items.farmerEmail&quot;: farmerEmail },&#10;        );&#10;      }&#10;&#10;      const orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .find({ $or: farmerSearchCriteria })&#10;        .sort({ createdAt: -1 })&#10;        .toArray();&#10;&#10;      console.log(&quot;Farmer orders found:&quot;, orders.length);&#10;&#10;      // Filter items in each order to only show items from this farmer&#10;      const filteredOrders = orders.map((order) =&gt; ({&#10;        ...order,&#10;        items: order.items.filter((item) =&gt; {&#10;          // Helper function to check if item belongs to this farmer&#10;          const itemBelongsToFarmer = () =&gt; {&#10;            // If we have farmerId, check against it&#10;            if (farmerId) {&#10;              // Direct string comparison&#10;              if (&#10;                item.farmerId === farmerId ||&#10;                item.farmerId === farmerId.toString()&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // ObjectId comparison if farmerId is valid ObjectId&#10;              if (&#10;                ObjectId.isValid(farmerId) &amp;&amp;&#10;                item.farmerId?.toString() === farmerId&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // Check if farmerId is stored as email (legacy orders)&#10;              if (farmerEmail &amp;&amp; item.farmerId === farmerEmail) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            // If we have farmerEmail, check against farmerEmail field or farmerId field&#10;            if (farmerEmail) {&#10;              if (&#10;                item.farmerEmail === farmerEmail ||&#10;                item.farmerId === farmerEmail&#10;              ) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            return false;&#10;          };&#10;&#10;          return itemBelongsToFarmer();&#10;        }),&#10;        // Recalculate totals for farmer's items only&#10;        farmerSubtotal: order.items&#10;          .filter((item) =&gt; {&#10;            // Use the same logic for subtotal calculation&#10;            if (farmerId) {&#10;              // Direct string comparison&#10;              if (&#10;                item.farmerId === farmerId ||&#10;                item.farmerId === farmerId.toString()&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // ObjectId comparison if farmerId is valid ObjectId&#10;              if (&#10;                ObjectId.isValid(farmerId) &amp;&amp;&#10;                item.farmerId?.toString() === farmerId&#10;              ) {&#10;                return true;&#10;              }&#10;&#10;              // Check if farmerId is stored as email (legacy orders)&#10;              if (farmerEmail &amp;&amp; item.farmerId === farmerEmail) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            // If we have farmerEmail, check against farmerEmail field or farmerId field&#10;            if (farmerEmail) {&#10;              if (&#10;                item.farmerEmail === farmerEmail ||&#10;                item.farmerId === farmerEmail&#10;              ) {&#10;                return true;&#10;              }&#10;            }&#10;&#10;            return false;&#10;          })&#10;          .reduce((sum, item) =&gt; sum + item.price * item.quantity, 0),&#10;      }));&#10;&#10;      console.log(`Found ${orders.length} total orders for farmer`);&#10;&#10;      // Log each order before filtering&#10;      orders.forEach((order, index) =&gt; {&#10;        console.log(`Order ${index + 1} (${order._id}):`, {&#10;          totalItems: order.items?.length || 0,&#10;          itemsFarmers:&#10;            order.items?.map((item) =&gt; ({&#10;              name: item.name || item.productName,&#10;              farmerId: item.farmerId,&#10;              farmerEmail: item.farmerEmail,&#10;            })) || [],&#10;          status: order.status,&#10;        });&#10;      });&#10;&#10;      console.log(&#10;        `Filtered orders (with farmer items):`,&#10;        filteredOrders.filter((order) =&gt; order.items.length &gt; 0).length,&#10;      );&#10;&#10;      // Log why orders are being filtered out&#10;      filteredOrders.forEach((order, index) =&gt; {&#10;        if (order.items.length === 0) {&#10;          console.log(&#10;            `Order ${order._id} filtered out - no matching items for farmer`,&#10;          );&#10;        } else {&#10;          console.log(&#10;            `Order ${order._id} kept - has ${order.items.length} matching items`,&#10;          );&#10;        }&#10;      });&#10;&#10;      console.log(&#10;        `Sample filtered order:`,&#10;        filteredOrders.find((order) =&gt; order.items.length &gt; 0),&#10;      );&#10;&#10;      return NextResponse.json({&#10;        orders: filteredOrders.filter((order) =&gt; order.items.length &gt; 0),&#10;        message: `Found ${filteredOrders.filter((order) =&gt; order.items.length &gt; 0).length} orders for farmer`,&#10;      });&#10;    } else {&#10;      // Get orders for customer&#10;      console.log(&quot;Fetching orders for customer - userId:&quot;, userId);&#10;&#10;      const customerSearchCriteria = { userId: userId };&#10;&#10;      // Try different ID formats&#10;      if (ObjectId.isValid(userId)) {&#10;        customerSearchCriteria.$or = [&#10;          { userId: userId },&#10;          { userId: new ObjectId(userId) },&#10;        ];&#10;        delete customerSearchCriteria.userId;&#10;      }&#10;&#10;      const orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .find(customerSearchCriteria)&#10;        .sort({ createdAt: -1 })&#10;        .toArray();&#10;&#10;      console.log(&quot;Customer orders found:&quot;, orders.length);&#10;&#10;      return NextResponse.json({&#10;        orders,&#10;        message: `Found ${orders.length} orders for customer`,&#10;      });&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;Orders API error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Internal server error&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const orderData = await request.json();&#10;&#10;    console.log(&quot;Creating new order:&quot;, orderData);&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Check and update stock for each item (without transactions)&#10;    for (const item of orderData.items) {&#10;      const productId = item.productId;&#10;      const orderQuantity = item.quantity;&#10;&#10;      // Get current product&#10;      const product = await db&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(productId) });&#10;&#10;      if (!product) {&#10;        throw new Error(`Product ${item.name} not found`);&#10;      }&#10;&#10;      // Check if sufficient stock is available&#10;      if (product.stock &lt; orderQuantity) {&#10;        throw new Error(&#10;          `Insufficient stock for ${item.name}. Available: ${product.stock}, Requested: ${orderQuantity}`,&#10;        );&#10;      }&#10;&#10;      // Update product stock&#10;      const newStock = product.stock - orderQuantity;&#10;      await db.collection(&quot;products&quot;).updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        {&#10;          $set: {&#10;            stock: newStock,&#10;            updatedAt: new Date(),&#10;          },&#10;        },&#10;      );&#10;    }&#10;&#10;    // Add timestamps to order&#10;    const newOrder = {&#10;      ...orderData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    };&#10;&#10;    // Create the order&#10;    const result = await db.collection(&quot;orders&quot;).insertOne(newOrder);&#10;&#10;    console.log(&quot;Order created with ID:&quot;, result.insertedId);&#10;&#10;    // Return success response&#10;    return NextResponse.json({&#10;      message: &quot;Order created successfully&quot;,&#10;      orderId: result.insertedId,&#10;      order: { ...newOrder, _id: result.insertedId },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Create order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function PATCH(request) {&#10;  try {&#10;    const { orderId, ...updateData } = await request.json();&#10;&#10;    if (!orderId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Order ID is required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get the current order to check status changes (without transactions)&#10;    const currentOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    if (!currentOrder) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Check if order status is being changed to cancelled/returned&#10;    const isBeingCancelled =&#10;      updateData.status &amp;&amp;&#10;      (updateData.status === &quot;cancelled&quot; || updateData.status === &quot;returned&quot;) &amp;&amp;&#10;      currentOrder.status !== &quot;cancelled&quot; &amp;&amp;&#10;      currentOrder.status !== &quot;returned&quot;;&#10;&#10;    // If order is being cancelled, restore stock&#10;    if (isBeingCancelled &amp;&amp; currentOrder.items) {&#10;      console.log(&#10;        `Order ${orderId} is being cancelled/returned, restoring stock...`,&#10;      );&#10;&#10;      for (const item of currentOrder.items) {&#10;        const productId = item.productId;&#10;        const orderQuantity = item.quantity;&#10;&#10;        // Get current product&#10;        const product = await db&#10;          .collection(&quot;products&quot;)&#10;          .findOne({ _id: new ObjectId(productId) });&#10;&#10;        if (product) {&#10;          // Restore product stock&#10;          const newStock = product.stock + orderQuantity;&#10;          await db.collection(&quot;products&quot;).updateOne(&#10;            { _id: new ObjectId(productId) },&#10;            {&#10;              $set: {&#10;                stock: newStock,&#10;                updatedAt: new Date(),&#10;              },&#10;            },&#10;          );&#10;        } else {&#10;          console.warn(`Product ${productId} not found when restoring stock`);&#10;        }&#10;      }&#10;    }&#10;&#10;    // Update the order&#10;    const result = await db.collection(&quot;orders&quot;).updateOne(&#10;      { _id: new ObjectId(orderId) },&#10;      {&#10;        $set: {&#10;          ...updateData,&#10;          updatedAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    if" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/payment/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/payment/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;&#10;export default function Payment() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;  const {&#10;    items: cartItems,&#10;    getCartTotal,&#10;    loading: cartLoading,&#10;    clearCart,&#10;  } = useCart();&#10;  const [loading, setLoading] = useState(true);&#10;  const [showEditModal, setShowEditModal] = useState(false);&#10;  const [processing, setProcessing] = useState(false);&#10;&#10;  // Form states&#10;  const [deliveryAddress, setDeliveryAddress] = useState({&#10;    name: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    address: &quot;&quot;,&#10;    city: &quot;&quot;,&#10;    postalCode: &quot;&quot;,&#10;    instructions: &quot;&quot;,&#10;  });&#10;&#10;  const [paymentForm, setPaymentForm] = useState({&#10;    cardNumber: &quot;&quot;,&#10;    expiryDate: &quot;&quot;,&#10;    cvv: &quot;&quot;,&#10;    cardName: &quot;&quot;,&#10;    mobileNumber: &quot;&quot;,&#10;    paymentMethod: &quot;card&quot;,&#10;    sameAsDelivery: true,&#10;  });&#10;&#10;  const [editQuantities, setEditQuantities] = useState({});&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;Payment - Session status:&quot;, status, &quot;Session:&quot;, session);&#10;&#10;    if (status === &quot;loading&quot;) {&#10;      return; // Wait for session to load&#10;    }&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      // Pre-fill user data if available&#10;      if (session.user) {&#10;        setDeliveryAddress((prev) =&gt; ({&#10;          ...prev,&#10;          name: session.user.name || &quot;&quot;,&#10;          phone: session.user.phone || &quot;&quot;,&#10;        }));&#10;        setPaymentForm((prev) =&gt; ({&#10;          ...prev,&#10;          cardName: session.user.name || &quot;&quot;,&#10;        }));&#10;      }&#10;&#10;      // Initialize edit quantities when cart items are available&#10;      if (cartItems &amp;&amp; cartItems.length &gt; 0) {&#10;        const quantities = {};&#10;        cartItems.forEach((item) =&gt; {&#10;          quantities[item.id || item._id] = item.quantity;&#10;        });&#10;        setEditQuantities(quantities);&#10;      }&#10;&#10;      setLoading(false);&#10;    }&#10;  }, [session, status, router, cartItems]);&#10;&#10;  // Redirect if cart is empty - but only after cart has finished loading&#10;  useEffect(() =&gt; {&#10;    if (&#10;      !cartLoading &amp;&amp;&#10;      cartItems.length === 0 &amp;&amp;&#10;      status === &quot;authenticated&quot; &amp;&amp;&#10;      !processing&#10;    ) {&#10;      // Add a small delay to ensure any pending cart updates are processed&#10;      // Only redirect if not currently processing payment&#10;      const timer = setTimeout(() =&gt; {&#10;        if (cartItems.length === 0 &amp;&amp; !processing) {&#10;          router.push(&quot;/cart&quot;);&#10;        }&#10;      }, 500);&#10;&#10;      return () =&gt; clearTimeout(timer);&#10;    }&#10;  }, [cartItems, cartLoading, status, router, processing]);&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    const numericPrice =&#10;      typeof price === &quot;number&quot; ? price : parseFloat(price) || 0;&#10;    return `৳${numericPrice.toFixed(0)}`;&#10;  };&#10;&#10;  const calculateSubtotal = () =&gt; {&#10;    return cartItems.reduce((total, item) =&gt; {&#10;      const quantity = editQuantities[item.id || item._id] || item.quantity;&#10;      return total + (item.price || 0) * quantity;&#10;    }, 0);&#10;  };&#10;&#10;  const deliveryFee = 50;&#10;  const serviceFee = 25;&#10;  const subtotal = calculateSubtotal();&#10;  const total = subtotal + deliveryFee + serviceFee;&#10;&#10;  const handleEditQuantity = (itemId, newQuantity) =&gt; {&#10;    if (newQuantity &gt;= 1) {&#10;      setEditQuantities((prev) =&gt; ({&#10;        ...prev,&#10;        [itemId]: newQuantity,&#10;      }));&#10;    }&#10;  };&#10;&#10;  const handlePaymentChange = (e) =&gt; {&#10;    const { name, value, type, checked } = e.target;&#10;    setPaymentForm((prev) =&gt; ({&#10;      ...prev,&#10;      [name]: type === &quot;checkbox&quot; ? checked : value,&#10;    }));&#10;  };&#10;&#10;  const validateForm = () =&gt; {&#10;    if (paymentForm.paymentMethod === &quot;card&quot;) {&#10;      if (&#10;        !paymentForm.cardNumber ||&#10;        !paymentForm.expiryDate ||&#10;        !paymentForm.cvv ||&#10;        !paymentForm.cardName&#10;      ) {&#10;        alert(&quot;Please fill in all required card fields&quot;);&#10;        return false;&#10;      }&#10;    } else if (&#10;      paymentForm.paymentMethod === &quot;bkash&quot; ||&#10;      paymentForm.paymentMethod === &quot;nagad&quot;&#10;    ) {&#10;      if (!paymentForm.mobileNumber) {&#10;        alert(&quot;Please enter your mobile number&quot;);&#10;        return false;&#10;      }&#10;    }&#10;    return true;&#10;  };&#10;&#10;  const handleSubmitOrder = async () =&gt; {&#10;    if (!validateForm()) return;&#10;    if (cartItems.length === 0) {&#10;      alert(&quot;Your cart is empty&quot;);&#10;      return;&#10;    }&#10;&#10;    setProcessing(true);&#10;    try {&#10;      // Simulate payment processing&#10;      await new Promise((resolve) =&gt; setTimeout(resolve, 2000));&#10;&#10;      // Use flexible user ID detection - same as other pages&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;&#10;      console.log(&quot;Creating order with userId:&quot;, userId);&#10;      console.log(&quot;Cart items structure:&quot;, cartItems);&#10;      console.log(&#10;        &quot;Cart items farmer info:&quot;,&#10;        cartItems.map((item) =&gt; ({&#10;          name: item.name,&#10;          farmer: item.farmer,&#10;          farmerId:&#10;            typeof item.farmer === &quot;object&quot;&#10;              ? item.farmer?.id || item.farmer?._id&#10;              : null,&#10;          farmerEmail:&#10;            typeof item.farmer === &quot;object&quot; ? item.farmer?.email : null,&#10;        })),&#10;      );&#10;&#10;      // Extract unique farmer information from cart items&#10;      const farmerIds = [];&#10;      const farmerEmails = [];&#10;&#10;      cartItems.forEach((item) =&gt; {&#10;        const farmerId =&#10;          typeof item.farmer === &quot;object&quot;&#10;            ? item.farmer?.id || item.farmer?._id&#10;            : null;&#10;        const farmerEmail =&#10;          typeof item.farmer === &quot;object&quot; ? item.farmer?.email : null;&#10;&#10;        console.log(&#10;          `Item ${item.name} - farmerId: ${farmerId}, farmerEmail: ${farmerEmail}`,&#10;        );&#10;&#10;        if (farmerId &amp;&amp; !farmerIds.includes(farmerId)) {&#10;          farmerIds.push(farmerId);&#10;        }&#10;        if (farmerEmail &amp;&amp; !farmerEmails.includes(farmerEmail)) {&#10;          farmerEmails.push(farmerEmail);&#10;        }&#10;      });&#10;&#10;      console.log(&quot;Extracted farmerIds:&quot;, farmerIds);&#10;      console.log(&quot;Extracted farmerEmails:&quot;, farmerEmails);&#10;&#10;      // Create order with farmer information at both order and item levels&#10;      const orderData = {&#10;        userId: userId,&#10;        customerName: session.user.name || deliveryAddress.name,&#10;        customerEmail: session.user.email,&#10;        customerPhone: deliveryAddress.phone,&#10;        // Add farmer information at order level for filtering&#10;        farmerIds: farmerIds,&#10;        farmerEmails: farmerEmails,&#10;        items: cartItems.map((item) =&gt; ({&#10;          productId: item.id || item._id,&#10;          name: item.name,&#10;          productName: item.name,&#10;          quantity: editQuantities[item.id || item._id] || item.quantity,&#10;          price: item.price || 0,&#10;          unit: item.unit || &quot;kg&quot;,&#10;          image: item.image,&#10;          farmerName:&#10;            typeof item.farmer === &quot;object&quot; &amp;&amp; item.farmer?.name&#10;              ? item.farmer.name&#10;              : typeof item.farmer === &quot;string&quot;&#10;                ? item.farmer&#10;                : &quot;Local Farmer&quot;,&#10;          farmerId:&#10;            typeof item.farmer === &quot;object&quot;&#10;              ? item.farmer?.id || item.farmer?._id&#10;              : null,&#10;          farmerEmail:&#10;            typeof item.farmer === &quot;object&quot; ? item.farmer?.email : null,&#10;        })),&#10;        deliveryAddress,&#10;        subtotal,&#10;        deliveryFee,&#10;        serviceFee,&#10;        total,&#10;        paymentMethod: paymentForm.paymentMethod,&#10;        status: &quot;pending&quot;, // Start with pending status for farmer workflow&#10;      };&#10;&#10;      console.log(&quot;Order data being sent:&quot;, orderData);&#10;&#10;      const response = await fetch(&quot;/api/orders&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(orderData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        console.log(&quot;Order created successfully:&quot;, data);&#10;&#10;        // Get orderId before clearing cart&#10;        const orderId = data.orderId || data.order?._id;&#10;&#10;        if (orderId) {&#10;          console.log(&quot;Redirecting to success page with orderId:&quot;, orderId);&#10;&#10;          // Clear cart in backend first&#10;          try {&#10;            await fetch(`/api/cart?userId=${encodeURIComponent(userId)}`, {&#10;              method: &quot;DELETE&quot;,&#10;            });&#10;          } catch (cartError) {&#10;            console.error(&quot;Error clearing cart:&quot;, cartError);&#10;            // Don't fail the order if cart clearing fails&#10;          }&#10;&#10;          // Use router.push with replace to prevent going back to payment&#10;          // This prevents the cart redirect useEffect from interfering&#10;          router.replace(`/success?orderId=${orderId}`);&#10;&#10;          // Clear cart in frontend context after redirect is initiated&#10;          setTimeout(() =&gt; {&#10;            clearCart();&#10;          }, 100);&#10;        } else {&#10;          console.error(&quot;No orderId received from API response:&quot;, data);&#10;          alert(&quot;Order created successfully! Redirecting to home page.&quot;);&#10;          router.replace(&quot;/&quot;);&#10;        }&#10;      } else {&#10;        const errorData = await response&#10;          .json()&#10;          .catch(() =&gt; ({ error: &quot;Unknown error&quot; }));&#10;        console.error(&quot;Order creation failed:&quot;, response.status, errorData);&#10;        throw new Error(errorData.error || &quot;Failed to create order&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error processing payment:&quot;, error);&#10;      alert(&quot;Payment failed. Please try again.&quot;);&#10;      setProcessing(false);&#10;    }&#10;    // Don't set processing to false here on success, let the redirect handle it&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-spinner fa-spin text-4xl text-primary-600 mb-4&quot;&gt;&lt;/i&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading payment details...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (cartItems.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-shopping-cart text-6xl text-gray-400 mb-6&quot;&gt;&lt;/i&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            Your cart is empty&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;            Add some products to your cart before proceeding to payment&#10;          &lt;/p&gt;&#10;          &lt;Link&#10;            href=&quot;/products&quot;&#10;            className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-8 py-3 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            Continue Shopping&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Breadcrumb */}&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;        &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;          &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;            &lt;li&gt;&#10;              &lt;Link href=&quot;/&quot; className=&quot;text-gray-500 hover:text-primary-600&quot;&gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;Link&#10;                href=&quot;/cart&quot;&#10;                className=&quot;text-gray-500 hover:text-primary-600&quot;&#10;              &gt;&#10;                Cart&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li className=&quot;text-gray-900 dark:text-white&quot;&gt;Payment&lt;/li&gt;&#10;          &lt;/ol&gt;&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Payment Content */}&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;            {/* Order Summary */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                Order Summary&#10;              &lt;/h2&gt;&#10;&#10;              {/* Product Details */}&#10;              &lt;div className=&quot;space-y-4 mb-6&quot;&gt;&#10;                {cartItems.map((item) =&gt; {&#10;                  const quantity =&#10;                    editQuantities[item.id || item._id] || item.quantity;&#10;                  return (&#10;                    &lt;div&#10;                      key={item.id || item._id}&#10;                      className=&quot;flex items-center space-x-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                    &gt;&#10;                      &lt;img&#10;                        src={&#10;                          item.images?.[0] ||&#10;                          item.image ||&#10;                          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                        }&#10;                        alt={item.name}&#10;                        className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;flex-1&quot;&gt;&#10;                        &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.name}&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          By{&quot; &quot;}&#10;                          {typeof item.farmer === &quot;object&quot; &amp;&amp; item.farmer?.name&#10;                            ? item.farmer.name&#10;                            : typeof item.farmer === &quot;string&quot;&#10;                              ? item.farmer&#10;                              : &quot;Local Farmer&quot;}&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Quantity: {quantity} {item.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice((item.price || 0) * quantity)}&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          {formatPrice(item.price || 0)}/{item.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  );&#10;                })}&#10;              &lt;/div&gt;&#10;&#10;              {/* Booking Details */}&#10;              &lt;div className=&quot;space-y-3 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Booking Date:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                    {new Date().toLocaleDateString(&quot;en-US&quot;, {&#10;                      year: &quot;numeric&quot;,&#10;                      month: &quot;short&quot;,&#10;                      day: &quot;numeric&quot;,&#10;                    })}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Delivery Date:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                    {new Date(&#10;                      Date.now() + 2 * 24 * 60 * 60 * 1000,&#10;                    ).toLocaleDateString(&quot;en-US&quot;, {&#10;                      year: &quot;numeric&quot;,&#10;                      month: &quot;short&quot;,&#10;                      day: &quot;numeric&quot;,&#10;                    })}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Delivery Address:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-900 dark:text-white text-right&quot;&gt;&#10;                    {deliveryAddress.address &amp;&amp; deliveryAddress.city&#10;                      ? `${deliveryAddress.address}, ${deliveryAddress.city}`&#10;                      : &quot;To be filled&quot;}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Price Breakdown */}&#10;              &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4 space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Subtotal:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(subtotal)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Delivery Fee:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(deliveryFee)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Service Fee:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(serviceFee)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between text-lg font-bold text-gray-900 dark:text-white border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                  &lt;span&gt;Total:&lt;/span&gt;&#10;                  &lt;span&gt;{formatPrice(total)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Edit Button */}&#10;              &lt;button&#10;                onClick={() =&gt; setShowEditModal(true)}&#10;                className=&quot;w-full mt-4 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-2 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;Edit Order Details&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Payment Form */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                Payment Information&#10;              &lt;/h2&gt;&#10;&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                {/* Payment Method */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3&quot;&gt;&#10;                    Payment Method&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;radio&quot;&#10;                        name=&quot;paymentMethod&quot;&#10;                        value=&quot;card&quot;&#10;                        checked={paymentForm.paymentMethod === &quot;card&quot;}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;text-green-600 focus:ring-green-500&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;ml-3 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-credit-card text-lg mr-2&quot;&gt;&lt;/i&gt;&#10;                        &lt;span className=&quot;font-medium&quot;&gt;Credit/Debit Card&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;label className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;radio&quot;&#10;                        name=&quot;paymentMethod&quot;&#10;                        value=&quot;bkash&quot;&#10;                        checked={paymentForm.paymentMethod === &quot;bkash&quot;}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;text-green-600 focus:ring-green-500&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;ml-3 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-mobile-alt text-lg mr-2&quot;&gt;&lt;/i&gt;&#10;                        &lt;span className=&quot;font-medium&quot;&gt;bKash&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;label className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;radio&quot;&#10;                        name=&quot;paymentMethod&quot;&#10;                        value=&quot;nagad&quot;&#10;                        checked={paymentForm.paymentMethod === &quot;nagad&quot;}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;text-green-600 focus:ring-green-500&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;ml-3 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-wallet text-lg mr-2&quot;&gt;&lt;/i&gt;&#10;                        &lt;span className=&quot;font-medium&quot;&gt;Nagad&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Card Details */}&#10;                {paymentForm.paymentMethod === &quot;card&quot; &amp;&amp; (&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label&#10;                        htmlFor=&quot;cardName&quot;&#10;                        className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                      &gt;&#10;                        Name on Card&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;cardName&quot;&#10;                        name=&quot;cardName&quot;&#10;                        value={paymentForm.cardName}&#10;                        onChange={handlePaymentChange}&#10;                        required&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;John Doe&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label&#10;                        htmlFor=&quot;cardNumber&quot;&#10;                        className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                      &gt;&#10;                        Card Number&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;cardNumber&quot;&#10;                        name=&quot;cardNumber&quot;&#10;                        value={paymentForm.cardNumber}&#10;                        onChange={handlePaymentChange}&#10;                        required&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;1234 5678 9012 3456&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label&#10;                          htmlFor=&quot;expiryDate&quot;&#10;                          className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                        &gt;&#10;                          Expiry Date&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          id=&quot;expiryDate&quot;&#10;                          name=&quot;expiryDate&quot;&#10;                          value={paymentForm.expiryDate}&#10;                          onChange={handlePaymentChange}&#10;                          required&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                          placeholder=&quot;MM/YY&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label&#10;                          htmlFor=&quot;cvv&quot;&#10;                          className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                        &gt;&#10;                          CVV&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;password&quot;&#10;                          id=&quot;cvv&quot;&#10;                          name=&quot;cvv&quot;&#10;                          value={paymentForm.cvv}&#10;                          onChange={handlePaymentChange}&#10;                          maxLength=&quot;4&quot;&#10;                          required&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                          placeholder=&quot;123&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Mobile Payment Details */}&#10;                {(paymentForm.paymentMethod === &quot;bkash&quot; ||&#10;                  paymentForm.paymentMethod === &quot;nagad&quot;) &amp;&amp; (&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label&#10;                        htmlFor=&quot;mobileNumber&quot;&#10;                        className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                      &gt;&#10;                        Mobile Number&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;tel&quot;&#10;                        id=&quot;mobileNumber&quot;&#10;                        name=&quot;mobileNumber&quot;&#10;                        value={paymentForm.mobileNumber}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;+880 1234 567890&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;p-4 bg-blue-50 dark:bg-blue-900 rounded-lg&quot;&gt;&#10;                      &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                        You will be redirected to{&quot; &quot;}&#10;                        {paymentForm.paymentMethod === &quot;bkash&quot;&#10;                          ? &quot;bKash&quot;&#10;                          : &quot;Nagad&quot;}{&quot; &quot;}&#10;                        payment gateway to complete your payment.&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Billing Address */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;flex items-center mb-4&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;checkbox&quot;&#10;                      name=&quot;sameAsDelivery&quot;&#10;                      checked={paymentForm.sameAsDelivery}&#10;                      onChange={handlePaymentChange}&#10;                      className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                    /&gt;&#10;                    &lt;span className=&quot;ml-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Same as delivery address&#10;                    &lt;/span&gt;&#10;                  &lt;/label&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Submit Button */}&#10;                &lt;button&#10;                  onClick={handleSubmitOrder}&#10;                  disabled={processing}&#10;                  className={`w-full py-3 px-4 rounded-lg font-medium text-lg transition duration-200 transform hover:scale-105 ${&#10;                    processing&#10;                      ? &quot;bg-gray-400 cursor-not-allowed text-white&quot;&#10;                      : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                  }`}&#10;                &gt;&#10;                  {processing ? (&#10;                    &lt;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      Processing Payment...&#10;                    &lt;/&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      &lt;i className=&quot;fas fa-lock mr-2&quot;&gt;&lt;/i&gt;&#10;                      Complete Payment - {formatPrice(total)}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;&#10;                {/* Security Notice */}&#10;                &lt;div className=&quot;flex items-center justify-center text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-shield-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                  Your payment information is secure and encrypted&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Edit Order Modal */}&#10;      {showEditModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 w-full max-w-md&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Edit Order Details&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-4 max-h-96 overflow-y-auto&quot;&gt;&#10;              {cartItems.map((item) =&gt; (&#10;                &lt;div&#10;                  key={item.id || item._id}&#10;                  className=&quot;flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {item.name}&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      {formatPrice(item.price || 0)} each&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleEditQuantity(&#10;                          item.id || item._id,&#10;                          (editQuantities[item.id || item._id] ||&#10;                            item.quantity) - 1,&#10;                        )&#10;                      }&#10;                      disabled={&#10;                        (editQuantities[item.id || item._id] ||&#10;                          item.quantity) &lt;= 1&#10;                      }&#10;                      className=&quot;w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-minus text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;span className=&quot;font-medium min-w-[2rem] text-center&quot;&gt;&#10;                      {editQuantities[item.id || item._id] || item.quantity}&#10;                    &lt;/span&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleEditQuantity(&#10;                          item.id || item._id,&#10;                          (editQuantities[item.id || item._id] ||&#10;                            item.quantity) + 1,&#10;                        )&#10;                      }&#10;                      disabled={&#10;                        (editQuantities[item.id || item._id] ||&#10;                          item.quantity) &gt;= (item.stock || 999)&#10;                      }&#10;                      className=&quot;w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-plus text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex space-x-3 mt-6&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setShowEditModal(false)}&#10;                className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;              &gt;&#10;                Close&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;&#10;export default function Payment() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;  const {&#10;    items: cartItems,&#10;    getCartTotal,&#10;    loading: cartLoading,&#10;    clearCart,&#10;  } = useCart();&#10;  const [loading, setLoading] = useState(true);&#10;  const [showEditModal, setShowEditModal] = useState(false);&#10;  const [processing, setProcessing] = useState(false);&#10;  const [redirectingToSuccess, setRedirectingToSuccess] = useState(false);&#10;&#10;  // Form states&#10;  const [deliveryAddress, setDeliveryAddress] = useState({&#10;    name: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    address: &quot;&quot;,&#10;    city: &quot;&quot;,&#10;    postalCode: &quot;&quot;,&#10;    instructions: &quot;&quot;,&#10;  });&#10;&#10;  const [paymentForm, setPaymentForm] = useState({&#10;    cardNumber: &quot;&quot;,&#10;    expiryDate: &quot;&quot;,&#10;    cvv: &quot;&quot;,&#10;    cardName: &quot;&quot;,&#10;    mobileNumber: &quot;&quot;,&#10;    paymentMethod: &quot;card&quot;,&#10;    sameAsDelivery: true,&#10;  });&#10;&#10;  const [editQuantities, setEditQuantities] = useState({});&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;Payment - Session status:&quot;, status, &quot;Session:&quot;, session);&#10;&#10;    if (status === &quot;loading&quot;) {&#10;      return; // Wait for session to load&#10;    }&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      // Pre-fill user data if available&#10;      if (session.user) {&#10;        setDeliveryAddress((prev) =&gt; ({&#10;          ...prev,&#10;          name: session.user.name || &quot;&quot;,&#10;          phone: session.user.phone || &quot;&quot;,&#10;        }));&#10;        setPaymentForm((prev) =&gt; ({&#10;          ...prev,&#10;          cardName: session.user.name || &quot;&quot;,&#10;        }));&#10;      }&#10;&#10;      // Initialize edit quantities when cart items are available&#10;      if (cartItems &amp;&amp; cartItems.length &gt; 0) {&#10;        const quantities = {};&#10;        cartItems.forEach((item) =&gt; {&#10;          quantities[item.id || item._id] = item.quantity;&#10;        });&#10;        setEditQuantities(quantities);&#10;      }&#10;&#10;      setLoading(false);&#10;    }&#10;  }, [session, status, router, cartItems]);&#10;&#10;  // Redirect if cart is empty - but only after cart has finished loading&#10;  useEffect(() =&gt; {&#10;    if (&#10;      !cartLoading &amp;&amp;&#10;      cartItems.length === 0 &amp;&amp;&#10;      status === &quot;authenticated&quot; &amp;&amp;&#10;      !processing &amp;&amp;&#10;      !redirectingToSuccess&#10;    ) {&#10;      // Add a small delay to ensure any pending cart updates are processed&#10;      // Only redirect if not currently processing payment or redirecting to success&#10;      const timer = setTimeout(() =&gt; {&#10;        if (cartItems.length === 0 &amp;&amp; !processing &amp;&amp; !redirectingToSuccess) {&#10;          router.push(&quot;/cart&quot;);&#10;        }&#10;      }, 500);&#10;&#10;      return () =&gt; clearTimeout(timer);&#10;    }&#10;  }, [cartItems, cartLoading, status, router, processing, redirectingToSuccess]);&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    const numericPrice =&#10;      typeof price === &quot;number&quot; ? price : parseFloat(price) || 0;&#10;    return `৳${numericPrice.toFixed(0)}`;&#10;  };&#10;&#10;  const calculateSubtotal = () =&gt; {&#10;    return cartItems.reduce((total, item) =&gt; {&#10;      const quantity = editQuantities[item.id || item._id] || item.quantity;&#10;      return total + (item.price || 0) * quantity;&#10;    }, 0);&#10;  };&#10;&#10;  const deliveryFee = 50;&#10;  const serviceFee = 25;&#10;  const subtotal = calculateSubtotal();&#10;  const total = subtotal + deliveryFee + serviceFee;&#10;&#10;  const handleEditQuantity = (itemId, newQuantity) =&gt; {&#10;    if (newQuantity &gt;= 1) {&#10;      setEditQuantities((prev) =&gt; ({&#10;        ...prev,&#10;        [itemId]: newQuantity,&#10;      }));&#10;    }&#10;  };&#10;&#10;  const handlePaymentChange = (e) =&gt; {&#10;    const { name, value, type, checked } = e.target;&#10;    setPaymentForm((prev) =&gt; ({&#10;      ...prev,&#10;      [name]: type === &quot;checkbox&quot; ? checked : value,&#10;    }));&#10;  };&#10;&#10;  const validateForm = () =&gt; {&#10;    if (paymentForm.paymentMethod === &quot;card&quot;) {&#10;      if (&#10;        !paymentForm.cardNumber ||&#10;        !paymentForm.expiryDate ||&#10;        !paymentForm.cvv ||&#10;        !paymentForm.cardName&#10;      ) {&#10;        alert(&quot;Please fill in all required card fields&quot;);&#10;        return false;&#10;      }&#10;    } else if (&#10;      paymentForm.paymentMethod === &quot;bkash&quot; ||&#10;      paymentForm.paymentMethod === &quot;nagad&quot;&#10;    ) {&#10;      if (!paymentForm.mobileNumber) {&#10;        alert(&quot;Please enter your mobile number&quot;);&#10;        return false;&#10;      }&#10;    }&#10;    return true;&#10;  };&#10;&#10;  const handleSubmitOrder = async () =&gt; {&#10;    if (!validateForm()) return;&#10;    if (cartItems.length === 0) {&#10;      alert(&quot;Your cart is empty&quot;);&#10;      return;&#10;    }&#10;&#10;    setProcessing(true);&#10;    try {&#10;      // Simulate payment processing&#10;      await new Promise((resolve) =&gt; setTimeout(resolve, 2000));&#10;&#10;      // Use flexible user ID detection - same as other pages&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;&#10;      console.log(&quot;Creating order with userId:&quot;, userId);&#10;      console.log(&quot;Cart items structure:&quot;, cartItems);&#10;      console.log(&#10;        &quot;Cart items farmer info:&quot;,&#10;        cartItems.map((item) =&gt; ({&#10;          name: item.name,&#10;          farmer: item.farmer,&#10;          farmerId:&#10;            typeof item.farmer === &quot;object&quot;&#10;              ? item.farmer?.id || item.farmer?._id&#10;              : null,&#10;          farmerEmail:&#10;            typeof item.farmer === &quot;object&quot; ? item.farmer?.email : null,&#10;        })),&#10;      );&#10;&#10;      // Extract unique farmer information from cart items&#10;      const farmerIds = [];&#10;      const farmerEmails = [];&#10;&#10;      cartItems.forEach((item) =&gt; {&#10;        const farmerId =&#10;          typeof item.farmer === &quot;object&quot;&#10;            ? item.farmer?.id || item.farmer?._id&#10;            : null;&#10;        const farmerEmail =&#10;          typeof item.farmer === &quot;object&quot; ? item.farmer?.email : null;&#10;&#10;        console.log(&#10;          `Item ${item.name} - farmerId: ${farmerId}, farmerEmail: ${farmerEmail}`,&#10;        );&#10;&#10;        if (farmerId &amp;&amp; !farmerIds.includes(farmerId)) {&#10;          farmerIds.push(farmerId);&#10;        }&#10;        if (farmerEmail &amp;&amp; !farmerEmails.includes(farmerEmail)) {&#10;          farmerEmails.push(farmerEmail);&#10;        }&#10;      });&#10;&#10;      console.log(&quot;Extracted farmerIds:&quot;, farmerIds);&#10;      console.log(&quot;Extracted farmerEmails:&quot;, farmerEmails);&#10;&#10;      // Create order with farmer information at both order and item levels&#10;      const orderData = {&#10;        userId: userId,&#10;        customerName: session.user.name || deliveryAddress.name,&#10;        customerEmail: session.user.email,&#10;        customerPhone: deliveryAddress.phone,&#10;        // Add farmer information at order level for filtering&#10;        farmerIds: farmerIds,&#10;        farmerEmails: farmerEmails,&#10;        items: cartItems.map((item) =&gt; ({&#10;          productId: item.id || item._id,&#10;          name: item.name,&#10;          productName: item.name,&#10;          quantity: editQuantities[item.id || item._id] || item.quantity,&#10;          price: item.price || 0,&#10;          unit: item.unit || &quot;kg&quot;,&#10;          image: item.image,&#10;          farmerName:&#10;            typeof item.farmer === &quot;object&quot; &amp;&amp; item.farmer?.name&#10;              ? item.farmer.name&#10;              : typeof item.farmer === &quot;string&quot;&#10;                ? item.farmer&#10;                : &quot;Local Farmer&quot;,&#10;          farmerId:&#10;            typeof item.farmer === &quot;object&quot;&#10;              ? item.farmer?.id || item.farmer?._id&#10;              : null,&#10;          farmerEmail:&#10;            typeof item.farmer === &quot;object&quot; ? item.farmer?.email : null,&#10;        })),&#10;        deliveryAddress,&#10;        subtotal,&#10;        deliveryFee,&#10;        serviceFee,&#10;        total,&#10;        paymentMethod: paymentForm.paymentMethod,&#10;        status: &quot;pending&quot;, // Start with pending status for farmer workflow&#10;      };&#10;&#10;      console.log(&quot;Order data being sent:&quot;, orderData);&#10;&#10;      const response = await fetch(&quot;/api/orders&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(orderData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        console.log(&quot;Order created successfully:&quot;, data);&#10;&#10;        // Get orderId before clearing cart&#10;        const orderId = data.orderId || data.order?._id;&#10;&#10;        if (orderId) {&#10;          console.log(&quot;Redirecting to success page with orderId:&quot;, orderId);&#10;&#10;          // Clear cart in backend first&#10;          try {&#10;            await fetch(`/api/cart?userId=${encodeURIComponent(userId)}`, {&#10;              method: &quot;DELETE&quot;,&#10;            });&#10;          } catch (cartError) {&#10;            console.error(&quot;Error clearing cart:&quot;, cartError);&#10;            // Don't fail the order if cart clearing fails&#10;          }&#10;&#10;          setRedirectingToSuccess(true);&#10;&#10;          // Use router.push with replace to prevent going back to payment&#10;          // This prevents the cart redirect useEffect from interfering&#10;          router.replace(`/success?orderId=${orderId}`);&#10;&#10;          // Clear cart in frontend context after redirect is initiated&#10;          setTimeout(() =&gt; {&#10;            clearCart();&#10;          }, 100);&#10;        } else {&#10;          console.error(&quot;No orderId received from API response:&quot;, data);&#10;          alert(&quot;Order created successfully! Redirecting to home page.&quot;);&#10;          router.replace(&quot;/&quot;);&#10;        }&#10;      } else {&#10;        const errorData = await response&#10;          .json()&#10;          .catch(() =&gt; ({ error: &quot;Unknown error&quot; }));&#10;        console.error(&quot;Order creation failed:&quot;, response.status, errorData);&#10;        throw new Error(errorData.error || &quot;Failed to create order&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error processing payment:&quot;, error);&#10;      alert(&quot;Payment failed. Please try again.&quot;);&#10;      setProcessing(false);&#10;    }&#10;    // Don't set processing to false here on success, let the redirect handle it&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-spinner fa-spin text-4xl text-primary-600 mb-4&quot;&gt;&lt;/i&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading payment details...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (cartItems.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-shopping-cart text-6xl text-gray-400 mb-6&quot;&gt;&lt;/i&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            Your cart is empty&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;            Add some products to your cart before proceeding to payment&#10;          &lt;/p&gt;&#10;          &lt;Link&#10;            href=&quot;/products&quot;&#10;            className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-8 py-3 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            Continue Shopping&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Breadcrumb */}&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;        &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;          &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;            &lt;li&gt;&#10;              &lt;Link href=&quot;/&quot; className=&quot;text-gray-500 hover:text-primary-600&quot;&gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;Link&#10;                href=&quot;/cart&quot;&#10;                className=&quot;text-gray-500 hover:text-primary-600&quot;&#10;              &gt;&#10;                Cart&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li className=&quot;text-gray-900 dark:text-white&quot;&gt;Payment&lt;/li&gt;&#10;          &lt;/ol&gt;&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Payment Content */}&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;            {/* Order Summary */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                Order Summary&#10;              &lt;/h2&gt;&#10;&#10;              {/* Product Details */}&#10;              &lt;div className=&quot;space-y-4 mb-6&quot;&gt;&#10;                {cartItems.map((item) =&gt; {&#10;                  const quantity =&#10;                    editQuantities[item.id || item._id] || item.quantity;&#10;                  return (&#10;                    &lt;div&#10;                      key={item.id || item._id}&#10;                      className=&quot;flex items-center space-x-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                    &gt;&#10;                      &lt;img&#10;                        src={&#10;                          item.images?.[0] ||&#10;                          item.image ||&#10;                          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                        }&#10;                        alt={item.name}&#10;                        className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;flex-1&quot;&gt;&#10;                        &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.name}&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          By{&quot; &quot;}&#10;                          {typeof item.farmer === &quot;object&quot; &amp;&amp; item.farmer?.name&#10;                            ? item.farmer.name&#10;                            : typeof item.farmer === &quot;string&quot;&#10;                              ? item.farmer&#10;                              : &quot;Local Farmer&quot;}&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Quantity: {quantity} {item.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice((item.price || 0) * quantity)}&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          {formatPrice(item.price || 0)}/{item.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  );&#10;                })}&#10;              &lt;/div&gt;&#10;&#10;              {/* Booking Details */}&#10;              &lt;div className=&quot;space-y-3 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Booking Date:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                    {new Date().toLocaleDateString(&quot;en-US&quot;, {&#10;                      year: &quot;numeric&quot;,&#10;                      month: &quot;short&quot;,&#10;                      day: &quot;numeric&quot;,&#10;                    })}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Delivery Date:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                    {new Date(&#10;                      Date.now() + 2 * 24 * 60 * 60 * 1000,&#10;                    ).toLocaleDateString(&quot;en-US&quot;, {&#10;                      year: &quot;numeric&quot;,&#10;                      month: &quot;short&quot;,&#10;                      day: &quot;numeric&quot;,&#10;                    })}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Delivery Address:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-900 dark:text-white text-right&quot;&gt;&#10;                    {deliveryAddress.address &amp;&amp; deliveryAddress.city&#10;                      ? `${deliveryAddress.address}, ${deliveryAddress.city}`&#10;                      : &quot;To be filled&quot;}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Price Breakdown */}&#10;              &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4 space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Subtotal:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(subtotal)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Delivery Fee:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(deliveryFee)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Service Fee:&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(serviceFee)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex justify-between text-lg font-bold text-gray-900 dark:text-white border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                  &lt;span&gt;Total:&lt;/span&gt;&#10;                  &lt;span&gt;{formatPrice(total)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Edit Button */}&#10;              &lt;button&#10;                onClick={() =&gt; setShowEditModal(true)}&#10;                className=&quot;w-full mt-4 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-2 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;Edit Order Details&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Payment Form */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                Payment Information&#10;              &lt;/h2&gt;&#10;&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                {/* Payment Method */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3&quot;&gt;&#10;                    Payment Method&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;radio&quot;&#10;                        name=&quot;paymentMethod&quot;&#10;                        value=&quot;card&quot;&#10;                        checked={paymentForm.paymentMethod === &quot;card&quot;}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;text-green-600 focus:ring-green-500&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;ml-3 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-credit-card text-lg mr-2&quot;&gt;&lt;/i&gt;&#10;                        &lt;span className=&quot;font-medium&quot;&gt;Credit/Debit Card&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;label className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;radio&quot;&#10;                        name=&quot;paymentMethod&quot;&#10;                        value=&quot;bkash&quot;&#10;                        checked={paymentForm.paymentMethod === &quot;bkash&quot;}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;text-green-600 focus:ring-green-500&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;ml-3 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-mobile-alt text-lg mr-2&quot;&gt;&lt;/i&gt;&#10;                        &lt;span className=&quot;font-medium&quot;&gt;bKash&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;label className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;radio&quot;&#10;                        name=&quot;paymentMethod&quot;&#10;                        value=&quot;nagad&quot;&#10;                        checked={paymentForm.paymentMethod === &quot;nagad&quot;}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;text-green-600 focus:ring-green-500&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;ml-3 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-wallet text-lg mr-2&quot;&gt;&lt;/i&gt;&#10;                        &lt;span className=&quot;font-medium&quot;&gt;Nagad&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Card Details */}&#10;                {paymentForm.paymentMethod === &quot;card&quot; &amp;&amp; (&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label&#10;                        htmlFor=&quot;cardName&quot;&#10;                        className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                      &gt;&#10;                        Name on Card&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;cardName&quot;&#10;                        name=&quot;cardName&quot;&#10;                        value={paymentForm.cardName}&#10;                        onChange={handlePaymentChange}&#10;                        required&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;John Doe&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label&#10;                        htmlFor=&quot;cardNumber&quot;&#10;                        className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                      &gt;&#10;                        Card Number&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;cardNumber&quot;&#10;                        name=&quot;cardNumber&quot;&#10;                        value={paymentForm.cardNumber}&#10;                        onChange={handlePaymentChange}&#10;                        required&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;1234 5678 9012 3456&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label&#10;                          htmlFor=&quot;expiryDate&quot;&#10;                          className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                        &gt;&#10;                          Expiry Date&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          id=&quot;expiryDate&quot;&#10;                          name=&quot;expiryDate&quot;&#10;                          value={paymentForm.expiryDate}&#10;                          onChange={handlePaymentChange}&#10;                          required&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                          placeholder=&quot;MM/YY&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label&#10;                          htmlFor=&quot;cvv&quot;&#10;                          className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                        &gt;&#10;                          CVV&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;password&quot;&#10;                          id=&quot;cvv&quot;&#10;                          name=&quot;cvv&quot;&#10;                          value={paymentForm.cvv}&#10;                          onChange={handlePaymentChange}&#10;                          maxLength=&quot;4&quot;&#10;                          required&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                          placeholder=&quot;123&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Mobile Payment Details */}&#10;                {(paymentForm.paymentMethod === &quot;bkash&quot; ||&#10;                  paymentForm.paymentMethod === &quot;nagad&quot;) &amp;&amp; (&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label&#10;                        htmlFor=&quot;mobileNumber&quot;&#10;                        className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                      &gt;&#10;                        Mobile Number&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;tel&quot;&#10;                        id=&quot;mobileNumber&quot;&#10;                        name=&quot;mobileNumber&quot;&#10;                        value={paymentForm.mobileNumber}&#10;                        onChange={handlePaymentChange}&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;+880 1234 567890&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;p-4 bg-blue-50 dark:bg-blue-900 rounded-lg&quot;&gt;&#10;                      &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                        You will be redirected to{&quot; &quot;}&#10;                        {paymentForm.paymentMethod === &quot;bkash&quot;&#10;                          ? &quot;bKash&quot;&#10;                          : &quot;Nagad&quot;}{&quot; &quot;}&#10;                        payment gateway to complete your payment.&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Billing Address */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;flex items-center mb-4&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;checkbox&quot;&#10;                      name=&quot;sameAsDelivery&quot;&#10;                      checked={paymentForm.sameAsDelivery}&#10;                      onChange={handlePaymentChange}&#10;                      className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                    /&gt;&#10;                    &lt;span className=&quot;ml-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Same as delivery address&#10;                    &lt;/span&gt;&#10;                  &lt;/label&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Submit Button */}&#10;                &lt;button&#10;                  onClick={handleSubmitOrder}&#10;                  disabled={processing}&#10;                  className={`w-full py-3 px-4 rounded-lg font-medium text-lg transition duration-200 transform hover:scale-105 ${&#10;                    processing&#10;                      ? &quot;bg-gray-400 cursor-not-allowed text-white&quot;&#10;                      : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                  }`}&#10;                &gt;&#10;                  {processing ? (&#10;                    &lt;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      Processing Payment...&#10;                    &lt;/&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      &lt;i className=&quot;fas fa-lock mr-2&quot;&gt;&lt;/i&gt;&#10;                      Complete Payment - {formatPrice(total)}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;&#10;                {/* Security Notice */}&#10;                &lt;div className=&quot;flex items-center justify-center text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-shield-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                  Your payment information is secure and encrypted&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Edit Order Modal */}&#10;      {showEditModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 w-full max-w-md&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Edit Order Details&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-4 max-h-96 overflow-y-auto&quot;&gt;&#10;              {cartItems.map((item) =&gt; (&#10;                &lt;div&#10;                  key={item.id || item._id}&#10;                  className=&quot;flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {item.name}&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      {formatPrice(item.price || 0)} each&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleEditQuantity(&#10;                          item.id || item._id,&#10;                          (editQuantities[item.id || item._id] ||&#10;                            item.quantity) - 1,&#10;                        )&#10;                      }&#10;                      disabled={&#10;                        (editQuantities[item.id || item._id] ||&#10;                          item.quantity) &lt;= 1&#10;                      }&#10;                      className=&quot;w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-minus text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;span className=&quot;font-medium min-w-[2rem] text-center&quot;&gt;&#10;                      {editQuantities[item.id || item._id] || item.quantity}&#10;                    &lt;/span&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleEditQuantity(&#10;                          item.id || item._id,&#10;                          (editQuantities[item.id || item._id] ||&#10;                            item.quantity) + 1,&#10;                        )&#10;                      }&#10;                      disabled={&#10;                        (editQuantities[item.id || item._id] ||&#10;                          item.quantity) &gt;= (item.stock || 999)&#10;                      }&#10;                      className=&quot;w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-plus text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex space-x-3 mt-6&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setShowEditModal(false)}&#10;                className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;              &gt;&#10;                Close&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>