<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add-farming-methods-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-farming-methods-to-all.js" />
              <option name="originalContent" value="&#10;    });&#10;&#10;    console.log(`\n5.  SUMMARY:`);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Successfully updated: ${successCount}`);&#10;    console.log(`Errors: ${errorCount}`);&#10;    console.log(&#10;      `Farmers with methods: ${farmersWithMethods.length} (${((farmersWithMethods.length / allFarmers.length) * 100).toFixed(1)}%)`,&#10;    );&#10;&#10;    if (farmersWithMethods.length === allFarmers.length) {&#10;      console.log(&#10;        `\n SUCCESS! All farmers now have farming methods defined!`,&#10;      );&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;addFarmingMethodsToAllFarmers().catch(console.error);&#10;" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function addFarmingMethodsToAllFarmers() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; ADDING FARMING METHODS TO FARMERS WITHOUT THEM\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Define appropriate farming methods for each farmer based on their specializations and farm type&#10;    const farmerMethods = {&#10;      // Farmers without farmInfo.farmingMethods currently&#10;      &quot;688b5723287e9adbc28801dc&quot;: [&quot;Sustainable&quot;, &quot;Traditional&quot;], // unnamed farmer&#10;      &quot;6888b23e626cff1716f3353c&quot;: [&quot;Organic&quot;, &quot;Sustainable&quot;, &quot;Traditional&quot;], // kazi abrar (vegetables)&#10;      &quot;688b3f4f37eade0f39f64de2&quot;: [&#10;        &quot;Traditional&quot;,&#10;        &quot;Sustainable&quot;,&#10;        &quot;Mixed Farming&quot;,&#10;      ], // chashi jashim (mixed)&#10;      &quot;689054bb0f308009e3dd8225&quot;: [&#10;        &quot;Free-range&quot;,&#10;        &quot;Animal Welfare&quot;,&#10;        &quot;Sustainable&quot;,&#10;      ], // sharif hossain (poultry)&#10;      &quot;6898578b2fcd466685f715f5&quot;: [&#10;        &quot;Traditional&quot;,&#10;        &quot;Grain Cultivation&quot;,&#10;        &quot;Sustainable&quot;,&#10;      ], // kashem ali (grains)&#10;      farmer_001: [&quot;Traditional&quot;, &quot;Grain Production&quot;, &quot;Natural Beekeeping&quot;], // Abdul fakir (Grains, Honey)&#10;      farmer_002: [&quot;Organic&quot;, &quot;Fruit Cultivation&quot;, &quot;Herb Growing&quot;], // Sufia akhter (Fruits, Herbs)&#10;      farmer_006: [&quot;Hydroponic&quot;, &quot;Organic&quot;, &quot;Sustainable&quot;], // Mostafa Kabir (hydroponic farm)&#10;    };&#10;&#10;    console.log(&quot;1.  FARMERS TO UPDATE:&quot;);&#10;    for (const [farmerId, methods] of Object.entries(farmerMethods)) {&#10;      console.log(`- ${farmerId}: [${methods.join(&quot;, &quot;)}]`);&#10;    }&#10;&#10;    console.log(&quot;\n2.  UPDATING FARMERS WITH FARMING METHODS...&quot;);&#10;&#10;    let successCount = 0;&#10;    let errorCount = 0;&#10;&#10;    for (const [farmerId, methods] of Object.entries(farmerMethods)) {&#10;      try {&#10;        // Check if farmer exists first&#10;        const farmer = await db.collection(&quot;farmers&quot;).findOne({&#10;          _id: farmerId.startsWith('688') || farmerId.startsWith('689') ? new ObjectId(farmerId) : farmerId&#10;        });&#10;&#10;        if (!farmer) {&#10;          console.log(`⚠️  Farmer ${farmerId} not found, skipping...`);&#10;          continue;&#10;        }&#10;&#10;        console.log(`\nUpdating ${farmer.name || &quot;unnamed&quot;} (${farmerId})...`);&#10;&#10;        // Prepare update data&#10;        const updateData = {&#10;          $set: {&#10;            &quot;farmInfo.farmingMethods&quot;: methods,&#10;            updatedAt: new Date(),&#10;          },&#10;        };&#10;&#10;        // If farmInfo doesn't exist, create it&#10;        if (!farmer.farmInfo) {&#10;          updateData.$set.farmInfo = {&#10;            farmName: farmer.farmName || `Farm ${farmerId}`,&#10;            farmDescription: &quot;&quot;,&#10;            farmSize: farmer.farmSize || null,&#10;            farmType: farmer.farmType || &quot;Mixed Farming&quot;,&#10;            certifications: [],&#10;            establishedYear: null,&#10;            farmingMethods: methods,&#10;          };&#10;        }&#10;&#10;        const result = await db&#10;          .collection(&quot;farmers&quot;)&#10;          .updateOne({ _id: farmer._id }, updateData);&#10;&#10;        if (result.modifiedCount &gt; 0) {&#10;          console.log(`  ✅ Updated successfully`);&#10;          successCount++;&#10;        } else {&#10;          console.log(`  ⚠️  No changes made`);&#10;        }&#10;      } catch (error) {&#10;        console.log(`  ❌ Error updating ${farmerId}: ${error.message}`);&#10;        errorCount++;&#10;      }&#10;    }&#10;&#10;    console.log(&quot;\n3.  VERIFYING UPDATES...&quot;);&#10;&#10;    // Verify all farmers now have farming methods&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;&#10;    const farmersWithMethods = [];&#10;    const farmersWithoutMethods = [];&#10;&#10;    allFarmers.forEach((farmer) =&gt; {&#10;      const hasMethods =&#10;        farmer.farmInfo?.farmingMethods &amp;&amp;&#10;        Array.isArray(farmer.farmInfo.farmingMethods) &amp;&amp;&#10;        farmer.farmInfo.farmingMethods.length &gt; 0;&#10;&#10;      if (hasMethods) {&#10;        farmersWithMethods.push(farmer);&#10;      } else {&#10;        farmersWithoutMethods.push(farmer);&#10;      }&#10;    });&#10;&#10;    console.log(`\n4.  FINAL RESULTS:`);&#10;    console.log(&#10;      `✅ Farmers with farming methods: ${farmersWithMethods.length}`,&#10;    );&#10;    farmersWithMethods.forEach((farmer) =&gt; {&#10;      console.log(&#10;        `  - ${farmer.name || &quot;unnamed&quot;}: [${farmer.farmInfo.farmingMethods.join(&quot;, &quot;)}]`,&#10;      );&#10;    });&#10;&#10;    console.log(&#10;      `\n❌ Farmers still without farming methods: ${farmersWithoutMethods.length}`,&#10;    );&#10;    farmersWithoutMethods.forEach((farmer) =&gt; {&#10;      console.log(`  - ${farmer.name || &quot;unnamed&quot;} (${farmer._id})`);&#10;    });&#10;&#10;    console.log(`\n5.  SUMMARY:`);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Successfully updated: ${successCount}`);&#10;    console.log(`Errors: ${errorCount}`);&#10;    console.log(&#10;      `Farmers with methods: ${farmersWithMethods.length} (${((farmersWithMethods.length / allFarmers.length) * 100).toFixed(1)}%)`,&#10;    );&#10;&#10;    if (farmersWithMethods.length === allFarmers.length) {&#10;      console.log(&#10;        `\n SUCCESS! All farmers now have farming methods defined!`,&#10;      );&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;addFarmingMethodsToAllFarmers().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/analyze-fatema-issue.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/analyze-fatema-issue.js" />
              <option name="originalContent" value="&#10;    // Summary and recommendations&#10;    console.log(&quot;\n SUMMARY &amp; RECOMMENDATIONS:&quot;);&#10;&#10;    if (sweetCorn.farmerId !== fatema._id) {&#10;      console.log(&quot;⚠️  Issue: Product farmerId doesn't match Fatema's ID&quot;);&#10;    }&#10;&#10;    if (sweetCorn.farmerEmail !== fatema.email) {&#10;      console.log(&#10;        &quot;⚠️  Issue: Product farmerEmail doesn't match Fatema's email&quot;,&#10;      );&#10;    }&#10;&#10;    if (&#10;      sweetCorn.category === &quot;Vegetables&quot; &amp;&amp;&#10;      sweetCorn.farmerId === fatema._id&#10;    ) {&#10;      console.log(&quot;✅ Product is correctly categorized and linked to Fatema&quot;);&#10;      console.log(&#10;        &quot;❓ Issue might be in the frontend filtering or display logic&quot;,&#10;      );&#10;      console.log(&quot;   Check farmer details page filtering logic for products&quot;);&#10;      console.log(&quot;   Check analytics tab category filtering&quot;);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;  }&#10;}&#10;&#10;analyzeFatemaIssue().catch(console.error);&#10;" />
              <option name="updatedContent" value="&#10;    // Summary and recommendations&#10;    console.log(&quot;\n SUMMARY &amp; RECOMMENDATIONS:&quot;);&#10;&#10;    if (sweetCorn.farmerId !== fatema._id) {&#10;      console.log(&quot;⚠️  Issue: Product farmerId doesn't match Fatema's ID&quot;);&#10;    }&#10;&#10;    if (sweetCorn.farmerEmail !== fatema.email) {&#10;      console.log(&#10;        &quot;⚠️  Issue: Product farmerEmail doesn't match Fatema's email&quot;,&#10;      );&#10;    }&#10;&#10;    if (&#10;      sweetCorn.category === &quot;Vegetables&quot; &amp;&amp;&#10;      sweetCorn.farmerId === fatema._id&#10;    ) {&#10;      console.log(&quot;✅ Product is correctly categorized and linked to Fatema&quot;);&#10;      console.log(&#10;        &quot;❓ Issue might be in the frontend filtering or display logic&quot;,&#10;      );&#10;      console.log(&quot;   Check farmer details page filtering logic for products&quot;);&#10;      console.log(&quot;   Check analytics tab category filtering&quot;);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;  }&#10;}&#10;&#10;analyzeFatemaIssue().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/analytics/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/analytics/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import {&#10;  LineChart,&#10;  Line,&#10;  AreaChart,&#10;  Area,&#10;  BarChart,&#10;  Bar,&#10;  PieChart,&#10;  Pie,&#10;  Cell,&#10;  ScatterChart,&#10;  Scatter,&#10;  RadarChart,&#10;  Radar,&#10;  PolarGrid,&#10;  PolarAngleAxis,&#10;  PolarRadiusAxis,&#10;  XAxis,&#10;  YAxis,&#10;  CartesianGrid,&#10;  Tooltip,&#10;  Legend,&#10;  ResponsiveContainer,&#10;  ComposedChart,&#10;} from &quot;recharts&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import { useOrdersQuery } from &quot;@/hooks/useOrdersQuery&quot;;&#10;&#10;const COLORS = [&#10;  &quot;#10B981&quot;, // Green&#10;  &quot;#3B82F6&quot;, // Blue&#10;  &quot;#8B5CF6&quot;, // Purple&#10;  &quot;#F59E0B&quot;, // Orange&#10;  &quot;#EF4444&quot;, // Red&#10;  &quot;#06B6D4&quot;, // Cyan&#10;  &quot;#84CC16&quot;, // Lime&#10;  &quot;#F97316&quot;, // Orange-600&#10;  &quot;#EC4899&quot;, // Pink&#10;  &quot;#6366F1&quot;, // Indigo&#10;];&#10;&#10;export default function CustomerAnalytics() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Use the same data fetching approach as bookings page&#10;  const userId = session?.user?.id || session?.user?._id;&#10;    Object.keys(session?.user || {}),&#10;  );&#10;&#10;  const {&#10;    data: ordersData,&#10;    isLoading: ordersLoading,&#10;    error: ordersError,&#10;  } = useOrdersQuery(userId, {&#10;    enabled: !!userId,&#10;    enabled: !!userId,&#10;  });&#10;&#10;  const [timeRange, setTimeRange] = useState(&quot;all&quot;);&#10;&#10;  // Handle authentication redirect&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;    }&#10;  const orders = useMemo(() =&gt; ordersData?.orders || [], [ordersData?.orders]);&#10;    console.log(&quot;ANALYTICS DEBUG - Orders length:&quot;, ordersData?.orders?.length);&#10;    return ordersData?.orders || [];&#10;  }, [ordersData?.orders]);&#10;&#10;  // Filter orders by time range&#10;  const filteredOrders = useMemo(() =&gt; {&#10;    // If &quot;all&quot; is selected, return ALL orders without any date filtering (like bookings page)&#10;    if (timeRange === &quot;all&quot;) {&#10;      return orders;&#10;    }&#10;&#10;    const now = new Date();&#10;    const cutoffDate = new Date();&#10;&#10;    switch (timeRange) {&#10;      case &quot;1month&quot;:&#10;        cutoffDate.setMonth(now.getMonth() - 1);&#10;        break;&#10;      case &quot;3months&quot;:&#10;        cutoffDate.setMonth(now.getMonth() - 3);&#10;        break;&#10;      case &quot;6months&quot;:&#10;        cutoffDate.setMonth(now.getMonth() - 6);&#10;        break;&#10;      case &quot;1year&quot;:&#10;        cutoffDate.setFullYear(now.getFullYear() - 1);&#10;        break;&#10;      default:&#10;        return orders; // Default to all orders&#10;    }&#10;&#10;    return orders.filter((order) =&gt; new Date(order.createdAt) &gt;= cutoffDate);&#10;  }, [orders, timeRange]);&#10;&#10;  // Calculate analytics data&#10;  const analyticsData = useMemo(() =&gt; {&#10;    console.log(&quot;Calculating analytics from filtered orders:&quot;, filteredOrders);&#10;    if (!filteredOrders.length) return null;&#10;&#10;    // Monthly spending data&#10;    const monthlyData = {};&#10;    const categoryData = {};&#10;    const farmerData = {};&#10;    const dailyData = {};&#10;&#10;    // Calculate totals first - MATCH BOOKINGS PAGE EXACTLY&#10;    // Bookings page counts ALL orders regardless of status for total count&#10;    const totalOrders = filteredOrders.length;&#10;    const totalSpending = filteredOrders.reduce(&#10;      (sum, order) =&gt; sum + (parseFloat(order.total) || 0), // Use order.total like bookings page&#10;      0,&#10;    );&#10;&#10;    console.log(&quot;ANALYTICS DEBUG - Total calculation:&quot;);&#10;    console.log(`Total orders: ${totalOrders}`);&#10;    console.log(`Total spending: ${totalSpending}`);&#10;    console.log(&#10;      &quot;Order totals:&quot;,&#10;      filteredOrders.map((order) =&gt; ({&#10;        id: order._id,&#10;        total: order.total,&#10;        status: order.status,&#10;      })),&#10;    );&#10;&#10;    filteredOrders.forEach((order) =&gt; {&#10;      // For charts, we still filter by completed statuses to show meaningful trends&#10;      const isCompletedOrder =&#10;        order.status === &quot;delivered&quot; ||&#10;        order.status === &quot;completed&quot; ||&#10;        order.status === &quot;confirmed&quot;;&#10;&#10;      const date = new Date(order.createdAt);&#10;      const month = date.toLocaleDateString(&quot;en-US&quot;, {&#10;        month: &quot;short&quot;,&#10;        year: &quot;numeric&quot;,&#10;      });&#10;      const day = date.toLocaleDateString(&quot;en-US&quot;, {&#10;        month: &quot;short&quot;,&#10;        day: &quot;numeric&quot;,&#10;      });&#10;&#10;      // Use order.total exactly like bookings page&#10;      const total = parseFloat(order.total) || 0;&#10;&#10;      // Monthly aggregation - only for completed orders (for meaningful charts)&#10;      if (isCompletedOrder) {&#10;        if (!monthlyData[month]) {&#10;          monthlyData[month] = { month, spending: 0, orders: 0, items: 0 };&#10;        }&#10;        monthlyData[month].spending += total;&#10;        monthlyData[month].orders += 1;&#10;        monthlyData[month].items += order.items?.length || 0;&#10;&#10;        // Daily aggregation (last 30 days) - only for completed orders&#10;        const thirtyDaysAgo = new Date();&#10;        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;        if (date &gt;= thirtyDaysAgo) {&#10;          if (!dailyData[day]) {&#10;            dailyData[day] = { day, spending: 0, orders: 0 };&#10;          }&#10;          dailyData[day].spending += total;&#10;          dailyData[day].orders += 1;&#10;        }&#10;      }&#10;&#10;      // Category and farmer aggregation - include ALL orders like bookings&#10;      order.items?.forEach((item) =&gt; {&#10;        // Handle different category field locations&#10;        const category =&#10;          item.product?.category ||&#10;          item.category ||&#10;          item.productCategory ||&#10;          &quot;Other&quot;;&#10;        // Handle different price/subtotal fields&#10;        const itemPrice =&#10;          parseFloat(item.price) || parseFloat(item.subtotal) || 0;&#10;        const itemQuantity = parseInt(item.quantity) || 1;&#10;        const itemTotal = itemPrice * itemQuantity;&#10;&#10;        if (!categoryData[category]) {&#10;          categoryData[category] = {&#10;            category,&#10;            spending: 0,&#10;            quantity: 0,&#10;            orders: 0,&#10;          };&#10;        }&#10;        categoryData[category].spending += itemTotal;&#10;        categoryData[category].quantity += itemQuantity;&#10;        categoryData[category].orders += 1;&#10;&#10;        // Farmer aggregation&#10;        const farmerName =&#10;          item.farmerName ||&#10;          item.farmer?.name ||&#10;          item.product?.farmer?.name ||&#10;          item.product?.farmerName ||&#10;          &quot;Unknown Farmer&quot;;&#10;&#10;        if (!farmerData[farmerName]) {&#10;          farmerData[farmerName] = {&#10;            farmer: farmerName,&#10;            spending: 0,&#10;            orders: 0,&#10;            products: new Set(),&#10;          };&#10;        }&#10;        farmerData[farmerName].spending += itemTotal;&#10;        farmerData[farmerName].orders += 1;&#10;        farmerData[farmerName].products.add(&#10;          item.product?.name ||&#10;            item.name ||&#10;            item.productName ||&#10;            &quot;Unknown Product&quot;,&#10;        );&#10;      });&#10;    });&#10;&#10;    // Convert to arrays and sort&#10;    const monthlyArray = Object.values(monthlyData).sort(&#10;      (a, b) =&gt; new Date(a.month) - new Date(b.month),&#10;    );&#10;    const dailyArray = Object.values(dailyData).sort(&#10;      (a, b) =&gt; new Date(a.day) - new Date(b.day),&#10;    );&#10;    const categoryArray = Object.values(categoryData).sort(&#10;      (a, b) =&gt; b.spending - a.spending,&#10;    );&#10;    const farmerArray = Object.values(farmerData)&#10;      .map((farmer) =&gt; ({&#10;        ...farmer,&#10;        products: farmer.products.size,&#10;      }))&#10;      .sort((a, b) =&gt; b.spending - a.spending);&#10;&#10;    const avgOrderValue = totalOrders &gt; 0 ? totalSpending / totalOrders : 0;&#10;    const totalItems = filteredOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.items?.length || 0),&#10;      0,&#10;    );&#10;&#10;    console.log(&quot;Analytics calculated (MATCHING BOOKINGS):&quot;, {&#10;      totalSpending,&#10;      totalOrders,&#10;      avgOrderValue,&#10;      totalItems,&#10;      monthlyData: monthlyArray.length,&#10;      categories: categoryArray.length,&#10;      farmers: farmerArray.length,&#10;    });&#10;&#10;    return {&#10;      monthly: monthlyArray,&#10;      daily: dailyArray,&#10;      categories: categoryArray,&#10;      farmers: farmerArray,&#10;      totals: {&#10;        spending: totalSpending, // This should now match bookings exactly&#10;        orders: totalOrders, // This should now match bookings exactly&#10;        avgOrderValue,&#10;        items: totalItems,&#10;        avgItemsPerOrder: totalOrders &gt; 0 ? totalItems / totalOrders : 0,&#10;      },&#10;    };&#10;  }, [filteredOrders]);&#10;&#10;  // Custom tooltip formatter&#10;  const formatPrice = (value) =&gt; `৳${value?.toFixed(0) || 0}`;&#10;&#10;  if (ordersLoading) return &lt;Loading /&gt;;&#10;  if (ordersError)&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center text-red-600&quot;&gt;&#10;        {error}&#10;      &lt;/div&gt;&#10;    );&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-gray-50 via-green-50 to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 shadow-lg border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-4xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent mb-2&quot;&gt;&#10;                  Shopping Analytics&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;                  Insights into your shopping patterns and preferences&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Time Range Selector */}&#10;              &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                {[&#10;                  { value: &quot;all&quot;, label: &quot;All Time&quot; },&#10;                  { value: &quot;1month&quot;, label: &quot;1 Month&quot; },&#10;                  { value: &quot;3months&quot;, label: &quot;3 Months&quot; },&#10;                  { value: &quot;6months&quot;, label: &quot;6 Months&quot; },&#10;                  { value: &quot;1year&quot;, label: &quot;1 Year&quot; },&#10;                ].map((range) =&gt; (&#10;                  &lt;button&#10;                    key={range.value}&#10;                    onClick={() =&gt; setTimeRange(range.value)}&#10;                    className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${&#10;                      timeRange === range.value&#10;                        ? &quot;bg-green-600 text-white shadow-lg&quot;&#10;                        : &quot;bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600&quot;&#10;                    }`}&#10;                  &gt;&#10;                    {range.label}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {analyticsData ? (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8&quot;&gt;&#10;            {/* Summary Cards */}&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Total Spending&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-green-600&quot;&gt;&#10;                      {formatPrice(analyticsData.totals.spending)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-green-100 dark:bg-green-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-wallet text-green-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Total Orders&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-blue-600&quot;&gt;&#10;                      {analyticsData.totals.orders}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-100 dark:bg-blue-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-shopping-bag text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Avg Order Value&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-purple-600&quot;&gt;&#10;                      {formatPrice(analyticsData.totals.avgOrderValue)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-purple-100 dark:bg-purple-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-chart-line text-purple-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Total Items&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-orange-600&quot;&gt;&#10;                      {analyticsData.totals.items}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-orange-100 dark:bg-orange-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Main Charts Grid */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Monthly Spending Trend */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-3 text-green-600&quot;&gt;&lt;/i&gt;&#10;                  Monthly Spending Trend&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;AreaChart data={analyticsData.monthly}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;month&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis tickFormatter={formatPrice} stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;Tooltip&#10;                      formatter={(value) =&gt; [formatPrice(value), &quot;Spending&quot;]}&#10;                    /&gt;&#10;                    &lt;Area&#10;                      type=&quot;monotone&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      stroke=&quot;#10B981&quot;&#10;                      fill=&quot;url(#spendingGradient)&quot;&#10;                      strokeWidth={3}&#10;                    /&gt;&#10;                    &lt;defs&gt;&#10;                      &lt;linearGradient&#10;                        id=&quot;spendingGradient&quot;&#10;                        x1=&quot;0&quot;&#10;                        y1=&quot;0&quot;&#10;                        x2=&quot;0&quot;&#10;                        y2=&quot;1&quot;&#10;                      &gt;&#10;                        &lt;stop&#10;                          offset=&quot;5%&quot;&#10;                          stopColor=&quot;#10B981&quot;&#10;                          stopOpacity={0.3}&#10;                        /&gt;&#10;                        &lt;stop&#10;                          offset=&quot;95%&quot;&#10;                          stopColor=&quot;#10B981&quot;&#10;                          stopOpacity={0.05}&#10;                        /&gt;&#10;                      &lt;/linearGradient&gt;&#10;                    &lt;/defs&gt;&#10;                  &lt;/AreaChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders vs Spending Correlation */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-bar mr-3 text-blue-600&quot;&gt;&lt;/i&gt;&#10;                  Orders vs Spending&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;ComposedChart data={analyticsData.monthly}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;month&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis&#10;                      yAxisId=&quot;left&quot;&#10;                      tickFormatter={formatPrice}&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;YAxis&#10;                      yAxisId=&quot;right&quot;&#10;                      orientation=&quot;right&quot;&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;Tooltip /&gt;&#10;                    &lt;Bar&#10;                      yAxisId=&quot;left&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      fill=&quot;#3B82F6&quot;&#10;                      name=&quot;Spending&quot;&#10;                    /&gt;&#10;                    &lt;Line&#10;                      yAxisId=&quot;right&quot;&#10;                      type=&quot;monotone&quot;&#10;                      dataKey=&quot;orders&quot;&#10;                      stroke=&quot;#EF4444&quot;&#10;                      strokeWidth={3}&#10;                      name=&quot;Orders&quot;&#10;                    /&gt;&#10;                  &lt;/ComposedChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Category Analysis */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Category Distribution Pie Chart */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-pie mr-3 text-purple-600&quot;&gt;&lt;/i&gt;&#10;                  Spending by Category&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;PieChart&gt;&#10;                    &lt;Pie&#10;                      data={analyticsData.categories.slice(0, 8)}&#10;                      cx=&quot;50%&quot;&#10;                      cy=&quot;50%&quot;&#10;                      outerRadius={100}&#10;                      dataKey=&quot;spending&quot;&#10;                      nameKey=&quot;category&quot;&#10;                      label={({ category, spending }) =&gt;&#10;                        `${category}: ${formatPrice(spending)}`&#10;                      }&#10;                    &gt;&#10;                      {analyticsData.categories&#10;                        .slice(0, 8)&#10;                        .map((entry, index) =&gt; (&#10;                          &lt;Cell&#10;                            key={`cell-${index}`}&#10;                            fill={COLORS[index % COLORS.length]}&#10;                          /&gt;&#10;                        ))}&#10;                    &lt;/Pie&gt;&#10;                    &lt;Tooltip formatter={(value) =&gt; formatPrice(value)} /&gt;&#10;                  &lt;/PieChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Category Quantity Analysis */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-boxes mr-3 text-orange-600&quot;&gt;&lt;/i&gt;&#10;                  Items by Category&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;BarChart&#10;                    data={analyticsData.categories.slice(0, 6)}&#10;                    layout=&quot;horizontal&quot;&#10;                  &gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis type=&quot;number&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis&#10;                      dataKey=&quot;category&quot;&#10;                      type=&quot;category&quot;&#10;                      width={80}&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;Tooltip /&gt;&#10;                    &lt;Bar dataKey=&quot;quantity&quot; fill=&quot;#F59E0B&quot; /&gt;&#10;                  &lt;/BarChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Daily Activity &amp; Farmer Analysis */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Daily Spending Pattern (Last 30 Days) */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-calendar-day mr-3 text-cyan-600&quot;&gt;&lt;/i&gt;&#10;                  Daily Activity (Last 30 Days)&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;LineChart data={analyticsData.daily}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;day&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis tickFormatter={formatPrice} stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;Tooltip&#10;                      formatter={(value) =&gt; [&#10;                        formatPrice(value),&#10;                        &quot;Daily Spending&quot;,&#10;                      ]}&#10;                    /&gt;&#10;                    &lt;Line&#10;                      type=&quot;monotone&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      stroke=&quot;#06B6D4&quot;&#10;                      strokeWidth={2}&#10;                      dot={{ fill: &quot;#06B6D4&quot;, strokeWidth: 2, r: 4 }}&#10;                      activeDot={{ r: 6, stroke: &quot;#06B6D4&quot; }}&#10;                    /&gt;&#10;                  &lt;/LineChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Top Farmers */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-user-friends mr-3 text-green-600&quot;&gt;&lt;/i&gt;&#10;                  Favorite Farmers&#10;                &lt;/h3&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {analyticsData.farmers.slice(0, 5).map((farmer, index) =&gt; (&#10;                    &lt;div&#10;                      key={farmer.farmer}&#10;                      className=&quot;flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div&#10;                          className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold`}&#10;                          style={{&#10;                            backgroundColor: COLORS[index % COLORS.length],&#10;                          }}&#10;                        &gt;&#10;                          {index + 1}&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                            {farmer.farmer}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {farmer.orders} orders • {farmer.products} products&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;p className=&quot;font-bold text-green-600&quot;&gt;&#10;                        {formatPrice(farmer.spending)}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Advanced Analytics */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Shopping Pattern Radar */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-radar mr-3 text-indigo-600&quot;&gt;&lt;/i&gt;&#10;                  Shopping Pattern Analysis&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;RadarChart&#10;                    data={analyticsData.categories.slice(0, 6).map((cat) =&gt; ({&#10;                      category: cat.category,&#10;                      spending: cat.spending / 100, // Normalize for better visualization&#10;                      frequency: cat.orders,&#10;                      quantity: cat.quantity / 10, // Normalize&#10;                    }))}&#10;                  &gt;&#10;                    &lt;PolarGrid /&gt;&#10;                    &lt;PolarAngleAxis dataKey=&quot;category&quot; /&gt;&#10;                    &lt;PolarRadiusAxis /&gt;&#10;                    &lt;Radar&#10;                      name=&quot;Spending&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      stroke=&quot;#8B5CF6&quot;&#10;                      fill=&quot;#8B5CF6&quot;&#10;                      fillOpacity={0.3}&#10;                    /&gt;&#10;                    &lt;Radar&#10;                      name=&quot;Frequency&quot;&#10;                      dataKey=&quot;frequency&quot;&#10;                      stroke=&quot;#3B82F6&quot;&#10;                      fill=&quot;#3B82F6&quot;&#10;                      fillOpacity={0.2}&#10;                    /&gt;&#10;                    &lt;Tooltip /&gt;&#10;                    &lt;Legend /&gt;&#10;                  &lt;/RadarChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Order Value Distribution */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-scatter mr-3 text-pink-600&quot;&gt;&lt;/i&gt;&#10;                  Order Value vs Items&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;ScatterChart data={analyticsData.monthly}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;items&quot; name=&quot;Items&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis&#10;                      dataKey=&quot;spending&quot;&#10;                      name=&quot;Spending&quot;&#10;                      tickFormatter={formatPrice}&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;Tooltip&#10;                      formatter={(value, name) =&gt; [&#10;                        name === &quot;spending&quot; ? formatPrice(value) : value,&#10;                        name === &quot;spending&quot; ? &quot;Spending&quot; : &quot;Items&quot;,&#10;                      ]}&#10;                    /&gt;&#10;                    &lt;Scatter dataKey=&quot;spending&quot; fill=&quot;#EC4899&quot; /&gt;&#10;                  &lt;/ScatterChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Insights Section */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-lightbulb mr-3 text-yellow-500&quot;&gt;&lt;/i&gt;&#10;                Shopping Insights&#10;              &lt;/h3&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                &lt;div className=&quot;p-4 bg-green-50 dark:bg-green-900/20 rounded-xl border border-green-200 dark:border-green-700&quot;&gt;&#10;                  &lt;h4 className=&quot;font-semibold text-green-800 dark:text-green-300 mb-2&quot;&gt;&#10;                    Most Purchased Category&#10;                  &lt;/h4&gt;&#10;                  &lt;p className=&quot;text-green-700 dark:text-green-400&quot;&gt;&#10;                    {analyticsData.categories[0]?.category || &quot;N/A&quot;} -{&quot; &quot;}&#10;                    {formatPrice(analyticsData.categories[0]?.spending || 0)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl border border-blue-200 dark:border-blue-700&quot;&gt;&#10;                  &lt;h4 className=&quot;font-semibold text-blue-800 dark:text-blue-300 mb-2&quot;&gt;&#10;                    Favorite Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;p className=&quot;text-blue-700 dark:text-blue-400&quot;&gt;&#10;                    {analyticsData.farmers[0]?.farmer || &quot;N/A&quot;} -{&quot; &quot;}&#10;                    {formatPrice(analyticsData.farmers[0]?.spending || 0)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;p-4 bg-purple-50 dark:bg-purple-900/20 rounded-xl border border-purple-200 dark:border-purple-700&quot;&gt;&#10;                  &lt;h4 className=&quot;font-semibold text-purple-800 dark:text-purple-300 mb-2&quot;&gt;&#10;                    Shopping Frequency&#10;                  &lt;/h4&gt;&#10;                  &lt;p className=&quot;text-purple-700 dark:text-purple-400&quot;&gt;&#10;                    {(&#10;                      analyticsData.totals.orders /&#10;                      (analyticsData.monthly.length || 1)&#10;                    ).toFixed(1)}{&quot; &quot;}&#10;                    orders/month&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center&quot;&gt;&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-12 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;i className=&quot;fas fa-chart-line text-6xl text-gray-400 mb-6&quot;&gt;&lt;/i&gt;&#10;              &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                No Data Available&#10;              &lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;                Start shopping to see your analytics and insights!&#10;              &lt;/p&gt;&#10;              &lt;button&#10;                onClick={() =&gt; router.push(&quot;/products&quot;)}&#10;                className=&quot;px-8 py-3 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-xl font-medium hover:from-green-700 hover:to-blue-700 transition-all duration-200&quot;&#10;              &gt;&#10;                Start Shopping&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import {&#10;  LineChart,&#10;  Line,&#10;  AreaChart,&#10;  Area,&#10;  BarChart,&#10;  Bar,&#10;  PieChart,&#10;  Pie,&#10;  Cell,&#10;  ScatterChart,&#10;  Scatter,&#10;  RadarChart,&#10;  Radar,&#10;  PolarGrid,&#10;  PolarAngleAxis,&#10;  PolarRadiusAxis,&#10;  XAxis,&#10;  YAxis,&#10;  CartesianGrid,&#10;  Tooltip,&#10;  Legend,&#10;  ResponsiveContainer,&#10;  ComposedChart,&#10;} from &quot;recharts&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import { useOrdersQuery } from &quot;@/hooks/useOrdersQuery&quot;;&#10;&#10;const COLORS = [&#10;  &quot;#10B981&quot;, // Green&#10;  &quot;#3B82F6&quot;, // Blue&#10;  &quot;#8B5CF6&quot;, // Purple&#10;  &quot;#F59E0B&quot;, // Orange&#10;  &quot;#EF4444&quot;, // Red&#10;  &quot;#06B6D4&quot;, // Cyan&#10;  &quot;#84CC16&quot;, // Lime&#10;  &quot;#F97316&quot;, // Orange-600&#10;  &quot;#EC4899&quot;, // Pink&#10;  &quot;#6366F1&quot;, // Indigo&#10;];&#10;&#10;export default function CustomerAnalytics() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Use the same data fetching approach as bookings page&#10;  const userId = session?.user?.userId || session?.user?.id || session?.user?._id;&#10;  console.log(&quot;ANALYTICS DEBUG - Session:&quot;, session);&#10;  console.log(&quot;ANALYTICS DEBUG - Session.user:&quot;, session?.user);&#10;  console.log(&quot;ANALYTICS DEBUG - Status:&quot;, status);&#10;  console.log(&quot;ANALYTICS DEBUG - UserId:&quot;, userId);&#10;  console.log(&#10;    &quot;ANALYTICS DEBUG - Available user fields:&quot;,&#10;    Object.keys(session?.user || {}),&#10;  );&#10;&#10;  const {&#10;    data: ordersData,&#10;    isLoading: ordersLoading,&#10;    error: ordersError,&#10;  } = useOrdersQuery(userId, {&#10;    enabled: !!userId,&#10;    staleTime: 5 * 60 * 1000, // 5 minutes&#10;  });&#10;&#10;  console.log(&quot;ANALYTICS DEBUG - useOrdersQuery state:&quot;, {&#10;    ordersData,&#10;    isLoading: ordersLoading,&#10;    error: ordersError,&#10;    enabled: !!userId,&#10;  });&#10;&#10;  const [timeRange, setTimeRange] = useState(&quot;all&quot;);&#10;&#10;  // Handle authentication redirect&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;    }&#10;  }, [status, router]);&#10;&#10;  // Get orders from React Query and memoize to prevent dependency issues&#10;  const orders = useMemo(() =&gt; {&#10;    console.log(&quot;ANALYTICS DEBUG - Orders data:&quot;, ordersData);&#10;    console.log(&quot;ANALYTICS DEBUG - Orders array:&quot;, ordersData?.orders);&#10;    console.log(&quot;ANALYTICS DEBUG - Orders length:&quot;, ordersData?.orders?.length);&#10;    return ordersData?.orders || [];&#10;  }, [ordersData?.orders]);&#10;&#10;  // Filter orders by time range&#10;  const filteredOrders = useMemo(() =&gt; {&#10;    // If &quot;all&quot; is selected, return ALL orders without any date filtering (like bookings page)&#10;    if (timeRange === &quot;all&quot;) {&#10;      return orders;&#10;    }&#10;&#10;    const now = new Date();&#10;    const cutoffDate = new Date();&#10;&#10;    switch (timeRange) {&#10;      case &quot;1month&quot;:&#10;        cutoffDate.setMonth(now.getMonth() - 1);&#10;        break;&#10;      case &quot;3months&quot;:&#10;        cutoffDate.setMonth(now.getMonth() - 3);&#10;        break;&#10;      case &quot;6months&quot;:&#10;        cutoffDate.setMonth(now.getMonth() - 6);&#10;        break;&#10;      case &quot;1year&quot;:&#10;        cutoffDate.setFullYear(now.getFullYear() - 1);&#10;        break;&#10;      default:&#10;        return orders; // Default to all orders&#10;    }&#10;&#10;    return orders.filter((order) =&gt; new Date(order.createdAt) &gt;= cutoffDate);&#10;  }, [orders, timeRange]);&#10;&#10;  // Calculate analytics data&#10;  const analyticsData = useMemo(() =&gt; {&#10;    console.log(&quot;Calculating analytics from filtered orders:&quot;, filteredOrders);&#10;    if (!filteredOrders.length) return null;&#10;&#10;    // Monthly spending data&#10;    const monthlyData = {};&#10;    const categoryData = {};&#10;    const farmerData = {};&#10;    const dailyData = {};&#10;&#10;    // Calculate totals first - MATCH BOOKINGS PAGE EXACTLY&#10;    // Bookings page counts ALL orders regardless of status for total count&#10;    const totalOrders = filteredOrders.length;&#10;    const totalSpending = filteredOrders.reduce(&#10;      (sum, order) =&gt; sum + (parseFloat(order.total) || 0), // Use order.total like bookings page&#10;      0,&#10;    );&#10;&#10;    console.log(&quot;ANALYTICS DEBUG - Total calculation:&quot;);&#10;    console.log(`Total orders: ${totalOrders}`);&#10;    console.log(`Total spending: ${totalSpending}`);&#10;    console.log(&#10;      &quot;Order totals:&quot;,&#10;      filteredOrders.map((order) =&gt; ({&#10;        id: order._id,&#10;        total: order.total,&#10;        status: order.status,&#10;      })),&#10;    );&#10;&#10;    filteredOrders.forEach((order) =&gt; {&#10;      // For charts, we still filter by completed statuses to show meaningful trends&#10;      const isCompletedOrder =&#10;        order.status === &quot;delivered&quot; ||&#10;        order.status === &quot;completed&quot; ||&#10;        order.status === &quot;confirmed&quot;;&#10;&#10;      const date = new Date(order.createdAt);&#10;      const month = date.toLocaleDateString(&quot;en-US&quot;, {&#10;        month: &quot;short&quot;,&#10;        year: &quot;numeric&quot;,&#10;      });&#10;      const day = date.toLocaleDateString(&quot;en-US&quot;, {&#10;        month: &quot;short&quot;,&#10;        day: &quot;numeric&quot;,&#10;      });&#10;&#10;      // Use order.total exactly like bookings page&#10;      const total = parseFloat(order.total) || 0;&#10;&#10;      // Monthly aggregation - only for completed orders (for meaningful charts)&#10;      if (isCompletedOrder) {&#10;        if (!monthlyData[month]) {&#10;          monthlyData[month] = { month, spending: 0, orders: 0, items: 0 };&#10;        }&#10;        monthlyData[month].spending += total;&#10;        monthlyData[month].orders += 1;&#10;        monthlyData[month].items += order.items?.length || 0;&#10;&#10;        // Daily aggregation (last 30 days) - only for completed orders&#10;        const thirtyDaysAgo = new Date();&#10;        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;        if (date &gt;= thirtyDaysAgo) {&#10;          if (!dailyData[day]) {&#10;            dailyData[day] = { day, spending: 0, orders: 0 };&#10;          }&#10;          dailyData[day].spending += total;&#10;          dailyData[day].orders += 1;&#10;        }&#10;      }&#10;&#10;      // Category and farmer aggregation - include ALL orders like bookings&#10;      order.items?.forEach((item) =&gt; {&#10;        // Handle different category field locations&#10;        const category =&#10;          item.product?.category ||&#10;          item.category ||&#10;          item.productCategory ||&#10;          &quot;Other&quot;;&#10;        // Handle different price/subtotal fields&#10;        const itemPrice =&#10;          parseFloat(item.price) || parseFloat(item.subtotal) || 0;&#10;        const itemQuantity = parseInt(item.quantity) || 1;&#10;        const itemTotal = itemPrice * itemQuantity;&#10;&#10;        if (!categoryData[category]) {&#10;          categoryData[category] = {&#10;            category,&#10;            spending: 0,&#10;            quantity: 0,&#10;            orders: 0,&#10;          };&#10;        }&#10;        categoryData[category].spending += itemTotal;&#10;        categoryData[category].quantity += itemQuantity;&#10;        categoryData[category].orders += 1;&#10;&#10;        // Farmer aggregation&#10;        const farmerName =&#10;          item.farmerName ||&#10;          item.farmer?.name ||&#10;          item.product?.farmer?.name ||&#10;          item.product?.farmerName ||&#10;          &quot;Unknown Farmer&quot;;&#10;&#10;        if (!farmerData[farmerName]) {&#10;          farmerData[farmerName] = {&#10;            farmer: farmerName,&#10;            spending: 0,&#10;            orders: 0,&#10;            products: new Set(),&#10;          };&#10;        }&#10;        farmerData[farmerName].spending += itemTotal;&#10;        farmerData[farmerName].orders += 1;&#10;        farmerData[farmerName].products.add(&#10;          item.product?.name ||&#10;            item.name ||&#10;            item.productName ||&#10;            &quot;Unknown Product&quot;,&#10;        );&#10;      });&#10;    });&#10;&#10;    // Convert to arrays and sort&#10;    const monthlyArray = Object.values(monthlyData).sort(&#10;      (a, b) =&gt; new Date(a.month) - new Date(b.month),&#10;    );&#10;    const dailyArray = Object.values(dailyData).sort(&#10;      (a, b) =&gt; new Date(a.day) - new Date(b.day),&#10;    );&#10;    const categoryArray = Object.values(categoryData).sort(&#10;      (a, b) =&gt; b.spending - a.spending,&#10;    );&#10;    const farmerArray = Object.values(farmerData)&#10;      .map((farmer) =&gt; ({&#10;        ...farmer,&#10;        products: farmer.products.size,&#10;      }))&#10;      .sort((a, b) =&gt; b.spending - a.spending);&#10;&#10;    const avgOrderValue = totalOrders &gt; 0 ? totalSpending / totalOrders : 0;&#10;    const totalItems = filteredOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.items?.length || 0),&#10;      0,&#10;    );&#10;&#10;    console.log(&quot;Analytics calculated (MATCHING BOOKINGS):&quot;, {&#10;      totalSpending,&#10;      totalOrders,&#10;      avgOrderValue,&#10;      totalItems,&#10;      monthlyData: monthlyArray.length,&#10;      categories: categoryArray.length,&#10;      farmers: farmerArray.length,&#10;    });&#10;&#10;    return {&#10;      monthly: monthlyArray,&#10;      daily: dailyArray,&#10;      categories: categoryArray,&#10;      farmers: farmerArray,&#10;      totals: {&#10;        spending: totalSpending, // This should now match bookings exactly&#10;        orders: totalOrders, // This should now match bookings exactly&#10;        avgOrderValue,&#10;        items: totalItems,&#10;        avgItemsPerOrder: totalOrders &gt; 0 ? totalItems / totalOrders : 0,&#10;      },&#10;    };&#10;  }, [filteredOrders]);&#10;&#10;  // Custom tooltip formatter&#10;  const formatPrice = (value) =&gt; `৳${value?.toFixed(0) || 0}`;&#10;&#10;  if (ordersLoading) return &lt;Loading /&gt;;&#10;  if (ordersError)&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center text-red-600&quot;&gt;&#10;        {error}&#10;      &lt;/div&gt;&#10;    );&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-gray-50 via-green-50 to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 shadow-lg border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-4xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent mb-2&quot;&gt;&#10;                  Shopping Analytics&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;                  Insights into your shopping patterns and preferences&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Time Range Selector */}&#10;              &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                {[&#10;                  { value: &quot;all&quot;, label: &quot;All Time&quot; },&#10;                  { value: &quot;1month&quot;, label: &quot;1 Month&quot; },&#10;                  { value: &quot;3months&quot;, label: &quot;3 Months&quot; },&#10;                  { value: &quot;6months&quot;, label: &quot;6 Months&quot; },&#10;                  { value: &quot;1year&quot;, label: &quot;1 Year&quot; },&#10;                ].map((range) =&gt; (&#10;                  &lt;button&#10;                    key={range.value}&#10;                    onClick={() =&gt; setTimeRange(range.value)}&#10;                    className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${&#10;                      timeRange === range.value&#10;                        ? &quot;bg-green-600 text-white shadow-lg&quot;&#10;                        : &quot;bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600&quot;&#10;                    }`}&#10;                  &gt;&#10;                    {range.label}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {analyticsData ? (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8&quot;&gt;&#10;            {/* Summary Cards */}&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Total Spending&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-green-600&quot;&gt;&#10;                      {formatPrice(analyticsData.totals.spending)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-green-100 dark:bg-green-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-wallet text-green-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Total Orders&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-blue-600&quot;&gt;&#10;                      {analyticsData.totals.orders}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-100 dark:bg-blue-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-shopping-bag text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Avg Order Value&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-purple-600&quot;&gt;&#10;                      {formatPrice(analyticsData.totals.avgOrderValue)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-purple-100 dark:bg-purple-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-chart-line text-purple-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Total Items&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-3xl font-bold text-orange-600&quot;&gt;&#10;                      {analyticsData.totals.items}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;p-3 bg-orange-100 dark:bg-orange-900/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Main Charts Grid */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Monthly Spending Trend */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-3 text-green-600&quot;&gt;&lt;/i&gt;&#10;                  Monthly Spending Trend&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;AreaChart data={analyticsData.monthly}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;month&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis tickFormatter={formatPrice} stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;Tooltip&#10;                      formatter={(value) =&gt; [formatPrice(value), &quot;Spending&quot;]}&#10;                    /&gt;&#10;                    &lt;Area&#10;                      type=&quot;monotone&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      stroke=&quot;#10B981&quot;&#10;                      fill=&quot;url(#spendingGradient)&quot;&#10;                      strokeWidth={3}&#10;                    /&gt;&#10;                    &lt;defs&gt;&#10;                      &lt;linearGradient&#10;                        id=&quot;spendingGradient&quot;&#10;                        x1=&quot;0&quot;&#10;                        y1=&quot;0&quot;&#10;                        x2=&quot;0&quot;&#10;                        y2=&quot;1&quot;&#10;                      &gt;&#10;                        &lt;stop&#10;                          offset=&quot;5%&quot;&#10;                          stopColor=&quot;#10B981&quot;&#10;                          stopOpacity={0.3}&#10;                        /&gt;&#10;                        &lt;stop&#10;                          offset=&quot;95%&quot;&#10;                          stopColor=&quot;#10B981&quot;&#10;                          stopOpacity={0.05}&#10;                        /&gt;&#10;                      &lt;/linearGradient&gt;&#10;                    &lt;/defs&gt;&#10;                  &lt;/AreaChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders vs Spending Correlation */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-bar mr-3 text-blue-600&quot;&gt;&lt;/i&gt;&#10;                  Orders vs Spending&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;ComposedChart data={analyticsData.monthly}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;month&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis&#10;                      yAxisId=&quot;left&quot;&#10;                      tickFormatter={formatPrice}&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;YAxis&#10;                      yAxisId=&quot;right&quot;&#10;                      orientation=&quot;right&quot;&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;Tooltip /&gt;&#10;                    &lt;Bar&#10;                      yAxisId=&quot;left&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      fill=&quot;#3B82F6&quot;&#10;                      name=&quot;Spending&quot;&#10;                    /&gt;&#10;                    &lt;Line&#10;                      yAxisId=&quot;right&quot;&#10;                      type=&quot;monotone&quot;&#10;                      dataKey=&quot;orders&quot;&#10;                      stroke=&quot;#EF4444&quot;&#10;                      strokeWidth={3}&#10;                      name=&quot;Orders&quot;&#10;                    /&gt;&#10;                  &lt;/ComposedChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Category Analysis */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Category Distribution Pie Chart */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-pie mr-3 text-purple-600&quot;&gt;&lt;/i&gt;&#10;                  Spending by Category&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;PieChart&gt;&#10;                    &lt;Pie&#10;                      data={analyticsData.categories.slice(0, 8)}&#10;                      cx=&quot;50%&quot;&#10;                      cy=&quot;50%&quot;&#10;                      outerRadius={100}&#10;                      dataKey=&quot;spending&quot;&#10;                      nameKey=&quot;category&quot;&#10;                      label={({ category, spending }) =&gt;&#10;                        `${category}: ${formatPrice(spending)}`&#10;                      }&#10;                    &gt;&#10;                      {analyticsData.categories&#10;                        .slice(0, 8)&#10;                        .map((entry, index) =&gt; (&#10;                          &lt;Cell&#10;                            key={`cell-${index}`}&#10;                            fill={COLORS[index % COLORS.length]}&#10;                          /&gt;&#10;                        ))}&#10;                    &lt;/Pie&gt;&#10;                    &lt;Tooltip formatter={(value) =&gt; formatPrice(value)} /&gt;&#10;                  &lt;/PieChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Category Quantity Analysis */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-boxes mr-3 text-orange-600&quot;&gt;&lt;/i&gt;&#10;                  Items by Category&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;BarChart&#10;                    data={analyticsData.categories.slice(0, 6)}&#10;                    layout=&quot;horizontal&quot;&#10;                  &gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis type=&quot;number&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis&#10;                      dataKey=&quot;category&quot;&#10;                      type=&quot;category&quot;&#10;                      width={80}&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;Tooltip /&gt;&#10;                    &lt;Bar dataKey=&quot;quantity&quot; fill=&quot;#F59E0B&quot; /&gt;&#10;                  &lt;/BarChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Daily Activity &amp; Farmer Analysis */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Daily Spending Pattern (Last 30 Days) */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-calendar-day mr-3 text-cyan-600&quot;&gt;&lt;/i&gt;&#10;                  Daily Activity (Last 30 Days)&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;LineChart data={analyticsData.daily}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;day&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis tickFormatter={formatPrice} stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;Tooltip&#10;                      formatter={(value) =&gt; [&#10;                        formatPrice(value),&#10;                        &quot;Daily Spending&quot;,&#10;                      ]}&#10;                    /&gt;&#10;                    &lt;Line&#10;                      type=&quot;monotone&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      stroke=&quot;#06B6D4&quot;&#10;                      strokeWidth={2}&#10;                      dot={{ fill: &quot;#06B6D4&quot;, strokeWidth: 2, r: 4 }}&#10;                      activeDot={{ r: 6, stroke: &quot;#06B6D4&quot; }}&#10;                    /&gt;&#10;                  &lt;/LineChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Top Farmers */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-user-friends mr-3 text-green-600&quot;&gt;&lt;/i&gt;&#10;                  Favorite Farmers&#10;                &lt;/h3&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {analyticsData.farmers.slice(0, 5).map((farmer, index) =&gt; (&#10;                    &lt;div&#10;                      key={farmer.farmer}&#10;                      className=&quot;flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div&#10;                          className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold`}&#10;                          style={{&#10;                            backgroundColor: COLORS[index % COLORS.length],&#10;                          }}&#10;                        &gt;&#10;                          {index + 1}&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                            {farmer.farmer}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {farmer.orders} orders • {farmer.products} products&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;p className=&quot;font-bold text-green-600&quot;&gt;&#10;                        {formatPrice(farmer.spending)}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Advanced Analytics */}&#10;            &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;              {/* Shopping Pattern Radar */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-radar mr-3 text-indigo-600&quot;&gt;&lt;/i&gt;&#10;                  Shopping Pattern Analysis&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;RadarChart&#10;                    data={analyticsData.categories.slice(0, 6).map((cat) =&gt; ({&#10;                      category: cat.category,&#10;                      spending: cat.spending / 100, // Normalize for better visualization&#10;                      frequency: cat.orders,&#10;                      quantity: cat.quantity / 10, // Normalize&#10;                    }))}&#10;                  &gt;&#10;                    &lt;PolarGrid /&gt;&#10;                    &lt;PolarAngleAxis dataKey=&quot;category&quot; /&gt;&#10;                    &lt;PolarRadiusAxis /&gt;&#10;                    &lt;Radar&#10;                      name=&quot;Spending&quot;&#10;                      dataKey=&quot;spending&quot;&#10;                      stroke=&quot;#8B5CF6&quot;&#10;                      fill=&quot;#8B5CF6&quot;&#10;                      fillOpacity={0.3}&#10;                    /&gt;&#10;                    &lt;Radar&#10;                      name=&quot;Frequency&quot;&#10;                      dataKey=&quot;frequency&quot;&#10;                      stroke=&quot;#3B82F6&quot;&#10;                      fill=&quot;#3B82F6&quot;&#10;                      fillOpacity={0.2}&#10;                    /&gt;&#10;                    &lt;Tooltip /&gt;&#10;                    &lt;Legend /&gt;&#10;                  &lt;/RadarChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Order Value Distribution */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-scatter mr-3 text-pink-600&quot;&gt;&lt;/i&gt;&#10;                  Order Value vs Items&#10;                &lt;/h3&gt;&#10;                &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                  &lt;ScatterChart data={analyticsData.monthly}&gt;&#10;                    &lt;CartesianGrid strokeDasharray=&quot;3 3&quot; stroke=&quot;#e5e7eb&quot; /&gt;&#10;                    &lt;XAxis dataKey=&quot;items&quot; name=&quot;Items&quot; stroke=&quot;#6b7280&quot; /&gt;&#10;                    &lt;YAxis&#10;                      dataKey=&quot;spending&quot;&#10;                      name=&quot;Spending&quot;&#10;                      tickFormatter={formatPrice}&#10;                      stroke=&quot;#6b7280&quot;&#10;                    /&gt;&#10;                    &lt;Tooltip&#10;                      formatter={(value, name) =&gt; [&#10;                        name === &quot;spending&quot; ? formatPrice(value) : value,&#10;                        name === &quot;spending&quot; ? &quot;Spending&quot; : &quot;Items&quot;,&#10;                      ]}&#10;                    /&gt;&#10;                    &lt;Scatter dataKey=&quot;spending&quot; fill=&quot;#EC4899&quot; /&gt;&#10;                  &lt;/ScatterChart&gt;&#10;                &lt;/ResponsiveContainer&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Insights Section */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-lightbulb mr-3 text-yellow-500&quot;&gt;&lt;/i&gt;&#10;                Shopping Insights&#10;              &lt;/h3&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                &lt;div className=&quot;p-4 bg-green-50 dark:bg-green-900/20 rounded-xl border border-green-200 dark:border-green-700&quot;&gt;&#10;                  &lt;h4 className=&quot;font-semibold text-green-800 dark:text-green-300 mb-2&quot;&gt;&#10;                    Most Purchased Category&#10;                  &lt;/h4&gt;&#10;                  &lt;p className=&quot;text-green-700 dark:text-green-400&quot;&gt;&#10;                    {analyticsData.categories[0]?.category || &quot;N/A&quot;} -{&quot; &quot;}&#10;                    {formatPrice(analyticsData.categories[0]?.spending || 0)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl border border-blue-200 dark:border-blue-700&quot;&gt;&#10;                  &lt;h4 className=&quot;font-semibold text-blue-800 dark:text-blue-300 mb-2&quot;&gt;&#10;                    Favorite Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;p className=&quot;text-blue-700 dark:text-blue-400&quot;&gt;&#10;                    {analyticsData.farmers[0]?.farmer || &quot;N/A&quot;} -{&quot; &quot;}&#10;                    {formatPrice(analyticsData.farmers[0]?.spending || 0)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;p-4 bg-purple-50 dark:bg-purple-900/20 rounded-xl border border-purple-200 dark:border-purple-700&quot;&gt;&#10;                  &lt;h4 className=&quot;font-semibold text-purple-800 dark:text-purple-300 mb-2&quot;&gt;&#10;                    Shopping Frequency&#10;                  &lt;/h4&gt;&#10;                  &lt;p className=&quot;text-purple-700 dark:text-purple-400&quot;&gt;&#10;                    {(&#10;                      analyticsData.totals.orders /&#10;                      (analyticsData.monthly.length || 1)&#10;                    ).toFixed(1)}{&quot; &quot;}&#10;                    orders/month&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center&quot;&gt;&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-12 shadow-xl border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;i className=&quot;fas fa-chart-line text-6xl text-gray-400 mb-6&quot;&gt;&lt;/i&gt;&#10;              &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                No Data Available&#10;              &lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;                Start shopping to see your analytics and insights!&#10;              &lt;/p&gt;&#10;              &lt;button&#10;                onClick={() =&gt; router.push(&quot;/products&quot;)}&#10;                className=&quot;px-8 py-3 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-xl font-medium hover:from-green-700 hover:to-blue-700 transition-all duration-200&quot;&#10;              &gt;&#10;                Start Shopping&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/debug/clear-cache/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/debug/clear-cache/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import { responseCache, clearProductsCache, clearAllProductsCaches } from &quot;@/app/api/products/route&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST() {&#10;  try {&#10;    console.log(' Starting cache clear process...');&#10;    &#10;    // Clear all product caches&#10;    clearAllProductsCaches();&#10;    console.log('✅ Cleared all products caches');&#10;    &#10;    // Also clear the response cache directly&#10;    if (responseCache &amp;&amp; typeof responseCache.clear === 'function') {&#10;      responseCache.clear();&#10;      console.log('✅ Cleared response cache');&#10;    }&#10;    &#10;    // Verify current Green Beans data from database&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log('\n VERIFYING CURRENT GREEN BEANS DATA:');&#10;    const greenBeans = await db.collection('products').findOne({&#10;      name: 'Green Beans'&#10;    });&#10;    &#10;    let greenBeansInfo = null;&#10;    if (greenBeans) {&#10;      greenBeansInfo = {&#10;        name: greenBeans.name,&#10;        farmerId: greenBeans.farmerId,&#10;        farmerEmail: greenBeans.farmerEmail,&#10;        farmerName: greenBeans.farmerName,&#10;        embeddedFarmerId: greenBeans.farmer?._id,&#10;        embeddedFarmerName: greenBeans.farmer?.name,&#10;        embeddedFarmerEmail: greenBeans.farmer?.email&#10;      };&#10;      console.log('Green Beans current data:', greenBeansInfo);&#10;    }&#10;    &#10;    // Check Mostafa's current products&#10;    console.log('\n CHECKING MOSTAFA\'S CURRENT PRODUCTS:');&#10;    const mostafaProducts = await db.collection('products').find({&#10;      $or: [&#10;        { farmerId: 'farmer_006' },&#10;        { 'farmer._id': 'farmer_006' },&#10;        { farmerName: 'Mostafa Kabir' }&#10;      ]&#10;    }).toArray();&#10;    &#10;    const mostafaProductsList = mostafaProducts.map(product =&gt; ({&#10;      name: product.name,&#10;      farmerId: product.farmerId,&#10;      farmerName: product.farmerName || product.farmer?.name&#10;    }));&#10;    &#10;    console.log(`Found ${mostafaProducts.length} products for Mostafa Kabir:`, mostafaProductsList);&#10;    &#10;    // Check Mizanur's current products  &#10;    console.log('\n CHECKING MIZANUR\'S CURRENT PRODUCTS:');&#10;    const mizanurProducts = await db.collection('products').find({&#10;      $or: [&#10;        { farmerId: 'farmer_005' },&#10;        { 'farmer._id': 'farmer_005' },&#10;        { farmerName: 'Mizanur Rahman' }&#10;      ]&#10;    }).toArray();&#10;    &#10;    const mizanurProductsList = mizanurProducts.map(product =&gt; ({&#10;      name: product.name,&#10;      farmerId: product.farmerId,&#10;      farmerName: product.farmerName || product.farmer?.name&#10;    }));&#10;    &#10;    console.log(`Found ${mizanurProducts.length} products for Mizanur Rahman:`, mizanurProductsList);&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: 'Cache cleared successfully',&#10;      data: {&#10;        greenBeansInfo,&#10;        mostafaProductsCount: mostafaProducts.length,&#10;        mostafaProducts: mostafaProductsList,&#10;        mizanurProductsCount: mizanurProducts.length,&#10;        mizanurProducts: mizanurProductsList,&#10;        cacheCleared: true,&#10;        timestamp: new Date().toISOString()&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Error clearing cache:', error);&#10;    return NextResponse.json({&#10;      success: false,&#10;      error: error.message,&#10;      message: 'Failed to clear cache'&#10;    }, { status: 500 });&#10;  }&#10;}&#10;&#10;export async function GET() {&#10;  try {&#10;    // Just return current cache status and data verification&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    const greenBeans = await db.collection('products').findOne({&#10;      name: 'Green Beans'&#10;    });&#10;    &#10;    const mostafaProducts = await db.collection('products').find({&#10;      $or: [&#10;        { farmerId: 'farmer_006' },&#10;        { 'farmer._id': 'farmer_006' },&#10;        { farmerName: 'Mostafa Kabir' }&#10;      ]&#10;    }).toArray();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      data: {&#10;        greenBeansCurrentOwner: greenBeans ? {&#10;          farmerId: greenBeans.farmerId,&#10;          farmerName: greenBeans.farmerName,&#10;          embeddedFarmerId: greenBeans.farmer?._id,&#10;          embeddedFarmerName: greenBeans.farmer?.name&#10;        } : null,&#10;        mostafaProductsCount: mostafaProducts.length,&#10;        mostafaProducts: mostafaProducts.map(p =&gt; p.name),&#10;        cacheStatus: 'Active (5 minute TTL)',&#10;        timestamp: new Date().toISOString()&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    return NextResponse.json({&#10;      success: false,&#10;      error: error.message&#10;    }, { status: 500 });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/debug/clear-react-query-cache/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/debug/clear-react-query-cache/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;&#10;export async function POST() {&#10;  try {&#10;    // This endpoint can be called to signal cache clearing&#10;    // The actual cache clearing happens on the client side&#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Cache clear signal sent&quot;,&#10;      timestamp: new Date().toISOString()&#10;    });&#10;  } catch (error) {&#10;    return NextResponse.json({&#10;      success: false,&#10;      error: error.message&#10;    }, { status: 500 });&#10;  }&#10;}&#10;&#10;export async function GET() {&#10;  return NextResponse.json({&#10;    message: &quot;Cache clearing endpoint&quot;,&#10;    instructions: &quot;Use POST method to signal cache clearing&quot;&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/farmers/migrate/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/farmers/migrate/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    let migratedCount = 0;&#10;    let skippedCount = 0;&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;        migratedCount++;&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;        skippedCount++;&#10;      }&#10;    }&#10;&#10;    // Get final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Farmer migration completed&quot;,&#10;      results: {&#10;        farmersFound: farmerUsers.length,&#10;        migrated: migratedCount,&#10;        skipped: skippedCount,&#10;        totalFarmersInCollection: totalFarmers&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;Migration error:&quot;, error);&#10;    return NextResponse.json(&#10;      { &#10;        success: false, &#10;        error: &quot;Failed to migrate farmers&quot;,&#10;        message: error.message &#10;      },&#10;      { status: 500 }&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/messages/[conversationId]/read/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/messages/[conversationId]/read/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { getServerSession } from &quot;next-auth/next&quot;;&#10;import { authOptions } from &quot;../../auth/[...nextauth]/route&quot;;&#10;&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const session = await getServerSession(authOptions);&#10;    if (!session) {&#10;      return NextResponse.json({ error: &quot;Unauthorized&quot; }, { status: 401 });&#10;    }&#10;&#10;    const conversationId = params.conversationId;&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { getServerSession } from &quot;next-auth/next&quot;;&#10;import { authOptions } from &quot;../../../auth/[...nextauth]/route&quot;;&#10;&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const session = await getServerSession(authOptions);&#10;    if (!session) {&#10;      return NextResponse.json({ error: &quot;Unauthorized&quot; }, { status: 401 });&#10;    }&#10;&#10;    // Await params before using its properties&#10;    const { conversationId } = await params;&#10;    if (!conversationId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Conversation ID required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Enhanced user ID detection&#10;    const currentUser = session.user;&#10;    const userId =&#10;      currentUser?.id ||&#10;      currentUser?._id ||&#10;      currentUser?.userId ||&#10;      currentUser?.sub ||&#10;      currentUser?.email;&#10;&#10;    if (!userId) {&#10;      console.error(&quot;❌ No user ID found for marking conversation as read&quot;);&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid user session&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farm-fresh&quot;);&#10;&#10;    // Mark all messages in this conversation as read for the current user&#10;    const result = await db.collection(&quot;messages&quot;).updateMany(&#10;      {&#10;        conversationId: new ObjectId(conversationId),&#10;        receiverId: new ObjectId(userId),&#10;        isRead: false,&#10;      },&#10;      {&#10;        $set: {&#10;          isRead: true,&#10;          readAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      markedAsRead: result.modifiedCount,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error marking conversation as read:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Internal server error&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/farmer-dashboard/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/farmer-dashboard/page.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        City&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.city}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;city&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        State/Province&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.state}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;state&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        ZIP/Postal Code&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.zipCode}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;zipCode&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Country&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={farmerData.contactInfo.address.country}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;country&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;&quot;&gt;Select Country&lt;/option&gt;&#10;                        &lt;option value=&quot;US&quot;&gt;United States&lt;/option&gt;&#10;                        &lt;option value=&quot;CA&quot;&gt;Canada&lt;/option&gt;&#10;                        &lt;option value=&quot;UK&quot;&gt;United Kingdom&lt;/option&gt;&#10;                        &lt;option value=&quot;AU&quot;&gt;Australia&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handleSaveChanges(&quot;contactInfo&quot;)}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Contact Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Settings Tab */}&#10;            {activeTab === &quot;settings&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Settings&#10;                &lt;/h3&gt;&#10;&#10;                {/* Notification Settings */}&#10;                &lt;div&gt;&#10;                  &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Notification Preferences&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.orderAlerts}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;orderAlerts&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        New order alerts&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.lowStockAlerts}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;lowStockAlerts&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Low stock alerts&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.customerMessages}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;customerMessages&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Customer messages&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.marketingUpdates}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;marketingUpdates&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Marketing updates&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Business Settings */}&#10;                &lt;div&gt;&#10;                  &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Business Settings&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.autoAcceptOrders}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;&quot;, &quot;autoAcceptOrders&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Auto-accept orders&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.showFarmLocation}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;&quot;, &quot;showFarmLocation&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Show farm location to customers&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handleSaveChanges(&quot;settings&quot;)}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Settings&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/layout.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/layout.js" />
              <option name="originalContent" value="import localFont from &quot;next/font/local&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Providers from &quot;@/providers/Providers&quot;;&#10;import Navigation from &quot;@/components/Navigation&quot;;&#10;&#10;const geistSans = localFont({&#10;  src: &quot;./fonts/GeistVF.woff&quot;,&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;const geistMono = localFont({&#10;  src: &quot;./fonts/GeistMonoVF.woff&quot;,&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;&#10;export const metadata = {&#10;  title: &quot;FarmFresh - Local Farmer Booking&quot;,&#10;  description: &quot;Fresh Produce Direct from Farmers&quot;,&#10;};&#10;&#10;export default function RootLayout({ children, modal }) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot; className=&quot;scroll-smooth&quot;&gt;&#10;      &lt;head&gt;&#10;        &lt;link&#10;          href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&#10;          rel=&quot;stylesheet&quot;&#10;        /&gt;&#10;        {/* Blocking script to prevent flash of wrong theme */}&#10;        &lt;script&#10;          dangerouslySetInnerHTML={{&#10;            __html: `&#10;              (function() {&#10;                try {&#10;                  const savedTheme = localStorage.getItem('theme');&#10;                  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;&#10;                  &#10;                  if (savedTheme === 'dark' || (!savedTheme &amp;&amp; prefersDark)) {&#10;                    document.documentElement.classList.add('dark');&#10;                  }&#10;                } catch (e) {&#10;                  // Fallback to system preference on error&#10;                  try {&#10;                    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {&#10;                      document.documentElement.classList.add('dark');&#10;                    }&#10;                  } catch (e2) {&#10;                    // Do nothing if matchMedia is not supported&#10;                  }&#10;                }&#10;              })();&#10;            `,&#10;          }}&#10;        /&gt;&#10;      &lt;/head&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300`}&#10;      &gt;&#10;        &lt;Providers&gt;&#10;          &lt;Navigation /&gt;&#10;          {children}&#10;          {modal}&#10;        &lt;/Providers&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import localFont from &quot;next/font/local&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Providers from &quot;@/providers/Providers&quot;;&#10;import Navigation from &quot;@/components/Navigation&quot;;&#10;&#10;const geistSans = localFont({&#10;  src: &quot;./fonts/GeistVF.woff&quot;,&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;const geistMono = localFont({&#10;  src: &quot;./fonts/GeistMonoVF.woff&quot;,&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;&#10;export const metadata = {&#10;  title: &quot;FarmFresh - Local Farmer Booking&quot;,&#10;  description: &quot;Fresh Produce Direct from Farmers&quot;,&#10;};&#10;&#10;export default function RootLayout({ children, modal }) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot; className=&quot;scroll-smooth&quot; suppressHydrationWarning&gt;&#10;      &lt;head&gt;&#10;        &lt;link&#10;          href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&#10;          rel=&quot;stylesheet&quot;&#10;        /&gt;&#10;        {/* Blocking script to prevent flash of wrong theme */}&#10;        &lt;script&#10;          dangerouslySetInnerHTML={{&#10;            __html: `&#10;              (function() {&#10;                try {&#10;                  const savedTheme = localStorage.getItem('theme');&#10;                  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;&#10;                  &#10;                  if (savedTheme === 'dark' || (!savedTheme &amp;&amp; prefersDark)) {&#10;                    document.documentElement.classList.add('dark');&#10;                  }&#10;                } catch (e) {&#10;                  // Fallback to system preference on error&#10;                  try {&#10;                    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {&#10;                      document.documentElement.classList.add('dark');&#10;                    }&#10;                  } catch (e2) {&#10;                    // Do nothing if matchMedia is not supported&#10;                  }&#10;                }&#10;              })();&#10;            `,&#10;          }}&#10;        /&gt;&#10;      &lt;/head&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300`}&#10;      &gt;&#10;        &lt;Providers&gt;&#10;          &lt;Navigation /&gt;&#10;          {children}&#10;          {modal}&#10;        &lt;/Providers&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/products/page-simple.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/products/page-simple.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 pt-20&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;text-center py-12&quot;&gt;&#10;            &lt;p className=&quot;text-red-600&quot;&gt;Error loading products: {error.message}&lt;/p&gt;&#10;            &lt;button&#10;              onClick={() =&gt; refetchProducts()}&#10;              className=&quot;mt-4 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600&quot;&#10;            &gt;&#10;              Try Again&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 pt-20&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;py-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-2&quot;&gt;All Products&lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;&#10;            Showing {displayProducts.length} products (sorted by newest first)&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={() =&gt; {&#10;              console.log(&quot; Manual refresh triggered&quot;);&#10;              productsCache.invalidateProducts();&#10;            }}&#10;            className=&quot;mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600&quot;&#10;          &gt;&#10;            Refresh Products&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Products Grid */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 pb-12&quot;&gt;&#10;          {displayProducts.map((product) =&gt; (&#10;            &lt;ProductCard key={product._id} product={product} /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {displayProducts.length === 0 &amp;&amp; (&#10;          &lt;div className=&quot;text-center py-12&quot;&gt;&#10;            &lt;p className=&quot;text-gray-500 text-lg&quot;&gt;No products available&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/profile/farmer.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/profile/farmer.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useAuth } from &quot;../../contexts/AuthContext&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useTheme } from &quot;../../contexts/ThemeContext&quot;;&#10;&#10;export default function FarmerProfilePage() {&#10;  const { user, isAuthenticated, updateUser } = useAuth();&#10;  const { isDarkMode } = useTheme();&#10;  const router = useRouter();&#10;&#10;  const [activeTab, setActiveTab] = useState(&quot;personal&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [message, setMessage] = useState({ type: &quot;&quot;, text: &quot;&quot; });&#10;  const [profileData, setProfileData] = useState({&#10;    name: &quot;&quot;,&#10;    email: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    farmInfo: {&#10;      farmName: &quot;&quot;,&#10;      farmDescription: &quot;&quot;,&#10;      farmSize: &quot;&quot;,&#10;      farmType: &quot;&quot;,&#10;      certifications: [],&#10;      establishedYear: &quot;&quot;,&#10;      farmingMethods: [],&#10;    },&#10;    address: {&#10;      street: &quot;&quot;,&#10;      city: &quot;&quot;,&#10;      state: &quot;&quot;,&#10;      zipCode: &quot;&quot;,&#10;      country: &quot;&quot;,&#10;    },&#10;    businessInfo: {&#10;      businessLicense: &quot;&quot;,&#10;      taxId: &quot;&quot;,&#10;      deliveryRadius: &quot;&quot;,&#10;      minimumOrder: &quot;&quot;,&#10;      website: &quot;&quot;,&#10;      socialMedia: {&#10;        facebook: &quot;&quot;,&#10;        instagram: &quot;&quot;,&#10;        twitter: &quot;&quot;,&#10;      },&#10;    },&#10;    preferences: {&#10;      notifications: {&#10;        email: true,&#10;        sms: false,&#10;        orderUpdates: true,&#10;        lowStockAlerts: true,&#10;        customerMessages: true,&#10;        marketingUpdates: false,&#10;      },&#10;      language: &quot;en&quot;,&#10;      currency: &quot;USD&quot;,&#10;      autoAcceptOrders: false,&#10;      showFarmLocation: true,&#10;    },&#10;    security: {&#10;      currentPassword: &quot;&quot;,&#10;      newPassword: &quot;&quot;,&#10;      confirmPassword: &quot;&quot;,&#10;    },&#10;  });&#10;&#10;  // Redirect if not authenticated or not a farmer&#10;  useEffect(() =&gt; {&#10;    if (!isAuthenticated) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    // Check if user is a farmer, if not redirect to regular profile&#10;    if (user &amp;&amp; user.role !== &quot;farmer&quot;) {&#10;      router.push(&quot;/profile&quot;);&#10;      return;&#10;    }&#10;&#10;    // Initialize profile data with user data&#10;    if (user) {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        name: user.name || &quot;&quot;,&#10;        email: user.email || &quot;&quot;,&#10;        phone: user.phone || &quot;&quot;,&#10;        address: user.address || prev.address,&#10;        farmInfo: user.farmInfo || prev.farmInfo,&#10;        businessInfo: user.businessInfo || prev.businessInfo,&#10;        preferences: user.preferences || prev.preferences,&#10;      }));&#10;    }&#10;  }, [user, isAuthenticated, router]);&#10;&#10;  const handleInputChange = (field, value) =&gt; {&#10;    setProfileData((prev) =&gt; ({&#10;      ...prev,&#10;      [field]: value,&#10;    }));&#10;  };&#10;&#10;  const handleNestedChange = (section, subsection, field, value) =&gt; {&#10;    if (subsection) {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        [section]: {&#10;          ...prev[section],&#10;          [subsection]: {&#10;            ...prev[section][subsection],&#10;            [field]: value,&#10;          },&#10;        },&#10;      }));&#10;    } else {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        [section]: {&#10;          ...prev[section],&#10;          [field]: value,&#10;        },&#10;      }));&#10;    }&#10;  };&#10;&#10;  const handleArrayChange = (section, field, value) =&gt; {&#10;    const arrayValue = value.split(&quot;,&quot;).map(item =&gt; item.trim()).filter(item =&gt; item);&#10;    setProfileData((prev) =&gt; ({&#10;      ...prev,&#10;      [section]: {&#10;        ...prev[section],&#10;        [field]: arrayValue,&#10;      },&#10;    }));&#10;  };&#10;&#10;  const handlePersonalInfoUpdate = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setMessage({ type: &quot;&quot;, text: &quot;&quot; });&#10;&#10;      const response = await fetch(&quot;/api/auth/users&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          name: profileData.name,&#10;          phone: profileData.phone,&#10;          address: profileData.address,&#10;          farmInfo: profileData.farmInfo,&#10;          businessInfo: profileData.businessInfo,&#10;          preferences: profileData.preferences,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const updatedUser = await response.json();&#10;        updateUser(updatedUser.user);&#10;        setMessage({ type: &quot;success&quot;, text: &quot;Profile updated successfully!&quot; });&#10;&#10;        // Also update localStorage to persist data&#10;        localStorage.setItem(&#10;          &quot;farmfresh_user&quot;,&#10;          JSON.stringify(updatedUser.user),&#10;        );&#10;      } else {&#10;        const errorData = await response.json();&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: errorData.error || &quot;Failed to update profile&quot;,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      setMessage({&#10;        type: &quot;error&quot;,&#10;        text: &quot;An error occurred while updating profile&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handlePasswordChange = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setMessage({ type: &quot;&quot;, text: &quot;&quot; });&#10;&#10;      if (&#10;        profileData.security.newPassword !==&#10;        profileData.security.confirmPassword&#10;      ) {&#10;        setMessage({ type: &quot;error&quot;, text: &quot;New passwords don't match&quot; });&#10;        return;&#10;      }&#10;&#10;      if (profileData.security.newPassword.length &lt; 6) {&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: &quot;Password must be at least 6 characters long&quot;,&#10;        });&#10;        return;&#10;      }&#10;&#10;      const response = await fetch(&quot;/api/auth/users&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          currentPassword: profileData.security.currentPassword,&#10;          newPassword: profileData.security.newPassword,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setMessage({ type: &quot;success&quot;, text: &quot;Password updated successfully!&quot; });&#10;        setProfileData((prev) =&gt; ({&#10;          ...prev,&#10;          security: {&#10;            currentPassword: &quot;&quot;,&#10;            newPassword: &quot;&quot;,&#10;            confirmPassword: &quot;&quot;,&#10;          },&#10;        }));&#10;      } else {&#10;        const errorData = await response.json();&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: errorData.error || &quot;Failed to update password&quot;,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      setMessage({&#10;        type: &quot;error&quot;,&#10;        text: &quot;An error occurred while updating password&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const tabs = [&#10;    { id: &quot;personal&quot;, label: &quot;Personal Info&quot;, icon: &quot;fas fa-user&quot; },&#10;    { id: &quot;farm&quot;, label: &quot;Farm Info&quot;, icon: &quot;fas fa-seedling&quot; },&#10;    { id: &quot;business&quot;, label: &quot;Business&quot;, icon: &quot;fas fa-building&quot; },&#10;    { id: &quot;address&quot;, label: &quot;Address&quot;, icon: &quot;fas fa-map-marker-alt&quot; },&#10;    { id: &quot;preferences&quot;, label: &quot;Preferences&quot;, icon: &quot;fas fa-cog&quot; },&#10;    { id: &quot;security&quot;, label: &quot;Security&quot;, icon: &quot;fas fa-shield-alt&quot; },&#10;  ];&#10;&#10;  if (!isAuthenticated) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;            Farmer Profile Settings&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Manage your farmer account settings and farm information&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm&quot;&gt;&#10;          {/* Tab Navigation */}&#10;          &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;nav className=&quot;flex space-x-8 px-6 overflow-x-auto&quot;&gt;&#10;              {tabs.map((tab) =&gt; (&#10;                &lt;button&#10;                  key={tab.id}&#10;                  onClick={() =&gt; setActiveTab(tab.id)}&#10;                  className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 whitespace-nowrap ${&#10;                    activeTab === tab.id&#10;                      ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                      : &quot;border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;i className={tab.icon}&gt;&lt;/i&gt;&#10;                  &lt;span&gt;{tab.label}&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              ))}&#10;            &lt;/nav&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Tab Content */}&#10;          &lt;div className=&quot;p-6&quot;&gt;&#10;            {message.text &amp;&amp; (&#10;              &lt;div&#10;                className={`mb-4 p-4 rounded-md ${&#10;                  message.type === &quot;success&quot;&#10;                    ? &quot;bg-green-50 dark:bg-green-900 text-green-700 dark:text-green-300 border border-green-200 dark:border-green-800&quot;&#10;                    : &quot;bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 border border-red-200 dark:border-red-800&quot;&#10;                }`}&#10;              &gt;&#10;                {message.text}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Personal Information Tab */}&#10;            {activeTab === &quot;personal&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Personal Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Full Name&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.name}&#10;                      onChange={(e) =&gt;&#10;                        handleInputChange(&quot;name&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Email Address&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;email&quot;&#10;                      value={profileData.email}&#10;                      disabled&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-gray-50 dark:bg-gray-600 text-gray-500 dark:text-gray-400&quot;&#10;                    /&gt;&#10;                    &lt;p className=&quot;mt-1 text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      Email cannot be changed&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Phone Number&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;tel&quot;&#10;                      value={profileData.phone}&#10;                      onChange={(e) =&gt;&#10;                        handleInputChange(&quot;phone&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Changes&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Farm Information Tab */}&#10;            {activeTab === &quot;farm&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Farm Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Name *&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.farmName}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmName&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Green Valley Farm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Type&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={profileData.farmInfo.farmType}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmType&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select Farm Type&lt;/option&gt;&#10;                      &lt;option value=&quot;organic&quot;&gt;Organic Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;conventional&quot;&gt;Conventional Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;hydroponic&quot;&gt;Hydroponic Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;greenhouse&quot;&gt;Greenhouse Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;mixed&quot;&gt;Mixed Farm&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Size (acres)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.farmInfo.farmSize}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmSize&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;10&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Established Year&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.farmInfo.establishedYear}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;establishedYear&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;2020&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Description&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={profileData.farmInfo.farmDescription}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmDescription&quot;, e.target.value)&#10;                      }&#10;                      rows={4}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Tell customers about your farm, your farming philosophy, and what makes your products special...&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Certifications (comma-separated)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.certifications.join(&quot;, &quot;)}&#10;                      onChange={(e) =&gt;&#10;                        handleArrayChange(&quot;farmInfo&quot;, &quot;certifications&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Organic Certified, Non-GMO, USDA Organic&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farming Methods (comma-separated)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.farmingMethods.join(&quot;, &quot;)}&#10;                      onChange={(e) =&gt;&#10;                        handleArrayChange(&quot;farmInfo&quot;, &quot;farmingMethods&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Sustainable, Pesticide-free, Crop Rotation&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Farm Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Business Information Tab */}&#10;            {activeTab === &quot;business&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Business Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Business License&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.businessInfo.businessLicense}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;businessLicense&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Tax ID&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.businessInfo.taxId}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;taxId&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Delivery Radius (miles)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.businessInfo.deliveryRadius}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;deliveryRadius&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;25&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Minimum Order ($)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.businessInfo.minimumOrder}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;minimumOrder&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;25&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Website&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.website}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;website&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://yourfarm.com&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Social Media */}&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Facebook&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.facebook}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;facebook&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://facebook.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Instagram&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.instagram}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;instagram&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://instagram.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Twitter&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.twitter}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;twitter&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://twitter.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Business Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Address Tab */}&#10;            {activeTab === &quot;address&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Farm Address&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Street Address&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.street}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;street&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      City&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.city}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;city&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      State/Province&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.state}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;state&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      ZIP/Postal Code&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.zipCode}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;zipCode&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Country&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={profileData.address.country}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;country&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select Country&lt;/option&gt;&#10;                      &lt;option value=&quot;US&quot;&gt;United States&lt;/option&gt;&#10;                      &lt;option value=&quot;CA&quot;&gt;Canada&lt;/option&gt;&#10;                      &lt;option value=&quot;UK&quot;&gt;United Kingdom&lt;/option&gt;&#10;                      &lt;option value=&quot;AU&quot;&gt;Australia&lt;/option&gt;&#10;                      &lt;option value=&quot;DE&quot;&gt;Germany&lt;/option&gt;&#10;                      &lt;option value=&quot;FR&quot;&gt;France&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Address&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Preferences Tab */}&#10;            {activeTab === &quot;preferences&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Preferences&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Notification Preferences&#10;                    &lt;/h4&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.email}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;email&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Email notifications&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.sms}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;sms&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          SMS notifications&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.orderUpdates}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;orderUpdates&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Order status updates&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.lowStockAlerts}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;lowStockAlerts&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Low stock alerts&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.customerMessages}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;customerMessages&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Customer messages&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.marketingUpdates}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;marketingUpdates&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Marketing updates&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Business Preferences&#10;                    &lt;/h4&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.autoAcceptOrders}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;autoAcceptOrders&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Auto-accept orders&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.showFarmLocation}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;showFarmLocation&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Show farm location to customers&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Language&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={profileData.preferences.language}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;language&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;&#10;                        &lt;option value=&quot;es&quot;&gt;Spanish&lt;/option&gt;&#10;                        &lt;option value=&quot;fr&quot;&gt;French&lt;/option&gt;&#10;                        &lt;option value=&quot;de&quot;&gt;German&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Currency&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={profileData.preferences.currency}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;currency&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;USD&quot;&gt;USD ($)&lt;/option&gt;&#10;                        &lt;option value=&quot;EUR&quot;&gt;EUR (€)&lt;/option&gt;&#10;                        &lt;option value=&quot;GBP&quot;&gt;GBP (£)&lt;/option&gt;&#10;                        &lt;option value=&quot;CAD&quot;&gt;CAD ($)&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Preferences&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Security Tab */}&#10;            {activeTab === &quot;security&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Security Settings&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;max-w-md space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Current Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.currentPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;currentPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      New Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.newPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;newPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Confirm New Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.confirmPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;confirmPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;button&#10;                    onClick={handlePasswordChange}&#10;                    disabled={loading}&#10;                    className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    {loading ? &quot;Updating...&quot; : &quot;Update Password&quot;}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-farmer-methods.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-farmer-methods.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function checkFarmerFarmingMethods() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; CHECKING FARMERS' FARMING METHODS\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get all farmers&#10;    console.log(&quot;1.  CHECKING ALL FARMERS FOR FARMING METHODS:&quot;);&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;&#10;    console.log(`Total farmers found: ${allFarmers.length}\n`);&#10;&#10;    const farmersWithMethods = [];&#10;    const farmersWithoutMethods = [];&#10;&#10;    allFarmers.forEach(farmer =&gt; {&#10;      const hasFarmingMethods = farmer.farmingMethods &amp;&amp; &#10;                               Array.isArray(farmer.farmingMethods) &amp;&amp; &#10;                               farmer.farmingMethods.length &gt; 0;&#10;&#10;      if (hasFarmingMethods) {&#10;        farmersWithMethods.push(farmer);&#10;      } else {&#10;        farmersWithoutMethods.push(farmer);&#10;      }&#10;    });&#10;&#10;    // Show farmers WITH farming methods&#10;    console.log(`2. ✅ FARMERS WITH FARMING METHODS (${farmersWithMethods.length}):`);&#10;    farmersWithMethods.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer._id}):`);&#10;      console.log(`  Email: ${farmer.email}`);&#10;      console.log(`  Farm: ${farmer.farmName || 'N/A'}`);&#10;      console.log(`  Farming Methods: [${farmer.farmingMethods.join(', ')}]`);&#10;      console.log(`  Method Count: ${farmer.farmingMethods.length}`);&#10;      console.log('');&#10;    });&#10;&#10;    // Show farmers WITHOUT farming methods&#10;    console.log(`3. ❌ FARMERS WITHOUT FARMING METHODS (${farmersWithoutMethods.length}):`);&#10;    farmersWithoutMethods.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer._id}):`);&#10;      console.log(`  Email: ${farmer.email}`);&#10;      console.log(`  Farm: ${farmer.farmName || 'N/A'}`);&#10;      console.log(`  Farming Methods: ${farmer.farmingMethods || 'undefined'}`);&#10;      console.log('');&#10;    });&#10;&#10;    // Check for different data patterns&#10;    console.log(&quot;4.  DETAILED FARMING METHODS ANALYSIS:&quot;);&#10;    &#10;    const methodCounts = {};&#10;    const uniqueMethods = new Set();&#10;&#10;    farmersWithMethods.forEach(farmer =&gt; {&#10;      farmer.farmingMethods.forEach(method =&gt; {&#10;        uniqueMethods.add(method);&#10;        methodCounts[method] = (methodCounts[method] || 0) + 1;&#10;      });&#10;    });&#10;&#10;    console.log(&quot;Unique farming methods found:&quot;);&#10;    Array.from(uniqueMethods).sort().forEach(method =&gt; {&#10;      console.log(`  - &quot;${method}&quot; (used by ${methodCounts[method]} farmer(s))`);&#10;    });&#10;&#10;    // Check for empty arrays or null values&#10;    console.log(&quot;\n5.  CHECKING FOR EDGE CASES:&quot;);&#10;    &#10;    const emptyArrayFarmers = allFarmers.filter(farmer =&gt; &#10;      farmer.farmingMethods &amp;&amp; &#10;      Array.isArray(farmer.farmingMethods) &amp;&amp; &#10;      farmer.farmingMethods.length === 0&#10;    );&#10;    &#10;    const nullMethodsFarmers = allFarmers.filter(farmer =&gt; &#10;      farmer.farmingMethods === null&#10;    );&#10;    &#10;    const undefinedMethodsFarmers = allFarmers.filter(farmer =&gt; &#10;      farmer.farmingMethods === undefined&#10;    );&#10;&#10;    console.log(`Farmers with empty farming methods array: ${emptyArrayFarmers.length}`);&#10;    emptyArrayFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name} (${farmer._id}): []`);&#10;    });&#10;&#10;    console.log(`Farmers with null farming methods: ${nullMethodsFarmers.length}`);&#10;    nullMethodsFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name} (${farmer._id}): null`);&#10;    });&#10;&#10;    console.log(`Farmers with undefined farming methods: ${undefinedMethodsFarmers.length}`);&#10;    undefinedMethodsFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name} (${farmer._id}): undefined`);&#10;    });&#10;&#10;    // Check if any farmers have farming methods in their products instead&#10;    console.log(&quot;\n6.  CHECKING PRODUCTS FOR FARMING METHODS:&quot;);&#10;    &#10;    const productsWithMethods = await db.collection(&quot;products&quot;).find({&#10;      farmingMethods: { $exists: true, $ne: null }&#10;    }).toArray();&#10;&#10;    console.log(`Products with farming methods: ${productsWithMethods.length}`);&#10;    productsWithMethods.forEach(product =&gt; {&#10;      console.log(`  - ${product.name} (Farmer: ${product.farmerName || product.farmer?.name}):`);&#10;      console.log(`    Methods: ${product.farmingMethods}`);&#10;    });&#10;&#10;    // Summary statistics&#10;    console.log(&quot;\n7.  SUMMARY STATISTICS:&quot;);&#10;    console.log(`Total Farmers: ${allFarmers.length}`);&#10;    console.log(`Farmers with farming methods: ${farmersWithMethods.length} (${((farmersWithMethods.length/allFarmers.length)*100).toFixed(1)}%)`);&#10;    console.log(`Farmers without farming methods: ${farmersWithoutMethods.length} (${((farmersWithoutMethods.length/allFarmers.length)*100).toFixed(1)}%)`);&#10;    console.log(`Total unique farming methods: ${uniqueMethods.size}`);&#10;    console.log(`Most common farming method: ${Object.entries(methodCounts).sort((a,b) =&gt; b[1] - a[1])[0]?.[0] || 'None'}`);&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;checkFarmerFarmingMethods().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-nested-farming-methods.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-nested-farming-methods.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function checkNestedFarmingMethods() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; CHECKING NESTED FARMING METHODS DATA\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get all farmers and check nested farmInfo.farmingMethods&#10;    console.log(&quot;1.  CHECKING farmer.farmInfo.farmingMethods:&quot;);&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;&#10;    const farmersWithNestedMethods = [];&#10;    const farmersWithoutNestedMethods = [];&#10;&#10;    allFarmers.forEach(farmer =&gt; {&#10;      const hasNestedMethods = farmer.farmInfo?.farmingMethods &amp;&amp; &#10;                              Array.isArray(farmer.farmInfo.farmingMethods) &amp;&amp; &#10;                              farmer.farmInfo.farmingMethods.length &gt; 0;&#10;&#10;      if (hasNestedMethods) {&#10;        farmersWithNestedMethods.push(farmer);&#10;      } else {&#10;        farmersWithoutNestedMethods.push(farmer);&#10;      }&#10;&#10;      // Log all farmers and their nested structure&#10;      console.log(`- ${farmer.name || 'unnamed'} (${farmer._id}):`);&#10;      console.log(`  farmInfo exists: ${!!farmer.farmInfo}`);&#10;      if (farmer.farmInfo) {&#10;        console.log(`  farmInfo.farmingMethods: ${farmer.farmInfo.farmingMethods || 'undefined'}`);&#10;        console.log(`  farmInfo keys: [${Object.keys(farmer.farmInfo).join(', ')}]`);&#10;      }&#10;      console.log('');&#10;    });&#10;&#10;    // Show farmers WITH nested farming methods&#10;    console.log(`\n2. ✅ FARMERS WITH NESTED FARMING METHODS (${farmersWithNestedMethods.length}):`);&#10;    farmersWithNestedMethods.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer._id}):`);&#10;      console.log(`  farmInfo.farmingMethods: [${farmer.farmInfo.farmingMethods.join(', ')}]`);&#10;      console.log('');&#10;    });&#10;&#10;    // Check for other farmInfo fields that might contain farming data&#10;    console.log(&quot;3.  CHECKING OTHER FARMINFO FIELDS:&quot;);&#10;    allFarmers.forEach(farmer =&gt; {&#10;      if (farmer.farmInfo &amp;&amp; Object.keys(farmer.farmInfo).length &gt; 0) {&#10;        console.log(`- ${farmer.name} (${farmer._id}) farmInfo contains:`);&#10;        Object.entries(farmer.farmInfo).forEach(([key, value]) =&gt; {&#10;          console.log(`  ${key}: ${Array.isArray(value) ? `[${value.join(', ')}]` : value}`);&#10;        });&#10;        console.log('');&#10;      }&#10;    });&#10;&#10;    // Check if any farmers have hardcoded methods in the profile calculation&#10;    console.log(&quot;4.  CHECKING FOR PATTERNS IN FARMER DATA:&quot;);&#10;    &#10;    // Look for farmers who might have specializations that could be used as farming methods&#10;    const farmersWithSpecializations = allFarmers.filter(farmer =&gt; &#10;      farmer.specializations &amp;&amp; Array.isArray(farmer.specializations) &amp;&amp; farmer.specializations.length &gt; 0&#10;    );&#10;&#10;    console.log(`Farmers with specializations: ${farmersWithSpecializations.length}`);&#10;    farmersWithSpecializations.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name}: [${farmer.specializations.join(', ')}]`);&#10;    });&#10;&#10;    // Check for any farming-related fields&#10;    console.log(&quot;\n5.  CHECKING ALL FARMER FIELDS FOR FARMING-RELATED DATA:&quot;);&#10;    allFarmers.forEach(farmer =&gt; {&#10;      const allFields = Object.keys(farmer);&#10;      const farmingFields = allFields.filter(field =&gt; &#10;        field.toLowerCase().includes('farm') || &#10;        field.toLowerCase().includes('method') || &#10;        field.toLowerCase().includes('practice') ||&#10;        field.toLowerCase().includes('organic') ||&#10;        field.toLowerCase().includes('sustainable')&#10;      );&#10;      &#10;      if (farmingFields.length &gt; 0) {&#10;        console.log(`- ${farmer.name} has farming-related fields: [${farmingFields.join(', ')}]`);&#10;        farmingFields.forEach(field =&gt; {&#10;          const value = farmer[field];&#10;          console.log(`  ${field}: ${Array.isArray(value) ? `[${value.join(', ')}]` : value}`);&#10;        });&#10;        console.log('');&#10;      }&#10;    });&#10;&#10;    // Summary&#10;    console.log(&quot;6.  SUMMARY:&quot;);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Farmers with farmInfo: ${allFarmers.filter(f =&gt; f.farmInfo).length}`);&#10;    console.log(`Farmers with farmInfo.farmingMethods: ${farmersWithNestedMethods.length}`);&#10;    console.log(`Farmers with specializations: ${farmersWithSpecializations.length}`);&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;checkNestedFarmingMethods().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/clear-products-cache.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/clear-products-cache.js" />
              <option name="originalContent" value="&#10;        &quot; Manual cache clear: The cache will expire automatically in 5 minutes&quot;,&#10;      );&#10;    }&#10;&#10;    console.log(&quot;\n✅ Cache clearing process completed&quot;);&#10;    console.log(&#10;      &quot; If the issue persists, wait 5 minutes for cache TTL to expire or restart the Next.js server&quot;,&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot; Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;clearCacheAndVerify().catch(console.error);&#10;" />
              <option name="updatedContent" value="// Clear products cache to fix Green Beans display issue&#10;// This script will clear the response cache and force fresh data fetch&#10;&#10;const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;// Use local MongoDB connection like the other debug files&#10;const MONGODB_URI = &quot;mongodb://localhost:27017/farmfresh&quot;;&#10;&#10;async function clearCacheAndVerify() {&#10;  console.log(&quot; Clearing products cache and verifying data...&quot;);&#10;&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;✅ Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Check current Green Beans data&#10;    console.log(&quot;\n CHECKING CURRENT GREEN BEANS DATA:&quot;);&#10;    const greenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;,&#10;    });&#10;&#10;    if (greenBeans) {&#10;      console.log(&quot;Product Name:&quot;, greenBeans.name);&#10;      console.log(&quot;farmerId:&quot;, greenBeans.farmerId);&#10;      console.log(&quot;farmerEmail:&quot;, greenBeans.farmerEmail);&#10;      console.log(&quot;farmerName:&quot;, greenBeans.farmerName);&#10;      console.log(&quot;Embedded farmer._id:&quot;, greenBeans.farmer?._id);&#10;      console.log(&quot;Embedded farmer.name:&quot;, greenBeans.farmer?.name);&#10;      console.log(&quot;Embedded farmer.email:&quot;, greenBeans.farmer?.email);&#10;    } else {&#10;      console.log(&quot;❌ Green Beans not found&quot;);&#10;    }&#10;&#10;    // Check Mostafa's current products&#10;    console.log(&quot;\n MOSTAFA'S CURRENT PRODUCTS:&quot;);&#10;    const mostafaProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: &quot;farmer_006&quot; },&#10;          { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;          { farmerName: &quot;Mostafa Kabir&quot; },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${mostafaProducts.length} products for Mostafa Kabir:`);&#10;    mostafaProducts.forEach((product) =&gt; {&#10;      console.log(`- ${product.name} (farmerId: ${product.farmerId})`);&#10;    });&#10;&#10;    // Check Mizanur's current products&#10;    console.log(&quot;\n MIZANUR'S CURRENT PRODUCTS:&quot;);&#10;    const mizanurProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: &quot;farmer_005&quot; },&#10;          { &quot;farmer._id&quot;: &quot;farmer_005&quot; },&#10;          { farmerName: &quot;Mizanur Rahman&quot; },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${mizanurProducts.length} products for Mizanur Rahman:`);&#10;    mizanurProducts.forEach((product) =&gt; {&#10;      console.log(`- ${product.name} (farmerId: ${product.farmerId})`);&#10;    });&#10;&#10;    // Make HTTP request to clear API cache&#10;    console.log(&quot;\n Clearing API cache...&quot;);&#10;    try {&#10;      // This will trigger a fresh database query and clear the response cache&#10;      const response = await fetch(&#10;        &quot;http://localhost:3000/api/products?clearCache=true&amp;limit=1000&quot;,&#10;        {&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        console.log(&quot;✅ API cache cleared successfully&quot;);&#10;      } else {&#10;        console.log(&quot;⚠️  API cache clear request failed:&quot;, response.status);&#10;      }&#10;    } catch (error) {&#10;      console.log(&#10;        &quot;⚠️  Could not clear API cache via HTTP (server may be down):&quot;,&#10;        error.message,&#10;      );&#10;      console.log(&#10;        &quot; Manual cache clear: The cache will expire automatically in 5 minutes&quot;,&#10;      );&#10;    }&#10;&#10;    console.log(&quot;\n✅ Cache clearing process completed&quot;);&#10;    console.log(&#10;      &quot; If the issue persists, wait 5 minutes for cache TTL to expire or restart the Next.js server&quot;,&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot; Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;clearCacheAndVerify().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Navigation.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Navigation.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useAuth } from &quot;@/contexts/AuthContext&quot;;&#10;import { useTheme } from &quot;@/contexts/ThemeContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useMessaging } from &quot;@/contexts/MessagingContext&quot;;&#10;import { signOut } from &quot;next-auth/react&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { usePathname, useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function Navigation() {&#10;  const { user, isAuthenticated, logout, updateUser } = useAuth();&#10;  const { isDarkMode, toggleDarkMode } = useTheme();&#10;  const { favorites } = useFavorites();&#10;  const { cartItems, cartCount } = useCart();&#10;  const { totalUnreadCount } = useMessaging();&#10;  const [showUserMenu, setShowUserMenu] = useState(false);&#10;  const [updatedUserName, setUpdatedUserName] = useState(user?.name || &quot;&quot;);&#10;  const router = useRouter();&#10;&#10;  // Fetch updated name from the database for farmers&#10;        console.log(&quot;Navigation: Fetching updated name for:&quot;, user.email);&#10;&#10;        // Fetch the latest farmer data with cache busting&#10;        const response = await fetch(&#10;          `/api/farmers?email=${encodeURIComponent(user.email)}&amp;exactMatch=true&amp;_t=${Date.now()}`,&#10;          {&#10;            headers: {&#10;              &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;              Pragma: &quot;no-cache&quot;,&#10;            },&#10;            cache: &quot;no-store&quot;,&#10;          },&#10;        );&#10;&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;&#10;          if (data &amp;&amp; data.farmers &amp;&amp; data.farmers.length &gt; 0) {&#10;            // Find the farmer with the matching email&#10;            const farmer = data.farmers.find((f) =&gt; f.email === user.email);&#10;            if (farmer &amp;&amp; farmer.name !== user.name) {&#10;              console.log(&#10;                &quot;Navigation: Updating user name from&quot;,&#10;                user.name,&#10;                &quot;to&quot;,&#10;                farmer.name,&#10;              );&#10;              setUpdatedUserName(farmer.name);&#10;&#10;              // Also update the Auth context&#10;              updateUser({&#10;                ...user,&#10;                name: farmer.name,&#10;              });&#10;            }&#10;          }&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Navigation: Error fetching updated name:&quot;, error);&#10;      }&#10;    }&#10;&#10;    fetchUpdatedUserName();&#10;  }, [user?.email, user?.userType]);&#10;&#10;  // Pages that should have simplified navigation (no search/cart)&#10;  const simplifiedPages = [&#10;    &quot;/login&quot;,&#10;    &quot;/register&quot;,&#10;    &quot;/forgot-password&quot;,&#10;    &quot;/reset-password&quot;,&#10;    &quot;/cart&quot;,&#10;    &quot;/create&quot;,&#10;    &quot;/manage&quot;,&#10;    &quot;/payment&quot;,&#10;    &quot;/bookings&quot;,&#10;    &quot;/farmer-orders&quot;,&#10;    &quot;/review&quot;,&#10;  ];&#10;&#10;  // Details page gets minimal navigation (only logo + dark mode)&#10;  const isDetailsPage = pathname === &quot;/details&quot;;&#10;  const isFarmersPage = pathname === &quot;/farmers&quot;;&#10;  const shouldShowSearchAndCart =&#10;    !simplifiedPages.includes(pathname) &amp;&amp; !isDetailsPage;&#10;  const shouldShowNavLinks = !isDetailsPage;&#10;  const shouldShowUserAuth = !isDetailsPage;&#10;&#10;  // Different search placeholders based on page&#10;  const getSearchPlaceholder = () =&gt; {&#10;    if (isFarmersPage) {&#10;      return &quot;Search farmers...&quot;;&#10;    }&#10;    return &quot;Search products...&quot;;&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    try {&#10;      // Close the user menu first&#10;      setShowUserMenu(false);&#10;&#10;      // Clear any existing modals or intercepted routes by going to home first&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Small delay to ensure navigation completes before sign out&#10;      await new Promise((resolve) =&gt; setTimeout(resolve, 100));&#10;&#10;      // Sign out from NextAuth and clear context&#10;      await signOut({ redirect: false });&#10;      logout();&#10;&#10;      // Ensure we stay on home page and refresh&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Force a hard refresh to clear any modal states&#10;      window.location.href = &quot;/&quot;;&#10;    } catch (error) {&#10;      console.error(&quot;Logout error:&quot;, error);&#10;      // Even if there's an error, still redirect to home&#10;      window.location.href = &quot;/&quot;;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;nav className=&quot;bg-white dark:bg-gray-800 shadow-lg sticky top-0 z-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center h-16&quot;&gt;&#10;          {/* Logo */}&#10;          &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;bg-primary-500 p-2 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-seedling text-white text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                FarmFresh&#10;              &lt;/h1&gt;&#10;              &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                Local Farmer Booking&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Link&gt;&#10;&#10;          {/* Search Bar (conditional) */}&#10;          {shouldShowSearchAndCart &amp;&amp; (&#10;            &lt;div className=&quot;hidden md:flex flex-1 max-w-lg mx-8&quot;&gt;&#10;              &lt;div className=&quot;relative w-full&quot;&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  placeholder={getSearchPlaceholder()}&#10;                  className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Navigation Links (conditional) */}&#10;          {shouldShowNavLinks &amp;&amp; (&#10;            &lt;div className=&quot;hidden lg:flex items-center space-x-8&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/products&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/products&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Products&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/farmers&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/farmers&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Farmers&#10;              &lt;/Link&gt;&#10;&#10;              {/* Show different menu items based on user type */}&#10;              {isAuthenticated &amp;&amp; user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;Link&#10;                    href=&quot;/create&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/create&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Add Product&#10;                  &lt;/Link&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/manage&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Manage Products&#10;                  &lt;/Link&gt;&#10;                &lt;/&gt;&#10;              )}&#10;&#10;              {/* Show My Orders for regular users */}&#10;              {isAuthenticated &amp;&amp; user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                &lt;Link&#10;                  href=&quot;/bookings&quot;&#10;                  className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                    pathname === &quot;/bookings&quot;&#10;                      ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  My Orders&#10;                &lt;/Link&gt;&#10;              )}&#10;&#10;              &lt;Link&#10;                href=&quot;/about&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/about&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                About&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Right side icons and user menu */}&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            {/* Cart and Favorites (only for authenticated users and not on simplified pages) */}&#10;            {shouldShowSearchAndCart &amp;&amp; isAuthenticated &amp;&amp; (&#10;              &lt;&gt;&#10;                {/* Messages */}&#10;                &lt;Link&#10;                  href=&quot;/messages&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                  title=&quot;Messages&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-envelope text-xl&quot;&gt;&lt;/i&gt;&#10;                  {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;&#10;                &lt;Link&#10;                  href=&quot;/favorites&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-heart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {favorites.length &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {favorites.length}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;                &lt;Link&#10;                  href=&quot;/cart&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-shopping-cart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {cartCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {cartCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Dark mode toggle */}&#10;            &lt;button&#10;              onClick={toggleDarkMode}&#10;              className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;              title={&#10;                isDarkMode ? &quot;Switch to light mode&quot; : &quot;Switch to dark mode&quot;&#10;              }&#10;            &gt;&#10;              {isDarkMode ? (&#10;                &lt;i className=&quot;fas fa-sun text-xl&quot;&gt;&lt;/i&gt;&#10;              ) : (&#10;                &lt;i className=&quot;fas fa-moon text-xl&quot;&gt;&lt;/i&gt;&#10;                isDarkMode ? &quot;Switch to light mode&quot; : &quot;Switch to dark mode&quot;&#10;              &lt;&gt;&#10;                {isAuthenticated ? (&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setShowUserMenu(!showUserMenu)}&#10;                      className=&quot;flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;              {isDarkMode ? (&#10;                &lt;i className=&quot;fas fa-sun text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;i className=&quot;fas fa-chevron-down text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;&#10;                    {/* User Dropdown Menu */}&#10;                    {showUserMenu &amp;&amp; (&#10;                      &lt;div className=&quot;absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-2&quot;&gt;&#10;                        &lt;div className=&quot;px-4 py-2 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                            {user?.name}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {user?.email}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-primary-600 dark:text-primary-400 capitalize&quot;&gt;&#10;                            {user?.userType || &quot;User&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Farmer-specific menu items */}&#10;                        {user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/farmer-orders&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              Order Management&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/create&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                              Add Product&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/manage&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#10;                              Manage Products&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Regular user menu items */}&#10;                        {user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/bookings&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              My Orders&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/favorites&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-heart mr-2&quot;&gt;&lt;/i&gt;&#10;                              Favorites&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/cart&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                              Cart&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Common menu items */}&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 mt-2 pt-2&quot;&gt;&#10;                          &lt;Link&#10;                            href=&quot;/messages&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-envelope mr-2&quot;&gt;&lt;/i&gt;&#10;                            Messages&#10;                            {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                              &lt;span className=&quot;ml-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center inline-flex&quot;&gt;&#10;                                {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                              &lt;/span&gt;&#10;                            )}&#10;                          &lt;/Link&gt;&#10;                          &lt;Link&#10;                            href=&quot;/profile&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-user mr-2&quot;&gt;&lt;/i&gt;&#10;                            Profile Settings&#10;                          &lt;/Link&gt;&#10;                          &lt;button&#10;                            onClick={handleLogout}&#10;                            className=&quot;w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-sign-out-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                            Logout&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;Link&#10;                      href=&quot;/login&quot;&#10;                      className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;                      Login&#10;                    &lt;/Link&gt;&#10;                    &lt;Link&#10;                      href=&quot;/register&quot;&#10;                      className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg transition&quot;&#10;                    &gt;&#10;                      Sign Up&#10;                    &lt;/Link&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Mobile menu button */}&#10;            &lt;button className=&quot;lg:hidden text-gray-700 dark:text-gray-300&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bars text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useAuth } from &quot;@/contexts/AuthContext&quot;;&#10;import { useTheme } from &quot;@/contexts/ThemeContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useMessaging } from &quot;@/contexts/MessagingContext&quot;;&#10;import { signOut } from &quot;next-auth/react&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { usePathname, useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function Navigation() {&#10;  const { user, isAuthenticated, logout, updateUser } = useAuth();&#10;  const { isDarkMode, toggleDarkMode, isLoaded } = useTheme();&#10;  const { favorites } = useFavorites();&#10;  const { cartItems, cartCount } = useCart();&#10;  const { totalUnreadCount } = useMessaging();&#10;  const [showUserMenu, setShowUserMenu] = useState(false);&#10;  const [updatedUserName, setUpdatedUserName] = useState(user?.name || &quot;&quot;);&#10;  const [isMounted, setIsMounted] = useState(false);&#10;  const pathname = usePathname();&#10;  const router = useRouter();&#10;&#10;  // Prevent hydration mismatch by only rendering theme-dependent content after mount&#10;  useEffect(() =&gt; {&#10;    setIsMounted(true);&#10;  }, []);&#10;&#10;  // Fetch updated name from the database for farmers&#10;  useEffect(() =&gt; {&#10;    async function fetchUpdatedUserName() {&#10;      if (!user?.email || user?.userType !== &quot;farmer&quot;) return;&#10;&#10;      try {&#10;        console.log(&quot;Navigation: Fetching updated name for:&quot;, user.email);&#10;&#10;        // Fetch the latest farmer data with cache busting&#10;        const response = await fetch(&#10;          `/api/farmers?email=${encodeURIComponent(user.email)}&amp;exactMatch=true&amp;_t=${Date.now()}`,&#10;          {&#10;            headers: {&#10;              &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;              Pragma: &quot;no-cache&quot;,&#10;            },&#10;            cache: &quot;no-store&quot;,&#10;          },&#10;        );&#10;&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;&#10;          if (data &amp;&amp; data.farmers &amp;&amp; data.farmers.length &gt; 0) {&#10;            // Find the farmer with the matching email&#10;            const farmer = data.farmers.find((f) =&gt; f.email === user.email);&#10;            if (farmer &amp;&amp; farmer.name !== user.name) {&#10;              console.log(&#10;                &quot;Navigation: Updating user name from&quot;,&#10;                user.name,&#10;                &quot;to&quot;,&#10;                farmer.name,&#10;              );&#10;              setUpdatedUserName(farmer.name);&#10;&#10;              // Also update the Auth context&#10;              updateUser({&#10;                ...user,&#10;                name: farmer.name,&#10;              });&#10;            }&#10;          }&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Navigation: Error fetching updated name:&quot;, error);&#10;      }&#10;    }&#10;&#10;    fetchUpdatedUserName();&#10;  }, [user?.email, user?.userType]);&#10;&#10;  // Pages that should have simplified navigation (no search/cart)&#10;  const simplifiedPages = [&#10;    &quot;/login&quot;,&#10;    &quot;/register&quot;,&#10;    &quot;/forgot-password&quot;,&#10;    &quot;/reset-password&quot;,&#10;    &quot;/cart&quot;,&#10;    &quot;/create&quot;,&#10;    &quot;/manage&quot;,&#10;    &quot;/payment&quot;,&#10;    &quot;/bookings&quot;,&#10;    &quot;/farmer-orders&quot;,&#10;    &quot;/review&quot;,&#10;  ];&#10;&#10;  // Details page gets minimal navigation (only logo + dark mode)&#10;  const isDetailsPage = pathname === &quot;/details&quot;;&#10;  const isFarmersPage = pathname === &quot;/farmers&quot;;&#10;  const shouldShowSearchAndCart =&#10;    !simplifiedPages.includes(pathname) &amp;&amp; !isDetailsPage;&#10;  const shouldShowNavLinks = !isDetailsPage;&#10;  const shouldShowUserAuth = !isDetailsPage;&#10;&#10;  // Different search placeholders based on page&#10;  const getSearchPlaceholder = () =&gt; {&#10;    if (isFarmersPage) {&#10;      return &quot;Search farmers...&quot;;&#10;    }&#10;    return &quot;Search products...&quot;;&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    try {&#10;      // Close the user menu first&#10;      setShowUserMenu(false);&#10;&#10;      // Clear any existing modals or intercepted routes by going to home first&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Small delay to ensure navigation completes before sign out&#10;      await new Promise((resolve) =&gt; setTimeout(resolve, 100));&#10;&#10;      // Sign out from NextAuth and clear context&#10;      await signOut({ redirect: false });&#10;      logout();&#10;&#10;      // Ensure we stay on home page and refresh&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Force a hard refresh to clear any modal states&#10;      window.location.href = &quot;/&quot;;&#10;    } catch (error) {&#10;      console.error(&quot;Logout error:&quot;, error);&#10;      // Even if there's an error, still redirect to home&#10;      window.location.href = &quot;/&quot;;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;nav className=&quot;bg-white dark:bg-gray-800 shadow-lg sticky top-0 z-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center h-16&quot;&gt;&#10;          {/* Logo */}&#10;          &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;bg-primary-500 p-2 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-seedling text-white text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                FarmFresh&#10;              &lt;/h1&gt;&#10;              &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                Local Farmer Booking&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Link&gt;&#10;&#10;          {/* Search Bar (conditional) */}&#10;          {shouldShowSearchAndCart &amp;&amp; (&#10;            &lt;div className=&quot;hidden md:flex flex-1 max-w-lg mx-8&quot;&gt;&#10;              &lt;div className=&quot;relative w-full&quot;&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  placeholder={getSearchPlaceholder()}&#10;                  className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Navigation Links (conditional) */}&#10;          {shouldShowNavLinks &amp;&amp; (&#10;            &lt;div className=&quot;hidden lg:flex items-center space-x-8&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/products&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/products&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Products&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/farmers&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/farmers&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Farmers&#10;              &lt;/Link&gt;&#10;&#10;              {/* Show different menu items based on user type */}&#10;              {isAuthenticated &amp;&amp; user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;Link&#10;                    href=&quot;/create&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/create&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Add Product&#10;                  &lt;/Link&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/manage&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Manage Products&#10;                  &lt;/Link&gt;&#10;                &lt;/&gt;&#10;              )}&#10;&#10;              {/* Show My Orders for regular users */}&#10;              {isAuthenticated &amp;&amp; user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                &lt;Link&#10;                  href=&quot;/bookings&quot;&#10;                  className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                    pathname === &quot;/bookings&quot;&#10;                      ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  My Orders&#10;                &lt;/Link&gt;&#10;              )}&#10;&#10;              &lt;Link&#10;                href=&quot;/about&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/about&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                About&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Right side icons and user menu */}&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            {/* Cart and Favorites (only for authenticated users and not on simplified pages) */}&#10;            {shouldShowSearchAndCart &amp;&amp; isAuthenticated &amp;&amp; (&#10;              &lt;&gt;&#10;                {/* Messages */}&#10;                &lt;Link&#10;                  href=&quot;/messages&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                  title=&quot;Messages&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-envelope text-xl&quot;&gt;&lt;/i&gt;&#10;                  {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;&#10;                &lt;Link&#10;                  href=&quot;/favorites&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-heart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {favorites.length &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {favorites.length}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;                &lt;Link&#10;                  href=&quot;/cart&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-shopping-cart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {cartCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {cartCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Dark mode toggle */}&#10;            &lt;button&#10;              onClick={toggleDarkMode}&#10;              className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;              title={&#10;                isMounted &amp;&amp; isLoaded&#10;                  ? isDarkMode&#10;                    ? &quot;Switch to light mode&quot;&#10;                    : &quot;Switch to dark mode&quot;&#10;                  : &quot;Toggle theme&quot;&#10;              }&#10;            &gt;&#10;              {isMounted &amp;&amp; isLoaded ? (&#10;                isDarkMode ? (&#10;                  &lt;i className=&quot;fas fa-sun text-xl&quot;&gt;&lt;/i&gt;&#10;                ) : (&#10;                  &lt;i className=&quot;fas fa-moon text-xl&quot;&gt;&lt;/i&gt;&#10;                )&#10;              ) : (&#10;                &lt;i className=&quot;fas fa-moon text-xl&quot;&gt;&lt;/i&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            {/* User Authentication (conditional) */}&#10;            {shouldShowUserAuth &amp;&amp; (&#10;              &lt;&gt;&#10;                {isAuthenticated ? (&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setShowUserMenu(!showUserMenu)}&#10;                      className=&quot;flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                        &lt;span className=&quot;text-white text-sm font-medium&quot;&gt;&#10;                          {user?.name?.charAt(0)?.toUpperCase() || &quot;U&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;hidden md:block&quot;&gt;{user?.name}&lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-chevron-down text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;&#10;                    {/* User Dropdown Menu */}&#10;                    {showUserMenu &amp;&amp; (&#10;                      &lt;div className=&quot;absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-2&quot;&gt;&#10;                        &lt;div className=&quot;px-4 py-2 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                            {user?.name}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {user?.email}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-primary-600 dark:text-primary-400 capitalize&quot;&gt;&#10;                            {user?.userType || &quot;User&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Farmer-specific menu items */}&#10;                        {user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/farmer-orders&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              Order Management&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/create&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                              Add Product&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/manage&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#10;                              Manage Products&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Regular user menu items */}&#10;                        {user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/bookings&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              My Orders&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/favorites&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-heart mr-2&quot;&gt;&lt;/i&gt;&#10;                              Favorites&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/cart&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                              Cart&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Common menu items */}&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 mt-2 pt-2&quot;&gt;&#10;                          &lt;Link&#10;                            href=&quot;/messages&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-envelope mr-2&quot;&gt;&lt;/i&gt;&#10;                            Messages&#10;                            {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                              &lt;span className=&quot;ml-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center inline-flex&quot;&gt;&#10;                                {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                              &lt;/span&gt;&#10;                            )}&#10;                          &lt;/Link&gt;&#10;                          &lt;Link&#10;                            href=&quot;/profile&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-user mr-2&quot;&gt;&lt;/i&gt;&#10;                            Profile Settings&#10;                          &lt;/Link&gt;&#10;                          &lt;button&#10;                            onClick={handleLogout}&#10;                            className=&quot;w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-sign-out-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                            Logout&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;Link&#10;                      href=&quot;/login&quot;&#10;                      className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;                      Login&#10;                    &lt;/Link&gt;&#10;                    &lt;Link&#10;                      href=&quot;/register&quot;&#10;                      className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg transition&quot;&#10;                    &gt;&#10;                      Sign Up&#10;                    &lt;/Link&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Mobile menu button */}&#10;            &lt;button className=&quot;lg:hidden text-gray-700 dark:text-gray-300&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bars text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/contexts/CartContext.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/contexts/CartContext.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { createContext, useContext, useEffect, useState } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;&#10;const CartContext = createContext();&#10;&#10;export function CartProvider({ children }) {&#10;  const { data: session, status } = useSession();&#10;  const [cartItems, setCartItems] = useState([]);&#10;  const [cartCount, setCartCount] = useState(0);&#10;  const [loading, setLoading] = useState(true); // Start with loading true to prevent flash&#10;  const [paymentProcessing, setPaymentProcessing] = useState(false);&#10;  const [recentlyOrderedItems, setRecentlyOrderedItems] = useState([]);&#10;  const [cartInitialized, setCartInitialized] = useState(false);&#10;&#10;  // New states for better UX&#10;  const [addingToCart, setAddingToCart] = useState(false);&#10;  const [cartMessage, setCartMessage] = useState(null); // { type: 'success' | 'error' | 'info', message: string }&#10;  const [addingItemId, setAddingItemId] = useState(null); // Track which item is being added&#10;&#10;        );&#10;      productImage =&#10;        categoryImages[item.category] || categoryImages[&quot;Vegetables&quot;];&#10;        Grains:&#10;          &quot;https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Spices:&#10;          &quot;https://images.unsplash.com/photo-1596040033229-a9821ebc227d?w=300&amp;h=300&amp;fit=crop&quot;,&#10;      productImage =&#10;        &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=300&amp;h=300&amp;fit=crop&quot;;&#10;        Leafy:&#10;          &quot;https://images.unsplash.com/photo-1576045057995-568f588f82fb?w=300&amp;h=300&amp;fit=crop&quot;,&#10;          );&#10;        }&#10;      } catch (error) {&#10;        console.error(&#10;          &quot;CartContext Debug - Error loading cart from localStorage:&quot;,&#10;          error,&#10;        );&#10;      } finally {&#10;        setCartInitialized(true);&#10;        console.log(&quot;CartContext Debug - Cart initialization completed&quot;);&#10;      }&#10;    };&#10;&#10;    // Only initialize once&#10;    if (!cartInitialized) {&#10;      console.log(&quot;CartContext Debug - Starting cart initialization&quot;);&#10;      initializeCart();&#10;    }&#10;  }, []); // Empty dependency array to run only once&#10;&#10;  // Handle session-based cart loading and set loading to false&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;CartContext Debug - Session effect triggered&quot;, {&#10;      status,&#10;      cartInitialized,&#10;      sessionUserId: session?.user?.id,&#10;    });&#10;&#10;    if (status === &quot;loading&quot; || !cartInitialized) return;&#10;&#10;    if (session?.user) {&#10;      console.log(&#10;        &quot;CartContext Debug - User is logged in, fetching and merging cart&quot;,&#10;      );&#10;      // User is logged in - fetch from server and merge with localStorage&#10;      fetchCartAndMerge();&#10;    } else {&#10;      console.log(&#10;        &quot;CartContext Debug - No user session, using localStorage cart only&quot;,&#10;      );&#10;        Citrus:&#10;      enrichedImage: productImage,&#10;        Berries:&#10;          &quot;https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=300&amp;h=300&amp;fit=crop&quot;,&#10;    }&#10;  }, [session?.user?.id, status, cartInitialized]); // More specific dependencies&#10;&#10;  // Helper function to safely store data in localStorage with size management&#10;  const safeLocalStorageSet = (key, data) =&gt; {&#10;    try {&#10;      // First, clean and optimize the data - PRESERVE FARMER DATA&#10;      const cleanedData = data.map((item) =&gt; ({&#10;        id: item.id,&#10;      productImage =&#10;        categoryImages[item.category] || categoryImages[&quot;Vegetables&quot;];&#10;        price: item.price,&#10;        quantity: item.quantity,&#10;      productImage =&#10;        &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=300&amp;h=300&amp;fit=crop&quot;;&#10;        unit: item.unit,&#10;        image: Array.isArray(item.image) ? item.image[0] : item.image, // Take only first image&#10;        images: item.images, // Keep images array too&#10;      enrichedImage: productImage,&#10;          setCartItems(items);&#10;          updateCartCount(items);&#10;            &quot;CartContext Debug - Cart initialized with items count:&quot;,&#10;            items.length,&#10;&#10;      // Check size before attempting to store (500KB limit for safety)&#10;      if (dataString.length &gt; 512 * 1024) {&#10;        console.warn(&quot;Cart data too large, reducing items&quot;);&#10;        // Keep only the 20 most recent items&#10;        const reducedData = cleanedData.slice(-20);&#10;        localStorage.setItem(key, JSON.stringify(reducedData));&#10;        return reducedData;&#10;      }&#10;&#10;      // Try to store the full dataset&#10;      localStorage.setItem(key, dataString);&#10;&#10;    } catch (error) {&#10;          const processedItems = items.map((item) =&gt; processItemImage(item));&#10;&#10;          &quot;localStorage quota exceeded, implementing aggressive cleanup&quot;,&#10;        );&#10;&#10;        // Clear other potentially large items first&#10;        try {&#10;          // Clear any other farmfresh related storage&#10;          Object.keys(localStorage).forEach((key) =&gt; {&#10;            if (key.startsWith(&quot;farmfresh-&quot;) &amp;&amp; key !== &quot;farmfresh-cart&quot;) {&#10;              localStorage.removeItem(key);&#10;            }&#10;          });&#10;&#10;          // Try minimal cart storage but still preserve essential farmer data&#10;          const minimalData = data.slice(-5).map((item) =&gt; ({&#10;            id: item.id,&#10;            name: item.name,&#10;            price: item.price,&#10;            quantity: item.quantity,&#10;            farmerId: item.farmerId, // Keep farmer ID even in minimal data&#10;            farmerName: item.farmerName, // Keep farmer name&#10;          }));&#10;&#10;          localStorage.setItem(key, JSON.stringify(minimalData));&#10;          return minimalData;&#10;        } catch (secondError) {&#10;          console.error(&quot;Critical storage error, clearing cart storage&quot;);&#10;          localStorage.removeItem(key);&#10;          return [];&#10;        }&#10;      }&#10;      throw error;&#10;    }&#10;  };&#10;&#10;  // Save to localStorage whenever cart changes (for both authenticated and non-authenticated users)&#10;  useEffect(() =&gt; {&#10;    if (!cartInitialized) return; // Don't save until cart is initialized&#10;&#10;    if (cartItems.length &gt; 0) {&#10;      const storedData = safeLocalStorageSet(&quot;farmfresh-cart&quot;, cartItems);&#10;&#10;      // If the stored data was reduced, update the cart state to match&#10;      if (storedData.length &lt; cartItems.length) {&#10;        setCartItems(storedData);&#10;        setCartMessage({&#10;          type: &quot;info&quot;,&#10;          message: `Cart was reduced to ${storedData.length} items due to storage limits.`,&#10;        });&#10;      }&#10;&#10;      updateCartCount(cartItems);&#10;&#10;      // Also save to server if user is authenticated (debounced to prevent excessive calls)&#10;      if (session?.user) {&#10;        const timeoutId = setTimeout(() =&gt; saveCart(cartItems), 500);&#10;        return () =&gt; clearTimeout(timeoutId);&#10;      }&#10;    } else {&#10;      // Clear localStorage when cart is empty&#10;      try {&#10;        localStorage.removeItem(&quot;farmfresh-cart&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error clearing empty cart:&quot;, error);&#10;      }&#10;    }&#10;  }, [cartItems, session?.user?.id, cartInitialized]);&#10;&#10;  const updateCartCount = (items) =&gt; {&#10;    const count = items.reduce((total, item) =&gt; total + item.quantity, 0);&#10;    setCartCount(count);&#10;  };&#10;&#10;  const fetchCartAndMerge = async () =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    setLoading(true);&#10;    try {&#10;      const response = await fetch(&quot;/api/cart&quot;);&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        const serverItems = data.items || [];&#10;&#10;        // Get current localStorage items&#10;        const localStorageCart = localStorage.getItem(&quot;farmfresh-cart&quot;);&#10;        let localItems = [];&#10;&#10;        if (localStorageCart) {&#10;          try {&#10;            localItems = JSON.parse(localStorageCart);&#10;          } catch (error) {&#10;            console.error(&quot;Error parsing localStorage cart:&quot;, error);&#10;          }&#10;        }&#10;&#10;        // Merge logic: prefer server data, but include local items not on server&#10;        const mergedItems = [...serverItems];&#10;&#10;        localItems.forEach((localItem) =&gt; {&#10;          const existsOnServer = serverItems.find(&#10;            (serverItem) =&gt; serverItem.id === localItem.id,&#10;          );&#10;          if (!existsOnServer) {&#10;            mergedItems.push(localItem);&#10;          }&#10;        });&#10;&#10;        setCartItems(mergedItems);&#10;&#10;        // Save merged cart back to server if there were local items&#10;        if (&#10;          localItems.length &gt; 0 &amp;&amp;&#10;          mergedItems.length !== serverItems.length&#10;        ) {&#10;          saveCart(mergedItems);&#10;        }&#10;      } else {&#10;        console.error(&#10;          &quot;Failed to fetch cart:&quot;,&#10;          response.status,&#10;          response.statusText,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching cart:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const saveCart = async (items) =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    try {&#10;      // Remove the Authorization header since NextAuth uses cookies&#10;      const response = await fetch(&quot;/api/cart&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ items }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        console.error(&#10;          &quot;Failed to save cart:&quot;,&#10;          response.status,&#10;          response.statusText,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error saving cart:&quot;, error);&#10;    }&#10;  };&#10;&#10;  const addToCart = async (product, quantity = 1) =&gt; {&#10;    try {&#10;      // Check if user is a farmer and prevent them from adding to cart&#10;      if (session?.user?.userType === &quot;farmer&quot;) {&#10;        throw new Error(&#10;          &quot;Farmers cannot purchase products. You can only sell your own products on this platform.&quot;,&#10;        );&#10;      }&#10;&#10;      setAddingToCart(true);&#10;      setAddingItemId(product.id);&#10;&#10;      // Stock validation logic&#10;      const currentStock = product.stock || 0;&#10;      const existingCartItem = cartItems.find((item) =&gt; item.id === product.id);&#10;      const currentCartQuantity = existingCartItem&#10;        ? existingCartItem.quantity&#10;        : 0;&#10;      const totalRequestedQuantity = currentCartQuantity + quantity;&#10;&#10;      // Check if there's enough stock available&#10;      if (totalRequestedQuantity &gt; currentStock) {&#10;        const availableQuantity = Math.max(&#10;          0,&#10;          currentStock - currentCartQuantity,&#10;        );&#10;&#10;        if (availableQuantity === 0) {&#10;          throw new Error(&#10;            `${product.name} is out of stock. Cannot add more items to cart.`,&#10;          );&#10;        } else {&#10;          throw new Error(&#10;            `Only ${availableQuantity} ${product.unit || &quot;units&quot;} of ${product.name} available. You already have ${currentCartQuantity} in your cart.`,&#10;          );&#10;        }&#10;      }&#10;&#10;      // Check stock against purchase count validation for bundle/kg products&#10;      if (&#10;        product.unit &amp;&amp;&#10;        (product.unit.toLowerCase() === &quot;bundle&quot; ||&#10;          product.unit.toLowerCase() === &quot;kg&quot;)&#10;      ) {&#10;        setCartItems(mergedItems);&#10;          );&#10;        }&#10;      }&#10;&#10;      setCartItems((prevItems) =&gt; {&#10;        const existingItem = prevItems.find((item) =&gt; item.id === product.id);&#10;          saveCart(mergedItems);&#10;&#10;        if (existingItem) {&#10;          newItems = prevItems.map((item) =&gt;&#10;            item.id === product.id&#10;              ? { ...item, quantity: item.quantity + quantity }&#10;              : item,&#10;          );&#10;        } else {&#10;          newItems = [...prevItems, { ...product, quantity }];&#10;        }&#10;&#10;        if (session?.user) {&#10;          saveCart(newItems);&#10;        }&#10;&#10;        setCartMessage({&#10;          type: &quot;success&quot;,&#10;          message: `${quantity} ${product.unit || &quot;unit&quot;}${quantity &gt; 1 ? &quot;s&quot; : &quot;&quot;} of ${product.name} added to cart.`,&#10;        });&#10;&#10;        return newItems;&#10;      });&#10;&#10;      return true; // Return success&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      setCartMessage({&#10;        type: &quot;error&quot;,&#10;        message: error.message || &quot;Error adding item to cart.&quot;,&#10;      });&#10;      throw error; // Re-throw to let calling components handle the error&#10;    } finally {&#10;      setAddingToCart(false);&#10;      setAddingItemId(null);&#10;    }&#10;  };&#10;&#10;  const updateQuantity = (productId, quantity) =&gt; {&#10;    setCartItems((prevItems) =&gt; {&#10;      // Find the product to validate stock&#10;      const cartItem = prevItems.find((item) =&gt; item.id === productId);&#10;      if (cartItem &amp;&amp; quantity &gt; cartItem.stock) {&#10;        setCartMessage({&#10;          type: &quot;error&quot;,&#10;          message: `Cannot set quantity to ${quantity}. Only ${cartItem.stock} ${cartItem.unit || &quot;units&quot;} available.`,&#10;        });&#10;        return prevItems; // Return unchanged items&#10;      }&#10;&#10;      const newItems = prevItems&#10;        .map((item) =&gt;&#10;          item.id === productId&#10;            ? { ...item, quantity: Math.max(0, quantity) }&#10;            : item,&#10;        )&#10;        .filter((item) =&gt; item.quantity &gt; 0);&#10;&#10;      if (session?.user) {&#10;        saveCart(newItems);&#10;      }&#10;&#10;      return newItems;&#10;    });&#10;  };&#10;&#10;  const removeFromCart = (productId) =&gt; {&#10;    setCartItems((prevItems) =&gt; {&#10;      const newItems = prevItems.filter((item) =&gt; item.id !== productId);&#10;&#10;      if (session?.user) {&#10;        saveCart(newItems);&#10;      }&#10;&#10;      return newItems;&#10;    });&#10;  };&#10;&#10;  const clearCart = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      // Clear cart items first&#10;      setCartItems([]);&#10;      setCartCount(0); // Explicitly reset cart count&#10;&#10;      // Clear localStorage immediately&#10;      try {&#10;        localStorage.removeItem(&quot;farmfresh-cart&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error clearing localStorage:&quot;, error);&#10;      }&#10;&#10;      // Clear server cart if user is authenticated&#10;      if (session?.user) {&#10;        const userId =&#10;          session.user.userId ||&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.email;&#10;        try {&#10;          const response = await fetch(&#10;            `/api/cart?userId=${encodeURIComponent(userId)}`,&#10;            {&#10;              method: &quot;DELETE&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;              },&#10;            },&#10;          );&#10;&#10;          if (!response.ok) {&#10;            console.error(&#10;              &quot;Failed to clear server cart:&quot;,&#10;              response.status,&#10;              response.statusText,&#10;            );&#10;          }&#10;        } catch (error) {&#10;          console.error(&quot;Error clearing server cart:&quot;, error);&#10;        }&#10;      }&#10;&#10;      setCartMessage({&#10;        type: &quot;success&quot;,&#10;        message: &quot;Cart cleared successfully&quot;,&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Error clearing cart:&quot;, error);&#10;      setCartMessage({&#10;        type: &quot;error&quot;,&#10;        message: &quot;Failed to clear cart completely&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const clearCartAfterPayment = () =&gt; {&#10;    // Store recently ordered items before clearing&#10;    setRecentlyOrderedItems([...cartItems]);&#10;&#10;    // Clear cart state&#10;    setCartItems([]);&#10;    setCartCount(0); // Explicitly reset cart count&#10;&#10;    // Clear localStorage&#10;    try {&#10;      localStorage.removeItem(&quot;farmfresh-cart&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error clearing localStorage after payment:&quot;, error);&#10;    }&#10;&#10;    setCartMessage({&#10;      type: &quot;success&quot;,&#10;      message: &quot;Order placed successfully! Cart cleared.&quot;,&#10;    });&#10;  };&#10;&#10;  const getCartTotal = () =&gt; {&#10;    return cartItems.reduce(&#10;      (total, item) =&gt; total + item.price * item.quantity,&#10;      0,&#10;    );&#10;  };&#10;&#10;  const getCartItemsCount = () =&gt; {&#10;    return cartCount;&#10;  };&#10;&#10;  // Function to clear cart messages&#10;  const clearCartMessage = () =&gt; {&#10;    setCartMessage(null);&#10;  };&#10;&#10;  // Auto-clear messages after 5 seconds&#10;  useEffect(() =&gt; {&#10;    if (cartMessage) {&#10;      const timer = setTimeout(() =&gt; {&#10;        setCartMessage(null);&#10;      }, 5000);&#10;      return () =&gt; clearTimeout(timer);&#10;    }&#10;  }, [cartMessage]);&#10;&#10;  const value = {&#10;    items: cartItems,&#10;    cartCount,&#10;    loading,&#10;    paymentProcessing,&#10;    recentlyOrderedItems,&#10;    addingToCart,&#10;    cartMessage,&#10;    addingItemId,&#10;    addToCart,&#10;    updateQuantity,&#10;    removeFromCart,&#10;    clearCart,&#10;    clearCartAfterPayment,&#10;    getCartTotal,&#10;    getCartItemsCount,&#10;    fetchCart: fetchCartAndMerge,&#10;    clearCartMessage,&#10;  };&#10;&#10;  return &lt;CartContext.Provider value={value}&gt;{children}&lt;/CartContext.Provider&gt;;&#10;}&#10;&#10;export function useCart() {&#10;  const context = useContext(CartContext);&#10;  if (!context) {&#10;    throw new Error(&quot;useCart must be used within a CartProvider&quot;);&#10;  }&#10;  return context;&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { createContext, useContext, useEffect, useState } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;&#10;const CartContext = createContext();&#10;&#10;export function CartProvider({ children }) {&#10;  const { data: session, status } = useSession();&#10;  const [cartItems, setCartItems] = useState([]);&#10;  const [cartCount, setCartCount] = useState(0);&#10;  const [loading, setLoading] = useState(true); // Start with loading true to prevent flash&#10;  const [paymentProcessing, setPaymentProcessing] = useState(false);&#10;  const [recentlyOrderedItems, setRecentlyOrderedItems] = useState([]);&#10;  const [cartInitialized, setCartInitialized] = useState(false);&#10;&#10;  // New states for better UX&#10;  const [addingToCart, setAddingToCart] = useState(false);&#10;  const [cartMessage, setCartMessage] = useState(null); // { type: 'success' | 'error' | 'info', message: string }&#10;  const [addingItemId, setAddingItemId] = useState(null); // Track which item is being added&#10;&#10;  // Helper function to extract URL from various image formats&#10;  const extractImageUrl = (imageData) =&gt; {&#10;    if (!imageData) return null;&#10;&#10;    // Direct string URL&#10;    if (typeof imageData === &quot;string&quot; &amp;&amp; imageData.trim()) {&#10;      return imageData.trim();&#10;    }&#10;&#10;    // Object with url property&#10;    if (typeof imageData === &quot;object&quot; &amp;&amp; imageData.url) {&#10;      return imageData.url;&#10;    }&#10;&#10;    // Object with src property&#10;    if (typeof imageData === &quot;object&quot; &amp;&amp; imageData.src) {&#10;      return imageData.src;&#10;    }&#10;&#10;    // Object with path property&#10;    if (typeof imageData === &quot;object&quot; &amp;&amp; imageData.path) {&#10;      return imageData.path;&#10;    }&#10;&#10;    return null;&#10;  };&#10;&#10;  // Helper function to process cart item images&#10;  const processItemImage = (item) =&gt; {&#10;    let productImage = null;&#10;&#10;    // Priority 1: Direct image field&#10;    if (item.image) {&#10;      if (Array.isArray(item.image) &amp;&amp; item.image.length &gt; 0) {&#10;        productImage = extractImageUrl(item.image[0]);&#10;      } else {&#10;        productImage = extractImageUrl(item.image);&#10;      }&#10;    }&#10;&#10;    // Priority 2: images array field&#10;    if (!productImage &amp;&amp; item.images &amp;&amp; Array.isArray(item.images) &amp;&amp; item.images.length &gt; 0) {&#10;      productImage = extractImageUrl(item.images[0]);&#10;    }&#10;&#10;    // Priority 3: Category-based default images&#10;    if (!productImage &amp;&amp; item.category) {&#10;      const categoryImages = {&#10;        Vegetables: &quot;https://images.unsplash.com/photo-1540420773420-3366772f4999?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Fruits: &quot;https://images.unsplash.com/photo-1619566636858-adf3ef46400b?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Dairy: &quot;https://images.unsplash.com/photo-1550583724-b2692b85b150?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Herbs: &quot;https://images.unsplash.com/photo-1462536943532-57a629f6cc60?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Honey: &quot;https://images.unsplash.com/photo-1587049352846-4a222e784d38?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Grains: &quot;https://images.unsplash.com/photo-1586201375761-83865001e31c?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Spices: &quot;https://images.unsplash.com/photo-1596040033229-a9821ebc227d?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Meat: &quot;https://images.unsplash.com/photo-1588347818505-d0e4dfe81f30?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Leafy: &quot;https://images.unsplash.com/photo-1576045057995-568f588f82fb?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Root: &quot;https://images.unsplash.com/photo-1518977676601-b53f82aba655?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Citrus: &quot;https://images.unsplash.com/photo-1557800634-7bf3c7e2d5ae?w=300&amp;h=300&amp;fit=crop&quot;,&#10;        Berries: &quot;https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=300&amp;h=300&amp;fit=crop&quot;,&#10;      };&#10;&#10;      productImage = categoryImages[item.category] || categoryImages[&quot;Vegetables&quot;];&#10;    }&#10;&#10;    // Priority 4: Ultimate fallback&#10;    if (!productImage) {&#10;      productImage = &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=300&amp;h=300&amp;fit=crop&quot;;&#10;    }&#10;&#10;    return {&#10;      ...item,&#10;      enrichedImage: productImage&#10;    };&#10;  };&#10;&#10;  // Initialize cart from localStorage immediately&#10;  useEffect(() =&gt; {&#10;    const initializeCart = () =&gt; {&#10;      console.log(&quot;CartContext Debug - Initializing cart from localStorage&quot;);&#10;      try {&#10;        const savedCart = localStorage.getItem(&quot;farmfresh-cart&quot;);&#10;        console.log(&#10;          &quot;CartContext Debug - Saved cart from localStorage:&quot;,&#10;          savedCart,&#10;        );&#10;&#10;        if (savedCart) {&#10;          const items = JSON.parse(savedCart);&#10;          console.log(&quot;CartContext Debug - Parsed items:&quot;, items);&#10;          &#10;          // Process images for all loaded items&#10;          const processedItems = items.map(item =&gt; processItemImage(item));&#10;          &#10;          setCartItems(processedItems);&#10;          updateCartCount(processedItems);&#10;          console.log(&#10;            &quot;CartContext Debug - Cart initialized with processed items count:&quot;,&#10;            processedItems.length,&#10;          );&#10;        } else {&#10;          console.log(&#10;            &quot;CartContext Debug - No saved cart found in localStorage&quot;,&#10;          );&#10;        }&#10;      } catch (error) {&#10;        console.error(&#10;          &quot;CartContext Debug - Error loading cart from localStorage:&quot;,&#10;          error,&#10;        );&#10;      } finally {&#10;        setCartInitialized(true);&#10;        console.log(&quot;CartContext Debug - Cart initialization completed&quot;);&#10;      }&#10;    };&#10;&#10;    // Only initialize once&#10;    if (!cartInitialized) {&#10;      console.log(&quot;CartContext Debug - Starting cart initialization&quot;);&#10;      initializeCart();&#10;    }&#10;  }, []); // Empty dependency array to run only once&#10;&#10;  // Handle session-based cart loading and set loading to false&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;CartContext Debug - Session effect triggered&quot;, {&#10;      status,&#10;      cartInitialized,&#10;      sessionUserId: session?.user?.id,&#10;    });&#10;&#10;    if (status === &quot;loading&quot; || !cartInitialized) return;&#10;&#10;    if (session?.user) {&#10;      console.log(&#10;        &quot;CartContext Debug - User is logged in, fetching and merging cart&quot;,&#10;      );&#10;      // User is logged in - fetch from server and merge with localStorage&#10;      fetchCartAndMerge();&#10;    } else {&#10;      console.log(&#10;        &quot;CartContext Debug - No user session, using localStorage cart only&quot;,&#10;      );&#10;      // For non-authenticated users, set loading to false only here&#10;      setLoading(false);&#10;    }&#10;  }, [session?.user?.id, status, cartInitialized]); // More specific dependencies&#10;&#10;  // Helper function to safely store data in localStorage with size management&#10;  const safeLocalStorageSet = (key, data) =&gt; {&#10;    try {&#10;      // First, clean and optimize the data - PRESERVE FARMER DATA&#10;      const cleanedData = data.map((item) =&gt; ({&#10;        id: item.id,&#10;        name: item.name,&#10;        price: item.price,&#10;        quantity: item.quantity,&#10;        stock: item.stock,&#10;        unit: item.unit,&#10;        image: Array.isArray(item.image) ? item.image[0] : item.image, // Take only first image&#10;        images: item.images, // Keep images array too&#10;        category: item.category,&#10;        description: item.description,&#10;        // PRESERVE FARMER DATA - This was missing!&#10;        farmerId: item.farmerId,&#10;        farmerName: item.farmerName,&#10;        farmer: item.farmer, // Keep the full farmer object if it exists&#10;      }));&#10;&#10;      const dataString = JSON.stringify(cleanedData);&#10;&#10;      // Check size before attempting to store (500KB limit for safety)&#10;      if (dataString.length &gt; 512 * 1024) {&#10;        console.warn(&quot;Cart data too large, reducing items&quot;);&#10;        // Keep only the 20 most recent items&#10;        const reducedData = cleanedData.slice(-20);&#10;        localStorage.setItem(key, JSON.stringify(reducedData));&#10;        return reducedData;&#10;      }&#10;&#10;      // Try to store the full dataset&#10;      localStorage.setItem(key, dataString);&#10;      return cleanedData;&#10;    } catch (error) {&#10;      if (error.name === &quot;QuotaExceededError&quot;) {&#10;        console.warn(&#10;          &quot;localStorage quota exceeded, implementing aggressive cleanup&quot;,&#10;        );&#10;&#10;        // Clear other potentially large items first&#10;        try {&#10;          // Clear any other farmfresh related storage&#10;          Object.keys(localStorage).forEach((key) =&gt; {&#10;            if (key.startsWith(&quot;farmfresh-&quot;) &amp;&amp; key !== &quot;farmfresh-cart&quot;) {&#10;              localStorage.removeItem(key);&#10;            }&#10;          });&#10;&#10;          // Try minimal cart storage but still preserve essential farmer data&#10;          const minimalData = data.slice(-5).map((item) =&gt; ({&#10;            id: item.id,&#10;            name: item.name,&#10;            price: item.price,&#10;            quantity: item.quantity,&#10;            farmerId: item.farmerId, // Keep farmer ID even in minimal data&#10;            farmerName: item.farmerName, // Keep farmer name&#10;          }));&#10;&#10;          localStorage.setItem(key, JSON.stringify(minimalData));&#10;          return minimalData;&#10;        } catch (secondError) {&#10;          console.error(&quot;Critical storage error, clearing cart storage&quot;);&#10;          localStorage.removeItem(key);&#10;          return [];&#10;        }&#10;      }&#10;      throw error;&#10;    }&#10;  };&#10;&#10;  // Save to localStorage whenever cart changes (for both authenticated and non-authenticated users)&#10;  useEffect(() =&gt; {&#10;    if (!cartInitialized) return; // Don't save until cart is initialized&#10;&#10;    if (cartItems.length &gt; 0) {&#10;      const storedData = safeLocalStorageSet(&quot;farmfresh-cart&quot;, cartItems);&#10;&#10;      // If the stored data was reduced, update the cart state to match&#10;      if (storedData.length &lt; cartItems.length) {&#10;        setCartItems(storedData);&#10;        setCartMessage({&#10;          type: &quot;info&quot;,&#10;          message: `Cart was reduced to ${storedData.length} items due to storage limits.`,&#10;        });&#10;      }&#10;&#10;      updateCartCount(cartItems);&#10;&#10;      // Also save to server if user is authenticated (debounced to prevent excessive calls)&#10;      if (session?.user) {&#10;        const timeoutId = setTimeout(() =&gt; saveCart(cartItems), 500);&#10;        return () =&gt; clearTimeout(timeoutId);&#10;      }&#10;    } else {&#10;      // Clear localStorage when cart is empty&#10;      try {&#10;        localStorage.removeItem(&quot;farmfresh-cart&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error clearing empty cart:&quot;, error);&#10;      }&#10;    }&#10;  }, [cartItems, session?.user?.id, cartInitialized]);&#10;&#10;  const updateCartCount = (items) =&gt; {&#10;    const count = items.reduce((total, item) =&gt; total + item.quantity, 0);&#10;    setCartCount(count);&#10;  };&#10;&#10;  const fetchCartAndMerge = async () =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    setLoading(true);&#10;    try {&#10;      const response = await fetch(&quot;/api/cart&quot;);&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        const serverItems = data.items || [];&#10;&#10;        // Get current localStorage items&#10;        const localStorageCart = localStorage.getItem(&quot;farmfresh-cart&quot;);&#10;        let localItems = [];&#10;&#10;        if (localStorageCart) {&#10;          try {&#10;            localItems = JSON.parse(localStorageCart);&#10;          } catch (error) {&#10;            console.error(&quot;Error parsing localStorage cart:&quot;, error);&#10;          }&#10;        }&#10;&#10;        // Merge logic: prefer server data, but include local items not on server&#10;        const mergedItems = [...serverItems];&#10;&#10;        localItems.forEach((localItem) =&gt; {&#10;          const existsOnServer = serverItems.find(&#10;            (serverItem) =&gt; serverItem.id === localItem.id,&#10;          );&#10;          if (!existsOnServer) {&#10;            mergedItems.push(localItem);&#10;          }&#10;        });&#10;&#10;        // Process images for all merged items&#10;        const processedItems = mergedItems.map(item =&gt; processItemImage(item));&#10;        &#10;        setCartItems(processedItems);&#10;&#10;        // Save merged cart back to server if there were local items&#10;        if (&#10;          localItems.length &gt; 0 &amp;&amp;&#10;          mergedItems.length !== serverItems.length&#10;        ) {&#10;          saveCart(processedItems);&#10;        }&#10;      } else {&#10;        console.error(&#10;          &quot;Failed to fetch cart:&quot;,&#10;          response.status,&#10;          response.statusText,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching cart:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const saveCart = async (items) =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    try {&#10;      // Remove the Authorization header since NextAuth uses cookies&#10;      const response = await fetch(&quot;/api/cart&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ items }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        console.error(&#10;          &quot;Failed to save cart:&quot;,&#10;          response.status,&#10;          response.statusText,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error saving cart:&quot;, error);&#10;    }&#10;  };&#10;&#10;  const addToCart = async (product, quantity = 1) =&gt; {&#10;    try {&#10;      // Check if user is a farmer and prevent them from adding to cart&#10;      if (session?.user?.userType === &quot;farmer&quot;) {&#10;        throw new Error(&#10;          &quot;Farmers cannot purchase products. You can only sell your own products on this platform.&quot;,&#10;        );&#10;      }&#10;&#10;      setAddingToCart(true);&#10;      setAddingItemId(product.id);&#10;&#10;      // Stock validation logic&#10;      const currentStock = product.stock || 0;&#10;      const existingCartItem = cartItems.find((item) =&gt; item.id === product.id);&#10;      const currentCartQuantity = existingCartItem&#10;        ? existingCartItem.quantity&#10;        : 0;&#10;      const totalRequestedQuantity = currentCartQuantity + quantity;&#10;&#10;      // Check if there's enough stock available&#10;      if (totalRequestedQuantity &gt; currentStock) {&#10;        const availableQuantity = Math.max(&#10;          0,&#10;          currentStock - currentCartQuantity,&#10;        );&#10;&#10;        if (availableQuantity === 0) {&#10;          throw new Error(&#10;            `${product.name} is out of stock. Cannot add more items to cart.`,&#10;          );&#10;        } else {&#10;          throw new Error(&#10;            `Only ${availableQuantity} ${product.unit || &quot;units&quot;} of ${product.name} available. You already have ${currentCartQuantity} in your cart.`,&#10;          );&#10;        }&#10;      }&#10;&#10;      // Check stock against purchase count validation for bundle/kg products&#10;      if (&#10;        product.unit &amp;&amp;&#10;        (product.unit.toLowerCase() === &quot;bundle&quot; ||&#10;          product.unit.toLowerCase() === &quot;kg&quot;)&#10;      ) {&#10;        // For bundles and kg products, validate against exact stock numbers&#10;        if (quantity &gt; currentStock) {&#10;          throw new Error(&#10;            `Cannot add ${quantity} ${product.unit}${quantity &gt; 1 ? &quot;s&quot; : &quot;&quot;} of ${product.name}. Only ${currentStock} ${product.unit}${currentStock !== 1 ? &quot;s&quot; : &quot;&quot;} available.`,&#10;          );&#10;        }&#10;      }&#10;&#10;      setCartItems((prevItems) =&gt; {&#10;        const existingItem = prevItems.find((item) =&gt; item.id === product.id);&#10;        let newItems;&#10;&#10;        if (existingItem) {&#10;          newItems = prevItems.map((item) =&gt;&#10;            item.id === product.id&#10;              ? { ...item, quantity: item.quantity + quantity }&#10;              : item,&#10;          );&#10;        } else {&#10;          newItems = [...prevItems, { ...product, quantity }];&#10;        }&#10;&#10;        if (session?.user) {&#10;          saveCart(newItems);&#10;        }&#10;&#10;        setCartMessage({&#10;          type: &quot;success&quot;,&#10;          message: `${quantity} ${product.unit || &quot;unit&quot;}${quantity &gt; 1 ? &quot;s&quot; : &quot;&quot;} of ${product.name} added to cart.`,&#10;        });&#10;&#10;        return newItems;&#10;      });&#10;&#10;      return true; // Return success&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      setCartMessage({&#10;        type: &quot;error&quot;,&#10;        message: error.message || &quot;Error adding item to cart.&quot;,&#10;      });&#10;      throw error; // Re-throw to let calling components handle the error&#10;    } finally {&#10;      setAddingToCart(false);&#10;      setAddingItemId(null);&#10;    }&#10;  };&#10;&#10;  const updateQuantity = (productId, quantity) =&gt; {&#10;    setCartItems((prevItems) =&gt; {&#10;      // Find the product to validate stock&#10;      const cartItem = prevItems.find((item) =&gt; item.id === productId);&#10;      if (cartItem &amp;&amp; quantity &gt; cartItem.stock) {&#10;        setCartMessage({&#10;          type: &quot;error&quot;,&#10;          message: `Cannot set quantity to ${quantity}. Only ${cartItem.stock} ${cartItem.unit || &quot;units&quot;} available.`,&#10;        });&#10;        return prevItems; // Return unchanged items&#10;      }&#10;&#10;      const newItems = prevItems&#10;        .map((item) =&gt;&#10;          item.id === productId&#10;            ? { ...item, quantity: Math.max(0, quantity) }&#10;            : item,&#10;        )&#10;        .filter((item) =&gt; item.quantity &gt; 0);&#10;&#10;      if (session?.user) {&#10;        saveCart(newItems);&#10;      }&#10;&#10;      return newItems;&#10;    });&#10;  };&#10;&#10;  const removeFromCart = (productId) =&gt; {&#10;    setCartItems((prevItems) =&gt; {&#10;      const newItems = prevItems.filter((item) =&gt; item.id !== productId);&#10;&#10;      if (session?.user) {&#10;        saveCart(newItems);&#10;      }&#10;&#10;      return newItems;&#10;    });&#10;  };&#10;&#10;  const clearCart = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      // Clear cart items first&#10;      setCartItems([]);&#10;      setCartCount(0); // Explicitly reset cart count&#10;&#10;      // Clear localStorage immediately&#10;      try {&#10;        localStorage.removeItem(&quot;farmfresh-cart&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error clearing localStorage:&quot;, error);&#10;      }&#10;&#10;      // Clear server cart if user is authenticated&#10;      if (session?.user) {&#10;        const userId =&#10;          session.user.userId ||&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.email;&#10;        try {&#10;          const response = await fetch(&#10;            `/api/cart?userId=${encodeURIComponent(userId)}`,&#10;            {&#10;              method: &quot;DELETE&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;              },&#10;            },&#10;          );&#10;&#10;          if (!response.ok) {&#10;            console.error(&#10;              &quot;Failed to clear server cart:&quot;,&#10;              response.status,&#10;              response.statusText,&#10;            );&#10;          }&#10;        } catch (error) {&#10;          console.error(&quot;Error clearing server cart:&quot;, error);&#10;        }&#10;      }&#10;&#10;      setCartMessage({&#10;        type: &quot;success&quot;,&#10;        message: &quot;Cart cleared successfully&quot;,&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Error clearing cart:&quot;, error);&#10;      setCartMessage({&#10;        type: &quot;error&quot;,&#10;        message: &quot;Failed to clear cart completely&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const clearCartAfterPayment = () =&gt; {&#10;    // Store recently ordered items before clearing&#10;    setRecentlyOrderedItems([...cartItems]);&#10;&#10;    // Clear cart state&#10;    setCartItems([]);&#10;    setCartCount(0); // Explicitly reset cart count&#10;&#10;    // Clear localStorage&#10;    try {&#10;      localStorage.removeItem(&quot;farmfresh-cart&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error clearing localStorage after payment:&quot;, error);&#10;    }&#10;&#10;    setCartMessage({&#10;      type: &quot;success&quot;,&#10;      message: &quot;Order placed successfully! Cart cleared.&quot;,&#10;    });&#10;  };&#10;&#10;  const getCartTotal = () =&gt; {&#10;    return cartItems.reduce(&#10;      (total, item) =&gt; total + item.price * item.quantity,&#10;      0,&#10;    );&#10;  };&#10;&#10;  const getCartItemsCount = () =&gt; {&#10;    return cartCount;&#10;  };&#10;&#10;  // Function to clear cart messages&#10;  const clearCartMessage = () =&gt; {&#10;    setCartMessage(null);&#10;  };&#10;&#10;  // Auto-clear messages after 5 seconds&#10;  useEffect(() =&gt; {&#10;    if (cartMessage) {&#10;      const timer = setTimeout(() =&gt; {&#10;        setCartMessage(null);&#10;      }, 5000);&#10;      return () =&gt; clearTimeout(timer);&#10;    }&#10;  }, [cartMessage]);&#10;&#10;  const value = {&#10;    items: cartItems,&#10;    cartCount,&#10;    loading,&#10;    paymentProcessing,&#10;    recentlyOrderedItems,&#10;    addingToCart,&#10;    cartMessage,&#10;    addingItemId,&#10;    addToCart,&#10;    updateQuantity,&#10;    removeFromCart,&#10;    clearCart,&#10;    clearCartAfterPayment,&#10;    getCartTotal,&#10;    getCartItemsCount,&#10;    fetchCart: fetchCartAndMerge,&#10;    clearCartMessage,&#10;  };&#10;&#10;  return &lt;CartContext.Provider value={value}&gt;{children}&lt;/CartContext.Provider&gt;;&#10;}&#10;&#10;export function useCart() {&#10;  const context = useContext(CartContext);&#10;  if (!context) {&#10;    throw new Error(&quot;useCart must be used within a CartProvider&quot;);&#10;  }&#10;  return context;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/correct-dill-oregano-ownership.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/correct-dill-oregano-ownership.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function correctDillOreganoOwnership() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; CORRECTING DILL AND OREGANO OWNERSHIP\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Get Chashi Jashim's farmer data&#10;    console.log(&quot;1.  GETTING CHASHI JASHIM'S FARMER DATA:&quot;);&#10;    const chashiJashim = await db.collection(&quot;farmers&quot;).findOne({&#10;      _id: new ObjectId(&quot;688b3f4f37eade0f39f64de2&quot;)&#10;    });&#10;&#10;    if (!chashiJashim) {&#10;      console.log(&quot;❌ Chashi Jashim farmer not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(`- ID: ${chashiJashim._id}`);&#10;    console.log(`- Name: ${chashiJashim.name}`);&#10;    console.log(`- Email: ${chashiJashim.email}`);&#10;&#10;    // 2. Get Ayesha Siddika's farmer data&#10;    console.log(&quot;\n2.  GETTING AYESHA SIDDIKA'S FARMER DATA:&quot;);&#10;    const ayesha = await db.collection(&quot;farmers&quot;).findOne({&#10;      _id: &quot;farmer_008&quot;&#10;    });&#10;&#10;    console.log(`- ID: ${ayesha._id}`);&#10;    console.log(`- Name: ${ayesha.name}`);&#10;    console.log(`- Email: ${ayesha.email}`);&#10;&#10;    // 3. Check current state before correction&#10;    console.log(&quot;\n3.  CURRENT STATE BEFORE CORRECTION:&quot;);&#10;    &#10;    const ayeshaProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    console.log(`Ayesha currently has ${ayeshaProducts.length} products:`);&#10;    ayeshaProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    const chashiProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: chashiJashim._id.toString() },&#10;        { farmerId: new ObjectId(chashiJashim._id) }&#10;      ]&#10;    }).toArray();&#10;    &#10;    console.log(`Chashi Jashim currently has ${chashiProducts.length} products:`);&#10;    chashiProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // 4. Move Dill and Oregano to Chashi Jashim&#10;    console.log(&quot;\n4.  MOVING DILL AND OREGANO TO CHASHI JASHIM...&quot;);&#10;    &#10;    const productsToMove = [&quot;Dill&quot;, &quot;Oregano&quot;];&#10;    &#10;    for (const productName of productsToMove) {&#10;      console.log(`\nMoving ${productName}...`);&#10;      &#10;      const updateData = {&#10;        // Set top-level fields to Chashi Jashim&#10;        farmerId: chashiJashim._id.toString(),&#10;        farmerName: chashiJashim.name,&#10;        farmerEmail: chashiJashim.email,&#10;        &#10;        // Set embedded farmer object to Chashi Jashim&#10;        farmer: {&#10;          _id: chashiJashim._id.toString(),&#10;          name: chashiJashim.name,&#10;          email: chashiJashim.email,&#10;          farmName: chashiJashim.farmName,&#10;          location: chashiJashim.location,&#10;          phone: chashiJashim.phone,&#10;          specializations: chashiJashim.specializations || [],&#10;          farmingMethods: chashiJashim.farmingMethods || [],&#10;          verified: chashiJashim.verified || false&#10;        },&#10;        &#10;        // Update timestamp&#10;        updatedAt: new Date()&#10;      };&#10;&#10;      const result = await db.collection(&quot;products&quot;).updateOne(&#10;        { name: productName },&#10;        { $set: updateData }&#10;      );&#10;&#10;      console.log(`  ✅ Updated ${productName}: ${result.modifiedCount} document(s) modified`);&#10;    }&#10;&#10;    // 5. Verify the correction&#10;    console.log(&quot;\n5.  VERIFYING CORRECTION:&quot;);&#10;    &#10;    const updatedAyeshaProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    console.log(`Ayesha now has ${updatedAyeshaProducts.length} products (should be 3):`);&#10;    updatedAyeshaProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    const updatedChashiProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: chashiJashim._id.toString()&#10;    }).toArray();&#10;    &#10;    console.log(`Chashi Jashim now has ${updatedChashiProducts.length} products:`);&#10;    updatedChashiProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // 6. Test frontend queries for both farmers&#10;    console.log(&quot;\n6.  TESTING FRONTEND QUERIES:&quot;);&#10;    &#10;    // Test Ayesha's query&#10;    const ayeshaFrontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_008&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_008&quot; },&#10;        { farmerName: &quot;Ayesha Siddika&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Ayesha's frontend query finds ${ayeshaFrontendQuery.length} products:`);&#10;    ayeshaFrontendQuery.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // Test Chashi Jashim's query&#10;    const chashiFrontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: chashiJashim._id.toString() },&#10;        { &quot;farmer._id&quot;: chashiJashim._id.toString() },&#10;        { farmerName: &quot;chashi jashim&quot; },&#10;        { &quot;farmer.name&quot;: &quot;chashi jashim&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Chashi Jashim's frontend query finds ${chashiFrontendQuery.length} products:`);&#10;    chashiFrontendQuery.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // 7. Final consistency check&#10;    console.log(&quot;\n7. ✅ FINAL CONSISTENCY CHECK:&quot;);&#10;    &#10;    const allProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { name: &quot;Dill&quot; },&#10;        { name: &quot;Oregano&quot; },&#10;        { name: &quot;Guava&quot; },&#10;        { name: &quot;Fresh Bananas&quot; },&#10;        { name: &quot;Forest Honey&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    allProducts.forEach(p =&gt; {&#10;      const isConsistent = &#10;        p.farmerId === p.farmer?._id &amp;&amp;&#10;        p.farmerName === p.farmer?.name &amp;&amp;&#10;        p.farmerEmail === p.farmer?.email;&#10;      &#10;      console.log(`${p.name}: ${isConsistent ? '✅ Consistent' : '❌ Inconsistent'}`);&#10;      console.log(`  Owner: ${p.farmerName} (${p.farmerId})`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;correctDillOreganoOwnership().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-ayesha-siddika.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-ayesha-siddika.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function debugAyeshaSiddika() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; DEBUGGING AYESHA SIDDIKA'S PRODUCT COUNT ISSUE\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Find Ayesha Siddika's farmer data&#10;    console.log(&quot;1.  CHECKING AYESHA SIDDIKA'S FARMER DATA:&quot;);&#10;    const ayesha = await db.collection(&quot;farmers&quot;).findOne({&#10;      $or: [&#10;        { _id: &quot;farmer_008&quot; },&#10;        { name: &quot;Ayesha Siddika&quot; },&#10;        { name: /ayesha.*siddika/i }&#10;      ]&#10;    });&#10;&#10;    if (ayesha) {&#10;      console.log(`- ID: ${ayesha._id}`);&#10;      console.log(`- Name: ${ayesha.name}`);&#10;      console.log(`- Email: ${ayesha.email}`);&#10;      console.log(`- Farm: ${ayesha.farmName}`);&#10;    } else {&#10;      console.log(&quot;❌ Ayesha Siddika farmer not found!&quot;);&#10;    }&#10;&#10;    // 2. Check ALL products for Ayesha Siddika using different criteria&#10;    console.log(&quot;\n2.  CHECKING ALL PRODUCTS FOR AYESHA SIDDIKA:&quot;);&#10;    &#10;    const ayeshaByFarmerId = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    const ayeshaByEmbeddedId = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer._id&quot;: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    const ayeshaByName = await db.collection(&quot;products&quot;).find({&#10;      farmerName: &quot;Ayesha Siddika&quot;&#10;    }).toArray();&#10;    &#10;    const ayeshaByEmbeddedName = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot;&#10;    }).toArray();&#10;&#10;    console.log(`- By farmerId (farmer_008): ${ayeshaByFarmerId.length} products`);&#10;    ayeshaByFarmerId.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;    &#10;    console.log(`- By embedded farmer._id (farmer_008): ${ayeshaByEmbeddedId.length} products`);&#10;    ayeshaByEmbeddedId.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;    &#10;    console.log(`- By farmerName (Ayesha Siddika): ${ayeshaByName.length} products`);&#10;    ayeshaByName.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;    &#10;    console.log(`- By embedded farmer.name (Ayesha Siddika): ${ayeshaByEmbeddedName.length} products`);&#10;    ayeshaByEmbeddedName.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;&#10;    // 3. Check products that have inconsistent data related to Ayesha&#10;    console.log(&quot;\n3.  CHECKING FOR DATA INCONSISTENCIES RELATED TO AYESHA:&quot;);&#10;    const inconsistentProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        // Products where farmerId is farmer_008 but embedded farmer data doesn't match&#10;        {&#10;          farmerId: &quot;farmer_008&quot;,&#10;          &quot;farmer.name&quot;: { $ne: &quot;Ayesha Siddika&quot; }&#10;        },&#10;        // Products where farmerName is Ayesha but farmerId doesn't match&#10;        {&#10;          farmerName: &quot;Ayesha Siddika&quot;,&#10;          farmerId: { $ne: &quot;farmer_008&quot; }&#10;        },&#10;        // Products where embedded farmer name mentions other farmers but top-level has Ayesha&#10;        {&#10;          $or: [&#10;            { farmerId: &quot;farmer_008&quot; },&#10;            { farmerName: &quot;Ayesha Siddika&quot; }&#10;          ],&#10;          &quot;farmer.name&quot;: { $exists: true, $ne: &quot;Ayesha Siddika&quot; }&#10;        }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Found ${inconsistentProducts.length} products with inconsistent data:`);&#10;    inconsistentProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // 4. Create a comprehensive query like the frontend would use for Ayesha&#10;    console.log(&quot;\n4.  SIMULATING FRONTEND QUERY FOR AYESHA:&quot;);&#10;    const frontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_008&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_008&quot; },&#10;        { farmerName: &quot;Ayesha Siddika&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Frontend-style query found ${frontendQuery.length} products:`);&#10;    frontendQuery.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (farmerId: ${p.farmerId}, farmerName: ${p.farmerName}, status: ${p.status})`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // 5. Check products that might have &quot;chashi jashim&quot; in embedded data&#10;    console.log(&quot;\n5.  CHECKING PRODUCTS WITH 'CHASHI JASHIM' IN EMBEDDED DATA:&quot;);&#10;    const chashiJashimProducts = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: /chashi.*jashim/i&#10;    }).toArray();&#10;&#10;    console.log(`Found ${chashiJashimProducts.length} products with 'chashi jashim' in embedded farmer.name:`);&#10;    chashiJashimProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;debugAyeshaSiddika().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-farmer-products-issue.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-farmer-products-issue.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;async function debugFarmerProductsIssue() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; DEBUGGING MOSTAFA KABIR'S PRODUCT COUNT ISSUE\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Check current Green Beans data&#10;    console.log(&quot;1.  CHECKING GREEN BEANS CURRENT ASSIGNMENT:&quot;);&#10;    const greenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;&#10;    });&#10;    &#10;    if (greenBeans) {&#10;      console.log(`- Product: ${greenBeans.name}`);&#10;      console.log(`- farmerId: ${greenBeans.farmerId}`);&#10;      console.log(`- farmerName: ${greenBeans.farmerName}`);&#10;      console.log(`- farmerEmail: ${greenBeans.farmerEmail}`);&#10;      console.log(`- Embedded farmer._id: ${greenBeans.farmer?._id}`);&#10;      console.log(`- Embedded farmer.name: ${greenBeans.farmer?.name}`);&#10;      console.log(`- Status: ${greenBeans.status}`);&#10;    }&#10;&#10;    // 2. Check ALL products for Mostafa Kabir using different criteria&#10;    console.log(&quot;\n2.  CHECKING ALL PRODUCTS FOR MOSTAFA KABIR:&quot;);&#10;    &#10;    const mostafaByFarmerId = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_006&quot;&#10;    }).toArray();&#10;    &#10;    const mostafaByEmbeddedId = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer._id&quot;: &quot;farmer_006&quot;&#10;    }).toArray();&#10;    &#10;    const mostafaByName = await db.collection(&quot;products&quot;).find({&#10;      farmerName: &quot;Mostafa Kabir&quot;&#10;    }).toArray();&#10;    &#10;    const mostafaByEmbeddedName = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot;&#10;    }).toArray();&#10;&#10;    console.log(`- By farmerId (farmer_006): ${mostafaByFarmerId.length} products`);&#10;    mostafaByFarmerId.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;    &#10;    console.log(`- By embedded farmer._id (farmer_006): ${mostafaByEmbeddedId.length} products`);&#10;    mostafaByEmbeddedId.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;    &#10;    console.log(`- By farmerName (Mostafa Kabir): ${mostafaByName.length} products`);&#10;    mostafaByName.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;    &#10;    console.log(`- By embedded farmer.name (Mostafa Kabir): ${mostafaByEmbeddedName.length} products`);&#10;    mostafaByEmbeddedName.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;&#10;    // 3. Check products that might still have mixed data&#10;    console.log(&quot;\n3.  CHECKING FOR DATA INCONSISTENCIES:&quot;);&#10;    const inconsistentProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        // Products where top-level and embedded farmer data don't match&#10;        {&#10;          $and: [&#10;            { farmerId: { $exists: true } },&#10;            { &quot;farmer._id&quot;: { $exists: true } },&#10;            { $expr: { $ne: [&quot;$farmerId&quot;, &quot;$farmer._id&quot;] } }&#10;          ]&#10;        },&#10;        // Products where farmer names don't match&#10;        {&#10;          $and: [&#10;            { farmerName: { $exists: true } },&#10;            { &quot;farmer.name&quot;: { $exists: true } },&#10;            { $expr: { $ne: [&quot;$farmerName&quot;, &quot;$farmer.name&quot;] } }&#10;          ]&#10;        }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Found ${inconsistentProducts.length} products with inconsistent farmer data:`);&#10;    inconsistentProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // 4. Create a comprehensive query like the frontend would use&#10;    console.log(&quot;\n4.  SIMULATING FRONTEND QUERY FOR MOSTAFA:&quot;);&#10;    const frontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_006&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;        { farmerName: &quot;Mostafa Kabir&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Frontend-style query found ${frontendQuery.length} products:`);&#10;    frontendQuery.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (farmerId: ${p.farmerId}, status: ${p.status})`);&#10;    });&#10;&#10;    // 5. Check if there are deleted or inactive products being counted&#10;    console.log(&quot;\n5.  CHECKING PRODUCT STATUS:&quot;);&#10;    const activeProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_006&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;        { farmerName: &quot;Mostafa Kabir&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot; }&#10;      ],&#10;      status: { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] }&#10;    }).toArray();&#10;&#10;    console.log(`Active products for Mostafa: ${activeProducts.length}`);&#10;    activeProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (status: ${p.status})`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;debugFarmerProductsIssue().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-fatema-data.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-fatema-data.js" />
              <option name="originalContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;// MongoDB connection string - update this if needed&#10;const MONGODB_URI =&#10;  process.env.MONGODB_URI ||&#10;  &quot;mongodb+srv://admin:admin123@cluster0.mongodb.net/farmfresh?retryWrites=true&amp;w=majority&quot;;&#10;&#10;async function debugFatemaData() {&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;✅ Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Find Fatema Begum farmer data&#10;    console.log(&quot;\n Searching for Fatema Begum farmer...&quot;);&#10;    const farmers = await db&#10;      .collection(&quot;farmers&quot;)&#10;      .find({&#10;        $or: [{ name: /fatema/i }, { name: /begum/i }, { email: /fatema/i }],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${farmers.length} farmers matching &quot;Fatema&quot;:`);&#10;    farmers.forEach((farmer, index) =&gt; {&#10;      console.log(`\n${index + 1}. Farmer:`, {&#10;        _id: farmer._id,&#10;        name: farmer.name,&#10;        email: farmer.email,&#10;        userId: farmer.userId,&#10;        createdAt: farmer.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find all products associated with Fatema Begum&#10;    console.log(&quot;\n Searching for products associated with Fatema Begum...&quot;);&#10;&#10;    // Search by different possible farmer identifiers&#10;    const farmerIds = farmers.map((f) =&gt; f._id);&#10;    const farmerEmails = farmers.map((f) =&gt; f.email).filter(Boolean);&#10;    const farmerNames = farmers.map((f) =&gt; f.name).filter(Boolean);&#10;&#10;    const products = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: { $in: farmerIds } },&#10;          { farmerEmail: { $in: farmerEmails } },&#10;          { farmerName: { $in: farmerNames } },&#10;          { &quot;farmer.id&quot;: { $in: farmerIds.map(String) } },&#10;          { &quot;farmer.email&quot;: { $in: farmerEmails } },&#10;          { &quot;farmer.name&quot;: { $in: farmerNames } },&#10;          // Also search by product name for Sweet Corn&#10;          { name: /sweet.*corn/i },&#10;          { name: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${products.length} products:`);&#10;    products.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        price: product.price,&#10;        stock: product.stock,&#10;        status: product.status,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        createdAt: product.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find orders containing these products&#10;    console.log(&quot;\n Searching for orders containing these products...&quot;);&#10;&#10;    const productIds = products.map((p) =&gt; p._id.toString());&#10;    const productNames = products.map((p) =&gt; p.name);&#10;&#10;    const orders = await db&#10;      .collection(&quot;orders&quot;)&#10;      .find({&#10;        $or: [&#10;          { &quot;items.productId&quot;: { $in: productIds } },&#10;          { &quot;items.product._id&quot;: { $in: productIds } },&#10;          { &quot;items.product.name&quot;: { $in: productNames } },&#10;          { &quot;items.name&quot;: { $in: productNames } },&#10;          // Direct search for corn orders&#10;          { &quot;items.name&quot;: /corn/i },&#10;          { &quot;items.product.name&quot;: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${orders.length} orders with these products:`);&#10;    orders.forEach((order, index) =&gt; {&#10;      console.log(`\n${index + 1}. Order:`, {&#10;        _id: order._id,&#10;        customerName: order.customerName,&#10;        status: order.status,&#10;        total: order.total,&#10;        farmerSubtotal: order.farmerSubtotal,&#10;        createdAt: order.createdAt,&#10;        items: order.items?.map((item) =&gt; ({&#10;          productId: item.productId,&#10;          name: item.name,&#10;          quantity: item.quantity,&#10;          price: item.price,&#10;          product: item.product&#10;            ? {&#10;                _id: item.product._id,&#10;                name: item.product.name,&#10;                farmerId: item.product.farmerId,&#10;                farmerEmail: item.product.farmerEmail,&#10;              }&#10;            : null,&#10;        })),&#10;      });&#10;    });&#10;&#10;    // Check for any corn-related products regardless of farmer&#10;    console.log(&quot;\n All corn products in database:&quot;);&#10;    const allCornProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        name: /corn/i,&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${allCornProducts.length} corn products:`);&#10;    allCornProducts.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Corn Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        status: product.status,&#10;      });&#10;    });&#10;&#10;    // Summary&#10;    console.log(&quot;\n SUMMARY:&quot;);&#10;    console.log(`- Farmers found: ${farmers.length}`);&#10;    console.log(`- Products found: ${products.length}`);&#10;    console.log(`- Orders found: ${orders.length}`);&#10;    console.log(`- Total corn products: ${allCornProducts.length}`);&#10;&#10;    // Check for data inconsistencies&#10;    console.log(&quot;\n⚠️  POTENTIAL ISSUES:&quot;);&#10;&#10;    products.forEach((product) =&gt; {&#10;      const issues = [];&#10;&#10;      if (&#10;        !product.farmerId &amp;&amp;&#10;        !product.farmerEmail &amp;&amp;&#10;        !product.farmerName &amp;&amp;&#10;        !product.farmer&#10;      ) {&#10;        issues.push(&quot;No farmer identification&quot;);&#10;      }&#10;&#10;      if (product.farmer &amp;&amp; (!product.farmerId || !product.farmerEmail)) {&#10;        issues.push(&quot;Farmer object exists but missing farmerId/farmerEmail&quot;);&#10;      }&#10;&#10;      if (&#10;        product.category &amp;&amp;&#10;        ![&quot;Vegetables&quot;, &quot;Fruits&quot;, &quot;Grains&quot;, &quot;Dairy&quot;, &quot;Honey&quot;, &quot;Herbs&quot;].includes(&#10;          product.category,&#10;        )&#10;      ) {&#10;        issues.push(`Unusual category: ${product.category}`);&#10;      }&#10;&#10;      if (issues.length &gt; 0) {&#10;        console.log(`\n- Product &quot;${product.name}&quot; (${product._id}):`, issues);&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n✅ Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;// Run the debug script&#10;debugFatemaData().catch(console.error);&#10;" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;require(&quot;dotenv&quot;).config(); // Load environment variables&#10;&#10;// Try to get MongoDB URI from environment variables first&#10;const MONGODB_URI =&#10;  process.env.MONGODB_URI ||&#10;  process.env.MONGODB_URL ||&#10;  process.env.DATABASE_URL ||&#10;  &quot;mongodb://localhost:27017/farmfresh&quot;; // Fallback to local MongoDB&#10;&#10;async function debugFatemaData() {&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;✅ Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Find Fatema Begum farmer data&#10;    console.log(&quot;\n Searching for Fatema Begum farmer...&quot;);&#10;    const farmers = await db&#10;      .collection(&quot;farmers&quot;)&#10;      .find({&#10;        $or: [{ name: /fatema/i }, { name: /begum/i }, { email: /fatema/i }],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${farmers.length} farmers matching &quot;Fatema&quot;:`);&#10;    farmers.forEach((farmer, index) =&gt; {&#10;      console.log(`\n${index + 1}. Farmer:`, {&#10;        _id: farmer._id,&#10;        name: farmer.name,&#10;        email: farmer.email,&#10;        userId: farmer.userId,&#10;        createdAt: farmer.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find all products associated with Fatema Begum&#10;    console.log(&quot;\n Searching for products associated with Fatema Begum...&quot;);&#10;&#10;    // Search by different possible farmer identifiers&#10;    const farmerIds = farmers.map((f) =&gt; f._id);&#10;    const farmerEmails = farmers.map((f) =&gt; f.email).filter(Boolean);&#10;    const farmerNames = farmers.map((f) =&gt; f.name).filter(Boolean);&#10;&#10;    const products = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: { $in: farmerIds } },&#10;          { farmerEmail: { $in: farmerEmails } },&#10;          { farmerName: { $in: farmerNames } },&#10;          { &quot;farmer.id&quot;: { $in: farmerIds.map(String) } },&#10;          { &quot;farmer.email&quot;: { $in: farmerEmails } },&#10;          { &quot;farmer.name&quot;: { $in: farmerNames } },&#10;          // Also search by product name for Sweet Corn&#10;          { name: /sweet.*corn/i },&#10;          { name: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${products.length} products:`);&#10;    products.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        price: product.price,&#10;        stock: product.stock,&#10;        status: product.status,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        createdAt: product.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find orders containing these products&#10;    console.log(&quot;\n Searching for orders containing these products...&quot;);&#10;&#10;    const productIds = products.map((p) =&gt; p._id.toString());&#10;    const productNames = products.map((p) =&gt; p.name);&#10;&#10;    const orders = await db&#10;      .collection(&quot;orders&quot;)&#10;      .find({&#10;        $or: [&#10;          { &quot;items.productId&quot;: { $in: productIds } },&#10;          { &quot;items.product._id&quot;: { $in: productIds } },&#10;          { &quot;items.product.name&quot;: { $in: productNames } },&#10;          { &quot;items.name&quot;: { $in: productNames } },&#10;          // Direct search for corn orders&#10;          { &quot;items.name&quot;: /corn/i },&#10;          { &quot;items.product.name&quot;: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${orders.length} orders with these products:`);&#10;    orders.forEach((order, index) =&gt; {&#10;      console.log(`\n${index + 1}. Order:`, {&#10;        _id: order._id,&#10;        customerName: order.customerName,&#10;        status: order.status,&#10;        total: order.total,&#10;        farmerSubtotal: order.farmerSubtotal,&#10;        createdAt: order.createdAt,&#10;        items: order.items?.map((item) =&gt; ({&#10;          productId: item.productId,&#10;          name: item.name,&#10;          quantity: item.quantity,&#10;          price: item.price,&#10;          product: item.product&#10;            ? {&#10;                _id: item.product._id,&#10;                name: item.product.name,&#10;                farmerId: item.product.farmerId,&#10;                farmerEmail: item.product.farmerEmail,&#10;              }&#10;            : null,&#10;        })),&#10;      });&#10;    });&#10;&#10;    // Check for any corn-related products regardless of farmer&#10;    console.log(&quot;\n All corn products in database:&quot;);&#10;    const allCornProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        name: /corn/i,&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${allCornProducts.length} corn products:`);&#10;    allCornProducts.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Corn Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        status: product.status,&#10;      });&#10;    });&#10;&#10;    // Summary&#10;    console.log(&quot;\n SUMMARY:&quot;);&#10;    console.log(`- Farmers found: ${farmers.length}`);&#10;    console.log(`- Products found: ${products.length}`);&#10;    console.log(`- Orders found: ${orders.length}`);&#10;    console.log(`- Total corn products: ${allCornProducts.length}`);&#10;&#10;    // Check for data inconsistencies&#10;    console.log(&quot;\n⚠️  POTENTIAL ISSUES:&quot;);&#10;&#10;    products.forEach((product) =&gt; {&#10;      const issues = [];&#10;&#10;      if (&#10;        !product.farmerId &amp;&amp;&#10;        !product.farmerEmail &amp;&amp;&#10;        !product.farmerName &amp;&amp;&#10;        !product.farmer&#10;      ) {&#10;        issues.push(&quot;No farmer identification&quot;);&#10;      }&#10;&#10;      if (product.farmer &amp;&amp; (!product.farmerId || !product.farmerEmail)) {&#10;        issues.push(&quot;Farmer object exists but missing farmerId/farmerEmail&quot;);&#10;      }&#10;&#10;      if (&#10;        product.category &amp;&amp;&#10;        ![&quot;Vegetables&quot;, &quot;Fruits&quot;, &quot;Grains&quot;, &quot;Dairy&quot;, &quot;Honey&quot;, &quot;Herbs&quot;].includes(&#10;          product.category,&#10;        )&#10;      ) {&#10;        issues.push(`Unusual category: ${product.category}`);&#10;      }&#10;&#10;      if (issues.length &gt; 0) {&#10;        console.log(`\n- Product &quot;${product.name}&quot; (${product._id}):`, issues);&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n✅ Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;// Run the debug script&#10;debugFatemaData().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-hardcoded-farmer-status.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-hardcoded-farmer-status.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;debugHardcodedFarmerProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/farming-methods-section-corrected.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/farming-methods-section-corrected.txt" />
              <option name="updatedContent" value="                {/* Farming Methods Showcase - Updated to use database data */}&#10;                {farmer.farmInfo?.farmingMethods &amp;&amp; farmer.farmInfo.farmingMethods.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mb-12&quot;&gt;&#10;                    &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                      &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                         Our Farming Philosophy&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        Sustainable and innovative agricultural practices&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                      {farmer.farmInfo.farmingMethods.map((method, index) =&gt; {&#10;                        const config = methodConfig[method] || {&#10;                          icon: &quot;fas fa-tractor&quot;,&#10;                          color: &quot;text-gray-600 dark:text-gray-400&quot;,&#10;                          description: &quot;Specialized farming technique&quot;,&#10;                        };&#10;&#10;                        return (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-8 shadow-lg hover:shadow-2xl transition-all duration-500 border-t-4 border-green-500&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-50/50 to-emerald-50/50 dark:from-green-900/10 dark:to-emerald-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;relative z-10 text-center&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                                &lt;i&#10;                                  className={`${config.icon} text-4xl ${config.color}`}&#10;                                &gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;h4 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                                {method}&#10;                              &lt;/h4&gt;&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                                {config.description}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        );&#10;                      })}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-ayesha-siddika-products.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-ayesha-siddika-products.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixAyeshaSiddikaProducts() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING AYESHA SIDDIKA'S PRODUCT DATA INCONSISTENCIES\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get Ayesha Siddika's correct farmer data&#10;    console.log(&quot;1.  GETTING AYESHA SIDDIKA'S CORRECT DATA:&quot;);&#10;    const ayesha = await db.collection(&quot;farmers&quot;).findOne({&#10;      _id: &quot;farmer_008&quot;&#10;    });&#10;&#10;    if (!ayesha) {&#10;      console.log(&quot;❌ Ayesha Siddika farmer not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(`- ID: ${ayesha._id}`);&#10;    console.log(`- Name: ${ayesha.name}`);&#10;    console.log(`- Email: ${ayesha.email}`);&#10;    console.log(`- Farm: ${ayesha.farmName}`);&#10;&#10;    // Find the problematic products (Dill and Oregano)&#10;    console.log(&quot;\n2.  FINDING PROBLEMATIC PRODUCTS:&quot;);&#10;    const problematicProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;,&#10;      farmerName: &quot;Ayesha Siddika&quot;,&#10;      &quot;farmer.name&quot;: &quot;chashi jashim&quot;&#10;    }).toArray();&#10;&#10;    console.log(`Found ${problematicProducts.length} products with inconsistent data:`);&#10;    problematicProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Current top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Current embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // Fix each problematic product&#10;    console.log(&quot;\n3.  FIXING EMBEDDED FARMER DATA...&quot;);&#10;    &#10;    for (const product of problematicProducts) {&#10;      console.log(`\nFixing ${product.name}...`);&#10;      &#10;      const updateData = {&#10;        // Ensure top-level fields are correct&#10;        farmerId: ayesha._id,&#10;        farmerName: ayesha.name,&#10;        farmerEmail: ayesha.email,&#10;        &#10;        // Fix the embedded farmer object&#10;        farmer: {&#10;          _id: ayesha._id,&#10;          name: ayesha.name,&#10;          email: ayesha.email,&#10;          farmName: ayesha.farmName,&#10;          location: ayesha.location,&#10;          phone: ayesha.phone,&#10;          specializations: ayesha.specializations || [],&#10;          farmingMethods: ayesha.farmingMethods || [],&#10;          verified: ayesha.verified || false&#10;        },&#10;        &#10;        // Update timestamp&#10;        updatedAt: new Date()&#10;      };&#10;&#10;      const result = await db.collection(&quot;products&quot;).updateOne(&#10;        { _id: product._id },&#10;        { $set: updateData }&#10;      );&#10;&#10;      console.log(`  ✅ Updated ${product.name}: ${result.modifiedCount} document(s) modified`);&#10;    }&#10;&#10;    // Verify the fixes&#10;    console.log(&quot;\n4.  VERIFYING FIXES:&quot;);&#10;    &#10;    const updatedProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;&#10;    console.log(`\nAyesha Siddika now has ${updatedProducts.length} products with consistent data:`);&#10;    updatedProducts.forEach(p =&gt; {&#10;      const isConsistent = &#10;        p.farmerId === p.farmer?._id &amp;&amp;&#10;        p.farmerName === p.farmer?.name &amp;&amp;&#10;        p.farmerEmail === p.farmer?.email;&#10;      &#10;      console.log(`- ${p.name} ${isConsistent ? '✅' : '❌'}`);&#10;      if (!isConsistent) {&#10;        console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;        console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;      }&#10;    });&#10;&#10;    // Final test: Simulate frontend query&#10;    console.log(&quot;\n5.  FINAL TEST - SIMULATING FRONTEND QUERY:&quot;);&#10;    const frontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_008&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_008&quot; },&#10;        { farmerName: &quot;Ayesha Siddika&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Frontend query now finds ${frontendQuery.length} products for Ayesha Siddika:`);&#10;    frontendQuery.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (status: ${p.status})`);&#10;    });&#10;&#10;    // Check if there are still any products with &quot;chashi jashim&quot;&#10;    console.log(&quot;\n6.  CHECKING FOR REMAINING 'CHASHI JASHIM' ISSUES:&quot;);&#10;    const chashiProducts = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: /chashi.*jashim/i&#10;    }).toArray();&#10;&#10;    console.log(`Found ${chashiProducts.length} products still with 'chashi jashim':`);&#10;    chashiProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    if (chashiProducts.length &gt; 0) {&#10;      console.log(&quot;\n NOTE: These products may need manual review to determine correct farmer assignment.&quot;);&#10;    }&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixAyeshaSiddikaProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-green-beans-embedded-farmer.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-green-beans-embedded-farmer.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixGreenBeansEmbeddedFarmer() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING GREEN BEANS EMBEDDED FARMER DATA\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Find Green Beans product&#10;    const greenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;&#10;    });&#10;&#10;    if (!greenBeans) {&#10;      console.log(&quot;❌ Green Beans product not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(&quot; CURRENT GREEN BEANS DATA:&quot;);&#10;    console.log(`- farmerId: ${greenBeans.farmerId}`);&#10;    console.log(`- farmerName: ${greenBeans.farmerName}`);&#10;    console.log(`- farmerEmail: ${greenBeans.farmerEmail}`);&#10;    console.log(`- Embedded farmer._id: ${greenBeans.farmer?._id}`);&#10;    console.log(`- Embedded farmer.name: ${greenBeans.farmer?.name}`);&#10;    console.log(`- Embedded farmer.email: ${greenBeans.farmer?.email}`);&#10;&#10;    // Get Mizanur Rahman's correct data&#10;    console.log(&quot;\n GETTING MIZANUR RAHMAN'S DATA:&quot;);&#10;    const mizanur = await db.collection(&quot;farmers&quot;).findOne({&#10;      $or: [&#10;        { _id: &quot;farmer_005&quot; },&#10;        { email: &quot;mizanur.rahman@farmfresh.com&quot; },&#10;        { name: &quot;Mizanur Rahman&quot; }&#10;      ]&#10;    });&#10;&#10;    if (!mizanur) {&#10;      console.log(&quot;❌ Mizanur Rahman farmer not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(`- Mizanur's ID: ${mizanur._id}`);&#10;    console.log(`- Mizanur's Name: ${mizanur.name}`);&#10;    console.log(`- Mizanur's Email: ${mizanur.email}`);&#10;    console.log(`- Mizanur's Farm: ${mizanur.farmName}`);&#10;&#10;    // Update Green Beans with complete and consistent farmer data&#10;    console.log(&quot;\n UPDATING GREEN BEANS WITH CONSISTENT FARMER DATA...&quot;);&#10;    &#10;    const updateData = {&#10;      // Top-level fields (should already be correct but ensure consistency)&#10;      farmerId: mizanur._id,&#10;      farmerName: mizanur.name,&#10;      farmerEmail: mizanur.email,&#10;      &#10;      // Fix the embedded farmer object&#10;      farmer: {&#10;        _id: mizanur._id,&#10;        name: mizanur.name,&#10;        email: mizanur.email,&#10;        farmName: mizanur.farmName,&#10;        location: mizanur.location,&#10;        phone: mizanur.phone,&#10;        specializations: mizanur.specializations || [],&#10;        farmingMethods: mizanur.farmingMethods || [],&#10;        verified: mizanur.verified || false&#10;      },&#10;      &#10;      // Update timestamp&#10;      updatedAt: new Date()&#10;    };&#10;&#10;    const result = await db.collection(&quot;products&quot;).updateOne(&#10;      { name: &quot;Green Beans&quot; },&#10;      { $set: updateData }&#10;    );&#10;&#10;    console.log(`✅ Update result: ${result.modifiedCount} documents modified`);&#10;&#10;    // Verify the update&#10;    console.log(&quot;\n VERIFYING UPDATED GREEN BEANS DATA:&quot;);&#10;    const updatedGreenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;&#10;    });&#10;&#10;    console.log(`- farmerId: ${updatedGreenBeans.farmerId}`);&#10;    console.log(`- farmerName: ${updatedGreenBeans.farmerName}`);&#10;    console.log(`- farmerEmail: ${updatedGreenBeans.farmerEmail}`);&#10;    console.log(`- Embedded farmer._id: ${updatedGreenBeans.farmer?._id}`);&#10;    console.log(`- Embedded farmer.name: ${updatedGreenBeans.farmer?.name}`);&#10;    console.log(`- Embedded farmer.email: ${updatedGreenBeans.farmer?.email}`);&#10;&#10;    // Check consistency&#10;    const isConsistent = &#10;      updatedGreenBeans.farmerId === updatedGreenBeans.farmer._id &amp;&amp;&#10;      updatedGreenBeans.farmerName === updatedGreenBeans.farmer.name &amp;&amp;&#10;      updatedGreenBeans.farmerEmail === updatedGreenBeans.farmer.email;&#10;&#10;    console.log(`\nData is consistent: ${isConsistent ? '✅' : '❌'}`);&#10;&#10;    // Final verification: Check Mostafa's products&#10;    console.log(&quot;\n FINAL VERIFICATION - MOSTAFA'S PRODUCTS:&quot;);&#10;    const mostafaProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_006&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;        { farmerName: &quot;Mostafa Kabir&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Mostafa Kabir now has ${mostafaProducts.length} products:`);&#10;    mostafaProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}`);&#10;    });&#10;&#10;    // Check Mizanur's products&#10;    console.log(&quot;\n MIZANUR'S PRODUCTS:&quot;);&#10;    const mizanurProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_005&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_005&quot; },&#10;        { farmerName: &quot;Mizanur Rahman&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mizanur Rahman&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Mizanur Rahman now has ${mizanurProducts.length} products:`);&#10;    mizanurProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixGreenBeansEmbeddedFarmer().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-remaining-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-remaining-farmers.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixRemainingFarmers() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING REMAINING 3 FARMERS WITHOUT FARMING METHODS\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // The 3 farmers that failed in the previous script&#10;    const remainingFarmers = [&#10;      {&#10;        id: &quot;688b5723287e9adbc28801dc&quot;,&#10;        name: &quot;unnamed&quot;,&#10;        methods: [&quot;Sustainable&quot;, &quot;Traditional&quot;]&#10;      },&#10;      {&#10;        id: &quot;689054bb0f308009e3dd8225&quot;, &#10;        name: &quot;sharif hossain&quot;,&#10;        methods: [&quot;Free-range&quot;, &quot;Animal Welfare&quot;, &quot;Sustainable&quot;]&#10;      },&#10;      {&#10;        id: &quot;6898578b2fcd466685f715f5&quot;,&#10;        name: &quot;kashem ali&quot;, &#10;        methods: [&quot;Traditional&quot;, &quot;Grain Cultivation&quot;, &quot;Sustainable&quot;]&#10;      }&#10;    ];&#10;&#10;    console.log(&quot;1.  REMAINING FARMERS TO FIX:&quot;);&#10;    remainingFarmers.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer.id}): [${farmer.methods.join(', ')}]`);&#10;    });&#10;&#10;    console.log(&quot;\n2.  UPDATING REMAINING FARMERS...&quot;);&#10;&#10;    let successCount = 0;&#10;&#10;    for (const farmer of remainingFarmers) {&#10;      try {&#10;        console.log(`\nFixing ${farmer.name} (${farmer.id})...`);&#10;&#10;        // Check current farmer state&#10;        const currentFarmer = await db.collection(&quot;farmers&quot;).findOne({&#10;          _id: new ObjectId(farmer.id)&#10;        });&#10;&#10;        if (!currentFarmer) {&#10;          console.log(`  ❌ Farmer not found`);&#10;          continue;&#10;        }&#10;&#10;        let updateData;&#10;&#10;        if (currentFarmer.farmInfo) {&#10;          // farmInfo exists, just update the farmingMethods field&#10;          updateData = {&#10;            $set: {&#10;              &quot;farmInfo.farmingMethods&quot;: farmer.methods,&#10;              updatedAt: new Date()&#10;            }&#10;          };&#10;          console.log(`   Updating existing farmInfo...`);&#10;        } else {&#10;          // farmInfo doesn't exist, create it&#10;          updateData = {&#10;            $set: {&#10;              farmInfo: {&#10;                farmName: currentFarmer.farmName || `Farm ${farmer.id}`,&#10;                farmDescription: &quot;&quot;,&#10;                farmSize: currentFarmer.farmSize || null,&#10;                farmType: &quot;Mixed Farming&quot;,&#10;                certifications: [],&#10;                establishedYear: null,&#10;                farmingMethods: farmer.methods&#10;              },&#10;              updatedAt: new Date()&#10;            }&#10;          };&#10;          console.log(`   Creating new farmInfo...`);&#10;        }&#10;&#10;        const result = await db.collection(&quot;farmers&quot;).updateOne(&#10;          { _id: new ObjectId(farmer.id) },&#10;          updateData&#10;        );&#10;&#10;        if (result.modifiedCount &gt; 0) {&#10;          console.log(`  ✅ Successfully updated!`);&#10;          successCount++;&#10;        } else {&#10;          console.log(`  ⚠️  No changes made`);&#10;        }&#10;&#10;      } catch (error) {&#10;        console.log(`  ❌ Error updating ${farmer.name}: ${error.message}`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;\n3.  FINAL VERIFICATION...&quot;);&#10;&#10;    // Check all farmers now&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;    &#10;    const farmersWithMethods = allFarmers.filter(farmer =&gt; &#10;      farmer.farmInfo?.farmingMethods &amp;&amp; &#10;      Array.isArray(farmer.farmInfo.farmingMethods) &amp;&amp; &#10;      farmer.farmInfo.farmingMethods.length &gt; 0&#10;    );&#10;&#10;    const farmersWithoutMethods = allFarmers.filter(farmer =&gt; &#10;      !farmer.farmInfo?.farmingMethods || &#10;      !Array.isArray(farmer.farmInfo.farmingMethods) || &#10;      farmer.farmInfo.farmingMethods.length === 0&#10;    );&#10;&#10;    console.log(`\n4.  FINAL RESULTS:`);&#10;    console.log(`✅ Total farmers with farming methods: ${farmersWithMethods.length}`);&#10;    &#10;    console.log(`\n✅ All farmers with methods:`);&#10;    farmersWithMethods.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name || 'unnamed'}: [${farmer.farmInfo.farmingMethods.join(', ')}]`);&#10;    });&#10;&#10;    if (farmersWithoutMethods.length &gt; 0) {&#10;      console.log(`\n❌ Farmers still without methods: ${farmersWithoutMethods.length}`);&#10;      farmersWithoutMethods.forEach(farmer =&gt; {&#10;        console.log(`  - ${farmer.name || 'unnamed'} (${farmer._id})`);&#10;      });&#10;    }&#10;&#10;    console.log(`\n5.  SUMMARY:`);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Successfully fixed: ${successCount}`);&#10;    console.log(`Farmers with methods: ${farmersWithMethods.length} (${((farmersWithMethods.length/allFarmers.length)*100).toFixed(1)}%)`);&#10;&#10;    if (farmersWithMethods.length === allFarmers.length) {&#10;      console.log(`\n PERFECT! ALL ${allFarmers.length} FARMERS NOW HAVE FARMING METHODS!`);&#10;      console.log(` Every farmer profile page will now show specific farming methods!`);&#10;    }&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixRemainingFarmers().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-sweet-corn-order.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-sweet-corn-order.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;fixSweetCornOrderIssue().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-undefined-status.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-undefined-status.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;async function fixUndefinedProductStatuses() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;  &#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING UNDEFINED PRODUCT STATUSES\n&quot;);&#10;    &#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    // Find all products with undefined status&#10;    const productsWithUndefinedStatus = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { status: { $exists: false } },&#10;        { status: undefined },&#10;        { status: null }&#10;      ]&#10;    }).toArray();&#10;    &#10;    console.log(` Found ${productsWithUndefinedStatus.length} products with undefined status:`);&#10;    &#10;    if (productsWithUndefinedStatus.length === 0) {&#10;      console.log(&quot;✅ No products found with undefined status!&quot;);&#10;      return;&#10;    }&#10;    &#10;    // Show the products that will be fixed&#10;    productsWithUndefinedStatus.forEach((product, index) =&gt; {&#10;      console.log(`${index + 1}. &quot;${product.name}&quot; by ${product.farmerName} (${product.farmerId})`);&#10;      console.log(`   - Current status: ${product.status} (type: ${typeof product.status})`);&#10;    });&#10;    &#10;    // Ask for confirmation (in a real scenario, you'd want this)&#10;    console.log(`\n Updating all ${productsWithUndefinedStatus.length} products to status &quot;active&quot;...`);&#10;    &#10;    // Update all products with undefined status to &quot;active&quot;&#10;    const updateResult = await db.collection(&quot;products&quot;).updateMany(&#10;      {&#10;        $or: [&#10;          { status: { $exists: false } },&#10;          { status: undefined },&#10;          { status: null }&#10;        ]&#10;      },&#10;      {&#10;        $set: {&#10;          status: &quot;active&quot;,&#10;          updatedAt: new Date()&#10;        }&#10;      }&#10;    );&#10;    &#10;    console.log(`✅ Updated ${updateResult.modifiedCount} products successfully!`);&#10;    &#10;    // Verify the fix&#10;    const verifyCount = await db.collection(&quot;products&quot;).countDocuments({&#10;      $or: [&#10;        { status: { $exists: false } },&#10;        { status: undefined },&#10;        { status: null }&#10;      ]&#10;    });&#10;    &#10;    console.log(`\n Verification: ${verifyCount} products still have undefined status`);&#10;    &#10;    // Show updated status distribution&#10;    const statusCounts = await db.collection(&quot;products&quot;).aggregate([&#10;      {&#10;        $group: {&#10;          _id: &quot;$status&quot;,&#10;          count: { $sum: 1 }&#10;        }&#10;      }&#10;    ]).toArray();&#10;    &#10;    console.log(`\n UPDATED STATUS DISTRIBUTION:`);&#10;    statusCounts.forEach(({ _id, count }) =&gt; {&#10;      console.log(`   - &quot;${_id}&quot;: ${count} products`);&#10;    });&#10;    &#10;    console.log(`\n WHAT THIS FIXES:`);&#10;    console.log(`✅ Active products will now show &quot;Pause/Deactivate&quot; button instead of &quot;Activate&quot;`);&#10;    console.log(`✅ Products will behave correctly when toggling status`);&#10;    console.log(`✅ Status filtering will work properly in the manage page`);&#10;    &#10;    console.log(`\n NEXT STEPS:`);&#10;    console.log(`1. Refresh your farmer manage page`);&#10;    console.log(`2. Check that active products now show &quot;Pause&quot; button`);&#10;    console.log(`3. Test status toggle functionality`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n✅ Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixUndefinedProductStatuses().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/investigate-dill-oregano.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/investigate-dill-oregano.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function investigateDillOreganoOwnership() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; INVESTIGATING DILL AND OREGANO OWNERSHIP\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Check current state of Dill and Oregano&#10;    console.log(&quot;1.  CHECKING CURRENT DILL AND OREGANO DATA:&quot;);&#10;    &#10;    const dill = await db.collection(&quot;products&quot;).findOne({ name: &quot;Dill&quot; });&#10;    const oregano = await db.collection(&quot;products&quot;).findOne({ name: &quot;Oregano&quot; });&#10;&#10;    if (dill) {&#10;      console.log(&quot;DILL:&quot;);&#10;      console.log(`  Top-level: farmerId=${dill.farmerId}, farmerName=${dill.farmerName}, farmerEmail=${dill.farmerEmail}`);&#10;      console.log(`  Embedded: farmer._id=${dill.farmer?._id}, farmer.name=${dill.farmer?.name}, farmer.email=${dill.farmer?.email}`);&#10;    }&#10;&#10;    if (oregano) {&#10;      console.log(&quot;OREGANO:&quot;);&#10;      console.log(`  Top-level: farmerId=${oregano.farmerId}, farmerName=${oregano.farmerName}, farmerEmail=${oregano.farmerEmail}`);&#10;      console.log(`  Embedded: farmer._id=${oregano.farmer?._id}, farmer.name=${oregano.farmer?.name}, farmer.email=${oregano.farmer?.email}`);&#10;    }&#10;&#10;    // 2. Check if there's a &quot;chashi jashim&quot; farmer&#10;    console.log(&quot;\n2.  CHECKING FOR 'CHASHI JASHIM' FARMER:&quot;);&#10;    const chashiFarmer = await db.collection(&quot;farmers&quot;).findOne({&#10;      name: /chashi.*jashim/i&#10;    });&#10;&#10;    if (chashiFarmer) {&#10;      console.log(&quot;Found Chashi Jashim farmer:&quot;);&#10;      console.log(`  ID: ${chashiFarmer._id}`);&#10;      console.log(`  Name: ${chashiFarmer.name}`);&#10;      console.log(`  Email: ${chashiFarmer.email}`);&#10;    } else {&#10;      console.log(&quot;❌ No 'Chashi Jashim' farmer found in farmers collection&quot;);&#10;    }&#10;&#10;    // 3. Check all farmers to see who might be the correct owner&#10;    console.log(&quot;\n3.  CHECKING ALL FARMERS:&quot;);&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;    &#10;    console.log(&quot;Available farmers:&quot;);&#10;    allFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer._id}: ${farmer.name} (${farmer.email})`);&#10;    });&#10;&#10;    // 4. Check if Dill/Oregano appear in any farmer's product history or orders&#10;    console.log(&quot;\n4.  CHECKING PRODUCT HISTORY IN ORDERS:&quot;);&#10;    &#10;    const ordersWithDill = await db.collection(&quot;orders&quot;).find({&#10;      &quot;items.productName&quot;: &quot;Dill&quot;&#10;    }).toArray();&#10;    &#10;    const ordersWithOregano = await db.collection(&quot;orders&quot;).find({&#10;      &quot;items.productName&quot;: &quot;Oregano&quot;&#10;    }).toArray();&#10;&#10;    console.log(`Found ${ordersWithDill.length} orders with Dill`);&#10;    ordersWithDill.slice(0, 3).forEach(order =&gt; {&#10;      const dillItem = order.items.find(item =&gt; item.productName === &quot;Dill&quot;);&#10;      console.log(`  Order ${order._id}: farmerId=${dillItem?.farmerId}, farmerName=${dillItem?.farmerName}`);&#10;    });&#10;&#10;    console.log(`Found ${ordersWithOregano.length} orders with Oregano`);&#10;    ordersWithOregano.slice(0, 3).forEach(order =&gt; {&#10;      const oreganoItem = order.items.find(item =&gt; item.productName === &quot;Oregano&quot;);&#10;      console.log(`  Order ${order._id}: farmerId=${oreganoItem?.farmerId}, farmerName=${oreganoItem?.farmerName}`);&#10;    });&#10;&#10;    // 5. Check creation/modification history if available&#10;    console.log(&quot;\n5.  CHECKING CREATION/MODIFICATION DATES:&quot;);&#10;    &#10;    if (dill) {&#10;      console.log(`Dill created: ${dill.createdAt}, updated: ${dill.updatedAt}`);&#10;    }&#10;    if (oregano) {&#10;      console.log(`Oregano created: ${oregano.createdAt}, updated: ${oregano.updatedAt}`);&#10;    }&#10;&#10;    // 6. Current product counts per farmer&#10;    console.log(&quot;\n6.  CURRENT PRODUCT COUNTS PER FARMER:&quot;);&#10;    &#10;    for (const farmer of allFarmers) {&#10;      const productCount = await db.collection(&quot;products&quot;).countDocuments({&#10;        $or: [&#10;          { farmerId: farmer._id },&#10;          { &quot;farmer._id&quot;: farmer._id }&#10;        ]&#10;      });&#10;      &#10;      if (productCount &gt; 0) {&#10;        console.log(`  ${farmer.name} (${farmer._id}): ${productCount} products`);&#10;      }&#10;    }&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;investigateDillOreganoOwnership().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/next.config.mjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/next.config.mjs" />
              <option name="originalContent" value="/** @type {import('next').NextConfig} */&#10;const nextConfig = {&#10;  images: {&#10;    remotePatterns: [&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;images.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;plus.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;    ],&#10;  },&#10;  // Increase API payload size limit to handle multiple compressed images&#10;  api: {&#10;    bodyParser: {&#10;      sizeLimit: &quot;50mb&quot;,&#10;    },&#10;  },&#10;  // Handle large request bodies in the new App Router&#10;  experimental: {&#10;    serverComponentsExternalPackages: [],&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;};&#10;&#10;export default nextConfig;&#10;" />
              <option name="updatedContent" value="/** @type {import('next').NextConfig} */&#10;const nextConfig = {&#10;  images: {&#10;    remotePatterns: [&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;images.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;plus.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;    ],&#10;  },&#10;  // Increase API payload size limit to handle multiple compressed images&#10;  api: {&#10;    bodyParser: {&#10;      sizeLimit: &quot;50mb&quot;,&#10;    },&#10;  },&#10;  // Handle large request bodies in the new App Router&#10;  experimental: {&#10;    serverComponentsExternalPackages: [],&#10;  },&#10;};&#10;&#10;export default nextConfig;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/create-farmer-users.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/create-farmer-users.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;const bcrypt = require(&quot;bcryptjs&quot;);&#10;&#10;// MongoDB connection string - update this with your actual connection string&#10;const MONGODB_URI = process.env.MONGODB_URI || &quot;mongodb://localhost:27017&quot;;&#10;const DB_NAME = &quot;farmfresh&quot;;&#10;&#10;// Default password for all farmers (you can change this)&#10;const DEFAULT_PASSWORD = &quot;farmer123&quot;;&#10;&#10;// Hardcoded farmers data - this should match the structure of your farmer documents&#10;const hardcodedFarmers = [&#10;  {&#10;    _id: &quot;farmer_001&quot;,&#10;    name: &quot;Abdul Rahman&quot;,&#10;    email: &quot;abdul.rahman@farmfresh.com&quot;,&#10;    phone: &quot;+880 1712 345678&quot;,&#10;    location: &quot;Rajshahi, Bangladesh&quot;,&#10;    farmName: &quot;Farm 001&quot;,&#10;    specializations: [&quot;Grains&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_002&quot;,&#10;    name: &quot;Sufia Begum&quot;,&#10;    email: &quot;sufia.begum@farmfresh.com&quot;,&#10;    phone: &quot;+880 1818 901234&quot;,&#10;    location: &quot;Sylhet, Bangladesh&quot;,&#10;    farmName: &quot;Farm 002&quot;,&#10;    specializations: [&quot;Fruits&quot;, &quot;Herbs&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_003&quot;,&#10;    name: &quot;Fatema Begum&quot;,&#10;    email: &quot;fatema.begum@farmfresh.com&quot;,&#10;    phone: &quot;+880 1813 456789&quot;,&#10;    location: &quot;Dhaka, Bangladesh&quot;,&#10;    farmName: &quot;Farm 003&quot;,&#10;    specializations: [&quot;Vegetables&quot;, &quot;Fruits&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_004&quot;,&#10;    name: &quot;Ibrahim Khalil&quot;,&#10;    email: &quot;ibrahim.khalil@farmfresh.com&quot;,&#10;    phone: &quot;+880 1717 890123&quot;,&#10;    location: &quot;Barishal, Bangladesh&quot;,&#10;    farmName: &quot;Farm 004&quot;,&#10;    specializations: [&quot;Fruits&quot;, &quot;Dairy&quot;, &quot;Herbs&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_005&quot;,&#10;    name: &quot;Mizanur Rahman&quot;,&#10;    email: &quot;mizanur.rahman@farmfresh.com&quot;,&#10;    phone: &quot;+880 1521 234567&quot;,&#10;    location: &quot;Tangail, Bangladesh&quot;,&#10;    farmName: &quot;Farm 005&quot;,&#10;    specializations: [&quot;Dairy&quot;, &quot;Vegetables&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_006&quot;,&#10;    name: &quot;Mostafa Kamal&quot;,&#10;    email: &quot;mostafa.kamal@farmfresh.com&quot;,&#10;    phone: &quot;+880 1521 234567&quot;,&#10;    location: &quot;Gazipur, Bangladesh&quot;,&#10;    farmName: &quot;Farm 006&quot;,&#10;    specializations: [&quot;Vegetables&quot;, &quot;Dairy&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_007&quot;,&#10;    name: &quot;Rubina Akter&quot;,&#10;    email: &quot;rubina.akter@farmfresh.com&quot;,&#10;    phone: &quot;+880 1420 123456&quot;,&#10;    location: &quot;Netrokona, Bangladesh&quot;,&#10;    farmName: &quot;Farm 007&quot;,&#10;    specializations: [&quot;Herbs&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_008&quot;,&#10;    name: &quot;Ayesha Siddika&quot;,&#10;    email: &quot;ayesha.siddika@farmfresh.com&quot;,&#10;    phone: &quot;+880 1515 678901&quot;,&#10;    location: &quot;Khulna, Bangladesh&quot;,&#10;    farmName: &quot;Farm 008&quot;,&#10;    specializations: [&quot;Fruits&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_009&quot;,&#10;    name: &quot;Khanzad Ali&quot;,&#10;    email: &quot;khanzad.ali@farmfresh.com&quot;,&#10;    phone: &quot;+880 1919 012345&quot;,&#10;    location: &quot;Sylhet, Bangladesh&quot;,&#10;    farmName: &quot;Farm 009&quot;,&#10;    specializations: [&quot;Honey&quot;, &quot;Vegetables&quot;],&#10;  },&#10;];&#10;&#10;// Function to create farmer users&#10;async function createFarmerUsers() {&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(DB_NAME);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;&#10;    // Hash the default password&#10;    const hashedPassword = await bcrypt.hash(DEFAULT_PASSWORD, 12);&#10;&#10;    for (const farmer of hardcodedFarmers) {&#10;      try {&#10;        // Check if user already exists&#10;        const existingUser = await usersCollection.findOne({&#10;          email: farmer.email,&#10;        });&#10;&#10;        if (existingUser) {&#10;          console.log(&#10;            `User already exists for ${farmer.name} (${farmer.email})`,&#10;          );&#10;          continue;&#10;        }&#10;&#10;        // Split name into first and last name&#10;        const nameParts = farmer.name.split(&quot; &quot;);&#10;        const firstName = nameParts[0];&#10;        const lastName = nameParts.slice(1).join(&quot; &quot;) || &quot;&quot;;&#10;&#10;        // Create user document&#10;        const userData = {&#10;          _id: farmer._id, // Use the same ID as the farmer&#10;          firstName: firstName,&#10;          lastName: lastName,&#10;          name: farmer.name,&#10;          email: farmer.email,&#10;          phone: farmer.phone,&#10;          address: farmer.location,&#10;          bio: &quot;&quot;,&#10;          password: hashedPassword,&#10;          userType: &quot;farmer&quot;,&#10;          provider: &quot;credentials&quot;,&#10;          emailVerified: true, // Set to true for these hardcoded farmers&#10;          farmDetails: {&#10;            farmName: farmer.farmName,&#10;            specialization: farmer.specializations,&#10;            farmSize: null,&#10;            farmSizeUnit: &quot;acres&quot;,&#10;          },&#10;          profilePicture: null,&#10;          createdAt: new Date(),&#10;          updatedAt: new Date(),&#10;        };&#10;&#10;        // Insert user&#10;        await usersCollection.insertOne(userData);&#10;        console.log(&#10;          `Created user account for ${farmer.name} (${farmer.email})`,&#10;        );&#10;      } catch (error) {&#10;        console.error(`Error creating user for ${farmer.name}:`, error);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;\nFarmer user creation completed!&quot;);&#10;    console.log(`Default password for all farmers: ${DEFAULT_PASSWORD}`);&#10;    console.log(&#10;      &quot;\nYou can now login with any of these farmer accounts using their email and the default password.&quot;,&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;Error connecting to MongoDB:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;  }&#10;}&#10;&#10;// Run the script&#10;createFarmerUsers().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/migrate-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/migrate-farmers.js" />
              <option name="updatedContent" value="// Script to migrate farmers from users collection to farmers collection&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function migrateFarmers() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;✅ Migration completed!&quot;);&#10;    &#10;    // Show final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    console.log(` Total farmers in collection: ${totalFarmers}`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Migration error:&quot;, error);&#10;  }&#10;}&#10;&#10;migrateFarmers();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js" />
              <option name="updatedContent" value="// MongoDB Atlas Performance Optimization Script&#10;// Run this script to create optimized indexes for better Atlas performance&#10;&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function createAtlasOptimizedIndexes() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log(&quot; Starting MongoDB Atlas index optimization...&quot;);&#10;&#10;    // Products Collection - Optimized for products page performance&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    console.log(&quot; Optimizing products collection indexes...&quot;);&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, category: 1, featured: 1, createdAt: -1 },&#10;      { name: &quot;products_main_query_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, featured: 1, averageRating: -1 },&#10;      { name: &quot;products_featured_rating_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, price: 1 },&#10;      { name: &quot;products_price_filter_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, purchaseCount: -1 },&#10;      { name: &quot;products_popularity_idx&quot;, background: true }&#10;    );&#10;&#10;    // Orders Collection - Optimized for farmer dashboard and orders pages&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    console.log(&quot; Optimizing orders collection indexes...&quot;);&#10;    &#10;    // Critical farmer query indexes&#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_orders_main_idx&quot;, background: true }&#10;    );&#10;    &#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_email_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Customer order indexes&#10;    await ordersCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;customer_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Status filtering&#10;    await ordersCollection.createIndex(&#10;      { status: 1, createdAt: -1 },&#10;      { name: &quot;status_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Reviews Collection - For faster review loading&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    console.log(&quot;⭐ Optimizing reviews collection indexes...&quot;);&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { productId: 1, createdAt: -1 },&#10;      { name: &quot;product_reviews_idx&quot;, background: true }&#10;    );&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_product_review_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    // Favorites Collection - For user favorites&#10;    const favoritesCollection = db.collection(&quot;favorites&quot;);&#10;    console.log(&quot;❤️ Optimizing favorites collection indexes...&quot;);&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_favorites_idx&quot;, background: true, unique: true }&#10;    );&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;user_favorites_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Carts Collection - For cart operations&#10;    const cartsCollection = db.collection(&quot;carts&quot;);&#10;    console.log(&quot; Optimizing carts collection indexes...&quot;);&#10;    &#10;    await cartsCollection.createIndex(&#10;      { userId: 1 },&#10;      { name: &quot;user_cart_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    console.log(&quot;✅ Atlas optimization complete!&quot;);&#10;    console.log(&quot; Performance improvements applied for:&quot;);&#10;    console.log(&quot;   • Products page - faster filtering and sorting&quot;);&#10;    console.log(&quot;   • Farmer dashboard - optimized order queries&quot;);&#10;    console.log(&quot;   • Farmer orders page - improved farmer-specific queries&quot;);&#10;    console.log(&quot;   • Reviews and favorites - faster user interactions&quot;);&#10;    &#10;    return true;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error optimizing indexes:&quot;, error);&#10;    return false;&#10;  }&#10;}&#10;&#10;// Atlas-specific query optimization hints&#10;async function optimizeAtlasQueries() {&#10;  console.log(&quot; Applying Atlas-specific optimizations...&quot;);&#10;  &#10;  const client = await clientPromise;&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;  &#10;  // Enable collection-level read preferences for better performance&#10;  const collections = ['products', 'orders', 'reviews', 'favorites', 'carts'];&#10;  &#10;  for (const collectionName of collections) {&#10;    const collection = db.collection(collectionName);&#10;    &#10;    // Set read preference to secondary for read-heavy operations&#10;    collection.readPreference = 'secondaryPreferred';&#10;    &#10;    console.log(` Optimized read preference for ${collectionName}`);&#10;  }&#10;  &#10;  console.log(&quot;✅ Query optimizations applied!&quot;);&#10;}&#10;&#10;// Main execution function&#10;async function main() {&#10;  console.log(&quot; MongoDB Atlas Performance Optimization&quot;);&#10;  console.log(&quot;=========================================&quot;);&#10;  &#10;  const indexSuccess = await createAtlasOptimizedIndexes();&#10;  &#10;  if (indexSuccess) {&#10;    await optimizeAtlasQueries();&#10;    console.log(&quot; Your FarmFresh app is now optimized for Atlas!&quot;);&#10;    console.log(&quot; Expected performance improvements:&quot;);&#10;    console.log(&quot;   • Products page: 60-80% faster&quot;);&#10;    console.log(&quot;   • Farmer dashboard: 70-90% faster&quot;); &#10;    console.log(&quot;   • Order queries: 50-70% faster&quot;);&#10;  } else {&#10;    console.log(&quot;❌ Optimization failed. Check your MongoDB connection.&quot;);&#10;  }&#10;}&#10;&#10;// Run if called directly&#10;if (import.meta.url === `file://${process.argv[1]}`) {&#10;  main().catch(console.error);&#10;}&#10;&#10;export { createAtlasOptimizedIndexes, optimizeAtlasQueries };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/specialization-card.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/specialization-card.txt" />
              <option name="updatedContent" value="{/* Dynamic Farm Specializations Card */}&#10;&lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50 dark:from-emerald-900/20 dark:via-teal-900/20 dark:to-cyan-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;  &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-emerald-400/10 to-teal-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;  &lt;div className=&quot;absolute top-4 right-4 w-16 h-16 bg-emerald-100 dark:bg-emerald-800/30 rounded-full opacity-20 group-hover:scale-150 group-hover:rotate-180 transition-all duration-700&quot;&gt;&lt;/div&gt;&#10;  &lt;div className=&quot;relative z-10&quot;&gt;&#10;    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;      &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center transform group-hover:rotate-12 transition-transform duration-500 shadow-lg&quot;&gt;&#10;        &lt;i className=&quot;fas fa-spa text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-right&quot;&gt;&#10;        &lt;div className=&quot;text-4xl font-bold text-emerald-600 dark:text-emerald-400 mb-1&quot;&gt;&#10;          {farmer.specializations?.length || stats.categories?.length || 3}&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;text-emerald-500 dark:text-emerald-300 text-sm font-medium&quot;&gt;&#10;          Specializations&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div className=&quot;space-y-3&quot;&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;flex flex-wrap gap-1 justify-center mb-3&quot;&gt;&#10;          {(farmer.specializations?.slice(0, 3) || stats.categories?.slice(0, 3) || ['Organic', 'Fresh', 'Quality']).map((spec, index) =&gt; {&#10;            const icons = {&#10;              'Grains': 'fas fa-seedling',&#10;              'Fruits': 'fas fa-apple-alt',&#10;              'Vegetables': 'fas fa-carrot',&#10;              'Herbs': 'fas fa-leaf',&#10;              'Honey': 'fas fa-bug',&#10;              'Dairy': 'fas fa-glass-whiskey',&#10;              'Organic': 'fas fa-leaf',&#10;              'Fresh': 'fas fa-sun',&#10;              'Quality': 'fas fa-star'&#10;            };&#10;            const colors = ['text-emerald-500', 'text-teal-500', 'text-cyan-500'];&#10;            return (&#10;              &lt;div key={index} className=&quot;flex items-center bg-white/70 dark:bg-emerald-900/30 rounded-full px-2 py-1&quot;&gt;&#10;                &lt;i className={`${icons[spec] || 'fas fa-spa'} ${colors[index % 3]} text-xs mr-1`}&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-xs font-medium text-gray-700 dark:text-gray-300&quot;&gt;{spec}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;        &lt;div className=&quot;flex-1 h-2 bg-emerald-100 dark:bg-emerald-900/30 rounded-full overflow-hidden&quot;&gt;&#10;          &lt;div&#10;            className=&quot;h-full bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full animate-pulse&quot;&#10;            style={{ width: &quot;90%&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;span className=&quot;text-xs text-emerald-600 dark:text-emerald-400 font-medium&quot;&gt;&#10;          Expert&#10;        &lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-center text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;        Premium farm specialties&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test-db-connection.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test-db-connection.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;// Simple test script to debug Fatema Begum's data&#10;async function testConnection() {&#10;  // Try different connection strings&#10;  const connectionStrings = [&#10;    &quot;mongodb://localhost:27017/farmfresh&quot;,&#10;    &quot;mongodb://127.0.0.1:27017/farmfresh&quot;,&#10;    process.env.MONGODB_URI,&#10;    process.env.DATABASE_URL&#10;  ].filter(Boolean);&#10;&#10;  for (const uri of connectionStrings) {&#10;    console.log(`\n Trying connection: ${uri.replace(/\/\/[^:]*:[^@]*@/, '//***:***@')}`);&#10;    &#10;    try {&#10;      const client = new MongoClient(uri, {&#10;        serverSelectionTimeoutMS: 5000,&#10;        connectTimeoutMS: 5000,&#10;      });&#10;      &#10;      await client.connect();&#10;      console.log(&quot;✅ Connected successfully!&quot;);&#10;      &#10;      const db = client.db(&quot;farmfresh&quot;);&#10;      &#10;      // Test basic queries&#10;      const farmersCount = await db.collection(&quot;farmers&quot;).countDocuments();&#10;      const productsCount = await db.collection(&quot;products&quot;).countDocuments();&#10;      const ordersCount = await db.collection(&quot;orders&quot;).countDocuments();&#10;      &#10;      console.log(` Database stats: ${farmersCount} farmers, ${productsCount} products, ${ordersCount} orders`);&#10;      &#10;      // Search for Fatema specifically&#10;      const fatemaFarmers = await db.collection(&quot;farmers&quot;).find({ &#10;        name: /fatema.*begum/i &#10;      }).toArray();&#10;      &#10;      console.log(`\n‍ Found ${fatemaFarmers.length} Fatema Begum farmers:`);&#10;      fatemaFarmers.forEach(f =&gt; {&#10;        console.log(`- ${f.name} (${f.email}) ID: ${f._id}`);&#10;      });&#10;      &#10;      // Search for corn products&#10;      const cornProducts = await db.collection(&quot;products&quot;).find({ &#10;        name: /corn/i &#10;      }).toArray();&#10;      &#10;      console.log(`\n Found ${cornProducts.length} corn products:`);&#10;      cornProducts.forEach(p =&gt; {&#10;        console.log(`- &quot;${p.name}&quot; by ${p.farmerName || p.farmerEmail || 'Unknown'} (Category: ${p.category})`);&#10;        console.log(`  ID: ${p._id}, Farmer ID: ${p.farmerId}`);&#10;      });&#10;      &#10;      // Search for orders with corn&#10;      const cornOrders = await db.collection(&quot;orders&quot;).find({&#10;        &quot;items.name&quot;: /corn/i&#10;      }).toArray();&#10;      &#10;      console.log(`\n Found ${cornOrders.length} orders with corn:`);&#10;      cornOrders.forEach(o =&gt; {&#10;        console.log(`- Order ${o._id} by ${o.customerName} (${o.status})`);&#10;        o.items.forEach(item =&gt; {&#10;          if (/corn/i.test(item.name)) {&#10;            console.log(`  * ${item.name} x${item.quantity} - ৳${item.price}`);&#10;          }&#10;        });&#10;      });&#10;      &#10;      await client.close();&#10;      return; // Exit on first successful connection&#10;      &#10;    } catch (error) {&#10;      console.log(`❌ Failed: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log(&quot;\n❌ All connection attempts failed!&quot;);&#10;}&#10;&#10;testConnection().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/utils/suppress-hydration-warnings.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/utils/suppress-hydration-warnings.js" />
              <option name="updatedContent" value="// Suppress hydration warnings in development&#10;if (typeof window !== 'undefined' &amp;&amp; process.env.NODE_ENV === 'development') {&#10;  const originalError = console.error;&#10;  console.error = (...args) =&gt; {&#10;    const message = args[0];&#10;    &#10;    // Suppress hydration mismatch warnings&#10;    if (&#10;      typeof message === 'string' &amp;&amp;&#10;      (message.includes('hydrated but some attributes') ||&#10;       message.includes('Warning: Text content did not match') ||&#10;       message.includes('Warning: Prop `className` did not match') ||&#10;       message.includes('Hydration failed because the initial UI does not match'))&#10;    ) {&#10;      return;&#10;    }&#10;    &#10;    // Let other errors through&#10;    originalError.apply(console, args);&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>