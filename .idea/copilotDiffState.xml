<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/api/products/[id]/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/[id]/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;&#10;    console.log(` Looking for product with ID: ${id}`);&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // First, let's check what products actually exist&#10;    const allProductsCheck = await db.collection(&quot;products&quot;).find({}).toArray();&#10;    console.log(` Total products in database: ${allProductsCheck.length}`);&#10;&#10;    if (allProductsCheck.length &gt; 0) {&#10;      console.log(` Sample product IDs:`, allProductsCheck.slice(0, 5).map(p =&gt; ({&#10;        id: p._id,&#10;        type: typeof p._id,&#10;        name: p.name&#10;      })));&#10;    }&#10;&#10;    let targetProduct = null;&#10;&#10;    // Try multiple approaches to find the product&#10;&#10;    // 1. Try exact string match&#10;    targetProduct = await db.collection(&quot;products&quot;).findOne({ _id: id });&#10;    console.log(` String ID search result:`, targetProduct ? &quot;Found&quot; : &quot;Not found&quot;);&#10;&#10;    // 2. If not found and ID looks like ObjectId, try ObjectId&#10;    if (!targetProduct &amp;&amp; ObjectId.isValid(id)) {&#10;      targetProduct = await db&#10;      console.log(` ObjectId search result:`, targetProduct ? &quot;Found&quot; : &quot;Not found&quot;);&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(id) });&#10;    }&#10;&#10;    // 3. Try farmerId field match (in case it's stored there)&#10;      console.log(` FarmerId search result:`, targetProduct ? &quot;Found&quot; : &quot;Not found&quot;);&#10;    if (!targetProduct) {&#10;      targetProduct = await db.collection(&quot;products&quot;).findOne({ farmerId: id });&#10;&#10;        console.log(`⚠️  Warning: ID ${id} appears to be a farmerId, not a productId. Found product: ${targetProduct.name}`);&#10;&#10;      // If we found a product by farmerId, this means we're looking for farmer details, not product details&#10;      if (targetProduct) {&#10;        // Since this is a farmer ID, let's find all products by this farmer and return farmer info&#10;        const farmerProducts = await db&#10;          .collection(&quot;products&quot;)&#10;          .find({ farmerId: id })&#10;          .toArray();&#10;&#10;        // Get farmer info from the first product or create default&#10;        const farmerInfo = targetProduct.farmer || {&#10;          name: &quot;Local Farmer&quot;,&#10;          location: &quot;Bangladesh&quot;,&#10;          bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;          experience: 5,&#10;          id: id,&#10;        };&#10;&#10;        // Return farmer details with their products&#10;        return NextResponse.json({&#10;          isFarmerDetails: true,&#10;          farmer: farmerInfo,&#10;          farmerProducts: farmerProducts.map((p) =&gt; ({&#10;            ...p,&#10;            images: (() =&gt; {&#10;              const imageArray = [];&#10;              if (p.image) imageArray.push(p.image);&#10;              if (p.images &amp;&amp; Array.isArray(p.images))&#10;                imageArray.push(...p.images);&#10;              return [&#10;                ...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim())),&#10;              ];&#10;            })(),&#10;          })),&#10;          totalProducts: farmerProducts.length,&#10;          farmerId: id,&#10;        });&#10;      }&#10;    }&#10;&#10;    // 4. Try searching in nested structures (legacy support)&#10;    if (!targetProduct) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;&#10;            console.log(` Nested structure search result: Found in nested array`);&#10;      for (const doc of productDocuments) {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          const found = doc.products.find(&#10;            (product) =&gt;&#10;              product._id === id ||&#10;              product._id?.toString() === id ||&#10;              product.farmerId === id ||&#10;              (ObjectId.isValid(id) &amp;&amp;&#10;                product._id?.toString() === new ObjectId(id).toString()),&#10;          );&#10;          if (found) {&#10;            targetProduct = found;&#10;            break;&#10;          }&#10;        }&#10;      }&#10;    }&#10;      console.log(` Regex/field search result:`, targetProduct ? &quot;Found&quot; : &quot;Not found&quot;);&#10;&#10;    // 5. Last resort: search by any field that might contain this ID&#10;    if (!targetProduct) {&#10;      console.log(`❌ Product with ID ${id} not found after all search attempts`);&#10;      const regexSearch = await db.collection(&quot;products&quot;).findOne({&#10;        $or: [&#10;          { _id: { $regex: id, $options: &quot;i&quot; } },&#10;          { farmerId: { $regex: id, $options: &quot;i&quot; } },&#10;          { &quot;farmer.id&quot;: id },&#10;          { &quot;farmer._id&quot;: id },&#10;        ],&#10;      });&#10;    console.log(`✅ Found product: ${targetProduct.name} (ID: ${targetProduct._id})`);&#10;&#10;      targetProduct = regexSearch;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        {&#10;          error: &quot;Product not found&quot;,&#10;          searchedId: id,&#10;          totalProductsInDb: allProductsCheck.length,&#10;          availableIds: allProductsCheck.slice(0, 10).map((p) =&gt; p._id),&#10;        },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Get all products for finding related products&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If products are in nested structure, extract them&#10;    if (allProducts.length &gt; 0 &amp;&amp; allProducts[0].products) {&#10;      let extractedProducts = [];&#10;      allProducts.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          extractedProducts = extractedProducts.concat(doc.products);&#10;        }&#10;      });&#10;      allProducts = extractedProducts;&#10;    }&#10;&#10;    // Add default values for missing fields&#10;    const product = {&#10;      ...targetProduct,&#10;      // Combine both image sources - single image field and images array&#10;      images: (() =&gt; {&#10;        const imageArray = [];&#10;&#10;        // Add single image if it exists&#10;        if (targetProduct.image) {&#10;          imageArray.push(targetProduct.image);&#10;        }&#10;&#10;        // Add images array if it exists&#10;        if (targetProduct.images &amp;&amp; Array.isArray(targetProduct.images)) {&#10;          imageArray.push(...targetProduct.images);&#10;        }&#10;&#10;        // Remove duplicates and empty values&#10;        return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;      })(),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch real performance metrics from orders collection&#10;    const performanceMetrics = await calculateProductPerformance(db, id);&#10;&#10;    // Add performance metrics to the product&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products (same category, exclude current product)&#10;    let relatedProducts = allProducts&#10;      .filter(&#10;        (p) =&gt;&#10;          p.category === enhancedProduct.category &amp;&amp;&#10;          p._id !== enhancedProduct._id,&#10;      )&#10;      .slice(0, 4)&#10;      .map((p) =&gt; ({&#10;        ...p,&#10;        // Fix related products images too - combine both sources&#10;        images: (() =&gt; {&#10;          const imageArray = [];&#10;&#10;          // Add single image if it exists&#10;          if (p.image) {&#10;            imageArray.push(p.image);&#10;          }&#10;&#10;          // Add images array if it exists&#10;          if (p.images &amp;&amp; Array.isArray(p.images)) {&#10;            imageArray.push(...p.images);&#10;          }&#10;&#10;          // Remove duplicates and empty values&#10;          return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;        })(),&#10;        farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;        stock: p.stock || 50,&#10;        isOrganic: p.isOrganic || false,&#10;        isFresh: p.isFresh || true,&#10;      }));&#10;&#10;    // Calculate real ratings for related products too&#10;    relatedProducts = enhanceProductsWithRatings(relatedProducts);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date().toISOString();&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    console.log(` Performance metrics for product ${productId}:`, {&#10;      salesMetrics,&#10;      reviewsMetrics,&#10;      recentMetrics,&#10;    });&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // First, let's check what products actually exist&#10;    const allProductsCheck = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    let targetProduct = null;&#10;&#10;    // Try multiple approaches to find the product&#10;&#10;    // 1. Try exact string match&#10;    targetProduct = await db.collection(&quot;products&quot;).findOne({ _id: id });&#10;&#10;    // 2. If not found and ID looks like ObjectId, try ObjectId&#10;    if (!targetProduct &amp;&amp; ObjectId.isValid(id)) {&#10;      targetProduct = await db&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(id) });&#10;    }&#10;&#10;    // 3. Try farmerId field match (in case it's stored there)&#10;    if (!targetProduct) {&#10;      targetProduct = await db.collection(&quot;products&quot;).findOne({ farmerId: id });&#10;&#10;      // If we found a product by farmerId, this means we're looking for farmer details, not product details&#10;      if (targetProduct) {&#10;        // Since this is a farmer ID, let's find all products by this farmer and return farmer info&#10;        const farmerProducts = await db&#10;          .collection(&quot;products&quot;)&#10;          .find({ farmerId: id })&#10;          .toArray();&#10;&#10;        // Get farmer info from the first product or create default&#10;        const farmerInfo = targetProduct.farmer || {&#10;          name: &quot;Local Farmer&quot;,&#10;          location: &quot;Bangladesh&quot;,&#10;          bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;          experience: 5,&#10;          id: id,&#10;        };&#10;&#10;        // Return farmer details with their products&#10;        return NextResponse.json({&#10;          isFarmerDetails: true,&#10;          farmer: farmerInfo,&#10;          farmerProducts: farmerProducts.map((p) =&gt; ({&#10;            ...p,&#10;            images: (() =&gt; {&#10;              const imageArray = [];&#10;              if (p.image) imageArray.push(p.image);&#10;              if (p.images &amp;&amp; Array.isArray(p.images))&#10;                imageArray.push(...p.images);&#10;              return [&#10;                ...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim())),&#10;              ];&#10;            })(),&#10;          })),&#10;          totalProducts: farmerProducts.length,&#10;          farmerId: id,&#10;        });&#10;      }&#10;    }&#10;&#10;    // 4. Try searching in nested structures (legacy support)&#10;    if (!targetProduct) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;&#10;      for (const doc of productDocuments) {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          const found = doc.products.find(&#10;            (product) =&gt;&#10;              product._id === id ||&#10;              product._id?.toString() === id ||&#10;              product.farmerId === id ||&#10;              (ObjectId.isValid(id) &amp;&amp;&#10;                product._id?.toString() === new ObjectId(id).toString()),&#10;          );&#10;          if (found) {&#10;            targetProduct = found;&#10;            break;&#10;          }&#10;        }&#10;      }&#10;    }&#10;&#10;    // 5. Last resort: search by any field that might contain this ID&#10;    if (!targetProduct) {&#10;      const regexSearch = await db.collection(&quot;products&quot;).findOne({&#10;        $or: [&#10;          { _id: { $regex: id, $options: &quot;i&quot; } },&#10;          { farmerId: { $regex: id, $options: &quot;i&quot; } },&#10;          { &quot;farmer.id&quot;: id },&#10;          { &quot;farmer._id&quot;: id },&#10;        ],&#10;      });&#10;      targetProduct = regexSearch;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        {&#10;          error: &quot;Product not found&quot;,&#10;          searchedId: id,&#10;          totalProductsInDb: allProductsCheck.length,&#10;          availableIds: allProductsCheck.slice(0, 10).map((p) =&gt; p._id),&#10;        },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Get all products for finding related products&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If products are in nested structure, extract them&#10;    if (allProducts.length &gt; 0 &amp;&amp; allProducts[0].products) {&#10;      let extractedProducts = [];&#10;      allProducts.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          extractedProducts = extractedProducts.concat(doc.products);&#10;        }&#10;      });&#10;      allProducts = extractedProducts;&#10;    }&#10;&#10;    // Add default values for missing fields&#10;    const product = {&#10;      ...targetProduct,&#10;      // Combine both image sources - single image field and images array&#10;      images: (() =&gt; {&#10;        const imageArray = [];&#10;&#10;        // Add single image if it exists&#10;        if (targetProduct.image) {&#10;          imageArray.push(targetProduct.image);&#10;        }&#10;&#10;        // Add images array if it exists&#10;        if (targetProduct.images &amp;&amp; Array.isArray(targetProduct.images)) {&#10;          imageArray.push(...targetProduct.images);&#10;        }&#10;&#10;        // Remove duplicates and empty values&#10;        return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;      })(),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch real performance metrics from orders collection&#10;    const performanceMetrics = await calculateProductPerformance(db, id);&#10;&#10;    // Add performance metrics to the product&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products (same category, exclude current product)&#10;    let relatedProducts = allProducts&#10;      .filter(&#10;        (p) =&gt;&#10;          p.category === enhancedProduct.category &amp;&amp;&#10;          p._id !== enhancedProduct._id,&#10;      )&#10;      .slice(0, 4)&#10;      .map((p) =&gt; ({&#10;        ...p,&#10;        // Fix related products images too - combine both sources&#10;        images: (() =&gt; {&#10;          const imageArray = [];&#10;&#10;          // Add single image if it exists&#10;          if (p.image) {&#10;            imageArray.push(p.image);&#10;          }&#10;&#10;          // Add images array if it exists&#10;          if (p.images &amp;&amp; Array.isArray(p.images)) {&#10;            imageArray.push(...p.images);&#10;          }&#10;&#10;          // Remove duplicates and empty values&#10;          return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;        })(),&#10;        farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;        stock: p.stock || 50,&#10;        isOrganic: p.isOrganic || false,&#10;        isFresh: p.isFresh || true,&#10;      }));&#10;&#10;    // Calculate real ratings for related products too&#10;    relatedProducts = enhanceProductsWithRatings(relatedProducts);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date().toISOString();&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/details/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/details/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;); // Check for view parameter&#10;  const { data: session } = useSession();&#10;  const { addToCart } = useCart();&#10;&#10;  const [product, setProduct] = useState(null);&#10;  const [farmer, setFarmer] = useState(null); // Add farmer state&#10;  const [farmerProducts, setFarmerProducts] = useState([]); // Add farmer products state&#10;  const [responseType, setResponseType] = useState(null); // Track response type&#10;  const [relatedProducts, setRelatedProducts] = useState([]);&#10;  const [reviews, setReviews] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;  const [reviewsPage, setReviewsPage] = useState(1);&#10;  const [hasMoreReviews, setHasMoreReviews] = useState(false);&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isFavorite, setIsFavorite] = useState(false);&#10;  const [isOwner, setIsOwner] = useState(false);&#10;&#10;  // Review form state&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState({ rating: 5, comment: &quot;&quot; });&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;&#10;  // Farmer-specific states&#10;  const [editMode, setEditMode] = useState(false);&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      fetchProductDetails();&#10;      fetchReviews();&#10;    }&#10;  }, [productId]);&#10;&#10;  // Add a separate effect to refresh performance metrics periodically&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      // Refresh performance data every 30 seconds when viewing as owner&#10;      const interval = setInterval(() =&gt; {&#10;        fetchProductDetails();&#10;      }, 30000);&#10;&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  // Add a separate effect to fetch recent orders for farmers&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  const fetchProductDetails = async () =&gt; {&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`);&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;&#10;        // Handle different response types&#10;        if (data.type === 'farmer') {&#10;          // Farmer details response&#10;          setResponseType('farmer');&#10;          setFarmer(data.farmer);&#10;          setFarmerProducts(data.products || []);&#10;          setRelatedProducts([]); // No related products for farmer view&#10;          setProduct(null); // Clear product data&#10;          setIsOwner(false); // Farmers can't be owners of themselves in this context&#10;        } else {&#10;          // Product details response&#10;          setResponseType('product');&#10;          setProduct(data.product);&#10;          setRelatedProducts(data.relatedProducts);&#10;          setFarmer(null); // Clear farmer data&#10;          setFarmerProducts([]); // Clear farmer products&#10;&#10;          // Check ownership only if not forcing customer view&#10;          if (viewMode !== &quot;customer&quot;) {&#10;            setIsOwner(checkOwnership(data.product));&#10;          } else {&#10;            setIsOwner(false); // Force customer view&#10;          }&#10;        }&#10;      } else {&#10;        console.error(&#10;          &quot;API Response Error:&quot;,&#10;          response.status,&#10;          response.statusText,&#10;        );&#10;        const errorData = await response.text();&#10;        console.error(&quot;Error Response Body:&quot;, errorData);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching details:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const fetchReviews = async (page = 1, append = false) =&gt; {&#10;    try {&#10;      const response = await fetch(&#10;        `/api/products/${productId}/reviews?page=${page}`,&#10;      );&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;&#10;        if (append) {&#10;          setReviews((prev) =&gt; [...prev, ...data.reviews]);&#10;        } else {&#10;          setReviews(data.reviews);&#10;        }&#10;        setHasMoreReviews(data.hasMore);&#10;        setReviewsPage(page);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching reviews:&quot;, error);&#10;    }&#10;  };&#10;&#10;  const fetchRecentOrders = async () =&gt; {&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      // Redirect to login if not authenticated&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Use consistent user ID format&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;&#10;      const response = await fetch(&quot;/api/cart&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({&#10;          productId: productId,&#10;          quantity: quantity,&#10;          userId: userId,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        const errorData = await response.json();&#10;        alert(errorData.error || &quot;Failed to add to cart&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleBuyNow = async () =&gt; {&#10;    if (!session?.user) {&#10;      // Redirect to login if not authenticated&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    // First add to cart, then navigate to payment&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Use consistent user ID format&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;&#10;      const response = await fetch(&quot;/api/cart&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({&#10;          productId: productId,&#10;          quantity: quantity,&#10;          userId: userId,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        // Navigate to payment page&#10;        window.location.href = &quot;/payment&quot;;&#10;      } else {&#10;        const errorData = await response.json();&#10;        alert(errorData.error || &quot;Failed to add to cart&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(&quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    setIsFavorite(!isFavorite);&#10;    // TODO: Implement favorite API call&#10;  };&#10;&#10;  const handleSubmitReview = async (e) =&gt; {&#10;    e.preventDefault();&#10;    if (!session) {&#10;      alert(&quot;Please login to submit a review&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsSubmittingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}/reviews`, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify(reviewForm),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setShowReviewForm(false);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        fetchReviews(); // Refresh reviews&#10;        fetchProductDetails(); // Refresh product rating&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to submit review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error submitting review:&quot;, error);&#10;      alert(&quot;Failed to submit review&quot;);&#10;    } finally {&#10;      setIsSubmittingReview(false);&#10;    }&#10;  };&#10;&#10;  const loadMoreReviews = () =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  };&#10;&#10;  // Check if current user owns this product&#10;  const checkOwnership = (productData) =&gt; {&#10;    if (!session?.user || !productData) return false;&#10;&#10;    const userId = session.user.userId || session.user.id || session.user._id;&#10;    const userEmail = session.user.email;&#10;&#10;    return (&#10;      productData.farmerId === userId ||&#10;      productData.farmerId === String(userId) ||&#10;      productData.farmerEmail === userEmail ||&#10;      productData.farmer?.email === userEmail ||&#10;      productData.farmer?.id === userId&#10;    );&#10;  };&#10;&#10;  const handleUpdateProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    // Validate input&#10;    if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;      alert(&quot;Please enter a value to update&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      // Only include fields that have values&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails(); // Refresh product details&#10;        setStockUpdate(&quot;&quot;); // Clear input&#10;        setPriceUpdate(&quot;&quot;); // Clear input&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleStockUpdate = async () =&gt; {&#10;    if (!stockUpdate || !stockUpdate.trim()) {&#10;      alert(&quot;Please enter a stock value&quot;);&#10;      return;&#10;    }&#10;&#10;    const stockValue = parseInt(stockUpdate);&#10;    if (isNaN(stockValue) || stockValue &lt; 0) {&#10;      alert(&quot;Please enter a valid stock number&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ stock: stockValue }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Stock updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update stock&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating stock:&quot;, error);&#10;      alert(&quot;Failed to update stock. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handlePriceUpdate = async () =&gt; {&#10;    if (!priceUpdate || !priceUpdate.trim()) {&#10;      alert(&quot;Please enter a price value&quot;);&#10;      return;&#10;    }&#10;&#10;    const priceValue = parseFloat(priceUpdate);&#10;    if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;      alert(&quot;Please enter a valid price&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ price: priceValue }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Price updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update price&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating price:&quot;, error);&#10;      alert(&quot;Failed to update price. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleToggleStatus = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const newStatus = product.status === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product. Please try again.`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (&#10;      !confirm(&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\nThis action cannot be undone and will remove:\n• The product listing\n• All associated data\n• Product from any pending orders&quot;,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        window.location.href = &quot;/manage&quot;; // Redirect to dashboard&#10;      } else {&#10;        const error = await response.json();&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\nThis product has pending orders and cannot be deleted.\nPlease wait for all orders to be completed or cancelled before deleting this product.\n\nYou can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          alert(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(&quot;Failed to delete product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleAddImages = () =&gt; {&#10;    // Redirect to edit page where they can add more images&#10;    router.push(`/create?edit=${productId}`);&#10;  };&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          &lt;div className=&quot;animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div className=&quot;aspect-square bg-gray-300 dark:bg-gray-600 rounded-2xl&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                  {[...Array(5)].map((_, i) =&gt; (&#10;                    &lt;div&#10;                      key={i}&#10;                      className=&quot;aspect-square bg-gray-300 dark:bg-gray-600 rounded-lg&quot;&#10;                    &gt;&lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded w-3/4&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded w-1/4&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-10 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Handle farmer details view&#10;  if (responseType === 'farmer' &amp;&amp; farmer) {&#10;    return (&#10;      &lt;&gt;&#10;        &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            {/* Farmer Profile Header */}&#10;            &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;{farmer.name}&lt;/h1&gt;&#10;                  &lt;p className=&quot;text-green-100 mb-4&quot;&gt;{farmer.email}&lt;/p&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-4 text-sm&quot;&gt;&#10;                    &lt;span className=&quot;flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      {farmer.location || 'Location not specified'}&#10;                    &lt;/span&gt;&#10;                    &lt;span className=&quot;flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-phone mr-1&quot;&gt;&lt;/i&gt;&#10;                      {farmer.phone || 'Phone not specified'}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-right&quot;&gt;&#10;                  &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;Products Available&lt;/div&gt;&#10;                  &lt;div className=&quot;text-2xl font-bold&quot;&gt;{farmerProducts.length}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Farmer Products */}&#10;            &lt;div className=&quot;mb-8&quot;&gt;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                Products from {farmer.name}&#10;              &lt;/h2&gt;&#10;&#10;              {farmerProducts.length &gt; 0 ? (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6&quot;&gt;&#10;                  {farmerProducts.map((product) =&gt; (&#10;                    &lt;ProductCard key={product._id} product={product} /&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12 bg-white dark:bg-gray-800 rounded-2xl shadow-lg&quot;&gt;&#10;                  &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-seedling text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No Products Available&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    This farmer hasn't listed any products yet.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Back to Products Link */}&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/products&quot;&#10;                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Browse All Products&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;Footer /&gt;&#10;      &lt;/&gt;&#10;    );&#10;  }&#10;&#10;  // Handle case where neither product nor farmer is found&#10;  if (!product &amp;&amp; !farmer) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            {responseType === 'farmer' ? 'Farmer not found' : 'Product not found'}&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;            {responseType === 'farmer'&#10;              ? 'The farmer profile you are looking for could not be found.'&#10;              : 'The product you are looking for could not be found.'&#10;            }&#10;          &lt;/p&gt;&#10;          &lt;Link&#10;            href=&quot;/products&quot;&#10;            className=&quot;text-primary-600 hover:text-primary-700&quot;&#10;          &gt;&#10;            Browse all products&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Continue with existing product details rendering...&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Show farmer view only if isOwner is true AND viewMode is not &quot;customer&quot; */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Add Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-pause-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images ({product.images?.length || 0})&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;text-blue-600 hover:text-blue-700 text-sm font-medium&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      // Get all images from the product&#10;                      const allImages =&#10;                        product.images &amp;&amp; product.images.length &gt; 0&#10;                          ? product.images&#10;                          : product.image&#10;                            ? [product.image]&#10;                            : [];&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          {/* Main Image Display */}&#10;                          &lt;div className=&quot;relative aspect-video bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden max-w-md mx-auto&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage] || allImages[0]}&#10;                              alt={`${product.name} - Image ${selectedImage + 1}`}&#10;                              width={400}&#10;                              height={250}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                              onError={(e) =&gt; {&#10;                                e.target.src =&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=250&amp;fit=crop&quot;;&#10;                              }}&#10;                            /&gt;&#10;                            &lt;div className=&quot;absolute top-2 left-2&quot;&gt;&#10;                              &lt;span className=&quot;bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs&quot;&gt;&#10;                                {selectedImage + 1} of {allImages.length}&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            {allImages.length &gt; 1 &amp;&amp; (&#10;                              &lt;&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt;&#10;                                    setSelectedImage(&#10;                                      selectedImage &gt; 0&#10;                                        ? selectedImage - 1&#10;                                        : allImages.length - 1,&#10;                                    )&#10;                                  }&#10;                                  className=&quot;absolute left-2 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white p-1.5 rounded-full transition&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-chevron-left text-sm&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt;&#10;                                    setSelectedImage(&#10;                                      selectedImage &lt; allImages.length - 1&#10;                                        ? selectedImage + 1&#10;                                        : 0,&#10;                                    )&#10;                                  }&#10;                                  className=&quot;absolute right-2 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white p-1.5 rounded-full transition&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-chevron-right text-sm&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                              &lt;/&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Thumbnail Gallery */}&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-6 gap-2 max-w-md mx-auto&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`relative aspect-square bg-gray-100 dark:bg-gray-700 rounded overflow-hidden border-2 transition ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-blue-500&quot;&#10;                                      : &quot;border-transparent hover:border-gray-300&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} thumbnail ${index + 1}`}&#10;                                    width={60}&#10;                                    height={60}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                    onError={(e) =&gt; {&#10;                                      e.target.src =&#10;                                        &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=60&amp;h=60&amp;fit=crop&quot;;&#10;                                    }}&#10;                                  /&gt;&#10;                                  {selectedImage === index &amp;&amp; (&#10;                                    &lt;div className=&quot;absolute inset-0 bg-blue-500 bg-opacity-20 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-blue-600 text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  )}&#10;                                &lt;/button&gt;&#10;                              ))}&#10;&#10;                              {/* Add more images placeholder for farmers */}&#10;                              {allImages.length &lt; 5 &amp;&amp; (&#10;                                &lt;button className=&quot;aspect-square border-2 border-dashed border-gray-300 dark:border-gray-600 rounded flex items-center justify-center hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition&quot;&gt;&#10;                                  &lt;div className=&quot;text-center&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-plus text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/button&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-image text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                            No Images Uploaded&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Add product images to make your listing more&#10;                            attractive to customers&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href={`/create?edit=${productId}`}&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition inline-flex items-center&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-upload mr-2&quot;&gt;&lt;/i&gt;&#10;                            Upload Images&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;&#10;                    {/* Enhanced Debug info for farmer view */}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-1&quot;&gt;&#10;                            Current Price&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                            ৳{product.price}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                            per {product.unit || &quot;kg&quot;}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-1&quot;&gt;&#10;                            Current Stock&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.stock}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                            {product.unit || &quot;kg&quot;} available&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-2&quot;&gt;&#10;                          Description&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed&quot;&gt;&#10;                          {product.description || &quot;No description available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-2&quot;&gt;&#10;                            Features&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;span&#10;                                key={index}&#10;                                className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded text-sm&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/span&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder={product.stock.toString()}&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={!stockUpdate || isUpdating}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            {isUpdating ? &quot;Updating...&quot; : &quot;Update&quot;}&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price (৳)&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder={product.price.toString()}&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={!priceUpdate || isUpdating}&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            {isUpdating ? &quot;Updating...&quot; : &quot;Update&quot;}&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders - Enhanced */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/div&gt;&#10;                          {product.performanceMetrics?.salesTrend === &quot;up&quot; &amp;&amp; (&#10;                            &lt;i className=&quot;fas fa-arrow-up text-green-500 text-sm&quot;&gt;&lt;/i&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales (Units)&#10;                        &lt;/div&gt;&#10;                        {product.performanceMetrics?.recentSales &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                            +{product.performanceMetrics.recentSales} this month&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          ৳&#10;                          {product.performanceMetrics?.totalRevenue?.toLocaleString() ||&#10;                            0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                        {product.performanceMetrics?.recentRevenue &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                            +৳&#10;                            {product.performanceMetrics.recentRevenue.toLocaleString()}{&quot; &quot;}&#10;                            this month&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {product.performanceMetrics?.averageRating&#10;                            ? product.performanceMetrics.averageRating.toFixed(&#10;                                1,&#10;                              )&#10;                            : &quot;0.0&quot;}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          {[...Array(5)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className={`fas fa-star text-xs ${&#10;                                i &lt;&#10;                                Math.round(&#10;                                  product.performanceMetrics?.averageRating ||&#10;                                    0,&#10;                                )&#10;                                  ? &quot;text-yellow-400&quot;&#10;                                  : &quot;text-gray-300&quot;&#10;                              }`}&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.performanceMetrics?.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            ৳&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              0,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot; Active product with sales history&quot;&#10;                          : &quot; New product - building performance data&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-yellow-600 hover:bg-yellow-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {isUpdating&#10;                          ? &quot;Updating...&quot;&#10;                          : product.status === &quot;active&quot;&#10;                            ? &quot;Deactivate&quot;&#10;                            : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        {isUpdating ? &quot;Deleting...&quot; : &quot;Delete Product&quot;}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Regular breadcrumb and customer interface here */}&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      // Combine both image sources for customer view&#10;                      const allImages = [];&#10;                      if (product.image) {&#10;                        allImages.push(product.image);&#10;                      }&#10;                      if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;                        allImages.push(...product.images);&#10;                      }&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] ||&#10;                            &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=600&amp;h=600&amp;fit=crop&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                          onError={(e) =&gt; {&#10;                            e.target.src =&#10;                              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=600&amp;h=600&amp;fit=crop&quot;;&#10;                          }}&#10;                          onLoad={(e) =&gt; {&#10;                            console.log(&#10;                              &quot;Customer view main image loaded successfully:&quot;,&#10;                              e.target.src,&#10;                            );&#10;                          }}&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    // Combine both image sources for thumbnails&#10;                    const allImages = [];&#10;                    if (product.image) {&#10;                      allImages.push(product.image);&#10;                    }&#10;                    if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;                      allImages.push(...product.images);&#10;                    }&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square bg-white dark:bg-gray-800 rounded-lg overflow-hidden border-2 transition ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-transparent hover:border-primary-300&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                              onError={(e) =&gt; {&#10;                                e.target.src =&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=100&amp;h=100&amp;fit=crop&quot;;&#10;                              }}&#10;                              onLoad={() =&gt; {&#10;                                console.log(&#10;                                  `Customer view thumbnail ${index + 1} loaded successfully`,&#10;                                );&#10;                              }}&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                      {product.isOrganic &amp;&amp; (&#10;                        &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                          Organic&#10;                        &lt;/span&gt;&#10;                      )}&#10;                      {product.isFresh &amp;&amp; (&#10;                        &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                          Fresh&#10;                        &lt;/span&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farm&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;StarRating&#10;                      rating={product.averageRating || 0}&#10;                      showValue={true}&#10;                    /&gt;&#10;                    &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      ({product.reviewCount || product.totalReviews || 0}{&quot; &quot;}&#10;                      reviews)&#10;                    &lt;/span&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab(&quot;reviews&quot;)}&#10;                      className=&quot;text-primary-600 dark:text-primary-400 hover:underline&quot;&#10;                    &gt;&#10;                      Write a review&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ৳{product.price}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus text-sm&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus text-sm&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Unknown Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Farmer since{&quot; &quot;}&#10;                          {new Date().getFullYear() -&#10;                            (product.farmer?.experience || 5)}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {[&#10;                      &quot;description&quot;,&#10;                      &quot;nutrition&quot;,&#10;                      &quot;storage&quot;,&#10;                      &quot;reviews&quot;,&#10;                      &quot;farmer&quot;,&#10;                    ].map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm transition ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab === &quot;nutrition&quot;&#10;                          ? &quot;Nutrition&quot;&#10;                          : tab === &quot;storage&quot;&#10;                            ? &quot;Storage&quot;&#10;                            : tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;Features&lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden&quot;&gt;&#10;                          &lt;div className=&quot;px-6 py-4 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                              Per{&quot; &quot;}&#10;                              {product.nutritionalInformation.servingSize ||&#10;                                &quot;100g&quot;}{&quot; &quot;}&#10;                              serving&#10;                            &lt;/h4&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;p-6&quot;&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                              {/* Main nutrients */}&#10;                              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                                {product.nutritionalInformation.calories &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Calories&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.calories}{&quot; &quot;}&#10;                                      kcal&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.protein &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Protein&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.protein}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation&#10;                                  .carbohydrates &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Carbohydrates&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {&#10;                                        product.nutritionalInformation&#10;                                          .carbohydrates&#10;                                      }&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.fiber &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Fiber&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.fiber}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.fat &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Fat&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.fat}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Vitamins and Minerals */}&#10;                              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                                {product.nutritionalInformation.iron &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Iron&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.iron}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.vitaminB1 &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Vitamin B1&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.vitaminB1}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.vitaminC &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Vitamin C&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.vitaminC}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.gluten &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium text-orange-600&quot;&gt;&#10;                                      Allergen Info&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-orange-600 dark:text-orange-400&quot;&gt;&#10;                                      {product.nutritionalInformation.gluten}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;div className=&quot;flex items-start gap-3&quot;&gt;&#10;                            &lt;div className=&quot;flex-shrink-0 mt-1&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-snowflake text-blue-600 dark:text-blue-400 text-xl&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex-1&quot;&gt;&#10;                              &lt;h4 className=&quot;text-lg font-medium text-blue-900 dark:text-blue-100 mb-3&quot;&gt;&#10;                                How to Store This Product&#10;                              &lt;/h4&gt;&#10;                              &lt;p className=&quot;text-blue-800 dark:text-blue-200 leading-relaxed&quot;&gt;&#10;                                {product.storageInstructions}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half text-green-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Temperature&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Keep at recommended temperature to maintain&#10;                              freshness&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint text-blue-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Moisture&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Control humidity levels to prevent spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-sun text-yellow-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Light&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Store away from direct sunlight when specified&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-clock text-purple-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Freshness&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Consume within recommended timeframe&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews&#10;                        &lt;/h2&gt;&#10;                        {session &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            Write a Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          &lt;div&gt;&#10;                            &lt;div className=&quot;flex items-center space-x-2 mb-4&quot;&gt;&#10;                              &lt;span className=&quot;text-4xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                                {(() =&gt; {&#10;                                  // Use reviews from API call, which should contain the product's reviews array&#10;                                  const allReviews = reviews || [];&#10;                                  if (allReviews.length === 0) {&#10;                                    // Fallback to product's original rating if no reviews from API&#10;                                    return (&#10;                                      product.averageRating ||&#10;                                      product.rating ||&#10;                                      0&#10;                                    ).toFixed(1);&#10;                                  }&#10;                                  const totalRating = allReviews.reduce(&#10;                                    (sum, review) =&gt;&#10;                                      sum + Number(review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  return (&#10;                                    totalRating / allReviews.length&#10;                                  ).toFixed(1);&#10;                                })()}&#10;                              &lt;/span&gt;&#10;                              &lt;div&gt;&#10;                                &lt;div className=&quot;flex text-yellow-400 mb-1&quot;&gt;&#10;                                  {[...Array(5)].map((_, i) =&gt; {&#10;                                    // Calculate average rating from API reviews or fallback to product rating&#10;                                    const allReviews = reviews || [];&#10;                                    let avgRating = 0;&#10;                                    if (allReviews.length &gt; 0) {&#10;                                      const totalRating = allReviews.reduce(&#10;                                        (sum, review) =&gt;&#10;                                          sum + Number(review.rating || 0),&#10;                                        0,&#10;                                      );&#10;                                      avgRating =&#10;                                        totalRating / allReviews.length;&#10;                                    } else {&#10;                                      avgRating =&#10;                                        product.averageRating ||&#10;                                        product.rating ||&#10;                                        0;&#10;                                    }&#10;&#10;                                    return (&#10;                                      &lt;i&#10;                                        key={i}&#10;                                        className={`fas fa-star ${&#10;                                          i &lt; Math.round(avgRating)&#10;                                            ? &quot;text-yellow-400&quot;&#10;                                            : &quot;text-gray-300&quot;&#10;                                        }`}&#10;                                      &gt;&lt;/i&gt;&#10;                                    );&#10;                                  })}&#10;                                &lt;/div&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  Based on{&quot; &quot;}&#10;                                  {reviews?.length ||&#10;                                    product.totalReviews ||&#10;                                    product.reviewCount ||&#10;                                    0}{&quot; &quot;}&#10;                                  reviews&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;space-y-2&quot;&gt;&#10;                            {/* Dynamic Rating breakdown using API reviews */}&#10;                            {[5, 4, 3, 2, 1].map((star) =&gt; {&#10;                              const allReviews = reviews || [];&#10;                              const totalReviews = allReviews.length;&#10;&#10;                              // Count reviews that fall within the star range (e.g., 4.0-4.9 for 4 stars)&#10;                              const starCount = allReviews.filter((review) =&gt; {&#10;                                const rating = Number(review.rating || 0);&#10;                                return rating &gt;= star &amp;&amp; rating &lt; star + 1;&#10;                              }).length;&#10;&#10;                              const percentage =&#10;                                totalReviews &gt; 0&#10;                                  ? (starCount / totalReviews) * 100&#10;                                  : 0;&#10;&#10;                              return (&#10;                                &lt;div&#10;                                  key={star}&#10;                                  className=&quot;flex items-center space-x-2&quot;&#10;                                &gt;&#10;                                  &lt;span className=&quot;text-sm w-8&quot;&gt;{star}★&lt;/span&gt;&#10;                                  &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2&quot;&gt;&#10;                                    &lt;div&#10;                                      className=&quot;bg-yellow-400 h-2 rounded-full transition-all duration-300&quot;&#10;                                      style={{ width: `${percentage}%` }}&#10;                                    &gt;&lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 w-8&quot;&gt;&#10;                                    {starCount}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              );&#10;                            })}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Form Modal */}&#10;                      {showReviewForm &amp;&amp; (&#10;                        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg max-w-md w-full p-6&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold mb-4&quot;&gt;&#10;                              Write a Review&#10;                            &lt;/h4&gt;&#10;                            &lt;form onSubmit={handleSubmitReview}&gt;&#10;                              &lt;div className=&quot;mb-4&quot;&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium mb-2&quot;&gt;&#10;                                  Rating&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;flex gap-1&quot;&gt;&#10;                                  {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                    &lt;button&#10;                                      key={star}&#10;                                      type=&quot;button&quot;&#10;                                      onClick={() =&gt;&#10;                                        setReviewForm({&#10;                                          ...reviewForm,&#10;                                          rating: star,&#10;                                        })&#10;                                      }&#10;                                      className={`text-2xl transition-colors ${&#10;                                        star &lt;= reviewForm.rating&#10;                                          ? &quot;text-yellow-400 hover:text-yellow-500&quot;&#10;                                          : &quot;text-gray-300 hover:text-gray-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      ★&#10;                                    &lt;/button&gt;&#10;                                  ))}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;mb-4&quot;&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium mb-2&quot;&gt;&#10;                                  Comment&#10;                                &lt;/label&gt;&#10;                                &lt;textarea&#10;                                  value={reviewForm.comment}&#10;                                  onChange={(e) =&gt;&#10;                                    setReviewForm({&#10;                                      ...reviewForm,&#10;                                      comment: e.target.value,&#10;                                    })&#10;                                  }&#10;                                  className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 dark:bg-gray-700&quot;&#10;                                  rows=&quot;4&quot;&#10;                                  placeholder=&quot;Share your experience with this product...&quot;&#10;                                  required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                                &lt;button&#10;                                  type=&quot;button&quot;&#10;                                  onClick={() =&gt; setShowReviewForm(false)}&#10;                                  className=&quot;flex-1 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition&quot;&#10;                                &gt;&#10;                                  Cancel&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  type=&quot;submit&quot;&#10;                                  disabled={&#10;                                    isSubmittingReview ||&#10;                                    !reviewForm.comment.trim()&#10;                                  }&#10;                                  className=&quot;flex-1 bg-primary-600 hover:bg-primary-700 text-white py-2 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition&quot;&#10;                                &gt;&#10;                                  {isSubmittingReview&#10;                                    ? &quot;Submitting...&quot;&#10;                                    : &quot;Submit Review&quot;}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/form&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-6&quot;&gt;&#10;                        {/* Only display reviews from API call */}&#10;                        {(() =&gt; {&#10;                          const allReviews = reviews || [];&#10;&#10;                          if (allReviews.length === 0) {&#10;                            return (&#10;                              &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                                &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                                  &lt;i className=&quot;fas fa-comment-alt text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                  No reviews yet&#10;                                &lt;/h3&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                                  Be the first to share your thoughts about this&#10;                                  product.&#10;                                &lt;/p&gt;&#10;                                {session &amp;&amp; (&#10;                                  &lt;button&#10;                                    onClick={() =&gt; setShowReviewForm(true)}&#10;                                    className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                                  &gt;&#10;                                    Write the First Review&#10;                                  &lt;/button&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                            );&#10;                          }&#10;&#10;                          return allReviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={review._id || index}&#10;                              className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start space-x-4&quot;&gt;&#10;                                &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center&quot;&gt;&#10;                                  &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex-1&quot;&gt;&#10;                                  &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                          {review.userName || &quot;Anonymous&quot;}&#10;                                        &lt;/h4&gt;&#10;                                        {review.isCurrentUser &amp;&amp; (&#10;                                          &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-2 py-1 rounded text-xs&quot;&gt;&#10;                                            Your Review&#10;                                          &lt;/span&gt;&#10;                                        )}&#10;                                        &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-xs&quot;&gt;&#10;                                          Verified Purchase&#10;                                        &lt;/span&gt;&#10;                                      &lt;/div&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                        &lt;div className=&quot;flex text-yellow-400 text-sm&quot;&gt;&#10;                                          {[...Array(5)].map((_, i) =&gt; {&#10;                                            const reviewRating = Number(&#10;                                              review.rating || 0,&#10;                                            );&#10;                                            console.log(&#10;                                              `Review by ${review.userName} - Rating: ${reviewRating}, Star ${i + 1}: ${i &lt; Math.floor(reviewRating) ? &quot;filled&quot; : &quot;empty&quot;}`,&#10;                                            );&#10;&#10;                                            return (&#10;                                              &lt;i&#10;                                                key={i}&#10;                                                className={`fas fa-star ${&#10;                                                  i &lt; Math.floor(reviewRating)&#10;                                                    ? &quot;text-yellow-400&quot;&#10;                                                    : &quot;text-gray-300&quot;&#10;                                                }`}&#10;                                              &gt;&lt;/i&gt;&#10;                                            );&#10;                                          })}&#10;                                        &lt;/div&gt;&#10;                                        &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                          {review.createdAt&#10;                                            ? new Date(&#10;                                                review.createdAt,&#10;                                              ).toLocaleDateString()&#10;                                            : &quot;Unknown date&quot;}&#10;                                        &lt;/span&gt;&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;button className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-ellipsis-v&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/button&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;p className=&quot;text-gray-700 dark:text-gray-300 mb-3 leading-relaxed&quot;&gt;&#10;                                    {review.comment}&#10;                                  &lt;/p&gt;&#10;                                  &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    &lt;button className=&quot;hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&gt;&#10;                                      &lt;i className=&quot;far fa-thumbs-up mr-1&quot;&gt;&lt;/i&gt;&#10;                                      Helpful (&#10;                                      {Math.floor(Math.random() * 15) + 1})&#10;                                    &lt;/button&gt;&#10;                                    &lt;button className=&quot;hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&gt;&#10;                                      Reply&#10;                                    &lt;/button&gt;&#10;                                    {review.isCurrentUser &amp;&amp; (&#10;                                      &lt;button className=&quot;hover:text-red-600 dark:hover:text-red-400 transition&quot;&gt;&#10;                                        Edit&#10;                                      &lt;/button&gt;&#10;                                    )}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ));&#10;                        })()}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center mt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                            &gt;&#10;                              Load More Reviews&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Info Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 bg-primary-100 dark:bg-primary-900 rounded-full flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                              {product.farmer?.name || &quot;Unknown Farmer&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                              {product.farmer?.location ||&#10;                                &quot;Location not specified&quot;}&#10;                            &lt;/p&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              {product.farmer?.bio ||&#10;                                &quot;No farmer information available.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.experience &amp;&amp; (&#10;                              &lt;div className=&quot;mt-4&quot;&gt;&#10;                                &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                  Experience:{&quot; &quot;}&#10;                                &lt;/span&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {product.farmer.experience} years&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Related Products */}&#10;              {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;mt-16&quot;&gt;&#10;                  &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-8&quot;&gt;&#10;                    Related Products&#10;                  &lt;/h3&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                    {relatedProducts.map((relatedProduct) =&gt; (&#10;                      &lt;ProductCard&#10;                        key={relatedProduct._id}&#10;                        product={relatedProduct}&#10;                      /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;); // Check for view parameter&#10;  const { data: session } = useSession();&#10;  const { addToCart } = useCart();&#10;&#10;  const [product, setProduct] = useState(null);&#10;  const [farmer, setFarmer] = useState(null); // Add farmer state&#10;  const [farmerProducts, setFarmerProducts] = useState([]); // Add farmer products state&#10;  const [responseType, setResponseType] = useState(null); // Track response type&#10;  const [relatedProducts, setRelatedProducts] = useState([]);&#10;  const [reviews, setReviews] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;  const [reviewsPage, setReviewsPage] = useState(1);&#10;  const [hasMoreReviews, setHasMoreReviews] = useState(false);&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isFavorite, setIsFavorite] = useState(false);&#10;  const [isOwner, setIsOwner] = useState(false);&#10;&#10;  // Review form state&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState({ rating: 5, comment: &quot;&quot; });&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;&#10;  // Farmer-specific states&#10;  const [editMode, setEditMode] = useState(false);&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      fetchProductDetails();&#10;      // Only fetch reviews after we know the response type&#10;    }&#10;  }, [productId]);&#10;&#10;  // Separate effect to fetch reviews only for products&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; responseType === 'product') {&#10;      fetchReviews();&#10;    }&#10;  }, [productId, responseType]);&#10;&#10;  // Add a separate effect to refresh performance metrics periodically&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      // Refresh performance data every 30 seconds when viewing as owner&#10;      const interval = setInterval(() =&gt; {&#10;        fetchProductDetails();&#10;      }, 30000);&#10;&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  // Add a separate effect to fetch recent orders for farmers&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  const fetchProductDetails = async () =&gt; {&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`);&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;&#10;        // Handle different response types&#10;        if (data.type === 'farmer') {&#10;          // Farmer details response&#10;          setResponseType('farmer');&#10;          setFarmer(data.farmer);&#10;          setFarmerProducts(data.products || []);&#10;          setRelatedProducts([]); // No related products for farmer view&#10;          setProduct(null); // Clear product data&#10;          setIsOwner(false); // Farmers can't be owners of themselves in this context&#10;        } else {&#10;          // Product details response&#10;          setResponseType('product');&#10;          setProduct(data.product);&#10;          setRelatedProducts(data.relatedProducts);&#10;          setFarmer(null); // Clear farmer data&#10;          setFarmerProducts([]); // Clear farmer products&#10;&#10;          // Check ownership only if not forcing customer view&#10;          if (viewMode !== &quot;customer&quot;) {&#10;            setIsOwner(checkOwnership(data.product));&#10;          } else {&#10;            setIsOwner(false); // Force customer view&#10;          }&#10;        }&#10;      } else {&#10;        console.error(&#10;          &quot;API Response Error:&quot;,&#10;          response.status,&#10;          response.statusText,&#10;        );&#10;        const errorData = await response.text();&#10;        console.error(&quot;Error Response Body:&quot;, errorData);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching details:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const fetchReviews = async (page = 1, append = false) =&gt; {&#10;    try {&#10;      const response = await fetch(&#10;        `/api/products/${productId}/reviews?page=${page}`,&#10;      );&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;&#10;        if (append) {&#10;          setReviews((prev) =&gt; [...prev, ...data.reviews]);&#10;        } else {&#10;          setReviews(data.reviews);&#10;        }&#10;        setHasMoreReviews(data.hasMore);&#10;        setReviewsPage(page);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching reviews:&quot;, error);&#10;    }&#10;  };&#10;&#10;  const fetchRecentOrders = async () =&gt; {&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      // Redirect to login if not authenticated&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Use consistent user ID format&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;&#10;      const response = await fetch(&quot;/api/cart&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({&#10;          productId: productId,&#10;          quantity: quantity,&#10;          userId: userId,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        const errorData = await response.json();&#10;        alert(errorData.error || &quot;Failed to add to cart&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleBuyNow = async () =&gt; {&#10;    if (!session?.user) {&#10;      // Redirect to login if not authenticated&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    // First add to cart, then navigate to payment&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Use consistent user ID format&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;&#10;      const response = await fetch(&quot;/api/cart&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({&#10;          productId: productId,&#10;          quantity: quantity,&#10;          userId: userId,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        // Navigate to payment page&#10;        window.location.href = &quot;/payment&quot;;&#10;      } else {&#10;        const errorData = await response.json();&#10;        alert(errorData.error || &quot;Failed to add to cart&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(&quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    setIsFavorite(!isFavorite);&#10;    // TODO: Implement favorite API call&#10;  };&#10;&#10;  const handleSubmitReview = async (e) =&gt; {&#10;    e.preventDefault();&#10;    if (!session) {&#10;      alert(&quot;Please login to submit a review&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsSubmittingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}/reviews`, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify(reviewForm),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setShowReviewForm(false);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        fetchReviews(); // Refresh reviews&#10;        fetchProductDetails(); // Refresh product rating&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to submit review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error submitting review:&quot;, error);&#10;      alert(&quot;Failed to submit review&quot;);&#10;    } finally {&#10;      setIsSubmittingReview(false);&#10;    }&#10;  };&#10;&#10;  const loadMoreReviews = () =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  };&#10;&#10;  // Check if current user owns this product&#10;  const checkOwnership = (productData) =&gt; {&#10;    if (!session?.user || !productData) return false;&#10;&#10;    const userId = session.user.userId || session.user.id || session.user._id;&#10;    const userEmail = session.user.email;&#10;&#10;    return (&#10;      productData.farmerId === userId ||&#10;      productData.farmerId === String(userId) ||&#10;      productData.farmerEmail === userEmail ||&#10;      productData.farmer?.email === userEmail ||&#10;      productData.farmer?.id === userId&#10;    );&#10;  };&#10;&#10;  const handleUpdateProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    // Validate input&#10;    if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;      alert(&quot;Please enter a value to update&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      // Only include fields that have values&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails(); // Refresh product details&#10;        setStockUpdate(&quot;&quot;); // Clear input&#10;        setPriceUpdate(&quot;&quot;); // Clear input&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleStockUpdate = async () =&gt; {&#10;    if (!stockUpdate || !stockUpdate.trim()) {&#10;      alert(&quot;Please enter a stock value&quot;);&#10;      return;&#10;    }&#10;&#10;    const stockValue = parseInt(stockUpdate);&#10;    if (isNaN(stockValue) || stockValue &lt; 0) {&#10;      alert(&quot;Please enter a valid stock number&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ stock: stockValue }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Stock updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update stock&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating stock:&quot;, error);&#10;      alert(&quot;Failed to update stock. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handlePriceUpdate = async () =&gt; {&#10;    if (!priceUpdate || !priceUpdate.trim()) {&#10;      alert(&quot;Please enter a price value&quot;);&#10;      return;&#10;    }&#10;&#10;    const priceValue = parseFloat(priceUpdate);&#10;    if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;      alert(&quot;Please enter a valid price&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ price: priceValue }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Price updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update price&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating price:&quot;, error);&#10;      alert(&quot;Failed to update price. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleToggleStatus = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const newStatus = product.status === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product. Please try again.`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (&#10;      !confirm(&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\nThis action cannot be undone and will remove:\n• The product listing\n• All associated data\n• Product from any pending orders&quot;,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        window.location.href = &quot;/manage&quot;; // Redirect to dashboard&#10;      } else {&#10;        const error = await response.json();&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\nThis product has pending orders and cannot be deleted.\nPlease wait for all orders to be completed or cancelled before deleting this product.\n\nYou can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          alert(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(&quot;Failed to delete product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleAddImages = () =&gt; {&#10;    // Redirect to edit page where they can add more images&#10;    router.push(`/create?edit=${productId}`);&#10;  };&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          &lt;div className=&quot;animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div className=&quot;aspect-square bg-gray-300 dark:bg-gray-600 rounded-2xl&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                  {[...Array(5)].map((_, i) =&gt; (&#10;                    &lt;div&#10;                      key={i}&#10;                      className=&quot;aspect-square bg-gray-300 dark:bg-gray-600 rounded-lg&quot;&#10;                    &gt;&lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded w-3/4&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded w-1/4&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-10 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Handle farmer details view&#10;  if (responseType === 'farmer' &amp;&amp; farmer) {&#10;    return (&#10;      &lt;&gt;&#10;        &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            {/* Farmer Profile Header */}&#10;            &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;{farmer.name}&lt;/h1&gt;&#10;                  &lt;p className=&quot;text-green-100 mb-4&quot;&gt;{farmer.email}&lt;/p&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-4 text-sm&quot;&gt;&#10;                    &lt;span className=&quot;flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      {farmer.location || 'Location not specified'}&#10;                    &lt;/span&gt;&#10;                    &lt;span className=&quot;flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-phone mr-1&quot;&gt;&lt;/i&gt;&#10;                      {farmer.phone || 'Phone not specified'}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-right&quot;&gt;&#10;                  &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;Products Available&lt;/div&gt;&#10;                  &lt;div className=&quot;text-2xl font-bold&quot;&gt;{farmerProducts.length}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Farmer Products */}&#10;            &lt;div className=&quot;mb-8&quot;&gt;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                Products from {farmer.name}&#10;              &lt;/h2&gt;&#10;&#10;              {farmerProducts.length &gt; 0 ? (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6&quot;&gt;&#10;                  {farmerProducts.map((product) =&gt; (&#10;                    &lt;ProductCard key={product._id} product={product} /&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12 bg-white dark:bg-gray-800 rounded-2xl shadow-lg&quot;&gt;&#10;                  &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-seedling text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No Products Available&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    This farmer hasn't listed any products yet.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Back to Products Link */}&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/products&quot;&#10;                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Browse All Products&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;Footer /&gt;&#10;      &lt;/&gt;&#10;    );&#10;  }&#10;&#10;  // Handle case where neither product nor farmer is found&#10;  if (!product &amp;&amp; !farmer) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            {responseType === 'farmer' ? 'Farmer not found' : 'Product not found'}&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;            {responseType === 'farmer'&#10;              ? 'The farmer profile you are looking for could not be found.'&#10;              : 'The product you are looking for could not be found.'&#10;            }&#10;          &lt;/p&gt;&#10;          &lt;Link&#10;            href=&quot;/products&quot;&#10;            className=&quot;text-primary-600 hover:text-primary-700&quot;&#10;          &gt;&#10;            Browse all products&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Continue with existing product details rendering...&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Show farmer view only if isOwner is true AND viewMode is not &quot;customer&quot; */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Add Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-pause-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images ({product.images?.length || 0})&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;text-blue-600 hover:text-blue-700 text-sm font-medium&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      // Get all images from the product&#10;                      const allImages =&#10;                        product.images &amp;&amp; product.images.length &gt; 0&#10;                          ? product.images&#10;                          : product.image&#10;                            ? [product.image]&#10;                            : [];&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          {/* Main Image Display */}&#10;                          &lt;div className=&quot;relative aspect-video bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden max-w-md mx-auto&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage] || allImages[0]}&#10;                              alt={`${product.name} - Image ${selectedImage + 1}`}&#10;                              width={400}&#10;                              height={250}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                              onError={(e) =&gt; {&#10;                                e.target.src =&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=250&amp;fit=crop&quot;;&#10;                              }}&#10;                            /&gt;&#10;                            &lt;div className=&quot;absolute top-2 left-2&quot;&gt;&#10;                              &lt;span className=&quot;bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs&quot;&gt;&#10;                                {selectedImage + 1} of {allImages.length}&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            {allImages.length &gt; 1 &amp;&amp; (&#10;                              &lt;&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt;&#10;                                    setSelectedImage(&#10;                                      selectedImage &gt; 0&#10;                                        ? selectedImage - 1&#10;                                        : allImages.length - 1,&#10;                                    )&#10;                                  }&#10;                                  className=&quot;absolute left-2 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white p-1.5 rounded-full transition&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-chevron-left text-sm&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt;&#10;                                    setSelectedImage(&#10;                                      selectedImage &lt; allImages.length - 1&#10;                                        ? selectedImage + 1&#10;                                        : 0,&#10;                                    )&#10;                                  }&#10;                                  className=&quot;absolute right-2 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white p-1.5 rounded-full transition&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-chevron-right text-sm&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                              &lt;/&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Thumbnail Gallery */}&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-6 gap-2 max-w-md mx-auto&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`relative aspect-square bg-gray-100 dark:bg-gray-700 rounded overflow-hidden border-2 transition ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-blue-500&quot;&#10;                                      : &quot;border-transparent hover:border-gray-300&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} thumbnail ${index + 1}`}&#10;                                    width={60}&#10;                                    height={60}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                    onError={(e) =&gt; {&#10;                                      e.target.src =&#10;                                        &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=60&amp;h=60&amp;fit=crop&quot;;&#10;                                    }}&#10;                                  /&gt;&#10;                                  {selectedImage === index &amp;&amp; (&#10;                                    &lt;div className=&quot;absolute inset-0 bg-blue-500 bg-opacity-20 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-blue-600 text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  )}&#10;                                &lt;/button&gt;&#10;                              ))}&#10;&#10;                              {/* Add more images placeholder for farmers */}&#10;                              {allImages.length &lt; 5 &amp;&amp; (&#10;                                &lt;button className=&quot;aspect-square border-2 border-dashed border-gray-300 dark:border-gray-600 rounded flex items-center justify-center hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition&quot;&gt;&#10;                                  &lt;div className=&quot;text-center&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-plus text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/button&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-image text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                            No Images Uploaded&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Add product images to make your listing more&#10;                            attractive to customers&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href={`/create?edit=${productId}`}&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition inline-flex items-center&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-upload mr-2&quot;&gt;&lt;/i&gt;&#10;                            Upload Images&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;&#10;                    {/* Enhanced Debug info for farmer view */}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-1&quot;&gt;&#10;                            Current Price&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                            ৳{product.price}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                            per {product.unit || &quot;kg&quot;}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-1&quot;&gt;&#10;                            Current Stock&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.stock}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                            {product.unit || &quot;kg&quot;} available&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-2&quot;&gt;&#10;                          Description&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed&quot;&gt;&#10;                          {product.description || &quot;No description available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mb-2&quot;&gt;&#10;                            Features&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;span&#10;                                key={index}&#10;                                className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded text-sm&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/span&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder={product.stock.toString()}&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={!stockUpdate || isUpdating}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            {isUpdating ? &quot;Updating...&quot; : &quot;Update&quot;}&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price (৳)&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder={product.price.toString()}&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={!priceUpdate || isUpdating}&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            {isUpdating ? &quot;Updating...&quot; : &quot;Update&quot;}&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders - Enhanced */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/div&gt;&#10;                          {product.performanceMetrics?.salesTrend === &quot;up&quot; &amp;&amp; (&#10;                            &lt;i className=&quot;fas fa-arrow-up text-green-500 text-sm&quot;&gt;&lt;/i&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales (Units)&#10;                        &lt;/div&gt;&#10;                        {product.performanceMetrics?.recentSales &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                            +{product.performanceMetrics.recentSales} this month&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          ৳&#10;                          {product.performanceMetrics?.totalRevenue?.toLocaleString() ||&#10;                            0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                        {product.performanceMetrics?.recentRevenue &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                            +৳&#10;                            {product.performanceMetrics.recentRevenue.toLocaleString()}{&quot; &quot;}&#10;                            this month&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {product.performanceMetrics?.averageRating&#10;                            ? product.performanceMetrics.averageRating.toFixed(&#10;                                1,&#10;                              )&#10;                            : &quot;0.0&quot;}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          {[...Array(5)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className={`fas fa-star text-xs ${&#10;                                i &lt;&#10;                                Math.round(&#10;                                  product.performanceMetrics?.averageRating ||&#10;                                    0,&#10;                                )&#10;                                  ? &quot;text-yellow-400&quot;&#10;                                  : &quot;text-gray-300&quot;&#10;                              }`}&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.performanceMetrics?.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            ৳&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              0,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot; Active product with sales history&quot;&#10;                          : &quot; New product - building performance data&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-yellow-600 hover:bg-yellow-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {isUpdating&#10;                          ? &quot;Updating...&quot;&#10;                          : product.status === &quot;active&quot;&#10;                            ? &quot;Deactivate&quot;&#10;                            : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        {isUpdating ? &quot;Deleting...&quot; : &quot;Delete Product&quot;}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Regular breadcrumb and customer interface here */}&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      // Combine both image sources for customer view&#10;                      const allImages = [];&#10;                      if (product.image) {&#10;                        allImages.push(product.image);&#10;                      }&#10;                      if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;                        allImages.push(...product.images);&#10;                      }&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] ||&#10;                            &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=600&amp;h=600&amp;fit=crop&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                          onError={(e) =&gt; {&#10;                            e.target.src =&#10;                              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=600&amp;h=600&amp;fit=crop&quot;;&#10;                          }}&#10;                          onLoad={(e) =&gt; {&#10;                            console.log(&#10;                              &quot;Customer view main image loaded successfully:&quot;,&#10;                              e.target.src,&#10;                            );&#10;                          }}&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    // Combine both image sources for thumbnails&#10;                    const allImages = [];&#10;                    if (product.image) {&#10;                      allImages.push(product.image);&#10;                    }&#10;                    if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;                      allImages.push(...product.images);&#10;                    }&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square bg-white dark:bg-gray-800 rounded-lg overflow-hidden border-2 transition ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-transparent hover:border-primary-300&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                              onError={(e) =&gt; {&#10;                                e.target.src =&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=100&amp;h=100&amp;fit=crop&quot;;&#10;                              }}&#10;                              onLoad={() =&gt; {&#10;                                console.log(&#10;                                  `Customer view thumbnail ${index + 1} loaded successfully`,&#10;                                );&#10;                              }}&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                      {product.isOrganic &amp;&amp; (&#10;                        &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                          Organic&#10;                        &lt;/span&gt;&#10;                      )}&#10;                      {product.isFresh &amp;&amp; (&#10;                        &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                          Fresh&#10;                        &lt;/span&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farm&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;StarRating&#10;                      rating={product.averageRating || 0}&#10;                      showValue={true}&#10;                    /&gt;&#10;                    &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      ({product.reviewCount || product.totalReviews || 0}{&quot; &quot;}&#10;                      reviews)&#10;                    &lt;/span&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab(&quot;reviews&quot;)}&#10;                      className=&quot;text-primary-600 dark:text-primary-400 hover:underline&quot;&#10;                    &gt;&#10;                      Write a review&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ৳{product.price}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus text-sm&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus text-sm&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Unknown Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Farmer since{&quot; &quot;}&#10;                          {new Date().getFullYear() -&#10;                            (product.farmer?.experience || 5)}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {[&#10;                      &quot;description&quot;,&#10;                      &quot;nutrition&quot;,&#10;                      &quot;storage&quot;,&#10;                      &quot;reviews&quot;,&#10;                      &quot;farmer&quot;,&#10;                    ].map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm transition ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab === &quot;nutrition&quot;&#10;                          ? &quot;Nutrition&quot;&#10;                          : tab === &quot;storage&quot;&#10;                            ? &quot;Storage&quot;&#10;                            : tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;Features&lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden&quot;&gt;&#10;                          &lt;div className=&quot;px-6 py-4 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                              Per{&quot; &quot;}&#10;                              {product.nutritionalInformation.servingSize ||&#10;                                &quot;100g&quot;}{&quot; &quot;}&#10;                              serving&#10;                            &lt;/h4&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;p-6&quot;&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                              {/* Main nutrients */}&#10;                              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                                {product.nutritionalInformation.calories &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Calories&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.calories}{&quot; &quot;}&#10;                                      kcal&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.protein &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Protein&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.protein}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation&#10;                                  .carbohydrates &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Carbohydrates&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {&#10;                                        product.nutritionalInformation&#10;                                          .carbohydrates&#10;                                      }&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.fiber &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Fiber&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.fiber}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.fat &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Fat&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.fat}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Vitamins and Minerals */}&#10;                              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                                {product.nutritionalInformation.iron &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;Iron&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.iron}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.vitaminB1 &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Vitamin B1&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.vitaminB1}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.vitaminC &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                                      Vitamin C&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      {product.nutritionalInformation.vitaminC}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                                {product.nutritionalInformation.gluten &amp;&amp; (&#10;                                  &lt;div className=&quot;flex justify-between py-2 border-b border-gray-100 dark:border-gray-600&quot;&gt;&#10;                                    &lt;span className=&quot;font-medium text-orange-600&quot;&gt;&#10;                                      Allergen Info&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-orange-600 dark:text-orange-400&quot;&gt;&#10;                                      {product.nutritionalInformation.gluten}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;div className=&quot;flex items-start gap-3&quot;&gt;&#10;                            &lt;div className=&quot;flex-shrink-0 mt-1&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-snowflake text-blue-600 dark:text-blue-400 text-xl&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex-1&quot;&gt;&#10;                              &lt;h4 className=&quot;text-lg font-medium text-blue-900 dark:text-blue-100 mb-3&quot;&gt;&#10;                                How to Store This Product&#10;                              &lt;/h4&gt;&#10;                              &lt;p className=&quot;text-blue-800 dark:text-blue-200 leading-relaxed&quot;&gt;&#10;                                {product.storageInstructions}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half text-green-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Temperature&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Keep at recommended temperature to maintain&#10;                              freshness&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint text-blue-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Moisture&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Control humidity levels to prevent spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-sun text-yellow-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Light&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Store away from direct sunlight when specified&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 rounded-lg p-4&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-clock text-purple-600&quot;&gt;&lt;/i&gt;&#10;                              &lt;span className=&quot;font-medium&quot;&gt;Freshness&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              Consume within recommended timeframe&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews&#10;                        &lt;/h2&gt;&#10;                        {session &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            Write a Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          &lt;div&gt;&#10;                            &lt;div className=&quot;flex items-center space-x-2 mb-4&quot;&gt;&#10;                              &lt;span className=&quot;text-4xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                                {(() =&gt; {&#10;                                  // Use reviews from API call, which should contain the product's reviews array&#10;                                  const allReviews = reviews || [];&#10;                                  if (allReviews.length === 0) {&#10;                                    // Fallback to product's original rating if no reviews from API&#10;                                    return (&#10;                                      product.averageRating ||&#10;                                      product.rating ||&#10;                                      0&#10;                                    ).toFixed(1);&#10;                                  }&#10;                                  const totalRating = allReviews.reduce(&#10;                                    (sum, review) =&gt;&#10;                                      sum + Number(review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  return (&#10;                                    totalRating / allReviews.length&#10;                                  ).toFixed(1);&#10;                                })()}&#10;                              &lt;/span&gt;&#10;                              &lt;div&gt;&#10;                                &lt;div className=&quot;flex text-yellow-400 mb-1&quot;&gt;&#10;                                  {[...Array(5)].map((_, i) =&gt; {&#10;                                    // Calculate average rating from API reviews or fallback to product rating&#10;                                    const allReviews = reviews || [];&#10;                                    let avgRating = 0;&#10;                                    if (allReviews.length &gt; 0) {&#10;                                      const totalRating = allReviews.reduce(&#10;                                        (sum, review) =&gt;&#10;                                          sum + Number(review.rating || 0),&#10;                                        0,&#10;                                      );&#10;                                      avgRating =&#10;                                        totalRating / allReviews.length;&#10;                                    } else {&#10;                                      avgRating =&#10;                                        product.averageRating ||&#10;                                        product.rating ||&#10;                                        0;&#10;                                    }&#10;&#10;                                    return (&#10;                                      &lt;i&#10;                                        key={i}&#10;                                        className={`fas fa-star ${&#10;                                          i &lt; Math.round(avgRating)&#10;                                            ? &quot;text-yellow-400&quot;&#10;                                            : &quot;text-gray-300&quot;&#10;                                        }`}&#10;                                      &gt;&lt;/i&gt;&#10;                                    );&#10;                                  })}&#10;                                &lt;/div&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  Based on{&quot; &quot;}&#10;                                  {reviews?.length ||&#10;                                    product.totalReviews ||&#10;                                    product.reviewCount ||&#10;                                    0}{&quot; &quot;}&#10;                                  reviews&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;space-y-2&quot;&gt;&#10;                            {/* Dynamic Rating breakdown using API reviews */}&#10;                            {[5, 4, 3, 2, 1].map((star) =&gt; {&#10;                              const allReviews = reviews || [];&#10;                              const totalReviews = allReviews.length;&#10;&#10;                              // Count reviews that fall within the star range (e.g., 4.0-4.9 for 4 stars)&#10;                              const starCount = allReviews.filter((review) =&gt; {&#10;                                const rating = Number(review.rating || 0);&#10;                                return rating &gt;= star &amp;&amp; rating &lt; star + 1;&#10;                              }).length;&#10;&#10;                              const percentage =&#10;                                totalReviews &gt; 0&#10;                                  ? (starCount / totalReviews) * 100&#10;                                  : 0;&#10;&#10;                              return (&#10;                                &lt;div&#10;                                  key={star}&#10;                                  className=&quot;flex items-center space-x-2&quot;&#10;                                &gt;&#10;                                  &lt;span className=&quot;text-sm w-8&quot;&gt;{star}★&lt;/span&gt;&#10;                                  &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2&quot;&gt;&#10;                                    &lt;div&#10;                                      className=&quot;bg-yellow-400 h-2 rounded-full transition-all duration-300&quot;&#10;                                      style={{ width: `${percentage}%` }}&#10;                                    &gt;&lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 w-8&quot;&gt;&#10;                                    {starCount}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              );&#10;                            })}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Form Modal */}&#10;                      {showReviewForm &amp;&amp; (&#10;                        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg max-w-md w-full p-6&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold mb-4&quot;&gt;&#10;                              Write a Review&#10;                            &lt;/h4&gt;&#10;                            &lt;form onSubmit={handleSubmitReview}&gt;&#10;                              &lt;div className=&quot;mb-4&quot;&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium mb-2&quot;&gt;&#10;                                  Rating&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;flex gap-1&quot;&gt;&#10;                                  {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                    &lt;button&#10;                                      key={star}&#10;                                      type=&quot;button&quot;&#10;                                      onClick={() =&gt;&#10;                                        setReviewForm({&#10;                                          ...reviewForm,&#10;                                          rating: star,&#10;                                        })&#10;                                      }&#10;                                      className={`text-2xl transition-colors ${&#10;                                        star &lt;= reviewForm.rating&#10;                                          ? &quot;text-yellow-400 hover:text-yellow-500&quot;&#10;                                          : &quot;text-gray-300 hover:text-gray-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      ★&#10;                                    &lt;/button&gt;&#10;                                  ))}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;mb-4&quot;&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium mb-2&quot;&gt;&#10;                                  Comment&#10;                                &lt;/label&gt;&#10;                                &lt;textarea&#10;                                  value={reviewForm.comment}&#10;                                  onChange={(e) =&gt;&#10;                                    setReviewForm({&#10;                                      ...reviewForm,&#10;                                      comment: e.target.value,&#10;                                    })&#10;                                  }&#10;                                  className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 dark:bg-gray-700&quot;&#10;                                  rows=&quot;4&quot;&#10;                                  placeholder=&quot;Share your experience with this product...&quot;&#10;                                  required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                                &lt;button&#10;                                  type=&quot;button&quot;&#10;                                  onClick={() =&gt; setShowReviewForm(false)}&#10;                                  className=&quot;flex-1 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition&quot;&#10;                                &gt;&#10;                                  Cancel&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  type=&quot;submit&quot;&#10;                                  disabled={&#10;                                    isSubmittingReview ||&#10;                                    !reviewForm.comment.trim()&#10;                                  }&#10;                                  className=&quot;flex-1 bg-primary-600 hover:bg-primary-700 text-white py-2 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition&quot;&#10;                                &gt;&#10;                                  {isSubmittingReview&#10;                                    ? &quot;Submitting...&quot;&#10;                                    : &quot;Submit Review&quot;}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/form&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-6&quot;&gt;&#10;                        {/* Only display reviews from API call */}&#10;                        {(() =&gt; {&#10;                          const allReviews = reviews || [];&#10;&#10;                          if (allReviews.length === 0) {&#10;                            return (&#10;                              &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                                &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                                  &lt;i className=&quot;fas fa-comment-alt text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                  No reviews yet&#10;                                &lt;/h3&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                                  Be the first to share your thoughts about this&#10;                                  product.&#10;                                &lt;/p&gt;&#10;                                {session &amp;&amp; (&#10;                                  &lt;button&#10;                                    onClick={() =&gt; setShowReviewForm(true)}&#10;                                    className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                                  &gt;&#10;                                    Write the First Review&#10;                                  &lt;/button&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                            );&#10;                          }&#10;&#10;                          return allReviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={review._id || index}&#10;                              className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start space-x-4&quot;&gt;&#10;                                &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center&quot;&gt;&#10;                                  &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex-1&quot;&gt;&#10;                                  &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                    &lt;div&gt;&#10;                                      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                          {review.userName || &quot;Anonymous&quot;}&#10;                                        &lt;/h4&gt;&#10;                                        {review.isCurrentUser &amp;&amp; (&#10;                                          &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-2 py-1 rounded text-xs&quot;&gt;&#10;                                            Your Review&#10;                                          &lt;/span&gt;&#10;                                        )}&#10;                                        &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-xs&quot;&gt;&#10;                                          Verified Purchase&#10;                                        &lt;/span&gt;&#10;                                      &lt;/div&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                        &lt;div className=&quot;flex text-yellow-400 text-sm&quot;&gt;&#10;                                          {[...Array(5)].map((_, i) =&gt; {&#10;                                            const reviewRating = Number(&#10;                                              review.rating || 0,&#10;                                            );&#10;                                            console.log(&#10;                                              `Review by ${review.userName} - Rating: ${reviewRating}, Star ${i + 1}: ${i &lt; Math.floor(reviewRating) ? &quot;filled&quot; : &quot;empty&quot;}`,&#10;                                            );&#10;&#10;                                            return (&#10;                                              &lt;i&#10;                                                key={i}&#10;                                                className={`fas fa-star ${&#10;                                                  i &lt; Math.floor(reviewRating)&#10;                                                    ? &quot;text-yellow-400&quot;&#10;                                                    : &quot;text-gray-300&quot;&#10;                                                }`}&#10;                                              &gt;&lt;/i&gt;&#10;                                            );&#10;                                          })}&#10;                                        &lt;/div&gt;&#10;                                        &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                          {review.createdAt&#10;                                            ? new Date(&#10;                                                review.createdAt,&#10;                                              ).toLocaleDateString()&#10;                                            : &quot;Unknown date&quot;}&#10;                                        &lt;/span&gt;&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;button className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-ellipsis-v&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/button&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;p className=&quot;text-gray-700 dark:text-gray-300 mb-3 leading-relaxed&quot;&gt;&#10;                                    {review.comment}&#10;                                  &lt;/p&gt;&#10;                                  &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    &lt;button className=&quot;hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&gt;&#10;                                      &lt;i className=&quot;far fa-thumbs-up mr-1&quot;&gt;&lt;/i&gt;&#10;                                      Helpful (&#10;                                      {Math.floor(Math.random() * 15) + 1})&#10;                                    &lt;/button&gt;&#10;                                    &lt;button className=&quot;hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&gt;&#10;                                      Reply&#10;                                    &lt;/button&gt;&#10;                                    {review.isCurrentUser &amp;&amp; (&#10;                                      &lt;button className=&quot;hover:text-red-600 dark:hover:text-red-400 transition&quot;&gt;&#10;                                        Edit&#10;                                      &lt;/button&gt;&#10;                                    )}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ));&#10;                        })()}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center mt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                            &gt;&#10;                              Load More Reviews&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Info Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 bg-primary-100 dark:bg-primary-900 rounded-full flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                              {product.farmer?.name || &quot;Unknown Farmer&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                              {product.farmer?.location ||&#10;                                &quot;Location not specified&quot;}&#10;                            &lt;/p&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              {product.farmer?.bio ||&#10;                                &quot;No farmer information available.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.experience &amp;&amp; (&#10;                              &lt;div className=&quot;mt-4&quot;&gt;&#10;                                &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                  Experience:{&quot; &quot;}&#10;                                &lt;/span&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {product.farmer.experience} years&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Related Products */}&#10;              {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;mt-16&quot;&gt;&#10;                  &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-8&quot;&gt;&#10;                    Related Products&#10;                  &lt;/h3&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                    {relatedProducts.map((relatedProduct) =&gt; (&#10;                      &lt;ProductCard&#10;                        key={relatedProduct._id}&#10;                        product={relatedProduct}&#10;                      /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/products/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/products/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect, useCallback } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;&#10;export default function Products() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const [products, setProducts] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [categories, setCategories] = useState([]);&#10;  const [pagination, setPagination] = useState({});&#10;&#10;  // Search and filter states&#10;  const [searchTerm, setSearchTerm] = useState(&#10;    searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;  );&#10;  const [selectedCategory, setSelectedCategory] = useState(&#10;    searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;  );&#10;  const [selectedPriceRanges, setSelectedPriceRanges] = useState([]);&#10;  const [selectedRatings, setSelectedRatings] = useState([]);&#10;  const [selectedFarmers, setSelectedFarmers] = useState([]);&#10;  const [selectedTags, setSelectedTags] = useState([]);&#10;  const [priceRangeSlider, setPriceRangeSlider] = useState([0, 10000]);&#10;  const [sortBy, setSortBy] = useState(&quot;newest&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;  const [availableFarmers, setAvailableFarmers] = useState([]);&#10;&#10;  const categoryOptions = [&#10;    &quot;All Categories&quot;,&#10;    &quot;Vegetables&quot;,&#10;    &quot;Fruits&quot;,&#10;    &quot;Grains&quot;,&#10;    &quot;Dairy&quot;,&#10;    &quot;Honey&quot;,&#10;    &quot;Herbs&quot;,&#10;  ];&#10;&#10;  const priceRangeOptions = [&#10;    { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;    { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;    { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;    { label: &quot;৳200 - ৳500&quot;, min: 201, max: 500 },&#10;    { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;  ];&#10;&#10;  const tagOptions = [&#10;    &quot;Organic&quot;,&#10;    &quot;Fresh&quot;,&#10;    &quot;Local&quot;,&#10;    &quot;Premium&quot;,&#10;    &quot;Seasonal&quot;,&#10;    &quot;Limited Stock&quot;,&#10;  ];&#10;&#10;  const applyFilters = useCallback((products) =&gt; {&#10;    let filtered = [...products];&#10;&#10;    // Apply price range checkboxes&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedPriceRanges.some((range) =&gt; {&#10;          const option = priceRangeOptions.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider (always apply)&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return price &gt;= priceRangeSlider[0] &amp;&amp; price &lt;= priceRangeSlider[1];&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return selectedRatings.some((rating) =&gt; productRating &gt;= rating);&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return product.isOrganic === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;));&#10;            case &quot;Fresh&quot;:&#10;              return product.isFresh === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;));&#10;            case &quot;Local&quot;:&#10;              return true; // Assuming all products are local&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseFloat(b.averageRating) || 0) - (parseFloat(a.averageRating) || 0)&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0)&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [selectedPriceRanges, priceRangeSlider, selectedRatings, selectedFarmers, selectedTags, sortBy]);&#10;&#10;  const fetchProducts = useCallback(async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const params = new URLSearchParams();&#10;      if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;      if (selectedCategory !== &quot;All Categories&quot;)&#10;        params.append(&quot;category&quot;, selectedCategory);&#10;      params.append(&quot;limit&quot;, &quot;1000&quot;);&#10;      params.append(&quot;sortBy&quot;, sortBy);&#10;&#10;      const response = await fetch(`/api/products?${params}`);&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        let allProducts = data.products || [];&#10;&#10;        // Apply client-side filters&#10;        let filteredProducts = applyFilters(allProducts);&#10;&#10;        // Apply pagination&#10;        const itemsPerPage = 12;&#10;        const startIndex = (currentPage - 1) * itemsPerPage;&#10;        const endIndex = startIndex + itemsPerPage;&#10;        const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;        setProducts(paginatedProducts);&#10;        setPagination({&#10;          currentPage: currentPage,&#10;          totalPages: Math.ceil(filteredProducts.length / itemsPerPage),&#10;          totalProducts: filteredProducts.length,&#10;          hasNextPage: currentPage &lt; Math.ceil(filteredProducts.length / itemsPerPage),&#10;          hasPrevPage: currentPage &gt; 1,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [searchTerm, selectedCategory, sortBy, currentPage, applyFilters]);&#10;&#10;  const fetchAvailableFarmers = async () =&gt; {&#10;    try {&#10;      const farmers = [];&#10;&#10;      // Fetch from products API to get farmers&#10;      try {&#10;        const response = await fetch(&quot;/api/products?limit=1000&quot;);&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;          const uniqueFarmers = [...new Set(&#10;            data.products&#10;              .map(p =&gt; p.farmer?.name || p.farmerName)&#10;              .filter(Boolean)&#10;          )];&#10;          farmers.push(...uniqueFarmers);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching farmers:&quot;, error);&#10;      }&#10;&#10;      // Sort and set farmers&#10;      farmers.sort();&#10;      setAvailableFarmers(farmers);&#10;    } catch (error) {&#10;      console.error(&quot;Error in fetchAvailableFarmers:&quot;, error);&#10;      setAvailableFarmers([]);&#10;    }&#10;  };&#10;&#10;  // Create debounced fetch function after fetchProducts is defined&#10;  const debouncedFetchProducts = useCallback(&#10;    debounce(() =&gt; {&#10;      fetchProducts();&#10;    }, 300),&#10;    [fetchProducts]&#10;  );&#10;&#10;  // Main effect for triggering product fetch&#10;  useEffect(() =&gt; {&#10;    fetchProducts();&#10;  }, [fetchProducts]);&#10;&#10;  // Separate useEffect for fetching farmers (only once)&#10;  useEffect(() =&gt; {&#10;    fetchAvailableFarmers();&#10;  }, []);&#10;&#10;  // Update states from URL params&#10;  useEffect(() =&gt; {&#10;    const newSearchTerm = searchParams.get(&quot;search&quot;) || &quot;&quot;;&#10;    const newCategory = searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;;&#10;&#10;    setSearchTerm(newSearchTerm);&#10;    setSelectedCategory(newCategory);&#10;&#10;    // Restore price ranges from URL&#10;    const priceRanges = searchParams.get(&quot;priceRanges&quot;);&#10;    if (priceRanges) {&#10;      setSelectedPriceRanges(priceRanges.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedPriceRanges([]);&#10;    }&#10;&#10;    // Restore ratings from URL&#10;    const ratings = searchParams.get(&quot;ratings&quot;);&#10;    if (ratings) {&#10;      setSelectedRatings(ratings.split(&quot;,&quot;).map(Number));&#10;    } else {&#10;      setSelectedRatings([]);&#10;    }&#10;&#10;    // Restore farmers from URL&#10;    const farmers = searchParams.get(&quot;farmers&quot;);&#10;    if (farmers) {&#10;      setSelectedFarmers(farmers.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedFarmers([]);&#10;    }&#10;&#10;    // Restore tags from URL&#10;    const tags = searchParams.get(&quot;tags&quot;);&#10;    if (tags) {&#10;      setSelectedTags(tags.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedTags([]);&#10;    }&#10;&#10;    // Restore price range slider from URL&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;);&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;);&#10;    if (minPrice &amp;&amp; maxPrice) {&#10;      setPriceRangeSlider([Number(minPrice), Number(maxPrice)]);&#10;    } else {&#10;      setPriceRangeSlider([0, 10000]);&#10;    }&#10;&#10;    // Restore sort option from URL&#10;    setSortBy(searchParams.get(&quot;sort&quot;) || &quot;newest&quot;);&#10;&#10;    // Restore page from URL&#10;    setCurrentPage(Number(searchParams.get(&quot;page&quot;)) || 1);&#10;  }, [searchParams]);&#10;&#10;  // Handle search functionality&#10;  const handleSearch = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;    router.push(`/products?${params.toString()}`);&#10;    setCurrentPage(1);&#10;    fetchProducts();&#10;  };&#10;&#10;  const handleKeyPress = (e) =&gt; {&#10;    if (e.key === &quot;Enter&quot;) {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  const handleCategoryChange = (category) =&gt; {&#10;    setSelectedCategory(category);&#10;    setCurrentPage(1);&#10;    // Don't call updateURL here - let the useEffect handle it&#10;  };&#10;&#10;  const handlePriceRangeChange = (range) =&gt; {&#10;    const newPriceRanges = selectedPriceRanges.includes(range)&#10;      ? selectedPriceRanges.filter((r) =&gt; r !== range)&#10;      : [...selectedPriceRanges, range];&#10;&#10;    setSelectedPriceRanges(newPriceRanges);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedPriceRanges: newPriceRanges,&#10;    });&#10;  };&#10;&#10;  const handleRatingChange = (rating) =&gt; {&#10;    const newRatings = selectedRatings.includes(rating)&#10;      ? selectedRatings.filter((r) =&gt; r !== rating)&#10;      : [...selectedRatings, rating];&#10;&#10;    setSelectedRatings(newRatings);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedRatings: newRatings,&#10;    });&#10;  };&#10;&#10;  const handleFarmerChange = (farmer) =&gt; {&#10;    const newFarmers = selectedFarmers.includes(farmer)&#10;      ? selectedFarmers.filter((f) =&gt; f !== farmer)&#10;      : [...selectedFarmers, farmer];&#10;&#10;    setSelectedFarmers(newFarmers);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedFarmers: newFarmers,&#10;    });&#10;  };&#10;&#10;  const handleTagChange = (tag) =&gt; {&#10;    const newTags = selectedTags.includes(tag)&#10;      ? selectedTags.filter((t) =&gt; t !== tag)&#10;      : [...selectedTags, tag];&#10;&#10;    setSelectedTags(newTags);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedTags: newTags,&#10;    });&#10;  };&#10;&#10;  const handlePriceSliderChange = (newPriceRange) =&gt; {&#10;    setPriceRangeSlider(newPriceRange);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      priceRangeSlider: newPriceRange,&#10;    });&#10;  };&#10;&#10;  const handleSortChange = (newSort) =&gt; {&#10;    setSortBy(newSort);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      sortBy: newSort,&#10;    });&#10;  };&#10;&#10;  const clearAllFilters = () =&gt; {&#10;    setSelectedCategory(&quot;All Categories&quot;);&#10;    setSearchTerm(&quot;&quot;);&#10;    setSelectedPriceRanges([]);&#10;    setSelectedRatings([]);&#10;    setSelectedFarmers([]);&#10;    setSelectedTags([]);&#10;    setPriceRangeSlider([0, 10000]);&#10;    setCurrentPage(1);&#10;    updateURL();&#10;  };&#10;&#10;  const updateURL = () =&gt; {&#10;    const params = new URLSearchParams();&#10;&#10;    // Add search term&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;&#10;    // Add category&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;&#10;    // Add price ranges&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, selectedPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (selectedRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, selectedRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (selectedFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, selectedFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (selectedTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, selectedTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, priceRangeSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, priceRangeSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (sortBy !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, sortBy);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPage &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPage);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const updateURLWithFilters = (overrides = {}) =&gt; {&#10;    console.log(&quot; updateURLWithFilters called with overrides:&quot;, overrides);&#10;&#10;    const params = new URLSearchParams();&#10;&#10;    // Use current state values or overrides&#10;    const currentSearchTerm =&#10;      overrides.searchTerm !== undefined ? overrides.searchTerm : searchTerm;&#10;    const currentCategory =&#10;      overrides.selectedCategory !== undefined&#10;        ? overrides.selectedCategory&#10;        : selectedCategory;&#10;    const currentPriceRanges =&#10;      overrides.selectedPriceRanges !== undefined&#10;        ? overrides.selectedPriceRanges&#10;        : selectedPriceRanges;&#10;    const currentRatings =&#10;      overrides.selectedRatings !== undefined&#10;        ? overrides.selectedRatings&#10;        : selectedRatings;&#10;    const currentFarmers =&#10;      overrides.selectedFarmers !== undefined&#10;        ? overrides.selectedFarmers&#10;        : selectedFarmers;&#10;    const currentTags =&#10;      overrides.selectedTags !== undefined&#10;        ? overrides.selectedTags&#10;        : selectedTags;&#10;    const currentPriceSlider =&#10;      overrides.priceRangeSlider !== undefined&#10;        ? overrides.priceRangeSlider&#10;        : priceRangeSlider;&#10;    const currentSort =&#10;      overrides.sortBy !== undefined ? overrides.sortBy : sortBy;&#10;    const currentPageNumber =&#10;      overrides.currentPage !== undefined ? overrides.currentPage : 1; // Reset to page 1 for filters&#10;&#10;    console.log(&quot; Final values to use:&quot;, {&#10;      currentSearchTerm,&#10;      currentCategory,&#10;      currentPriceRanges,&#10;      currentRatings,&#10;      currentFarmers,&#10;      currentTags,&#10;      currentPriceSlider,&#10;      currentSort,&#10;      currentPageNumber,&#10;    });&#10;&#10;    // Add search term&#10;    if (currentSearchTerm) params.append(&quot;search&quot;, currentSearchTerm);&#10;&#10;    // Add category&#10;    if (currentCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, currentCategory);&#10;&#10;    // Add price ranges&#10;    if (currentPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, currentPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (currentRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, currentRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (currentFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, currentFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (currentTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, currentTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (currentPriceSlider[0] !== 0 || currentPriceSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, currentPriceSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, currentPriceSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (currentSort !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, currentSort);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPageNumber &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPageNumber);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    console.log(&quot; Generated URL with filters:&quot;, newURL);&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const handlePageChange = (page) =&gt; {&#10;    console.log(&quot; Page change clicked:&quot;, page);&#10;    setCurrentPage(page);&#10;    // Update URL immediately for page changes&#10;    updateURLWithFilters({&#10;      currentPage: page,&#10;    });&#10;  };&#10;&#10;  const getActiveFilterCount = () =&gt; {&#10;    let count = 0;&#10;    if (selectedCategory !== &quot;All Categories&quot;) count++;&#10;    if (selectedPriceRanges.length &gt; 0) count++;&#10;    if (selectedRatings.length &gt; 0) count++;&#10;    if (selectedFarmers.length &gt; 0) count++;&#10;    if (selectedTags.length &gt; 0) count++;&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) count++;&#10;    return count;&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Products Header */}&#10;        &lt;div className=&quot;bg-primary-600 text-white py-12&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;Fresh Products&lt;/h1&gt;&#10;            &lt;p className=&quot;text-xl text-primary-100&quot;&gt;&#10;              Discover fresh, locally-sourced produce from our trusted farmers&#10;            &lt;/p&gt;&#10;&#10;            {/* Search Results Info */}&#10;            {(searchTerm || selectedCategory !== &quot;All Categories&quot;) &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between flex-wrap gap-2&quot;&gt;&#10;                  &lt;div&gt;&#10;                    {searchTerm &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Search results for:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          &quot;{searchTerm}&quot;&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Category:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          {selectedCategory}&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    &lt;p className=&quot;text-sm text-primary-200&quot;&gt;&#10;                      {pagination.totalProducts} products found&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Search Bar in Results */}&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      className=&quot;px-4 py-2 rounded-lg text-gray-900 focus:outline-none&quot;&#10;                      value={searchTerm}&#10;                      onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                      onKeyPress={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; handleSearch()}&#10;                    /&gt;&#10;                    &lt;button&#10;                      onClick={handleSearch}&#10;                      className=&quot;px-4 py-2 bg-primary-500 hover:bg-primary-400 rounded-lg transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filters and Products */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowMobileFilters(!showMobileFilters)}&#10;              className=&quot;w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-between&quot;&#10;            &gt;&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Filters&#10;                {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                    {getActiveFilterCount()}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/span&gt;&#10;              &lt;i&#10;                className={`fas fa-chevron-${showMobileFilters ? &quot;up&quot; : &quot;down&quot;}`}&#10;              &gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Summary */}&#10;          {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Active Filters ({getActiveFilterCount()})&#10;                &lt;/h4&gt;&#10;                &lt;button&#10;                  onClick={clearAllFilters}&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400&quot;&#10;                &gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200&quot;&gt;&#10;                    Category: {selectedCategory}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleCategoryChange(&quot;All Categories&quot;)}&#10;                      className=&quot;ml-2 text-primary-600 hover:text-primary-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;                {selectedPriceRanges.map((range) =&gt; (&#10;                  &lt;span&#10;                    key={range}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;                  &gt;&#10;                    {range}&#10;                    &lt;button&#10;                      onClick={() =&gt; handlePriceRangeChange(range)}&#10;                      className=&quot;ml-2 text-green-600 hover:text-green-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedRatings.map((rating) =&gt; (&#10;                  &lt;span&#10;                    key={rating}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  &gt;&#10;                    {rating}+ Stars&#10;                    &lt;button&#10;                      onClick={() =&gt; handleRatingChange(rating)}&#10;                      className=&quot;ml-2 text-yellow-600 hover:text-yellow-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedFarmers.map((farmer) =&gt; (&#10;                  &lt;span&#10;                    key={farmer}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&#10;                  &gt;&#10;                    {farmer}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFarmerChange(farmer)}&#10;                      className=&quot;ml-2 text-blue-600 hover:text-blue-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedTags.map((tag) =&gt; (&#10;                  &lt;span&#10;                    key={tag}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;&#10;                  &gt;&#10;                    {tag}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleTagChange(tag)}&#10;                      className=&quot;ml-2 text-purple-600 hover:text-purple-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {(priceRangeSlider[0] !== 0 ||&#10;                  priceRangeSlider[1] !== 10000) &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;                    ৳{priceRangeSlider[0]} - ৳{priceRangeSlider[1]}&#10;                    &lt;button&#10;                      onClick={() =&gt; setPriceRangeSlider([0, 10000])}&#10;                      className=&quot;ml-2 text-orange-600 hover:text-orange-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar */}&#10;            &lt;div&#10;              className={`lg:col-span-1 ${showMobileFilters ? &quot;block&quot; : &quot;hidden lg:block&quot;}`}&#10;            &gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sticky top-24&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Filters&#10;                  &lt;/h3&gt;&#10;                  {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                      {getActiveFilterCount()}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-th-large mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Category&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                    {categoryOptions.map((category) =&gt; (&#10;                      &lt;label&#10;                        key={category}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;radio&quot;&#10;                          name=&quot;category&quot;&#10;                          checked={selectedCategory === category}&#10;                          onChange={() =&gt; handleCategoryChange(category)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {category}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Price Range (৳)&#10;                  &lt;/h4&gt;&#10;&#10;                  {/* Custom Price Range Slider */}&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[0]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            +e.target.value,&#10;                            priceRangeSlider[1],&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[1]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            priceRangeSlider[0],&#10;                            +e.target.value,&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;relative h-2 bg-gray-200 rounded-lg&quot;&gt;&#10;                        &lt;div&#10;                          className=&quot;absolute h-2 bg-primary-600 rounded-lg&quot;&#10;                          style={{&#10;                            left: `${(priceRangeSlider[0] / 10000) * 100}%`,&#10;                            width: `${((priceRangeSlider[1] - priceRangeSlider[0]) / 10000) * 100}%`,&#10;                          }}&#10;                        &gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[0]}&lt;/span&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[1]}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {priceRangeOptions.map((option) =&gt; (&#10;                      &lt;label&#10;                        key={option.label}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedPriceRanges.includes(option.label)}&#10;                          onChange={() =&gt; handlePriceRangeChange(option.label)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {option.label}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Rating Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-star mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Rating&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {[5, 4, 3, 2, 1].map((rating) =&gt; (&#10;                      &lt;label&#10;                        key={rating}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedRatings.includes(rating)}&#10;                          onChange={() =&gt; handleRatingChange(rating)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 flex items-center&quot;&gt;&#10;                          {[...Array(rating)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className=&quot;fas fa-star text-yellow-400 text-xs mr-1&quot;&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          {rating &lt; 5 &amp;&amp; &lt;span className=&quot;ml-1&quot;&gt;&amp; Up&lt;/span&gt;}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farmer Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-user mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                    {availableFarmers.length &gt; 0 ? (&#10;                      availableFarmers.map((farmer) =&gt; (&#10;                        &lt;label&#10;                          key={farmer}&#10;                          className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                        &gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            checked={selectedFarmers.includes(farmer)}&#10;                            onChange={() =&gt; handleFarmerChange(farmer)}&#10;                            className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                          /&gt;&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 truncate&quot;&gt;&#10;                            {farmer}&#10;                          &lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))&#10;                    ) : (&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 p-2&quot;&gt;&#10;                        Loading farmers...&#10;                      &lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tag Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-tags mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Tags&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {tagOptions.map((tag) =&gt; (&#10;                      &lt;label&#10;                        key={tag}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedTags.includes(tag)}&#10;                          onChange={() =&gt; handleTagChange(tag)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {tag}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-4&quot;&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    disabled={getActiveFilterCount() === 0}&#10;                    className=&quot;w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-lg font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                    Clear All Filters&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    {pagination.totalProducts} products&#10;                  &lt;/span&gt;&#10;                  {loading &amp;&amp; (&#10;                    &lt;div className=&quot;flex items-center text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span className=&quot;text-sm&quot;&gt;Loading...&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;label className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Sort by:&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={sortBy}&#10;                    onChange={(e) =&gt; handleSortChange(e.target.value)}&#10;                    className=&quot;border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                    &lt;option value=&quot;price-low&quot;&gt;Price: Low to High&lt;/option&gt;&#10;                    &lt;option value=&quot;price-high&quot;&gt;Price: High to Low&lt;/option&gt;&#10;                    &lt;option value=&quot;rating&quot;&gt;Highest Rated&lt;/option&gt;&#10;                    &lt;option value=&quot;popular&quot;&gt;Most Popular&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid */}&#10;              {loading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(9)].map((_, index) =&gt; (&#10;                    &lt;div&#10;                      key={index}&#10;                      className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden animate-pulse&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-full h-48 bg-gray-300 dark:bg-gray-600&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;p-6&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded mb-3 w-3/4&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded mb-4 w-1/2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : products.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {products.map((product) =&gt; (&#10;                      &lt;ProductCard key={product._id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Pagination */}&#10;                  {pagination.totalPages &gt; 1 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-8 flex justify-center&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;                          disabled={!pagination.hasPrevPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Previous&#10;                        &lt;/button&gt;&#10;&#10;                        {[...Array(Math.min(5, pagination.totalPages))].map(&#10;                          (_, index) =&gt; {&#10;                            const pageNum = index + 1;&#10;                            return (&#10;                              &lt;button&#10;                                key={pageNum}&#10;                                onClick={() =&gt; handlePageChange(pageNum)}&#10;                                className={`px-3 py-2 border rounded-lg ${&#10;                                  currentPage === pageNum&#10;                                    ? &quot;bg-primary-600 text-white border-primary-600&quot;&#10;                                    : &quot;border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                                }`}&#10;                              &gt;&#10;                                {pageNum}&#10;                              &lt;/button&gt;&#10;                            );&#10;                          },&#10;                        )}&#10;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage + 1)}&#10;                          disabled={!pagination.hasNextPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Next&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No products found&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                    Try adjusting your search criteria or browse all products&#10;                  &lt;/p&gt;&#10;                  &lt;Link&#10;                    href=&quot;/products&quot;&#10;                    className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                  &gt;&#10;                    Browse All Products&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect, useCallback } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;&#10;export default function Products() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const [products, setProducts] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [categories, setCategories] = useState([]);&#10;  const [pagination, setPagination] = useState({});&#10;&#10;  // Search and filter states&#10;  const [searchTerm, setSearchTerm] = useState(&#10;    searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;  );&#10;  const [selectedCategory, setSelectedCategory] = useState(&#10;    searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;  );&#10;  const [selectedPriceRanges, setSelectedPriceRanges] = useState([]);&#10;  const [selectedRatings, setSelectedRatings] = useState([]);&#10;  const [selectedFarmers, setSelectedFarmers] = useState([]);&#10;  const [selectedTags, setSelectedTags] = useState([]);&#10;  const [priceRangeSlider, setPriceRangeSlider] = useState([0, 10000]);&#10;  const [sortBy, setSortBy] = useState(&quot;newest&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;  const [availableFarmers, setAvailableFarmers] = useState([]);&#10;&#10;  const categoryOptions = [&#10;    &quot;All Categories&quot;,&#10;    &quot;Vegetables&quot;,&#10;    &quot;Fruits&quot;,&#10;    &quot;Grains&quot;,&#10;    &quot;Dairy&quot;,&#10;    &quot;Honey&quot;,&#10;    &quot;Herbs&quot;,&#10;  ];&#10;&#10;  const priceRangeOptions = [&#10;    { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;    { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;    { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;    { label: &quot;৳200 - ৳500&quot;, min: 201, max: 500 },&#10;    { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;  ];&#10;&#10;  const tagOptions = [&#10;    &quot;Organic&quot;,&#10;    &quot;Fresh&quot;,&#10;    &quot;Local&quot;,&#10;    &quot;Premium&quot;,&#10;    &quot;Seasonal&quot;,&#10;    &quot;Limited Stock&quot;,&#10;  ];&#10;&#10;  const applyFilters = useCallback((products) =&gt; {&#10;    let filtered = [...products];&#10;&#10;    // Apply price range checkboxes&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedPriceRanges.some((range) =&gt; {&#10;          const option = priceRangeOptions.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider (always apply)&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return price &gt;= priceRangeSlider[0] &amp;&amp; price &lt;= priceRangeSlider[1];&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return selectedRatings.some((rating) =&gt; productRating &gt;= rating);&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return product.isOrganic === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;));&#10;            case &quot;Fresh&quot;:&#10;              return product.isFresh === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;));&#10;            case &quot;Local&quot;:&#10;              return true; // Assuming all products are local&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseFloat(b.averageRating) || 0) - (parseFloat(a.averageRating) || 0)&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0)&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [selectedPriceRanges, priceRangeSlider, selectedRatings, selectedFarmers, selectedTags, sortBy]);&#10;&#10;  const fetchProducts = useCallback(async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const params = new URLSearchParams();&#10;      if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;      if (selectedCategory !== &quot;All Categories&quot;)&#10;        params.append(&quot;category&quot;, selectedCategory);&#10;      params.append(&quot;limit&quot;, &quot;1000&quot;);&#10;      params.append(&quot;sortBy&quot;, sortBy);&#10;&#10;      const response = await fetch(`/api/products?${params}`);&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        let allProducts = data.products || [];&#10;&#10;        // Apply client-side filters&#10;        let filteredProducts = applyFilters(allProducts);&#10;&#10;        // Apply pagination&#10;        const itemsPerPage = 12;&#10;        const startIndex = (currentPage - 1) * itemsPerPage;&#10;        const endIndex = startIndex + itemsPerPage;&#10;        const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;        setProducts(paginatedProducts);&#10;        setPagination({&#10;          currentPage: currentPage,&#10;          totalPages: Math.ceil(filteredProducts.length / itemsPerPage),&#10;          totalProducts: filteredProducts.length,&#10;          hasNextPage: currentPage &lt; Math.ceil(filteredProducts.length / itemsPerPage),&#10;          hasPrevPage: currentPage &gt; 1,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [searchTerm, selectedCategory, sortBy, currentPage, applyFilters]);&#10;&#10;  const fetchAvailableFarmers = async () =&gt; {&#10;    try {&#10;      const farmers = [];&#10;&#10;      // Fetch from products API to get farmers&#10;      try {&#10;        const response = await fetch(&quot;/api/products?limit=1000&quot;);&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;          const uniqueFarmers = [...new Set(&#10;            data.products&#10;              .map(p =&gt; p.farmer?.name || p.farmerName)&#10;              .filter(Boolean)&#10;          )];&#10;          farmers.push(...uniqueFarmers);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching farmers:&quot;, error);&#10;      }&#10;&#10;      // Sort and set farmers&#10;      farmers.sort();&#10;      setAvailableFarmers(farmers);&#10;    } catch (error) {&#10;      console.error(&quot;Error in fetchAvailableFarmers:&quot;, error);&#10;      setAvailableFarmers([]);&#10;    }&#10;  };&#10;&#10;  // Create debounced fetch function after fetchProducts is defined&#10;  const debouncedFetchProducts = useCallback(&#10;    debounce(() =&gt; {&#10;      fetchProducts();&#10;    }, 300),&#10;    [fetchProducts]&#10;  );&#10;&#10;  // Main effect for triggering product fetch&#10;  useEffect(() =&gt; {&#10;    fetchProducts();&#10;  }, [fetchProducts]);&#10;&#10;  // Separate useEffect for fetching farmers (only once)&#10;  useEffect(() =&gt; {&#10;    fetchAvailableFarmers();&#10;  }, []);&#10;&#10;  // Update states from URL params&#10;  useEffect(() =&gt; {&#10;    const newSearchTerm = searchParams.get(&quot;search&quot;) || &quot;&quot;;&#10;    const newCategory = searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;;&#10;&#10;    setSearchTerm(newSearchTerm);&#10;    setSelectedCategory(newCategory);&#10;&#10;    // Restore price ranges from URL&#10;    const priceRanges = searchParams.get(&quot;priceRanges&quot;);&#10;    if (priceRanges) {&#10;      setSelectedPriceRanges(priceRanges.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedPriceRanges([]);&#10;    }&#10;&#10;    // Restore ratings from URL&#10;    const ratings = searchParams.get(&quot;ratings&quot;);&#10;    if (ratings) {&#10;      setSelectedRatings(ratings.split(&quot;,&quot;).map(Number));&#10;    } else {&#10;      setSelectedRatings([]);&#10;    }&#10;&#10;    // Restore farmers from URL&#10;    const farmers = searchParams.get(&quot;farmers&quot;);&#10;    if (farmers) {&#10;      setSelectedFarmers(farmers.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedFarmers([]);&#10;    }&#10;&#10;    // Restore tags from URL&#10;    const tags = searchParams.get(&quot;tags&quot;);&#10;    if (tags) {&#10;      setSelectedTags(tags.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedTags([]);&#10;    }&#10;&#10;    // Restore price range slider from URL&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;);&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;);&#10;    if (minPrice &amp;&amp; maxPrice) {&#10;      setPriceRangeSlider([Number(minPrice), Number(maxPrice)]);&#10;    } else {&#10;      setPriceRangeSlider([0, 10000]);&#10;    }&#10;&#10;    // Restore sort option from URL&#10;    setSortBy(searchParams.get(&quot;sort&quot;) || &quot;newest&quot;);&#10;&#10;    // Restore page from URL&#10;    setCurrentPage(Number(searchParams.get(&quot;page&quot;)) || 1);&#10;  }, [searchParams]);&#10;&#10;  // Handle search functionality&#10;  const handleSearch = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;    router.push(`/products?${params.toString()}`);&#10;    setCurrentPage(1);&#10;    fetchProducts();&#10;  };&#10;&#10;  const handleKeyPress = (e) =&gt; {&#10;    if (e.key === &quot;Enter&quot;) {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  const handleCategoryChange = (category) =&gt; {&#10;    setSelectedCategory(category);&#10;    setCurrentPage(1);&#10;    &#10;    // Immediate URL update like other filters&#10;    updateURLWithFilters({&#10;      selectedCategory: category,&#10;    });&#10;  };&#10;&#10;  const handlePriceRangeChange = (range) =&gt; {&#10;    const newPriceRanges = selectedPriceRanges.includes(range)&#10;      ? selectedPriceRanges.filter((r) =&gt; r !== range)&#10;      : [...selectedPriceRanges, range];&#10;&#10;    setSelectedPriceRanges(newPriceRanges);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedPriceRanges: newPriceRanges,&#10;    });&#10;  };&#10;&#10;  const handleRatingChange = (rating) =&gt; {&#10;    const newRatings = selectedRatings.includes(rating)&#10;      ? selectedRatings.filter((r) =&gt; r !== rating)&#10;      : [...selectedRatings, rating];&#10;&#10;    setSelectedRatings(newRatings);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedRatings: newRatings,&#10;    });&#10;  };&#10;&#10;  const handleFarmerChange = (farmer) =&gt; {&#10;    const newFarmers = selectedFarmers.includes(farmer)&#10;      ? selectedFarmers.filter((f) =&gt; f !== farmer)&#10;      : [...selectedFarmers, farmer];&#10;&#10;    setSelectedFarmers(newFarmers);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedFarmers: newFarmers,&#10;    });&#10;  };&#10;&#10;  const handleTagChange = (tag) =&gt; {&#10;    const newTags = selectedTags.includes(tag)&#10;      ? selectedTags.filter((t) =&gt; t !== tag)&#10;      : [...selectedTags, tag];&#10;&#10;    setSelectedTags(newTags);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedTags: newTags,&#10;    });&#10;  };&#10;&#10;  const handlePriceSliderChange = (newPriceRange) =&gt; {&#10;    setPriceRangeSlider(newPriceRange);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      priceRangeSlider: newPriceRange,&#10;    });&#10;  };&#10;&#10;  const handleSortChange = (newSort) =&gt; {&#10;    setSortBy(newSort);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      sortBy: newSort,&#10;    });&#10;  };&#10;&#10;  const clearAllFilters = () =&gt; {&#10;    setSelectedCategory(&quot;All Categories&quot;);&#10;    setSearchTerm(&quot;&quot;);&#10;    setSelectedPriceRanges([]);&#10;    setSelectedRatings([]);&#10;    setSelectedFarmers([]);&#10;    setSelectedTags([]);&#10;    setPriceRangeSlider([0, 10000]);&#10;    setCurrentPage(1);&#10;    updateURL();&#10;  };&#10;&#10;  const updateURL = () =&gt; {&#10;    const params = new URLSearchParams();&#10;&#10;    // Add search term&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;&#10;    // Add category&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;&#10;    // Add price ranges&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, selectedPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (selectedRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, selectedRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (selectedFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, selectedFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (selectedTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, selectedTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, priceRangeSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, priceRangeSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (sortBy !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, sortBy);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPage &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPage);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const updateURLWithFilters = (overrides = {}) =&gt; {&#10;    console.log(&quot; updateURLWithFilters called with overrides:&quot;, overrides);&#10;&#10;    const params = new URLSearchParams();&#10;&#10;    // Use current state values or overrides&#10;    const currentSearchTerm =&#10;      overrides.searchTerm !== undefined ? overrides.searchTerm : searchTerm;&#10;    const currentCategory =&#10;      overrides.selectedCategory !== undefined&#10;        ? overrides.selectedCategory&#10;        : selectedCategory;&#10;    const currentPriceRanges =&#10;      overrides.selectedPriceRanges !== undefined&#10;        ? overrides.selectedPriceRanges&#10;        : selectedPriceRanges;&#10;    const currentRatings =&#10;      overrides.selectedRatings !== undefined&#10;        ? overrides.selectedRatings&#10;        : selectedRatings;&#10;    const currentFarmers =&#10;      overrides.selectedFarmers !== undefined&#10;        ? overrides.selectedFarmers&#10;        : selectedFarmers;&#10;    const currentTags =&#10;      overrides.selectedTags !== undefined&#10;        ? overrides.selectedTags&#10;        : selectedTags;&#10;    const currentPriceSlider =&#10;      overrides.priceRangeSlider !== undefined&#10;        ? overrides.priceRangeSlider&#10;        : priceRangeSlider;&#10;    const currentSort =&#10;      overrides.sortBy !== undefined ? overrides.sortBy : sortBy;&#10;    const currentPageNumber =&#10;      overrides.currentPage !== undefined ? overrides.currentPage : 1; // Reset to page 1 for filters&#10;&#10;    console.log(&quot; Final values to use:&quot;, {&#10;      currentSearchTerm,&#10;      currentCategory,&#10;      currentPriceRanges,&#10;      currentRatings,&#10;      currentFarmers,&#10;      currentTags,&#10;      currentPriceSlider,&#10;      currentSort,&#10;      currentPageNumber,&#10;    });&#10;&#10;    // Add search term&#10;    if (currentSearchTerm) params.append(&quot;search&quot;, currentSearchTerm);&#10;&#10;    // Add category&#10;    if (currentCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, currentCategory);&#10;&#10;    // Add price ranges&#10;    if (currentPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, currentPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (currentRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, currentRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (currentFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, currentFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (currentTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, currentTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (currentPriceSlider[0] !== 0 || currentPriceSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, currentPriceSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, currentPriceSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (currentSort !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, currentSort);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPageNumber &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPageNumber);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    console.log(&quot; Generated URL with filters:&quot;, newURL);&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const handlePageChange = (page) =&gt; {&#10;    console.log(&quot; Page change clicked:&quot;, page);&#10;    setCurrentPage(page);&#10;    // Update URL immediately for page changes&#10;    updateURLWithFilters({&#10;      currentPage: page,&#10;    });&#10;  };&#10;&#10;  const getActiveFilterCount = () =&gt; {&#10;    let count = 0;&#10;    if (selectedCategory !== &quot;All Categories&quot;) count++;&#10;    if (selectedPriceRanges.length &gt; 0) count++;&#10;    if (selectedRatings.length &gt; 0) count++;&#10;    if (selectedFarmers.length &gt; 0) count++;&#10;    if (selectedTags.length &gt; 0) count++;&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) count++;&#10;    return count;&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Products Header */}&#10;        &lt;div className=&quot;bg-primary-600 text-white py-12&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;Fresh Products&lt;/h1&gt;&#10;            &lt;p className=&quot;text-xl text-primary-100&quot;&gt;&#10;              Discover fresh, locally-sourced produce from our trusted farmers&#10;            &lt;/p&gt;&#10;&#10;            {/* Search Results Info */}&#10;            {(searchTerm || selectedCategory !== &quot;All Categories&quot;) &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between flex-wrap gap-2&quot;&gt;&#10;                  &lt;div&gt;&#10;                    {searchTerm &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Search results for:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          &quot;{searchTerm}&quot;&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Category:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          {selectedCategory}&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    &lt;p className=&quot;text-sm text-primary-200&quot;&gt;&#10;                      {pagination.totalProducts} products found&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Search Bar in Results */}&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      className=&quot;px-4 py-2 rounded-lg text-gray-900 focus:outline-none&quot;&#10;                      value={searchTerm}&#10;                      onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                      onKeyPress={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; handleSearch()}&#10;                    /&gt;&#10;                    &lt;button&#10;                      onClick={handleSearch}&#10;                      className=&quot;px-4 py-2 bg-primary-500 hover:bg-primary-400 rounded-lg transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filters and Products */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowMobileFilters(!showMobileFilters)}&#10;              className=&quot;w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-between&quot;&#10;            &gt;&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Filters&#10;                {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                    {getActiveFilterCount()}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/span&gt;&#10;              &lt;i&#10;                className={`fas fa-chevron-${showMobileFilters ? &quot;up&quot; : &quot;down&quot;}`}&#10;              &gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Summary */}&#10;          {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Active Filters ({getActiveFilterCount()})&#10;                &lt;/h4&gt;&#10;                &lt;button&#10;                  onClick={clearAllFilters}&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400&quot;&#10;                &gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200&quot;&gt;&#10;                    Category: {selectedCategory}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleCategoryChange(&quot;All Categories&quot;)}&#10;                      className=&quot;ml-2 text-primary-600 hover:text-primary-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;                {selectedPriceRanges.map((range) =&gt; (&#10;                  &lt;span&#10;                    key={range}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;                  &gt;&#10;                    {range}&#10;                    &lt;button&#10;                      onClick={() =&gt; handlePriceRangeChange(range)}&#10;                      className=&quot;ml-2 text-green-600 hover:text-green-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedRatings.map((rating) =&gt; (&#10;                  &lt;span&#10;                    key={rating}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  &gt;&#10;                    {rating}+ Stars&#10;                    &lt;button&#10;                      onClick={() =&gt; handleRatingChange(rating)}&#10;                      className=&quot;ml-2 text-yellow-600 hover:text-yellow-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedFarmers.map((farmer) =&gt; (&#10;                  &lt;span&#10;                    key={farmer}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&#10;                  &gt;&#10;                    {farmer}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFarmerChange(farmer)}&#10;                      className=&quot;ml-2 text-blue-600 hover:text-blue-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedTags.map((tag) =&gt; (&#10;                  &lt;span&#10;                    key={tag}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;&#10;                  &gt;&#10;                    {tag}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleTagChange(tag)}&#10;                      className=&quot;ml-2 text-purple-600 hover:text-purple-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {(priceRangeSlider[0] !== 0 ||&#10;                  priceRangeSlider[1] !== 10000) &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;                    ৳{priceRangeSlider[0]} - ৳{priceRangeSlider[1]}&#10;                    &lt;button&#10;                      onClick={() =&gt; setPriceRangeSlider([0, 10000])}&#10;                      className=&quot;ml-2 text-orange-600 hover:text-orange-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar */}&#10;            &lt;div&#10;              className={`lg:col-span-1 ${showMobileFilters ? &quot;block&quot; : &quot;hidden lg:block&quot;}`}&#10;            &gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sticky top-24&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Filters&#10;                  &lt;/h3&gt;&#10;                  {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                      {getActiveFilterCount()}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-th-large mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Category&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                    {categoryOptions.map((category) =&gt; (&#10;                      &lt;label&#10;                        key={category}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;radio&quot;&#10;                          name=&quot;category&quot;&#10;                          checked={selectedCategory === category}&#10;                          onChange={() =&gt; handleCategoryChange(category)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {category}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Price Range (৳)&#10;                  &lt;/h4&gt;&#10;&#10;                  {/* Custom Price Range Slider */}&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[0]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            +e.target.value,&#10;                            priceRangeSlider[1],&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[1]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            priceRangeSlider[0],&#10;                            +e.target.value,&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;relative h-2 bg-gray-200 rounded-lg&quot;&gt;&#10;                        &lt;div&#10;                          className=&quot;absolute h-2 bg-primary-600 rounded-lg&quot;&#10;                          style={{&#10;                            left: `${(priceRangeSlider[0] / 10000) * 100}%`,&#10;                            width: `${((priceRangeSlider[1] - priceRangeSlider[0]) / 10000) * 100}%`,&#10;                          }}&#10;                        &gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[0]}&lt;/span&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[1]}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {priceRangeOptions.map((option) =&gt; (&#10;                      &lt;label&#10;                        key={option.label}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedPriceRanges.includes(option.label)}&#10;                          onChange={() =&gt; handlePriceRangeChange(option.label)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {option.label}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Rating Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-star mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Rating&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {[5, 4, 3, 2, 1].map((rating) =&gt; (&#10;                      &lt;label&#10;                        key={rating}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedRatings.includes(rating)}&#10;                          onChange={() =&gt; handleRatingChange(rating)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 flex items-center&quot;&gt;&#10;                          {[...Array(rating)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className=&quot;fas fa-star text-yellow-400 text-xs mr-1&quot;&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          {rating &lt; 5 &amp;&amp; &lt;span className=&quot;ml-1&quot;&gt;&amp; Up&lt;/span&gt;}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farmer Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-user mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                    {availableFarmers.length &gt; 0 ? (&#10;                      availableFarmers.map((farmer) =&gt; (&#10;                        &lt;label&#10;                          key={farmer}&#10;                          className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                        &gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            checked={selectedFarmers.includes(farmer)}&#10;                            onChange={() =&gt; handleFarmerChange(farmer)}&#10;                            className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                          /&gt;&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 truncate&quot;&gt;&#10;                            {farmer}&#10;                          &lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))&#10;                    ) : (&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 p-2&quot;&gt;&#10;                        Loading farmers...&#10;                      &lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tag Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-tags mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Tags&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {tagOptions.map((tag) =&gt; (&#10;                      &lt;label&#10;                        key={tag}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedTags.includes(tag)}&#10;                          onChange={() =&gt; handleTagChange(tag)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {tag}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-4&quot;&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    disabled={getActiveFilterCount() === 0}&#10;                    className=&quot;w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-lg font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                    Clear All Filters&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    {pagination.totalProducts} products&#10;                  &lt;/span&gt;&#10;                  {loading &amp;&amp; (&#10;                    &lt;div className=&quot;flex items-center text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span className=&quot;text-sm&quot;&gt;Loading...&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;label className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Sort by:&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={sortBy}&#10;                    onChange={(e) =&gt; handleSortChange(e.target.value)}&#10;                    className=&quot;border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                    &lt;option value=&quot;price-low&quot;&gt;Price: Low to High&lt;/option&gt;&#10;                    &lt;option value=&quot;price-high&quot;&gt;Price: High to Low&lt;/option&gt;&#10;                    &lt;option value=&quot;rating&quot;&gt;Highest Rated&lt;/option&gt;&#10;                    &lt;option value=&quot;popular&quot;&gt;Most Popular&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid */}&#10;              {loading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(9)].map((_, index) =&gt; (&#10;                    &lt;div&#10;                      key={index}&#10;                      className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden animate-pulse&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-full h-48 bg-gray-300 dark:bg-gray-600&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;p-6&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded mb-3 w-3/4&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded mb-4 w-1/2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : products.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {products.map((product) =&gt; (&#10;                      &lt;ProductCard key={product._id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Pagination */}&#10;                  {pagination.totalPages &gt; 1 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-8 flex justify-center&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;                          disabled={!pagination.hasPrevPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Previous&#10;                        &lt;/button&gt;&#10;&#10;                        {[...Array(Math.min(5, pagination.totalPages))].map(&#10;                          (_, index) =&gt; {&#10;                            const pageNum = index + 1;&#10;                            return (&#10;                              &lt;button&#10;                                key={pageNum}&#10;                                onClick={() =&gt; handlePageChange(pageNum)}&#10;                                className={`px-3 py-2 border rounded-lg ${&#10;                                  currentPage === pageNum&#10;                                    ? &quot;bg-primary-600 text-white border-primary-600&quot;&#10;                                    : &quot;border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                                }`}&#10;                              &gt;&#10;                                {pageNum}&#10;                              &lt;/button&gt;&#10;                            );&#10;                          },&#10;                        )}&#10;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage + 1)}&#10;                          disabled={!pagination.hasNextPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Next&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No products found&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                    Try adjusting your search criteria or browse all products&#10;                  &lt;/p&gt;&#10;                  &lt;Link&#10;                    href=&quot;/products&quot;&#10;                    className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                  &gt;&#10;                    Browse All Products&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/NavigationTabs.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/NavigationTabs.js" />
              <option name="originalContent" value="// components/dashboard/NavigationTabs.js&#10;export default function NavigationTabs({ activeTab, setActiveTab, productsCount, ordersCount }) {&#10;    const tabs = [&#10;        { id: &quot;dashboard&quot;, label: &quot;Dashboard&quot;, icon: &quot;fas fa-chart-line&quot; },&#10;        {&#10;            id: &quot;products&quot;,&#10;            label: &quot;Products&quot;,&#10;            icon: &quot;fas fa-box&quot;,&#10;            count: productsCount&#10;        },&#10;        {&#10;            id: &quot;orders&quot;,&#10;            label: &quot;Orders&quot;,&#10;            icon: &quot;fas fa-clipboard-list&quot;,&#10;            count: ordersCount&#10;        },&#10;        { id: &quot;analytics&quot;, label: &quot;Analytics&quot;, icon: &quot;fas fa-chart-bar&quot; },&#10;        { id: &quot;settings&quot;, label: &quot;Settings&quot;, icon: &quot;fas fa-cog&quot; }&#10;    ];&#10;&#10;    return (&#10;        &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;nav className=&quot;-mb-px flex space-x-8&quot;&gt;&#10;                {tabs.map((tab) =&gt; (&#10;                    &lt;button&#10;                        key={tab.id}&#10;                        onClick={() =&gt; setActiveTab(tab.id)}&#10;                        className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${&#10;                            activeTab === tab.id&#10;                                ? &quot;border-green-500 text-green-600 dark:text-green-400&quot;&#10;                                : &quot;border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                    &gt;&#10;                        &lt;i className={`${tab.icon} mr-2`}&gt;&lt;/i&gt;&#10;                        {tab.label}&#10;                        {tab.count !== undefined &amp;&amp; (&#10;                            &lt;span className=&quot;ml-2 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-0.5 rounded-full text-xs&quot;&gt;&#10;                {tab.count}&#10;              &lt;/span&gt;&#10;                        )}&#10;                    &lt;/button&gt;&#10;                ))}&#10;            &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="// components/dashboard/NavigationTabs.js&#10;export default function NavigationTabs({ activeTab, setActiveTab, productsCount, ordersCount }) {&#10;    const tabs = [&#10;        { id: &quot;dashboard&quot;, label: &quot;Dashboard&quot;, icon: &quot;fas fa-chart-line&quot; },&#10;        {&#10;            id: &quot;products&quot;,&#10;            label: &quot;Products&quot;,&#10;            icon: &quot;fas fa-box&quot;,&#10;            count: productsCount&#10;        },&#10;        {&#10;            id: &quot;orders&quot;,&#10;            label: &quot;Orders&quot;,&#10;            icon: &quot;fas fa-clipboard-list&quot;,&#10;            count: ordersCount&#10;        },&#10;        { id: &quot;analytics&quot;, label: &quot;Analytics&quot;, icon: &quot;fas fa-chart-bar&quot; },&#10;        { id: &quot;settings&quot;, label: &quot;Settings&quot;, icon: &quot;fas fa-cog&quot; }&#10;    ];&#10;&#10;    return (&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {tabs.map((tab) =&gt; (&#10;                        &lt;button&#10;                            key={tab.id}&#10;                            onClick={() =&gt; setActiveTab(tab.id)}&#10;                            className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${&#10;                                activeTab === tab.id&#10;                                    ? &quot;border-green-500 text-green-600 dark:text-green-400&quot;&#10;                                    : &quot;border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                            }`}&#10;                        &gt;&#10;                            &lt;i className={`${tab.icon} mr-2`}&gt;&lt;/i&gt;&#10;                            {tab.label}&#10;                            {tab.count !== undefined &amp;&amp; (&#10;                                &lt;span className=&quot;ml-2 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-0.5 rounded-full text-xs&quot;&gt;&#10;                                    {tab.count}&#10;                                &lt;/span&gt;&#10;                            )}&#10;                        &lt;/button&gt;&#10;                    ))}&#10;                &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/ProductCard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/ProductCard.js" />
              <option name="originalContent" value="// components/dashboard/ProductCard.js&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ProductCard({&#10;  product,&#10;  handleStatusToggle,&#10;  handleDeleteProduct,&#10;  actionLoading,&#10;  getProductStatusBadge,&#10;  formatPrice,&#10;}) {&#10;  // Get farmer ID for the redirect&#10;  const getFarmerId = () =&gt; {&#10;    return product.farmerId || product.farmer?.id || product.farmer?._id;&#10;  };&#10;&#10;  // Get farmer name&#10;  const getFarmerName = () =&gt; {&#10;    return product.farmer?.name || product.farmerName || &quot;Unknown Farmer&quot;;&#10;  };&#10;&#10;  // Calculate stock status&#10;  const getStockStatus = () =&gt; {&#10;    if (product.stock === 0) return { status: &quot;Out of Stock&quot;, color: &quot;red&quot; };&#10;    if (product.stock &lt;= 5) return { status: &quot;Low Stock&quot;, color: &quot;yellow&quot; };&#10;    return { status: &quot;In Stock&quot;, color: &quot;green&quot; };&#10;  };&#10;&#10;  const stockInfo = getStockStatus();&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden flex flex-col h-full border border-gray-100 dark:border-gray-700 min-w-[320px] max-w-[380px] w-full&quot;&gt;&#10;      {/* Product Image Section */}&#10;      &lt;div className=&quot;relative h-48 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800&quot;&gt;&#10;        {product.images &amp;&amp; product.images.length &gt; 0 ? (&#10;          &lt;Image&#10;            src={product.images[0]}&#10;            alt={product.name}&#10;            fill&#10;            sizes=&quot;(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw&quot;&#10;            className=&quot;object-cover&quot;&#10;          /&gt;&#10;        ) : (&#10;          &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-seedling text-5xl text-gray-400 dark:text-gray-500 mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                No Image&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Status Badge */}&#10;        &lt;div className=&quot;absolute top-3 right-3&quot;&gt;&#10;          {getProductStatusBadge(product)}&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        &lt;div className=&quot;absolute top-3 left-3&quot;&gt;&#10;          &lt;span&#10;            className={`px-2 py-1 rounded-full text-xs font-semibold ${&#10;              stockInfo.color === &quot;red&quot;&#10;                ? &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&#10;                : stockInfo.color === &quot;yellow&quot;&#10;                  ? &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  : &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;            }`}&#10;          &gt;&#10;            {stockInfo.status}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Category Badge */}&#10;        &lt;div className=&quot;absolute bottom-3 left-3&quot;&gt;&#10;          &lt;span className=&quot;px-3 py-1 bg-black/70 text-white text-xs rounded-full backdrop-blur-sm&quot;&gt;&#10;            {product.category || &quot;Uncategorized&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Product Information Section */}&#10;      &lt;div className=&quot;p-4 flex-grow flex flex-col&quot;&gt;&#10;        {/* Product Title */}&#10;        &lt;h3 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-2 line-clamp-2 leading-tight&quot;&gt;&#10;          {product.name}&#10;        &lt;/h3&gt;&#10;&#10;        {/* Farmer Information */}&#10;        &lt;div className=&quot;flex items-center mb-3 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-circle mr-2 text-blue-500&quot;&gt;&lt;/i&gt;&#10;          &lt;span className=&quot;font-medium&quot;&gt;{getFarmerName()}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Description */}&#10;        &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-3 flex-grow&quot;&gt;&#10;          {product.description ||&#10;            &quot;Fresh and quality product from our trusted farmer. Perfect for your daily needs.&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Price and Stock Info */}&#10;        &lt;div className=&quot;space-y-3&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;span className=&quot;text-2xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                {formatPrice(product.price)}&#10;              &lt;/span&gt;&#10;              &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 ml-1&quot;&gt;&#10;                per unit&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-right&quot;&gt;&#10;              &lt;div className=&quot;text-lg font-semibold text-gray-700 dark:text-gray-300&quot;&gt;&#10;                {product.stock}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                units left&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Additional Info */}&#10;          &lt;div className=&quot;flex justify-between text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;            &lt;span className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-calendar-plus mr-1&quot;&gt;&lt;/i&gt;&#10;              Added {new Date(product.createdAt).toLocaleDateString()}&#10;            &lt;/span&gt;&#10;            {product.averageRating &amp;&amp; (&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-star text-yellow-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                {product.averageRating.toFixed(1)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Action Buttons Section - Optimized Layout */}&#10;      &lt;div className=&quot;p-3 border-t border-gray-100 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col space-y-2&quot;&gt;&#10;          {/* Top Row - Status and Delete */}&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; handleStatusToggle(product._id, product.status)}&#10;              disabled={actionLoading[product._id] === &quot;status&quot;}&#10;              className={`flex-1 px-3 py-2 rounded-lg font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1 ${&#10;                product.status === &quot;active&quot;&#10;                  ? &quot;bg-yellow-100 hover:bg-yellow-200 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 dark:hover:bg-yellow-800&quot;&#10;                  : &quot;bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800&quot;&#10;              }`}&#10;              title={&#10;                product.status === &quot;active&quot;&#10;                  ? &quot;Deactivate Product&quot;&#10;                  : &quot;Activate Product&quot;&#10;              }&#10;            &gt;&#10;              {actionLoading[product._id] === &quot;status&quot; ? (&#10;                &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i&#10;                    className={&#10;                      product.status === &quot;active&quot;&#10;                        ? &quot;fas fa-pause&quot;&#10;                        : &quot;fas fa-play&quot;&#10;                    }&#10;                  &gt;&lt;/i&gt;&#10;                  &lt;span&gt;&#10;                    {product.status === &quot;active&quot; ? &quot;Pause&quot; : &quot;Active&quot;}&#10;                  &lt;/span&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;button&#10;              onClick={() =&gt; handleDeleteProduct(product._id)}&#10;              disabled={actionLoading[product._id] === &quot;delete&quot;}&#10;              className=&quot;flex-1 px-3 py-2 rounded-lg bg-red-100 hover:bg-red-200 text-red-800 dark:bg-red-900 dark:text-red-200 dark:hover:bg-red-800 font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1&quot;&#10;              title=&quot;Delete Product&quot;&#10;            &gt;&#10;              {actionLoading[product._id] === &quot;delete&quot; ? (&#10;                &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Delete&lt;/span&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Bottom Row - View and Edit */}&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;flex-1 px-3 py-2 rounded-lg bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800 font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1&quot;&#10;              title=&quot;View Product Details&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;              &lt;span&gt;View&lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;Link&#10;              href={`/edit/${product._id}`}&#10;              className=&quot;flex-1 px-3 py-2 rounded-lg bg-blue-100 hover:bg-blue-200 text-blue-800 dark:bg-blue-900 dark:text-blue-200 dark:hover:bg-blue-800 font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1&quot;&#10;              title=&quot;Edit Product&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-edit&quot;&gt;&lt;/i&gt;&#10;              &lt;span&gt;Edit&lt;/span&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="// components/dashboard/ProductCard.js&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ProductCard({&#10;  product,&#10;  handleStatusToggle,&#10;  handleDeleteProduct,&#10;  actionLoading,&#10;  getProductStatusBadge,&#10;  formatPrice,&#10;}) {&#10;  // Get farmer ID for the redirect&#10;  const getFarmerId = () =&gt; {&#10;    return product.farmerId || product.farmer?.id || product.farmer?._id;&#10;  };&#10;&#10;  // Get farmer name&#10;  const getFarmerName = () =&gt; {&#10;    return product.farmer?.name || product.farmerName || &quot;Unknown Farmer&quot;;&#10;  };&#10;&#10;  // Calculate stock status&#10;  const getStockStatus = () =&gt; {&#10;    if (product.stock === 0) return { status: &quot;Out of Stock&quot;, color: &quot;red&quot; };&#10;    if (product.stock &lt;= 5) return { status: &quot;Low Stock&quot;, color: &quot;yellow&quot; };&#10;    return { status: &quot;In Stock&quot;, color: &quot;green&quot; };&#10;  };&#10;&#10;  const stockInfo = getStockStatus();&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden flex flex-col h-full border border-gray-100 dark:border-gray-700 w-full&quot;&gt;&#10;      {/* Product Image Section */}&#10;      &lt;div className=&quot;relative h-48 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800&quot;&gt;&#10;        {product.images &amp;&amp; product.images.length &gt; 0 ? (&#10;          &lt;Image&#10;            src={product.images[0]}&#10;            alt={product.name}&#10;            fill&#10;            sizes=&quot;(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw&quot;&#10;            className=&quot;object-cover&quot;&#10;          /&gt;&#10;        ) : (&#10;          &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-seedling text-5xl text-gray-400 dark:text-gray-500 mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                No Image&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Status Badge */}&#10;        &lt;div className=&quot;absolute top-3 right-3&quot;&gt;&#10;          {getProductStatusBadge(product)}&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        &lt;div className=&quot;absolute top-3 left-3&quot;&gt;&#10;          &lt;span&#10;            className={`px-2 py-1 rounded-full text-xs font-semibold ${&#10;              stockInfo.color === &quot;red&quot;&#10;                ? &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&#10;                : stockInfo.color === &quot;yellow&quot;&#10;                  ? &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  : &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;            }`}&#10;          &gt;&#10;            {stockInfo.status}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Category Badge */}&#10;        &lt;div className=&quot;absolute bottom-3 left-3&quot;&gt;&#10;          &lt;span className=&quot;px-3 py-1 bg-black/70 text-white text-xs rounded-full backdrop-blur-sm&quot;&gt;&#10;            {product.category || &quot;Uncategorized&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Product Information Section */}&#10;      &lt;div className=&quot;p-4 flex-grow flex flex-col&quot;&gt;&#10;        {/* Product Title */}&#10;        &lt;h3 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-2 line-clamp-2 leading-tight&quot;&gt;&#10;          {product.name}&#10;        &lt;/h3&gt;&#10;&#10;        {/* Farmer Information */}&#10;        &lt;div className=&quot;flex items-center mb-3 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-circle mr-2 text-blue-500&quot;&gt;&lt;/i&gt;&#10;          &lt;span className=&quot;font-medium&quot;&gt;{getFarmerName()}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Description */}&#10;        &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-3 flex-grow&quot;&gt;&#10;          {product.description ||&#10;            &quot;Fresh and quality product from our trusted farmer. Perfect for your daily needs.&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Price and Stock Info */}&#10;        &lt;div className=&quot;space-y-3&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;span className=&quot;text-2xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                {formatPrice(product.price)}&#10;              &lt;/span&gt;&#10;              &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 ml-1&quot;&gt;&#10;                per unit&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-right&quot;&gt;&#10;              &lt;div className=&quot;text-lg font-semibold text-gray-700 dark:text-gray-300&quot;&gt;&#10;                {product.stock}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                units left&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Additional Info */}&#10;          &lt;div className=&quot;flex justify-between text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;            &lt;span className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-calendar-plus mr-1&quot;&gt;&lt;/i&gt;&#10;              Added {new Date(product.createdAt).toLocaleDateString()}&#10;            &lt;/span&gt;&#10;            {product.averageRating &amp;&amp; (&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-star text-yellow-400 mr-1&quot;&gt;&lt;/i&gt;&#10;                {product.averageRating.toFixed(1)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Action Buttons Section - Optimized Layout */}&#10;      &lt;div className=&quot;p-3 border-t border-gray-100 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col space-y-2&quot;&gt;&#10;          {/* Top Row - Status and Delete */}&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; handleStatusToggle(product._id, product.status)}&#10;              disabled={actionLoading[product._id] === &quot;status&quot;}&#10;              className={`flex-1 px-3 py-2 rounded-lg font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1 ${&#10;                product.status === &quot;active&quot;&#10;                  ? &quot;bg-yellow-100 hover:bg-yellow-200 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 dark:hover:bg-yellow-800&quot;&#10;                  : &quot;bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800&quot;&#10;              }`}&#10;              title={&#10;                product.status === &quot;active&quot;&#10;                  ? &quot;Deactivate Product&quot;&#10;                  : &quot;Activate Product&quot;&#10;              }&#10;            &gt;&#10;              {actionLoading[product._id] === &quot;status&quot; ? (&#10;                &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i&#10;                    className={&#10;                      product.status === &quot;active&quot;&#10;                        ? &quot;fas fa-pause&quot;&#10;                        : &quot;fas fa-play&quot;&#10;                    }&#10;                  &gt;&lt;/i&gt;&#10;                  &lt;span&gt;&#10;                    {product.status === &quot;active&quot; ? &quot;Pause&quot; : &quot;Active&quot;}&#10;                  &lt;/span&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;button&#10;              onClick={() =&gt; handleDeleteProduct(product._id)}&#10;              disabled={actionLoading[product._id] === &quot;delete&quot;}&#10;              className=&quot;flex-1 px-3 py-2 rounded-lg bg-red-100 hover:bg-red-200 text-red-800 dark:bg-red-900 dark:text-red-200 dark:hover:bg-red-800 font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1&quot;&#10;              title=&quot;Delete Product&quot;&#10;            &gt;&#10;              {actionLoading[product._id] === &quot;delete&quot; ? (&#10;                &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Delete&lt;/span&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Bottom Row - View and Edit */}&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;flex-1 px-3 py-2 rounded-lg bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800 font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1&quot;&#10;              title=&quot;View Product Details&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;              &lt;span&gt;View&lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;Link&#10;              href={`/edit/${product._id}`}&#10;              className=&quot;flex-1 px-3 py-2 rounded-lg bg-blue-100 hover:bg-blue-200 text-blue-800 dark:bg-blue-900 dark:text-blue-200 dark:hover:bg-blue-800 font-medium text-xs transition-all duration-200 flex items-center justify-center space-x-1&quot;&#10;              title=&quot;Edit Product&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-edit&quot;&gt;&lt;/i&gt;&#10;              &lt;span&gt;Edit&lt;/span&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/ProductList.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/ProductList.js" />
              <option name="originalContent" value="// components/dashboard/ProductList.js&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ProductList({&#10;  products,&#10;  handleStatusToggle,&#10;  handleDeleteProduct,&#10;  actionLoading,&#10;  getProductStatusBadge,&#10;  formatPrice,&#10;  formatDate,&#10;}) {&#10;  // Get farmer ID for the redirect&#10;  const getFarmerId = (product) =&gt; {&#10;    const farmerId =&#10;      product.farmerId || product.farmer?.id || product.farmer?._id;&#10;    console.log(&#10;      &quot; getFarmerId for product:&quot;,&#10;      product.name,&#10;      &quot;farmerId:&quot;,&#10;      farmerId,&#10;    );&#10;    return farmerId;&#10;  };&#10;&#10;  // Get farmer name&#10;  const getFarmerName = (product) =&gt; {&#10;    const farmerName =&#10;      product.farmer?.name || product.farmerName || &quot;Unknown Farmer&quot;;&#10;    console.log(&#10;      &quot;‍�� getFarmerName for product:&quot;,&#10;      product.name,&#10;      &quot;farmerName:&quot;,&#10;      farmerName,&#10;    );&#10;    return farmerName;&#10;  };&#10;&#10;  // Calculate stock status&#10;  const getStockStatus = (stock) =&gt; {&#10;    if (stock === 0)&#10;      return {&#10;        status: &quot;Out of Stock&quot;,&#10;        colorClass: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;      };&#10;    if (stock &lt;= 5)&#10;      return {&#10;        status: &quot;Low Stock&quot;,&#10;        colorClass:&#10;          &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;      };&#10;    return {&#10;      status: &quot;In Stock&quot;,&#10;      colorClass:&#10;        &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;    };&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700&quot;&gt;&#10;      &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;        &lt;table className=&quot;min-w-full divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;          &lt;thead className=&quot;bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700&quot;&gt;&#10;            &lt;tr&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-box text-blue-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Product Details&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-user-tie text-purple-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Farmer&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-dollar-sign text-green-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Price&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-warehouse text-orange-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Stock&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-toggle-on text-indigo-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Status&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-calendar text-gray-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Date Added&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-right text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-end space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-cogs text-gray-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Actions&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody className=&quot;bg-white dark:bg-gray-800 divide-y divide-gray-100 dark:divide-gray-700&quot;&gt;&#10;            {products.map((product, index) =&gt; {&#10;              console.log(&quot; PRODUCT OBJECT DEBUG:&quot;, {&#10;                name: product.name,&#10;                _id: product._id,&#10;                id: product.id,&#10;                farmerId: product.farmerId,&#10;                farmer: product.farmer,&#10;                wholeProduct: product,&#10;              });&#10;&#10;              const stockInfo = getStockStatus(product.stock);&#10;              return (&#10;                &lt;tr&#10;                  key={product._id}&#10;                  className={`hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-200 ${&#10;                    index % 2 === 0&#10;                      ? &quot;bg-white dark:bg-gray-800&quot;&#10;                      : &quot;bg-gray-25 dark:bg-gray-800/50&quot;&#10;                  }`}&#10;                &gt;&#10;                  {/* Product Details */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                      &lt;div className=&quot;flex-shrink-0 h-16 w-16 relative&quot;&gt;&#10;                        {product.images &amp;&amp; product.images.length &gt; 0 ? (&#10;                          &lt;img&#10;                            src={product.images[0]}&#10;                            alt={product.name}&#10;                            className=&quot;h-16 w-16 rounded-xl object-cover shadow-md border-2 border-gray-100 dark:border-gray-600&quot;&#10;                          /&gt;&#10;                        ) : (&#10;                          &lt;div className=&quot;h-16 w-16 rounded-xl bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-600 flex items-center justify-center border-2 border-gray-100 dark:border-gray-600&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-seedling text-xl text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                        &lt;div className=&quot;text-sm font-bold text-gray-900 dark:text-white truncate max-w-xs&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center mt-1 space-x-3&quot;&gt;&#10;                          &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-tag mr-1&quot;&gt;&lt;/i&gt;&#10;                            {product.category || &quot;Uncategorized&quot;}&#10;                          &lt;/span&gt;&#10;                          {product.averageRating &amp;&amp; (&#10;                            &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-star mr-1&quot;&gt;&lt;/i&gt;&#10;                              {product.averageRating.toFixed(1)}&#10;                            &lt;/span&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        {product.description &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-xs text-gray-500 dark:text-gray-400 truncate max-w-xs&quot;&gt;&#10;                            {product.description}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Farmer Information */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                        &lt;div className=&quot;h-8 w-8 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-user text-purple-600 dark:text-purple-300 text-sm&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;div className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {getFarmerName(product)}&#10;                        &lt;/div&gt;&#10;                        {getFarmerId(product) &amp;&amp; (&#10;                          &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ID: {getFarmerId(product).slice(-8)}&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Price */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;text-lg font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                      {formatPrice(product.price)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      per unit&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Stock */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;space-y-1&quot;&gt;&#10;                      &lt;span&#10;                        className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${stockInfo.colorClass}`}&#10;                      &gt;&#10;                        {stockInfo.status}&#10;                      &lt;/span&gt;&#10;                      &lt;div className=&quot;text-sm font-semibold text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        {product.stock} units&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Status */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col space-y-1&quot;&gt;&#10;                      {getProductStatusBadge(product)}&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        {product.status === &quot;active&quot; ? &quot;Live&quot; : &quot;Paused&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Date Added */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatDate(product.createdAt)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      {new Date(product.createdAt).toLocaleDateString()}&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Actions */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      {/* Status Toggle */}&#10;                      &lt;button&#10;                        onClick={() =&gt;&#10;                          handleStatusToggle(product._id, product.status)&#10;                        }&#10;                        disabled={actionLoading[product._id] === &quot;status&quot;}&#10;                        className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center space-x-1 ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-yellow-100 hover:bg-yellow-200 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 dark:hover:bg-yellow-800&quot;&#10;                            : &quot;bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800&quot;&#10;                        }`}&#10;                        title={&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;Deactivate Product&quot;&#10;                            : &quot;Activate Product&quot;&#10;                        }&#10;                      &gt;&#10;                        {actionLoading[product._id] === &quot;status&quot; ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={&#10;                              product.status === &quot;active&quot;&#10;                                ? &quot;fas fa-pause&quot;&#10;                                : &quot;fas fa-play&quot;&#10;                            }&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                      &lt;/button&gt;&#10;&#10;                      {/* View Product Details */}&#10;                      &lt;Link&#10;                        href={`/details?id=${product._id}`}&#10;                        className=&quot;px-3 py-2 rounded-lg bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800 text-sm font-medium transition-all duration-200 flex items-center&quot;&#10;                        title=&quot;View Product Details&quot;&#10;                        onClick={() =&gt; {&#10;                          console.log(&#10;                            &quot;️ CLICKED View Product Details - Product:&quot;,&#10;                            product.name,&#10;                            &quot;Product ID:&quot;,&#10;                            product._id,&#10;                          );&#10;                          console.log(&#10;                            &quot; Navigating to:&quot;,&#10;                            `/details?id=${product._id}`,&#10;                          );&#10;                        }}&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                      &lt;/Link&gt;&#10;&#10;                      {/* Edit */}&#10;                      &lt;Link&#10;                        href={`/edit/${product._id}`}&#10;                        className=&quot;px-3 py-2 rounded-lg bg-blue-100 hover:bg-blue-200 text-blue-800 dark:bg-blue-900 dark:text-blue-200 dark:hover:bg-blue-800 text-sm font-medium transition-all duration-200 flex items-center&quot;&#10;                        title=&quot;Edit Product&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit&quot;&gt;&lt;/i&gt;&#10;                      &lt;/Link&gt;&#10;&#10;                      {/* Delete */}&#10;                      &lt;button&#10;                        onClick={() =&gt; handleDeleteProduct(product._id)}&#10;                        disabled={actionLoading[product._id] === &quot;delete&quot;}&#10;                        className=&quot;px-3 py-2 rounded-lg bg-red-100 hover:bg-red-200 text-red-800 dark:bg-red-900 dark:text-red-200 dark:hover:bg-red-800 text-sm font-medium transition-all duration-200 flex items-center&quot;&#10;                        title=&quot;Delete Product&quot;&#10;                      &gt;&#10;                        {actionLoading[product._id] === &quot;delete&quot; ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              );&#10;            })}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="// components/dashboard/ProductList.js&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ProductList({&#10;  products,&#10;  handleStatusToggle,&#10;  handleDeleteProduct,&#10;  actionLoading,&#10;  getProductStatusBadge,&#10;  formatPrice,&#10;  formatDate,&#10;}) {&#10;  // Get farmer ID for the redirect&#10;  const getFarmerId = (product) =&gt; {&#10;    return product.farmerId || product.farmer?.id || product.farmer?._id;&#10;  };&#10;&#10;  // Get farmer name&#10;  const getFarmerName = (product) =&gt; {&#10;    return product.farmer?.name || product.farmerName || &quot;Unknown Farmer&quot;;&#10;  };&#10;&#10;  // Calculate stock status&#10;  const getStockStatus = (stock) =&gt; {&#10;    if (stock === 0)&#10;      return {&#10;        status: &quot;Out of Stock&quot;,&#10;        colorClass: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;      };&#10;    if (stock &lt;= 5)&#10;      return {&#10;        status: &quot;Low Stock&quot;,&#10;        colorClass:&#10;          &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;      };&#10;    return {&#10;      status: &quot;In Stock&quot;,&#10;      colorClass:&#10;        &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;    };&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700&quot;&gt;&#10;      &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;        &lt;table className=&quot;min-w-full divide-y divide-gray-200 dark:divide-gray-700&quot;&gt;&#10;          &lt;thead className=&quot;bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700&quot;&gt;&#10;            &lt;tr&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-box text-blue-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Product Details&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-user-tie text-purple-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Farmer&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-dollar-sign text-green-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Price&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-warehouse text-orange-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Stock&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-toggle-on text-indigo-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Status&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-calendar text-gray-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Date Added&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;              &lt;th className=&quot;px-6 py-4 text-right text-xs font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-end space-x-2&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-cogs text-gray-500&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Actions&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/th&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody className=&quot;bg-white dark:bg-gray-800 divide-y divide-gray-100 dark:divide-gray-700&quot;&gt;&#10;            {products.map((product, index) =&gt; {&#10;              const stockInfo = getStockStatus(product.stock);&#10;              return (&#10;                &lt;tr&#10;                  key={product._id}&#10;                  className={`hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-200 ${&#10;                    index % 2 === 0&#10;                      ? &quot;bg-white dark:bg-gray-800&quot;&#10;                      : &quot;bg-gray-25 dark:bg-gray-800/50&quot;&#10;                  }`}&#10;                &gt;&#10;                  {/* Product Details */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                      &lt;div className=&quot;flex-shrink-0 h-16 w-16 relative&quot;&gt;&#10;                        {product.images &amp;&amp; product.images.length &gt; 0 ? (&#10;                          &lt;img&#10;                            src={product.images[0]}&#10;                            alt={product.name}&#10;                            className=&quot;h-16 w-16 rounded-xl object-cover shadow-md border-2 border-gray-100 dark:border-gray-600&quot;&#10;                          /&gt;&#10;                        ) : (&#10;                          &lt;div className=&quot;h-16 w-16 rounded-xl bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-600 flex items-center justify-center border-2 border-gray-100 dark:border-gray-600&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-seedling text-xl text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                        &lt;div className=&quot;text-sm font-bold text-gray-900 dark:text-white truncate max-w-xs&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center mt-1 space-x-3&quot;&gt;&#10;                          &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-tag mr-1&quot;&gt;&lt;/i&gt;&#10;                            {product.category || &quot;Uncategorized&quot;}&#10;                          &lt;/span&gt;&#10;                          {product.averageRating &amp;&amp; (&#10;                            &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-star mr-1&quot;&gt;&lt;/i&gt;&#10;                              {product.averageRating.toFixed(1)}&#10;                            &lt;/span&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        {product.description &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-xs text-gray-500 dark:text-gray-400 truncate max-w-xs&quot;&gt;&#10;                            {product.description}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Farmer Information */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                        &lt;div className=&quot;h-8 w-8 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-user text-purple-600 dark:text-purple-300 text-sm&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;div className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {getFarmerName(product)}&#10;                        &lt;/div&gt;&#10;                        {getFarmerId(product) &amp;&amp; (&#10;                          &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ID: {getFarmerId(product).slice(-8)}&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Price */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;text-lg font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                      {formatPrice(product.price)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      per unit&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Stock */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;space-y-1&quot;&gt;&#10;                      &lt;span&#10;                        className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${stockInfo.colorClass}`}&#10;                      &gt;&#10;                        {stockInfo.status}&#10;                      &lt;/span&gt;&#10;                      &lt;div className=&quot;text-sm font-semibold text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        {product.stock} units&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Status */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col space-y-1&quot;&gt;&#10;                      {getProductStatusBadge(product)}&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        {product.status === &quot;active&quot; ? &quot;Live&quot; : &quot;Paused&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Date Added */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatDate(product.createdAt)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      {new Date(product.createdAt).toLocaleDateString()}&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;&#10;                  {/* Actions */}&#10;                  &lt;td className=&quot;px-6 py-5 whitespace-nowrap text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      {/* Status Toggle */}&#10;                      &lt;button&#10;                        onClick={() =&gt;&#10;                          handleStatusToggle(product._id, product.status)&#10;                        }&#10;                        disabled={actionLoading[product._id] === &quot;status&quot;}&#10;                        className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center space-x-1 ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-yellow-100 hover:bg-yellow-200 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 dark:hover:bg-yellow-800&quot;&#10;                            : &quot;bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800&quot;&#10;                        }`}&#10;                        title={&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;Deactivate Product&quot;&#10;                            : &quot;Activate Product&quot;&#10;                        }&#10;                      &gt;&#10;                        {actionLoading[product._id] === &quot;status&quot; ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={&#10;                              product.status === &quot;active&quot;&#10;                                ? &quot;fas fa-pause&quot;&#10;                                : &quot;fas fa-play&quot;&#10;                            }&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                      &lt;/button&gt;&#10;&#10;                      {/* View Product Details */}&#10;                      &lt;Link&#10;                        href={`/details?id=${product._id}`}&#10;                        className=&quot;px-3 py-2 rounded-lg bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200 dark:hover:bg-green-800 text-sm font-medium transition-all duration-200 flex items-center&quot;&#10;                        title=&quot;View Product Details&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                      &lt;/Link&gt;&#10;&#10;                      {/* Edit */}&#10;                      &lt;Link&#10;                        href={`/edit/${product._id}`}&#10;                        className=&quot;px-3 py-2 rounded-lg bg-blue-100 hover:bg-blue-200 text-blue-800 dark:bg-blue-900 dark:text-blue-200 dark:hover:bg-blue-800 text-sm font-medium transition-all duration-200 flex items-center&quot;&#10;                        title=&quot;Edit Product&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit&quot;&gt;&lt;/i&gt;&#10;                      &lt;/Link&gt;&#10;&#10;                      {/* Delete */}&#10;                      &lt;button&#10;                        onClick={() =&gt; handleDeleteProduct(product._id)}&#10;                        disabled={actionLoading[product._id] === &quot;delete&quot;}&#10;                        className=&quot;px-3 py-2 rounded-lg bg-red-100 hover:bg-red-200 text-red-800 dark:bg-red-900 dark:text-red-200 dark:hover:bg-red-800 text-sm font-medium transition-all duration-200 flex items-center&quot;&#10;                        title=&quot;Delete Product&quot;&#10;                      &gt;&#10;                        {actionLoading[product._id] === &quot;delete&quot; ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              );&#10;            })}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/tabs/ProductsTab.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/tabs/ProductsTab.js" />
              <option name="originalContent" value="// components/dashboard/tabs/ProductsTab.js&#10;import Link from &quot;next/link&quot;;&#10;import StatCard from &quot;../StatCard&quot;;&#10;import ProductCard from &quot;../ProductCard&quot;;&#10;import ProductList from &quot;../ProductList&quot;;&#10;&#10;export default function ProductsTab({&#10;                                        products,&#10;                                        paginatedProducts,&#10;                                        searchTerm,&#10;                                        setSearchTerm,&#10;                                        selectedCategory,&#10;                                        setSelectedCategory,&#10;                                        selectedStatus,&#10;                                        setSelectedStatus,&#10;                                        selectedSort,&#10;                                        setSelectedSort,&#10;                                        viewMode,&#10;                                        setViewMode,&#10;                                        productsPerPage,&#10;                                        setProductsPerPage,&#10;                                        currentPage,&#10;                                        setCurrentPage,&#10;                                        totalPages,&#10;                                        handleStatusToggle,&#10;                                        handleDeleteProduct,&#10;                                        actionLoading,&#10;                                        getProductStatusBadge,&#10;                                        handleRefresh,&#10;                                        refreshing,&#10;                                        formatPrice,&#10;                                        formatDate&#10;                                    }) {&#10;    // Calculate product stats&#10;    const outOfStockCount = products.filter(p =&gt; p.stock === 0).length;&#10;    const inactiveCount = products.filter(p =&gt; p.status === &quot;inactive&quot;).length;&#10;    const lowStockCount = products.filter(p =&gt; p.stock &gt; 0 &amp;&amp; p.stock &lt;= 5).length;&#10;    const activeProductsCount = products.filter(p =&gt; p.stock &gt; 0 &amp;&amp; p.status !== &quot;inactive&quot;).length;&#10;&#10;    const clearFilters = () =&gt; {&#10;        setSearchTerm(&quot;&quot;);&#10;        setSelectedCategory(&quot;&quot;);&#10;        setSelectedStatus(&quot;&quot;);&#10;        setSelectedSort(&quot;&quot;);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            {/* Products Header with Actions */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            Product Management&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                            Manage your product listings, inventory, and availability&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                        &lt;button&#10;                            onClick={clearFilters}&#10;                            className=&quot;flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium transition&quot;&#10;                            disabled={!searchTerm &amp;&amp; !selectedCategory &amp;&amp; !selectedStatus &amp;&amp; !selectedSort}&#10;                        &gt;&#10;                            &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                            Clear Filters&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                            onClick={handleRefresh}&#10;                            disabled={refreshing}&#10;                            className=&quot;flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#10;                        &gt;&#10;                            &lt;i className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;fa-spin&quot; : &quot;&quot;}`}&gt;&lt;/i&gt;&#10;                            Refresh&#10;                        &lt;/button&gt;&#10;                        &lt;Link&#10;                            href=&quot;/create&quot;&#10;                            className=&quot;flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;                        &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Add Product&#10;                        &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Product Stats */}&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;StatCard&#10;                    icon=&quot;fas fa-box&quot;&#10;                    bgColor=&quot;bg-blue-100 dark:bg-blue-900&quot;&#10;                    textColor=&quot;text-blue-600 dark:text-blue-300&quot;&#10;                    title=&quot;Total Products&quot;&#10;                    value={products.length}&#10;                /&gt;&#10;&#10;                &lt;StatCard&#10;                    icon=&quot;fas fa-check-circle&quot;&#10;                    bgColor=&quot;bg-green-100 dark:bg-green-900&quot;&#10;                    textColor=&quot;text-green-600 dark:text-green-300&quot;&#10;                    title=&quot;Active Products&quot;&#10;                    value={activeProductsCount}&#10;                /&gt;&#10;&#10;                &lt;StatCard&#10;                    icon=&quot;fas fa-exclamation-triangle&quot;&#10;                    bgColor=&quot;bg-yellow-100 dark:bg-yellow-900&quot;&#10;                    textColor=&quot;text-yellow-600 dark:text-yellow-300&quot;&#10;                    title=&quot;Low Stock&quot;&#10;                    value={lowStockCount}&#10;                /&gt;&#10;&#10;                &lt;StatCard&#10;                    icon=&quot;fas fa-times-circle&quot;&#10;                    bgColor=&quot;bg-red-100 dark:bg-red-900&quot;&#10;                    textColor=&quot;text-red-600 dark:text-red-300&quot;&#10;                    title=&quot;Out of Stock/Inactive&quot;&#10;                    value={outOfStockCount + inactiveCount}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Enhanced Filters */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;                &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Filter &amp; Search&#10;                &lt;/h4&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                            Search Products&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;relative&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                value={searchTerm}&#10;                                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                                placeholder=&quot;Search by name or description...&quot;&#10;                                className=&quot;pl-10 w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                            /&gt;&#10;                            &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                            Category&#10;                        &lt;/label&gt;&#10;                        &lt;select&#10;                            value={selectedCategory}&#10;                            onChange={(e) =&gt; setSelectedCategory(e.target.value)}&#10;                            className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        &gt;&#10;                            &lt;option value=&quot;&quot;&gt;All Categories&lt;/option&gt;&#10;                            &lt;option value=&quot;Vegetables&quot;&gt; Vegetables&lt;/option&gt;&#10;                            &lt;option value=&quot;Fruits&quot;&gt; Fruits&lt;/option&gt;&#10;                            &lt;option value=&quot;Grains&quot;&gt; Grains&lt;/option&gt;&#10;                            &lt;option value=&quot;Dairy&quot;&gt; Dairy&lt;/option&gt;&#10;                            &lt;option value=&quot;Herbs&quot;&gt; Herbs&lt;/option&gt;&#10;                            &lt;option value=&quot;Other&quot;&gt; Other&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                            Status&#10;                        &lt;/label&gt;&#10;                        &lt;select&#10;                            value={selectedStatus}&#10;                            onChange={(e) =&gt; setSelectedStatus(e.target.value)}&#10;                            className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        &gt;&#10;                            &lt;option value=&quot;&quot;&gt;All Statuses&lt;/option&gt;&#10;                            &lt;option value=&quot;active&quot;&gt;✅ Active&lt;/option&gt;&#10;                            &lt;option value=&quot;inactive&quot;&gt;⏸️ Inactive&lt;/option&gt;&#10;                            &lt;option value=&quot;out-of-stock&quot;&gt;❌ Out of Stock&lt;/option&gt;&#10;                            &lt;option value=&quot;low-stock&quot;&gt;⚠️ Low Stock (≤5)&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                            Sort By&#10;                        &lt;/label&gt;&#10;                        &lt;select&#10;                            value={selectedSort || &quot;&quot;}&#10;                            onChange={(e) =&gt; setSelectedSort(e.target.value)}&#10;                            className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        &gt;&#10;                            &lt;option value=&quot;&quot;&gt;Default Order&lt;/option&gt;&#10;                            &lt;option value=&quot;name-asc&quot;&gt;Name (A-Z)&lt;/option&gt;&#10;                            &lt;option value=&quot;name-desc&quot;&gt;Name (Z-A)&lt;/option&gt;&#10;                            &lt;option value=&quot;price-asc&quot;&gt;Price (Low to High)&lt;/option&gt;&#10;                            &lt;option value=&quot;price-desc&quot;&gt;Price (High to Low)&lt;/option&gt;&#10;                            &lt;option value=&quot;stock-asc&quot;&gt;Stock (Low to High)&lt;/option&gt;&#10;                            &lt;option value=&quot;stock-desc&quot;&gt;Stock (High to Low)&lt;/option&gt;&#10;                            &lt;option value=&quot;date-desc&quot;&gt;Newest First&lt;/option&gt;&#10;                            &lt;option value=&quot;date-asc&quot;&gt;Oldest First&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Filter Summary */}&#10;                {(searchTerm || selectedCategory || selectedStatus || selectedSort) &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Showing filtered results&#10;                                {searchTerm ? ` matching &quot;${searchTerm}&quot;` : &quot;&quot;}&#10;                                {selectedCategory ? ` in ${selectedCategory}` : &quot;&quot;}&#10;                                {selectedStatus ? ` that are ${selectedStatus}` : &quot;&quot;}&#10;                                {selectedSort ? ` sorted by ${selectedSort.replace(&quot;-&quot;, &quot; &quot;)}` : &quot;&quot;}&#10;                            &lt;/p&gt;&#10;                            &lt;button&#10;                                onClick={clearFilters}&#10;                                className=&quot;text-xs text-red-600 dark:text-red-400 hover:underline&quot;&#10;                            &gt;&#10;                                &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                                Clear all filters&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            {/* View Toggle */}&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;              View:&#10;            &lt;/span&gt;&#10;                        &lt;div className=&quot;flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#10;                            &lt;button&#10;                                onClick={() =&gt; setViewMode(&quot;grid&quot;)}&#10;                                className={`px-3 py-1 rounded ${&#10;                                    viewMode === &quot;grid&quot;&#10;                                        ? &quot;bg-white dark:bg-gray-600 shadow&quot;&#10;                                        : &quot;text-gray-600 dark:text-gray-400&quot;&#10;                                }`}&#10;                            &gt;&#10;                                &lt;i className=&quot;fas fa-th-large&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                                onClick={() =&gt; setViewMode(&quot;list&quot;)}&#10;                                className={`px-3 py-1 rounded ${&#10;                                    viewMode === &quot;list&quot;&#10;                                        ? &quot;bg-white dark:bg-gray-600 shadow&quot;&#10;                                        : &quot;text-gray-600 dark:text-gray-400&quot;&#10;                                }`}&#10;                            &gt;&#10;                                &lt;i className=&quot;fas fa-list&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        &lt;span&gt;Results per page:&lt;/span&gt;&#10;                        &lt;select&#10;                            value={productsPerPage}&#10;                            onChange={(e) =&gt; setProductsPerPage(Number(e.target.value))}&#10;                            className=&quot;px-2 py-1 border border-gray-300 dark:border-gray-600 rounded focus:ring-1 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                        &gt;&#10;                            &lt;option value={12}&gt;12&lt;/option&gt;&#10;                            &lt;option value={24}&gt;24&lt;/option&gt;&#10;                            &lt;option value={48}&gt;48&lt;/option&gt;&#10;                            &lt;option value={96}&gt;96&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Display */}&#10;            {paginatedProducts.length === 0 ? (&#10;                &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-12 text-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        {products.length === 0&#10;                            ? &quot;No products found&quot;&#10;                            : &quot;No products match your filters&quot;}&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                        {products.length === 0&#10;                            ? &quot;Start by adding your first product to your store&quot;&#10;                            : &quot;Try adjusting your search criteria or clear the filters&quot;}&#10;                    &lt;/p&gt;&#10;                    {products.length === 0 ? (&#10;                        &lt;Link&#10;                            href=&quot;/create&quot;&#10;                            className=&quot;inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;                        &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Add Your First Product&#10;                        &lt;/Link&gt;&#10;                    ) : (&#10;                        &lt;button&#10;                            onClick={clearFilters}&#10;                            className=&quot;inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition&quot;&#10;                        &gt;&#10;                            &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                            Clear All Filters&#10;                        &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;&gt;&#10;                    {/* Grid View */}&#10;                    {viewMode === &quot;grid&quot; &amp;&amp; (&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6&quot;&gt;&#10;                            {paginatedProducts.map((product) =&gt; (&#10;                                &lt;ProductCard&#10;                                    key={product._id}&#10;                                    product={product}&#10;                                    handleStatusToggle={handleStatusToggle}&#10;                                    handleDeleteProduct={handleDeleteProduct}&#10;                                    actionLoading={actionLoading}&#10;                                    getProductStatusBadge={getProductStatusBadge}&#10;                                    formatPrice={formatPrice}&#10;                                /&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    {/* List View */}&#10;                    {viewMode === &quot;list&quot; &amp;&amp; (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden&quot;&gt;&#10;                            &lt;ProductList&#10;                                products={paginatedProducts}&#10;                                handleStatusToggle={handleStatusToggle}&#10;                                handleDeleteProduct={handleDeleteProduct}&#10;                                actionLoading={actionLoading}&#10;                                getProductStatusBadge={getProductStatusBadge}&#10;                                formatPrice={formatPrice}&#10;                                formatDate={formatDate}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    {/* Pagination */}&#10;                    {totalPages &gt; 1 &amp;&amp; (&#10;                        &lt;div className=&quot;flex justify-center mt-8&quot;&gt;&#10;                            &lt;nav className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                &lt;button&#10;                                    onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#10;                                    disabled={currentPage === 1}&#10;                                    className=&quot;px-3 py-1 rounded border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 disabled:opacity-50&quot;&#10;                                &gt;&#10;                                    &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;&#10;                                {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map((page) =&gt; (&#10;                                    &lt;button&#10;                                        key={page}&#10;                                        onClick={() =&gt; setCurrentPage(page)}&#10;                                        className={`px-3 py-1 rounded ${&#10;                                            currentPage === page&#10;                                                ? &quot;bg-green-600 text-white&quot;&#10;                                                : &quot;border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400&quot;&#10;                                        }`}&#10;                                    &gt;&#10;                                        {page}&#10;                                    &lt;/button&gt;&#10;                                ))}&#10;&#10;                                &lt;button&#10;                                    onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#10;                                    disabled={currentPage === totalPages}&#10;                                    className=&quot;px-3 py-1 rounded border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 disabled:opacity-50&quot;&#10;                                &gt;&#10;                                    &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                                &lt;/button&gt;&#10;                            &lt;/nav&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="// components/dashboard/tabs/ProductsTab.js&#13;&#10;import Link from &quot;next/link&quot;;&#13;&#10;import StatCard from &quot;../StatCard&quot;;&#13;&#10;import ProductCard from &quot;../ProductCard&quot;;&#13;&#10;import ProductList from &quot;../ProductList&quot;;&#13;&#10;&#13;&#10;export default function ProductsTab({&#13;&#10;                                        products,&#13;&#10;                                        paginatedProducts,&#13;&#10;                                        searchTerm,&#13;&#10;                                        setSearchTerm,&#13;&#10;                                        selectedCategory,&#13;&#10;                                        setSelectedCategory,&#13;&#10;                                        selectedStatus,&#13;&#10;                                        setSelectedStatus,&#13;&#10;                                        selectedSort,&#13;&#10;                                        setSelectedSort,&#13;&#10;                                        viewMode,&#13;&#10;                                        setViewMode,&#13;&#10;                                        productsPerPage,&#13;&#10;                                        setProductsPerPage,&#13;&#10;                                        currentPage,&#13;&#10;                                        setCurrentPage,&#13;&#10;                                        totalPages,&#13;&#10;                                        handleStatusToggle,&#13;&#10;                                        handleDeleteProduct,&#13;&#10;                                        actionLoading,&#13;&#10;                                        getProductStatusBadge,&#13;&#10;                                        handleRefresh,&#13;&#10;                                        refreshing,&#13;&#10;                                        formatPrice,&#13;&#10;                                        formatDate&#13;&#10;                                    }) {&#13;&#10;    // Calculate product stats&#13;&#10;    const outOfStockCount = products.filter(p =&gt; p.stock === 0).length;&#13;&#10;    const inactiveCount = products.filter(p =&gt; p.status === &quot;inactive&quot;).length;&#13;&#10;    const lowStockCount = products.filter(p =&gt; p.stock &gt; 0 &amp;&amp; p.stock &lt;= 5).length;&#13;&#10;    const activeProductsCount = products.filter(p =&gt; p.stock &gt; 0 &amp;&amp; p.status !== &quot;inactive&quot;).length;&#13;&#10;&#13;&#10;    const clearFilters = () =&gt; {&#13;&#10;        setSearchTerm(&quot;&quot;);&#13;&#10;        setSelectedCategory(&quot;&quot;);&#13;&#10;        setSelectedStatus(&quot;&quot;);&#13;&#10;        setSelectedSort(&quot;&quot;);&#13;&#10;    };&#13;&#10;&#13;&#10;    return (&#13;&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#13;&#10;            {/* Products Header with Actions */}&#13;&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4&quot;&gt;&#13;&#10;                    &lt;div&gt;&#13;&#10;                        &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                            Product Management&#13;&#10;                        &lt;/h3&gt;&#13;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#13;&#10;                            Manage your product listings, inventory, and availability&#13;&#10;                        &lt;/p&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#13;&#10;                        &lt;button&#13;&#10;                            onClick={clearFilters}&#13;&#10;                            className=&quot;flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium transition&quot;&#13;&#10;                            disabled={!searchTerm &amp;&amp; !selectedCategory &amp;&amp; !selectedStatus &amp;&amp; !selectedSort}&#13;&#10;                        &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            Clear Filters&#13;&#10;                        &lt;/button&gt;&#13;&#10;                        &lt;button&#13;&#10;                            onClick={handleRefresh}&#13;&#10;                            disabled={refreshing}&#13;&#10;                            className=&quot;flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;i className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;fa-spin&quot; : &quot;&quot;}`}&gt;&lt;/i&gt;&#13;&#10;                            Refresh&#13;&#10;                        &lt;/button&gt;&#13;&#10;                        &lt;Link&#13;&#10;                            href=&quot;/create&quot;&#13;&#10;                            className=&quot;flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            Add Product&#13;&#10;                        &lt;/Link&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Product Stats */}&#13;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-6&quot;&gt;&#13;&#10;                &lt;StatCard&#13;&#10;                    icon=&quot;fas fa-box&quot;&#13;&#10;                    bgColor=&quot;bg-blue-100 dark:bg-blue-900&quot;&#13;&#10;                    textColor=&quot;text-blue-600 dark:text-blue-300&quot;&#13;&#10;                    title=&quot;Total Products&quot;&#13;&#10;                    value={products.length}&#13;&#10;                /&gt;&#13;&#10;&#13;&#10;                &lt;StatCard&#13;&#10;                    icon=&quot;fas fa-check-circle&quot;&#13;&#10;                    bgColor=&quot;bg-green-100 dark:bg-green-900&quot;&#13;&#10;                    textColor=&quot;text-green-600 dark:text-green-300&quot;&#13;&#10;                    title=&quot;Active Products&quot;&#13;&#10;                    value={activeProductsCount}&#13;&#10;                /&gt;&#13;&#10;&#13;&#10;                &lt;StatCard&#13;&#10;                    icon=&quot;fas fa-exclamation-triangle&quot;&#13;&#10;                    bgColor=&quot;bg-yellow-100 dark:bg-yellow-900&quot;&#13;&#10;                    textColor=&quot;text-yellow-600 dark:text-yellow-300&quot;&#13;&#10;                    title=&quot;Low Stock&quot;&#13;&#10;                    value={lowStockCount}&#13;&#10;                /&gt;&#13;&#10;&#13;&#10;                &lt;StatCard&#13;&#10;                    icon=&quot;fas fa-times-circle&quot;&#13;&#10;                    bgColor=&quot;bg-red-100 dark:bg-red-900&quot;&#13;&#10;                    textColor=&quot;text-red-600 dark:text-red-300&quot;&#13;&#10;                    title=&quot;Out of Stock/Inactive&quot;&#13;&#10;                    value={outOfStockCount + inactiveCount}&#13;&#10;                /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Enhanced Filters */}&#13;&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#13;&#10;                &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#13;&#10;                    Filter &amp; Search&#13;&#10;                &lt;/h4&gt;&#13;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#13;&#10;                    &lt;div&gt;&#13;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#13;&#10;                            Search Products&#13;&#10;                        &lt;/label&gt;&#13;&#10;                        &lt;div className=&quot;relative&quot;&gt;&#13;&#10;                            &lt;input&#13;&#10;                                type=&quot;text&quot;&#13;&#10;                                value={searchTerm}&#13;&#10;                                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#13;&#10;                                placeholder=&quot;Search by name or description...&quot;&#13;&#10;                                className=&quot;pl-10 w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#13;&#10;                            /&gt;&#13;&#10;                            &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div&gt;&#13;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#13;&#10;                            Category&#13;&#10;                        &lt;/label&gt;&#13;&#10;                        &lt;select&#13;&#10;                            value={selectedCategory}&#13;&#10;                            onChange={(e) =&gt; setSelectedCategory(e.target.value)}&#13;&#10;                            className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;option value=&quot;&quot;&gt;All Categories&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;Vegetables&quot;&gt; Vegetables&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;Fruits&quot;&gt; Fruits&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;Grains&quot;&gt; Grains&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;Dairy&quot;&gt; Dairy&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;Herbs&quot;&gt; Herbs&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;Other&quot;&gt; Other&lt;/option&gt;&#13;&#10;                        &lt;/select&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div&gt;&#13;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#13;&#10;                            Status&#13;&#10;                        &lt;/label&gt;&#13;&#10;                        &lt;select&#13;&#10;                            value={selectedStatus}&#13;&#10;                            onChange={(e) =&gt; setSelectedStatus(e.target.value)}&#13;&#10;                            className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;option value=&quot;&quot;&gt;All Statuses&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;active&quot;&gt;✅ Active&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;inactive&quot;&gt;⏸️ Inactive&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;out-of-stock&quot;&gt;❌ Out of Stock&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;low-stock&quot;&gt;⚠️ Low Stock (≤5)&lt;/option&gt;&#13;&#10;                        &lt;/select&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div&gt;&#13;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#13;&#10;                            Sort By&#13;&#10;                        &lt;/label&gt;&#13;&#10;                        &lt;select&#13;&#10;                            value={selectedSort || &quot;&quot;}&#13;&#10;                            onChange={(e) =&gt; setSelectedSort(e.target.value)}&#13;&#10;                            className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;option value=&quot;&quot;&gt;Default Order&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;name-asc&quot;&gt;Name (A-Z)&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;name-desc&quot;&gt;Name (Z-A)&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;price-asc&quot;&gt;Price (Low to High)&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;price-desc&quot;&gt;Price (High to Low)&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;stock-asc&quot;&gt;Stock (Low to High)&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;stock-desc&quot;&gt;Stock (High to Low)&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;date-desc&quot;&gt;Newest First&lt;/option&gt;&#13;&#10;                            &lt;option value=&quot;date-asc&quot;&gt;Oldest First&lt;/option&gt;&#13;&#10;                        &lt;/select&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                {/* Filter Summary */}&#13;&#10;                {(searchTerm || selectedCategory || selectedStatus || selectedSort) &amp;&amp; (&#13;&#10;                    &lt;div className=&quot;mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#13;&#10;                        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                            &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                                Showing filtered results&#13;&#10;                                {searchTerm ? ` matching &quot;${searchTerm}&quot;` : &quot;&quot;}&#13;&#10;                                {selectedCategory ? ` in ${selectedCategory}` : &quot;&quot;}&#13;&#10;                                {selectedStatus ? ` that are ${selectedStatus}` : &quot;&quot;}&#13;&#10;                                {selectedSort ? ` sorted by ${selectedSort.replace(&quot;-&quot;, &quot; &quot;)}` : &quot;&quot;}&#13;&#10;                            &lt;/p&gt;&#13;&#10;                            &lt;button&#13;&#10;                                onClick={clearFilters}&#13;&#10;                                className=&quot;text-xs text-red-600 dark:text-red-400 hover:underline&quot;&#13;&#10;                            &gt;&#13;&#10;                                &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#13;&#10;                                Clear all filters&#13;&#10;                            &lt;/button&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                )}&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* View Toggle */}&#13;&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#13;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#13;&#10;              View:&#13;&#10;            &lt;/span&gt;&#13;&#10;                        &lt;div className=&quot;flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#13;&#10;                            &lt;button&#13;&#10;                                onClick={() =&gt; setViewMode(&quot;grid&quot;)}&#13;&#10;                                className={`px-3 py-1 rounded ${&#13;&#10;                                    viewMode === &quot;grid&quot;&#13;&#10;                                        ? &quot;bg-white dark:bg-gray-600 shadow&quot;&#13;&#10;                                        : &quot;text-gray-600 dark:text-gray-400&quot;&#13;&#10;                                }`}&#13;&#10;                            &gt;&#13;&#10;                                &lt;i className=&quot;fas fa-th-large&quot;&gt;&lt;/i&gt;&#13;&#10;                            &lt;/button&gt;&#13;&#10;                            &lt;button&#13;&#10;                                onClick={() =&gt; setViewMode(&quot;list&quot;)}&#13;&#10;                                className={`px-3 py-1 rounded ${&#13;&#10;                                    viewMode === &quot;list&quot;&#13;&#10;                                        ? &quot;bg-white dark:bg-gray-600 shadow&quot;&#13;&#10;                                        : &quot;text-gray-600 dark:text-gray-400&quot;&#13;&#10;                                }`}&#13;&#10;                            &gt;&#13;&#10;                                &lt;i className=&quot;fas fa-list&quot;&gt;&lt;/i&gt;&#13;&#10;                            &lt;/button&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                        &lt;span&gt;Results per page:&lt;/span&gt;&#13;&#10;                        &lt;select&#13;&#10;                            value={productsPerPage}&#13;&#10;                            onChange={(e) =&gt; setProductsPerPage(Number(e.target.value))}&#13;&#10;                            className=&quot;px-2 py-1 border border-gray-300 dark:border-gray-600 rounded focus:ring-1 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;option value={12}&gt;12&lt;/option&gt;&#13;&#10;                            &lt;option value={24}&gt;24&lt;/option&gt;&#13;&#10;                            &lt;option value={48}&gt;48&lt;/option&gt;&#13;&#10;                            &lt;option value={96}&gt;96&lt;/option&gt;&#13;&#10;                        &lt;/select&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Products Display */}&#13;&#10;            {paginatedProducts.length === 0 ? (&#13;&#10;                &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-12 text-center&quot;&gt;&#13;&#10;                    &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#13;&#10;                        {products.length === 0&#13;&#10;                            ? &quot;No products found&quot;&#13;&#10;                            : &quot;No products match your filters&quot;}&#13;&#10;                    &lt;/h3&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#13;&#10;                        {products.length === 0&#13;&#10;                            ? &quot;Start by adding your first product to your store&quot;&#13;&#10;                            : &quot;Try adjusting your search criteria or clear the filters&quot;}&#13;&#10;                    &lt;/p&gt;&#13;&#10;                    {products.length === 0 ? (&#13;&#10;                        &lt;Link&#13;&#10;                            href=&quot;/create&quot;&#13;&#10;                            className=&quot;inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            Add Your First Product&#13;&#10;                        &lt;/Link&gt;&#13;&#10;                    ) : (&#13;&#10;                        &lt;button&#13;&#10;                            onClick={clearFilters}&#13;&#10;                            className=&quot;inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition&quot;&#13;&#10;                        &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            Clear All Filters&#13;&#10;                        &lt;/button&gt;&#13;&#10;                    )}&#13;&#10;                &lt;/div&gt;&#13;&#10;            ) : (&#13;&#10;                &lt;&gt;&#13;&#10;                    {/* Grid View */}&#13;&#10;                    {viewMode === &quot;grid&quot; &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#13;&#10;                            {paginatedProducts.map((product) =&gt; (&#13;&#10;                                &lt;ProductCard&#13;&#10;                                    key={product._id}&#13;&#10;                                    product={product}&#13;&#10;                                    handleStatusToggle={handleStatusToggle}&#13;&#10;                                    handleDeleteProduct={handleDeleteProduct}&#13;&#10;                                    actionLoading={actionLoading}&#13;&#10;                                    getProductStatusBadge={getProductStatusBadge}&#13;&#10;                                    formatPrice={formatPrice}&#13;&#10;                                /&gt;&#13;&#10;                            ))}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    )}&#13;&#10;&#13;&#10;                    {/* List View */}&#13;&#10;                    {viewMode === &quot;list&quot; &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden&quot;&gt;&#13;&#10;                            &lt;ProductList&#13;&#10;                                products={paginatedProducts}&#13;&#10;                                handleStatusToggle={handleStatusToggle}&#13;&#10;                                handleDeleteProduct={handleDeleteProduct}&#13;&#10;                                actionLoading={actionLoading}&#13;&#10;                                getProductStatusBadge={getProductStatusBadge}&#13;&#10;                                formatPrice={formatPrice}&#13;&#10;                                formatDate={formatDate}&#13;&#10;                            /&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    )}&#13;&#10;&#13;&#10;                    {/* Pagination */}&#13;&#10;                    {totalPages &gt; 1 &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;flex justify-center mt-8&quot;&gt;&#13;&#10;                            &lt;nav className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                                &lt;button&#13;&#10;                                    onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#13;&#10;                                    disabled={currentPage === 1}&#13;&#10;                                    className=&quot;px-3 py-1 rounded border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 disabled:opacity-50&quot;&#13;&#10;                                &gt;&#13;&#10;                                    &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#13;&#10;                                &lt;/button&gt;&#13;&#10;&#13;&#10;                                {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map((page) =&gt; (&#13;&#10;                                    &lt;button&#13;&#10;                                        key={page}&#13;&#10;                                        onClick={() =&gt; setCurrentPage(page)}&#13;&#10;                                        className={`px-3 py-1 rounded ${&#13;&#10;                                            currentPage === page&#13;&#10;                                                ? &quot;bg-green-600 text-white&quot;&#13;&#10;                                                : &quot;border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400&quot;&#13;&#10;                                        }`}&#13;&#10;                                    &gt;&#13;&#10;                                        {page}&#13;&#10;                                    &lt;/button&gt;&#13;&#10;                                ))}&#13;&#10;&#13;&#10;                                &lt;button&#13;&#10;                                    onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#13;&#10;                                    disabled={currentPage === totalPages}&#13;&#10;                                    className=&quot;px-3 py-1 rounded border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 disabled:opacity-50&quot;&#13;&#10;                                &gt;&#13;&#10;                                    &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#13;&#10;                                &lt;/button&gt;&#13;&#10;                            &lt;/nav&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    )}&#13;&#10;                &lt;/&gt;&#13;&#10;            )}&#13;&#10;        &lt;/div&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/utils/debounce.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/utils/debounce.js" />
              <option name="updatedContent" value="// Debounce function to limit the rate of function calls&#10;export function debounce(func, delay) {&#10;  let timeout;&#10;  return function (...args) {&#10;    const context = this;&#10;    clearTimeout(timeout);&#10;    timeout = setTimeout(() =&gt; func.apply(context, args), delay);&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>