<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/farmers/migrate/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/farmers/migrate/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    let migratedCount = 0;&#10;    let skippedCount = 0;&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;        migratedCount++;&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;        skippedCount++;&#10;      }&#10;    }&#10;&#10;    // Get final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Farmer migration completed&quot;,&#10;      results: {&#10;        farmersFound: farmerUsers.length,&#10;        migrated: migratedCount,&#10;        skipped: skippedCount,&#10;        totalFarmersInCollection: totalFarmers&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;Migration error:&quot;, error);&#10;    return NextResponse.json(&#10;      { &#10;        success: false, &#10;        error: &quot;Failed to migrate farmers&quot;,&#10;        message: error.message &#10;      },&#10;      { status: 500 }&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/[id]/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/[id]/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Calculate performance metrics for a product&#10;async function calculateProductPerformanceOptimized(db, productId) {&#10;  try {&#10;    console.log(`Calculating performance metrics for product: ${productId}`);&#10;&#10;    // Handle different productId formats (string, ObjectId)&#10;    const productIdVariants = [&#10;      productId,&#10;      productId.toString(),&#10;      ...(ObjectId.isValid(productId) ? [new ObjectId(productId)] : []),&#10;    ];&#10;&#10;    // First, let's get orders and reviews separately for better debugging&#10;    const ordersQuery = {&#10;      &quot;items.productId&quot;: { $in: productIdVariants },&#10;      status: {&#10;        $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;confirmed&quot;, &quot;shipped&quot;, &quot;pending&quot;],&#10;      },&#10;    };&#10;&#10;    console.log(&quot;Orders query:&quot;, JSON.stringify(ordersQuery));&#10;&#10;    // Calculate sales metrics from orders&#10;    const salesPipeline = [&#10;      { $match: ordersQuery },&#10;      { $unwind: &quot;$items&quot; },&#10;      {&#10;        $match: {&#10;          &quot;items.productId&quot;: { $in: productIdVariants },&#10;        },&#10;      },&#10;      {&#10;        $group: {&#10;          _id: null,&#10;          totalSales: { $sum: &quot;$items.quantity&quot; },&#10;          totalRevenue: {&#10;            $sum: {&#10;              $multiply: [&#10;                { $toDouble: &quot;$items.price&quot; },&#10;                { $toInt: &quot;$items.quantity&quot; },&#10;              ],&#10;            },&#10;          },&#10;          totalOrders: { $sum: 1 },&#10;          orderValues: {&#10;            $push: {&#10;              $multiply: [&#10;                { $toDouble: &quot;$items.price&quot; },&#10;                { $toInt: &quot;$items.quantity&quot; },&#10;              ],&#10;            },&#10;          },&#10;        },&#10;      },&#10;    ];&#10;&#10;    // Calculate review metrics&#10;    const reviewsPipeline = [&#10;      {&#10;        $match: {&#10;          productId: { $in: productIdVariants },&#10;        },&#10;      },&#10;      {&#10;        $group: {&#10;          _id: null,&#10;          totalReviews: { $sum: 1 },&#10;          averageRating: { $avg: &quot;$rating&quot; },&#10;        },&#10;      },&#10;    ];&#10;&#10;    const [salesResult, reviewsResult] = await Promise.all([&#10;      db.collection(&quot;orders&quot;).aggregate(salesPipeline).toArray(),&#10;      db.collection(&quot;reviews&quot;).aggregate(reviewsPipeline).toArray(),&#10;    ]);&#10;&#10;    const salesData = salesResult[0] || {};&#10;    const reviewsData = reviewsResult[0] || {};&#10;&#10;    const performanceMetrics = {&#10;      totalSales: salesData.totalSales || 0,&#10;      totalRevenue: salesData.totalRevenue || 0,&#10;      totalOrders: salesData.totalOrders || 0,&#10;      averageOrderValue:&#10;        salesData.totalOrders &gt; 0&#10;          ? salesData.totalRevenue / salesData.totalOrders&#10;          : 0,&#10;      totalReviews: reviewsData.totalReviews || 0,&#10;      averageRating: reviewsData.averageRating || 0,&#10;    };&#10;&#10;    console.log(`Performance metrics for ${productId}:`, performanceMetrics);&#10;    return performanceMetrics;&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating performance metrics:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageOrderValue: 0,&#10;      totalReviews: 0,&#10;      averageRating: 0,&#10;    };&#10;  }&#10;}&#10;&#10;// Initialize indexes for better performance on product details queries&#10;async function initializeProductDetailIndexes(db) {&#10;  try {&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;&#10;    // Product collection indexes&#10;    await productsCollection.createIndex({ _id: 1 });&#10;    await productsCollection.createIndex({ farmerId: 1 });&#10;    await productsCollection.createIndex({ &quot;farmer.id&quot;: 1 });&#10;    await productsCollection.createIndex({ &quot;farmer._id&quot;: 1 });&#10;    await productsCollection.createIndex({ category: 1, status: 1 });&#10;    await productsCollection.createIndex({ status: 1 });&#10;&#10;    // Orders collection indexes for performance metrics&#10;    await ordersCollection.createIndex({ &quot;items.productId&quot;: 1, status: 1 });&#10;    await ordersCollection.createIndex({ status: 1 });&#10;&#10;    // Reviews collection indexes&#10;    await reviewsCollection.createIndex({ productId: 1 });&#10;&#10;    // Users collection indexes for favorites&#10;    await usersCollection.createIndex({ favorites: 1 });&#10;  } catch (error) {&#10;    console.log(&quot;Index creation note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for optimal performance&#10;    await initializeProductDetailIndexes(db);&#10;&#10;    // Build efficient aggregation pipeline to find the product&#10;    const productPipeline = [&#10;      {&#10;        $match: {&#10;          $or: [&#10;            { _id: id },&#10;            ...(ObjectId.isValid(id) ? [{ _id: new ObjectId(id) }] : []),&#10;            { farmerId: id },&#10;            { &quot;farmer.id&quot;: id },&#10;            { &quot;farmer._id&quot;: id },&#10;          ],&#10;          // Exclude deleted and inactive products from public access&#10;          status: { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] },&#10;        },&#10;      },&#10;      {&#10;        $limit: 1,&#10;      },&#10;    ];&#10;&#10;    const [targetProduct] = await db&#10;      .collection(&quot;products&quot;)&#10;      .aggregate(productPipeline)&#10;      .toArray();&#10;&#10;    // If it's a farmer ID, return farmer details with optimized query&#10;    if (targetProduct &amp;&amp; targetProduct.farmerId === id) {&#10;      const farmerProductsPipeline = [&#10;        { $match: { farmerId: id } },&#10;        {&#10;          $project: {&#10;            _id: 1,&#10;            name: 1,&#10;            price: 1,&#10;            image: 1,&#10;            images: 1,&#10;            category: 1,&#10;            stock: 1,&#10;            farmer: 1,&#10;            isOrganic: 1,&#10;            isFresh: 1,&#10;          },&#10;        },&#10;      ];&#10;&#10;      const farmerProducts = await db&#10;        .collection(&quot;products&quot;)&#10;        .aggregate(farmerProductsPipeline)&#10;        .toArray();&#10;&#10;      const farmerInfo = targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;        id: id,&#10;      };&#10;&#10;      return NextResponse.json({&#10;        isFarmerDetails: true,&#10;        farmer: farmerInfo,&#10;        farmerProducts: farmerProducts.map((p) =&gt; ({&#10;          ...p,&#10;          images: combineProductImages(p),&#10;        })),&#10;        totalProducts: farmerProducts.length,&#10;        farmerId: id,&#10;      });&#10;    }&#10;&#10;    // Fallback: Search in nested structures if no direct product found&#10;    if (!targetProduct) {&#10;      const nestedProductPipeline = [&#10;        { $match: { products: { $exists: true, $ne: [] } } },&#10;        { $unwind: &quot;$products&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;products._id&quot;: id },&#10;              { &quot;products.farmerId&quot;: id },&#10;              ...(ObjectId.isValid(id)&#10;                ? [{ &quot;products._id&quot;: new ObjectId(id) }]&#10;                : []),&#10;            ],&#10;            // Also exclude inactive and deleted products from nested search&#10;            &quot;products.status&quot;: { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] },&#10;          },&#10;        },&#10;        { $replaceRoot: { newRoot: &quot;$products&quot; } },&#10;        { $limit: 1 },&#10;      ];&#10;&#10;      const [nestedProduct] = await db&#10;        .collection(&quot;products&quot;)&#10;        .aggregate(nestedProductPipeline)&#10;        .toArray();&#10;&#10;      if (!nestedProduct) {&#10;        return NextResponse.json(&#10;          { error: &quot;Product not found&quot;, searchedId: id },&#10;          { status: 404 },&#10;        );&#10;      }&#10;&#10;      targetProduct = nestedProduct;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        { error: &quot;Product not found&quot;, searchedId: id },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Enhanced product with default values&#10;    const product = {&#10;      ...targetProduct,&#10;      images: combineProductImages(targetProduct),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch performance metrics using optimized aggregation&#10;    const performanceMetrics = await calculateProductPerformanceOptimized(&#10;      db,&#10;      id,&#10;    );&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products using efficient aggregation&#10;    const relatedProductsPipeline = [&#10;      {&#10;        $match: {&#10;          category: enhancedProduct.category,&#10;          _id: { $ne: enhancedProduct._id },&#10;          status: { $ne: &quot;deleted&quot; },&#10;        },&#10;      },&#10;      {&#10;        $project: {&#10;          _id: 1,&#10;          name: 1,&#10;          price: 1,&#10;          image: 1,&#10;          images: 1,&#10;          category: 1,&#10;          stock: 1,&#10;          farmer: 1,&#10;          isOrganic: 1,&#10;          isFresh: 1,&#10;          averageRating: 1,&#10;        },&#10;      },&#10;      { $limit: 4 },&#10;    ];&#10;&#10;    const relatedProductsResult = await db&#10;      .collection(&quot;products&quot;)&#10;      .aggregate(relatedProductsPipeline)&#10;      .toArray();&#10;&#10;    let relatedProducts = relatedProductsResult.map((p) =&gt; ({&#10;      ...p,&#10;      images: combineProductImages(p),&#10;      farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;      stock: p.stock || 50,&#10;      isOrganic: p.isOrganic || false,&#10;      isFresh: p.isFresh || true,&#10;    }));&#10;&#10;    // Calculate real ratings for related products&#10;    relatedProducts = await enhanceProductsWithRatings(relatedProducts, db);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to combine product images efficiently&#10;function combineProductImages(product) {&#10;  const imageArray = [];&#10;&#10;  if (product.image) {&#10;    imageArray.push(product.image);&#10;  }&#10;&#10;  if (product.images &amp;&amp; Array.isArray(product.images)) {&#10;    imageArray.push(...product.images);&#10;  }&#10;&#10;  return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date();&#10;&#10;    // Validate status if it's being updated&#10;    if (&#10;      updateData.status &amp;&amp;&#10;      ![&quot;active&quot;, &quot;inactive&quot;, &quot;deleted&quot;].includes(updateData.status)&#10;    ) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid status. Must be 'active', 'inactive', or 'deleted'&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    if (result.modifiedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;No changes were made to the product&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot;, message: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Calculate performance metrics for a product&#10;async function calculateProductPerformanceOptimized(db, productId) {&#10;  try {&#10;    console.log(`Calculating performance metrics for product: ${productId}`);&#10;&#10;    // Handle different productId formats (string, ObjectId)&#10;    const productIdVariants = [&#10;      productId,&#10;      productId.toString(),&#10;      ...(ObjectId.isValid(productId) ? [new ObjectId(productId)] : []),&#10;    ];&#10;&#10;    // First, let's get orders and reviews separately for better debugging&#10;    const ordersQuery = {&#10;      &quot;items.productId&quot;: { $in: productIdVariants },&#10;      status: {&#10;        $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;confirmed&quot;, &quot;shipped&quot;, &quot;pending&quot;],&#10;      },&#10;    };&#10;&#10;    console.log(&quot;Orders query:&quot;, JSON.stringify(ordersQuery));&#10;&#10;    // Calculate sales metrics from orders&#10;    const salesPipeline = [&#10;      { $match: ordersQuery },&#10;      { $unwind: &quot;$items&quot; },&#10;      {&#10;        $match: {&#10;          &quot;items.productId&quot;: { $in: productIdVariants },&#10;        },&#10;      },&#10;      {&#10;        $group: {&#10;          _id: null,&#10;          totalSales: { $sum: &quot;$items.quantity&quot; },&#10;          totalRevenue: {&#10;            $sum: {&#10;              $multiply: [&#10;                { $toDouble: &quot;$items.price&quot; },&#10;                { $toInt: &quot;$items.quantity&quot; },&#10;              ],&#10;            },&#10;          },&#10;          totalOrders: { $sum: 1 },&#10;          orderValues: {&#10;            $push: {&#10;              $multiply: [&#10;                { $toDouble: &quot;$items.price&quot; },&#10;                { $toInt: &quot;$items.quantity&quot; },&#10;              ],&#10;            },&#10;          },&#10;        },&#10;      },&#10;    ];&#10;&#10;    // Calculate review metrics&#10;    const reviewsPipeline = [&#10;      {&#10;        $match: {&#10;          productId: { $in: productIdVariants },&#10;        },&#10;      },&#10;      {&#10;        $group: {&#10;          _id: null,&#10;          totalReviews: { $sum: 1 },&#10;          averageRating: { $avg: &quot;$rating&quot; },&#10;        },&#10;      },&#10;    ];&#10;&#10;    const [salesResult, reviewsResult] = await Promise.all([&#10;      db.collection(&quot;orders&quot;).aggregate(salesPipeline).toArray(),&#10;      db.collection(&quot;reviews&quot;).aggregate(reviewsPipeline).toArray(),&#10;    ]);&#10;&#10;    const salesData = salesResult[0] || {};&#10;    const reviewsData = reviewsResult[0] || {};&#10;&#10;    const performanceMetrics = {&#10;      totalSales: salesData.totalSales || 0,&#10;      totalRevenue: salesData.totalRevenue || 0,&#10;      totalOrders: salesData.totalOrders || 0,&#10;      averageOrderValue:&#10;        salesData.totalOrders &gt; 0&#10;          ? salesData.totalRevenue / salesData.totalOrders&#10;          : 0,&#10;      totalReviews: reviewsData.totalReviews || 0,&#10;      averageRating: reviewsData.averageRating || 0,&#10;    };&#10;&#10;    console.log(`Performance metrics for ${productId}:`, performanceMetrics);&#10;    return performanceMetrics;&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating performance metrics:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageOrderValue: 0,&#10;      totalReviews: 0,&#10;      averageRating: 0,&#10;    };&#10;  }&#10;}&#10;&#10;// Initialize indexes for better performance on product details queries&#10;async function initializeProductDetailIndexes(db) {&#10;  try {&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;&#10;    // Product collection indexes&#10;    await productsCollection.createIndex({ _id: 1 });&#10;    await productsCollection.createIndex({ farmerId: 1 });&#10;    await productsCollection.createIndex({ &quot;farmer.id&quot;: 1 });&#10;    await productsCollection.createIndex({ &quot;farmer._id&quot;: 1 });&#10;    await productsCollection.createIndex({ category: 1, status: 1 });&#10;    await productsCollection.createIndex({ status: 1 });&#10;&#10;    // Orders collection indexes for performance metrics&#10;    await ordersCollection.createIndex({ &quot;items.productId&quot;: 1, status: 1 });&#10;    await ordersCollection.createIndex({ status: 1 });&#10;&#10;    // Reviews collection indexes&#10;    await reviewsCollection.createIndex({ productId: 1 });&#10;&#10;    // Users collection indexes for favorites&#10;    await usersCollection.createIndex({ favorites: 1 });&#10;  } catch (error) {&#10;    console.log(&quot;Index creation note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;    const url = new URL(request.url);&#10;    const isDashboardContext = url.searchParams.get('dashboard') === 'true';&#10;    const farmerId = url.searchParams.get('farmerId');&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for optimal performance&#10;    await initializeProductDetailIndexes(db);&#10;&#10;    // Build efficient aggregation pipeline to find the product&#10;    const matchConditions = {&#10;      $or: [&#10;        { _id: id },&#10;        ...(ObjectId.isValid(id) ? [{ _id: new ObjectId(id) }] : []),&#10;        { farmerId: id },&#10;        { &quot;farmer.id&quot;: id },&#10;        { &quot;farmer._id&quot;: id },&#10;      ],&#10;    };&#10;&#10;    // Only exclude inactive products for public views, not for dashboard/farmer context&#10;    if (!isDashboardContext &amp;&amp; !farmerId) {&#10;      matchConditions.status = { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] };&#10;    } else {&#10;      // For dashboard context, only exclude deleted products&#10;      matchConditions.status = { $ne: &quot;deleted&quot; };&#10;    }&#10;&#10;    const productPipeline = [&#10;      { $match: matchConditions },&#10;      { $limit: 1 },&#10;    ];&#10;&#10;    const [targetProduct] = await db&#10;      .collection(&quot;products&quot;)&#10;      .aggregate(productPipeline)&#10;      .toArray();&#10;&#10;    // If it's a farmer ID, return farmer details with optimized query&#10;    if (targetProduct &amp;&amp; targetProduct.farmerId === id) {&#10;      const farmerMatchConditions = { farmerId: id };&#10;      &#10;      // For dashboard context, show all products including inactive ones&#10;      if (!isDashboardContext &amp;&amp; !farmerId) {&#10;        farmerMatchConditions.status = { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] };&#10;      } else {&#10;        farmerMatchConditions.status = { $ne: &quot;deleted&quot; };&#10;      }&#10;&#10;      const farmerProductsPipeline = [&#10;        { $match: farmerMatchConditions },&#10;        {&#10;          $project: {&#10;            _id: 1,&#10;            name: 1,&#10;            price: 1,&#10;            image: 1,&#10;            images: 1,&#10;            category: 1,&#10;            stock: 1,&#10;            status: 1,&#10;            farmer: 1,&#10;            isOrganic: 1,&#10;            isFresh: 1,&#10;          },&#10;        },&#10;      ];&#10;&#10;      const farmerProducts = await db&#10;        .collection(&quot;products&quot;)&#10;        .aggregate(farmerProductsPipeline)&#10;        .toArray();&#10;&#10;      const farmerInfo = targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;        id: id,&#10;      };&#10;&#10;      return NextResponse.json({&#10;        isFarmerDetails: true,&#10;        farmer: farmerInfo,&#10;        farmerProducts: farmerProducts.map((p) =&gt; ({&#10;          ...p,&#10;          images: combineProductImages(p),&#10;        })),&#10;        totalProducts: farmerProducts.length,&#10;        farmerId: id,&#10;      });&#10;    }&#10;&#10;    // Fallback: Search in nested structures if no direct product found&#10;    if (!targetProduct) {&#10;      const nestedProductPipeline = [&#10;        { $match: { products: { $exists: true, $ne: [] } } },&#10;        { $unwind: &quot;$products&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;products._id&quot;: id },&#10;              { &quot;products.farmerId&quot;: id },&#10;              ...(ObjectId.isValid(id)&#10;                ? [{ &quot;products._id&quot;: new ObjectId(id) }]&#10;                : []),&#10;            ],&#10;            // Also exclude inactive and deleted products from nested search&#10;            &quot;products.status&quot;: { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] },&#10;          },&#10;        },&#10;        { $replaceRoot: { newRoot: &quot;$products&quot; } },&#10;        { $limit: 1 },&#10;      ];&#10;&#10;      const [nestedProduct] = await db&#10;        .collection(&quot;products&quot;)&#10;        .aggregate(nestedProductPipeline)&#10;        .toArray();&#10;&#10;      if (!nestedProduct) {&#10;        return NextResponse.json(&#10;          { error: &quot;Product not found&quot;, searchedId: id },&#10;          { status: 404 },&#10;        );&#10;      }&#10;&#10;      targetProduct = nestedProduct;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        { error: &quot;Product not found&quot;, searchedId: id },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Enhanced product with default values&#10;    const product = {&#10;      ...targetProduct,&#10;      images: combineProductImages(targetProduct),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch performance metrics using optimized aggregation&#10;    const performanceMetrics = await calculateProductPerformanceOptimized(&#10;      db,&#10;      id,&#10;    );&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products using efficient aggregation&#10;    const relatedProductsPipeline = [&#10;      {&#10;        $match: {&#10;          category: enhancedProduct.category,&#10;          _id: { $ne: enhancedProduct._id },&#10;          status: { $ne: &quot;deleted&quot; },&#10;        },&#10;      },&#10;      {&#10;        $project: {&#10;          _id: 1,&#10;          name: 1,&#10;          price: 1,&#10;          image: 1,&#10;          images: 1,&#10;          category: 1,&#10;          stock: 1,&#10;          farmer: 1,&#10;          isOrganic: 1,&#10;          isFresh: 1,&#10;          averageRating: 1,&#10;        },&#10;      },&#10;      { $limit: 4 },&#10;    ];&#10;&#10;    const relatedProductsResult = await db&#10;      .collection(&quot;products&quot;)&#10;      .aggregate(relatedProductsPipeline)&#10;      .toArray();&#10;&#10;    let relatedProducts = relatedProductsResult.map((p) =&gt; ({&#10;      ...p,&#10;      images: combineProductImages(p),&#10;      farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;      stock: p.stock || 50,&#10;      isOrganic: p.isOrganic || false,&#10;      isFresh: p.isFresh || true,&#10;    }));&#10;&#10;    // Calculate real ratings for related products&#10;    relatedProducts = await enhanceProductsWithRatings(relatedProducts, db);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to combine product images efficiently&#10;function combineProductImages(product) {&#10;  const imageArray = [];&#10;&#10;  if (product.image) {&#10;    imageArray.push(product.image);&#10;  }&#10;&#10;  if (product.images &amp;&amp; Array.isArray(product.images)) {&#10;    imageArray.push(...product.images);&#10;  }&#10;&#10;  return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date();&#10;&#10;    // Validate status if it's being updated&#10;    if (&#10;      updateData.status &amp;&amp;&#10;      ![&quot;active&quot;, &quot;inactive&quot;, &quot;deleted&quot;].includes(updateData.status)&#10;    ) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid status. Must be 'active', 'inactive', or 'deleted'&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    if (result.modifiedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;No changes were made to the product&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot;, message: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let productIndexesInitialized = false;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedCollection = null;&#10;&#10;// Response cache for identical requests (5 minutes)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 5 * 60 * 1000;&#10;&#10;// Export the response cache for access by bulk-update route&#10;export { responseCache };&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeProductIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (productIndexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const collection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await collection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Simplified Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Primary query index - most common pattern&#10;      {&#10;        key: { status: 1, category: 1, createdAt: -1 },&#10;        name: &quot;primary_query_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Search index&#10;      {&#10;        key: { name: &quot;text&quot;, description: &quot;text&quot;, category: &quot;text&quot; },&#10;        name: &quot;products_text_search_idx&quot;,&#10;        options: {&#10;          background: true,&#10;          weights: { name: 10, category: 5, description: 1 },&#10;        },&#10;      },&#10;      // Price and rating filters&#10;      {&#10;        key: { status: 1, price: 1, averageRating: -1 },&#10;        name: &quot;price_rating_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries&#10;      {&#10;        key: { &quot;farmer._id&quot;: 1, status: 1 },&#10;        name: &quot;farmer_status_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await collection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    productIndexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized product indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Product index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clear cache if it gets too large to prevent memory issues&#10;  if (responseCache.size &gt; 50) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      const response = NextResponse.json(cachedResponse);&#10;      // Add cache headers to indicate this is cached data&#10;      response.headers.set(&quot;X-Cache&quot;, &quot;HIT&quot;);&#10;      response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;      return response;&#10;    }&#10;&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : 12; // Default to 12 for pagination&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Simplified filtering parameters&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minPrice&quot;))&#10;      : null;&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;maxPrice&quot;))&#10;      : null;&#10;    const minRating = searchParams.get(&quot;minRating&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minRating&quot;))&#10;      : null;&#10;&#10;    // Reuse database connection and collection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedCollection = cachedDb.collection(&quot;products&quot;);&#10;    }&#10;&#10;    // Initialize indexes only once&#10;    await initializeProductIndexes(cachedDb);&#10;&#10;    // Build optimized query for Atlas&#10;    const query = { status: { $ne: &quot;deleted&quot; } };&#10;&#10;    // For public access (non-farmer requests), exclude inactive products&#10;    // Only farmers should see their inactive products in their dashboard&#10;    if (!farmerId &amp;&amp; !farmerEmail) {&#10;      // This is a public request - exclude inactive products&#10;      query.status = { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] };&#10;    }&#10;&#10;    // Add search filter using text index for better performance&#10;    if (search) {&#10;      query.$text = { $search: search };&#10;    }&#10;&#10;    // Add category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      query.category = { $regex: new RegExp(category, &quot;i&quot;) };&#10;    }&#10;&#10;    // Add featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      query.featured = true;&#10;    }&#10;&#10;    // Add farmer filters for dashboard&#10;    if (farmerId || farmerEmail) {&#10;      query.$or = [];&#10;      if (farmerId) {&#10;        // First, try to get farmer info to match by name for hardcoded farmers&#10;        let farmerName = null;&#10;        let farmerFarmName = null;&#10;&#10;        try {&#10;          // Try to get farmer data to extract name for name-based matching&#10;          const farmersCollection = cachedDb.collection(&quot;farmers&quot;);&#10;          let farmer = null;&#10;&#10;          // Check if it's an ObjectId&#10;          if (farmerId.match(/^[0-9a-fA-F]{24}$/)) {&#10;            farmer = await farmersCollection.findOne({&#10;              _id: new ObjectId(farmerId),&#10;            });&#10;          } else {&#10;            // Check in farmers array for hardcoded farmers&#10;            const farmersDoc = await farmersCollection.findOne({&#10;              &quot;farmers._id&quot;: farmerId,&#10;            });&#10;            if (farmersDoc &amp;&amp; farmersDoc.farmers) {&#10;              farmer = farmersDoc.farmers.find((f) =&gt; f._id === farmerId);&#10;            }&#10;          }&#10;&#10;          if (farmer) {&#10;            farmerName = farmer.name;&#10;            farmerFarmName = farmer.farmName;&#10;          }&#10;        } catch (error) {&#10;          console.log(&quot;Could not fetch farmer for name-based matching:&quot;, error);&#10;        }&#10;&#10;        query.$or.push(&#10;          { farmerId: farmerId },&#10;          { farmerId: { $eq: farmerId } },&#10;          { &quot;farmer.id&quot;: farmerId },&#10;          { &quot;farmer._id&quot;: farmerId },&#10;        );&#10;&#10;        // Add name-based matching for hardcoded farmers&#10;        if (farmerName) {&#10;          query.$or.push(&#10;            { &quot;farmer.name&quot;: farmerName },&#10;            { &quot;farmer.name&quot;: { $regex: new RegExp(`^${farmerName}$`, &quot;i&quot;) } },&#10;          );&#10;        }&#10;        if (farmerFarmName) {&#10;          query.$or.push(&#10;            { &quot;farmer.farmName&quot;: farmerFarmName },&#10;            {&#10;              &quot;farmer.farmName&quot;: {&#10;                $regex: new RegExp(`^${farmerFarmName}$`, &quot;i&quot;),&#10;              },&#10;            },&#10;          );&#10;        }&#10;      }&#10;      if (farmerEmail) {&#10;        query.$or.push(&#10;          { farmerEmail: farmerEmail },&#10;          { &quot;farmer.email&quot;: farmerEmail },&#10;        );&#10;      }&#10;    }&#10;&#10;    // Add price range filter&#10;    if (minPrice !== null || maxPrice !== null) {&#10;      query.price = {};&#10;      if (minPrice !== null) query.price.$gte = minPrice;&#10;      if (maxPrice !== null) query.price.$lte = maxPrice;&#10;    }&#10;&#10;    // Add rating filter&#10;    if (minRating !== null) {&#10;      query.averageRating = { $gte: minRating };&#10;    }&#10;&#10;    // Optimized projection - only select needed fields to reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      name: 1,&#10;      description: 1,&#10;      price: 1,&#10;      stock: 1,&#10;      images: 1,&#10;      category: 1,&#10;      averageRating: 1,&#10;      totalReviews: 1,&#10;      reviews: 1, // Include reviews array for rating calculation&#10;      featured: 1,&#10;      status: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      farmer: 1,&#10;      farmerId: 1,&#10;      farmerEmail: 1,&#10;      farmerName: 1,&#10;      tags: 1,&#10;      isOrganic: 1,&#10;      isFresh: 1,&#10;      purchaseCount: 1,&#10;      unit: 1, // Add unit field for product cards&#10;      // Exclude heavy fields like detailed descriptions, etc.&#10;    };&#10;&#10;    // Build sort options for better Atlas performance&#10;    let sortOptions = {};&#10;    if (search) {&#10;      // Text search score for relevance&#10;      sortOptions = { score: { $meta: &quot;textScore&quot; }, createdAt: -1 };&#10;    } else {&#10;      switch (sortBy) {&#10;        case &quot;price-low&quot;:&#10;          sortOptions = { price: 1 };&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          sortOptions = { price: -1 };&#10;          break;&#10;        case &quot;rating&quot;:&#10;          sortOptions = { averageRating: -1, totalReviews: -1 };&#10;          break;&#10;        case &quot;popular&quot;:&#10;          sortOptions = { purchaseCount: -1, averageRating: -1 };&#10;          break;&#10;        case &quot;oldest&quot;:&#10;          sortOptions = { createdAt: 1 };&#10;          break;&#10;        case &quot;newest&quot;:&#10;        default:&#10;          sortOptions = { createdAt: -1 };&#10;          break;&#10;      }&#10;    }&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: sortOptions },&#10;    ];&#10;&#10;    // Add pagination only if needed&#10;    if (limit &lt; 1000) {&#10;      pipeline.push({ $skip: (page - 1) * limit }, { $limit: limit });&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [products, totalCount] = await Promise.all([&#10;      cachedCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedCollection.countDocuments(query)&#10;        : Promise.resolve(0), // We'll calculate this after products are resolved&#10;    ]);&#10;&#10;    // Calculate actual total count for large datasets&#10;    const actualTotalCount = limit &lt; 1000 ? totalCount : products.length;&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas query executed in ${queryTime}ms for ${products.length} products`,&#10;    );&#10;&#10;    // Enhance with ratings and review counts from the products collection&#10;    const enhancedProducts = await enhanceProductsWithRatings(&#10;      products,&#10;      cachedDb,&#10;    );&#10;&#10;    // Prepare response data&#10;    const responseData = {&#10;      products: enhancedProducts,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: actualTotalCount,&#10;        totalPages: Math.ceil(actualTotalCount / limit),&#10;        hasNext: page * limit &lt; actualTotalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        query: {&#10;          search,&#10;          category,&#10;          featured,&#10;          sortBy,&#10;          minPrice,&#10;          maxPrice,&#10;          minRating,&#10;        },&#10;        performance: {&#10;          queryTime,&#10;          cached: false,&#10;        },&#10;        timestamp: new Date().toISOString(), // Add timestamp for debugging&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, responseData);&#10;&#10;    const response = NextResponse.json(responseData);&#10;&#10;    // Add cache headers&#10;    response.headers.set(&quot;X-Cache&quot;, &quot;MISS&quot;);&#10;    response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;    response.headers.set(&quot;X-Generated-At&quot;, new Date().toISOString());&#10;&#10;    return response;&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch products&quot;,&#10;        message: error.message,&#10;        products: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 12,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;        timestamp: new Date().toISOString(),&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const body = await request.json();&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for the first POST operation&#10;    await initializeProductIndexes(db);&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne({&#10;      ...body,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      status: &quot;active&quot;,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      reviewCount: 0,&#10;      purchaseCount: 0,&#10;    });&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot;, message: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let productIndexesInitialized = false;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedCollection = null;&#10;&#10;// Response cache for identical requests (5 minutes)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 5 * 60 * 1000;&#10;&#10;// Export the response cache for access by bulk-update route&#10;export { responseCache };&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeProductIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (productIndexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const collection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await collection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Simplified Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Primary query index - most common pattern&#10;      {&#10;        key: { status: 1, category: 1, createdAt: -1 },&#10;        name: &quot;primary_query_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Search index&#10;      {&#10;        key: { name: &quot;text&quot;, description: &quot;text&quot;, category: &quot;text&quot; },&#10;        name: &quot;products_text_search_idx&quot;,&#10;        options: {&#10;          background: true,&#10;          weights: { name: 10, category: 5, description: 1 },&#10;        },&#10;      },&#10;      // Price and rating filters&#10;      {&#10;        key: { status: 1, price: 1, averageRating: -1 },&#10;        name: &quot;price_rating_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries&#10;      {&#10;        key: { &quot;farmer._id&quot;: 1, status: 1 },&#10;        name: &quot;farmer_status_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await collection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    productIndexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized product indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Product index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clear cache if it gets too large to prevent memory issues&#10;  if (responseCache.size &gt; 50) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      const response = NextResponse.json(cachedResponse);&#10;      // Add cache headers to indicate this is cached data&#10;      response.headers.set(&quot;X-Cache&quot;, &quot;HIT&quot;);&#10;      response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;      return response;&#10;    }&#10;&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : 12; // Default to 12 for pagination&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Simplified filtering parameters&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minPrice&quot;))&#10;      : null;&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;maxPrice&quot;))&#10;      : null;&#10;    const minRating = searchParams.get(&quot;minRating&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minRating&quot;))&#10;      : null;&#10;&#10;    // Reuse database connection and collection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedCollection = cachedDb.collection(&quot;products&quot;);&#10;    }&#10;&#10;    // Initialize indexes only once&#10;    await initializeProductIndexes(cachedDb);&#10;&#10;    // Build optimized query for Atlas&#10;    const query = { status: { $ne: &quot;deleted&quot; } };&#10;&#10;    // Check if this is a dashboard context request&#10;    const isDashboardContext = searchParams.get('dashboard') === 'true';&#10;&#10;    // For public access (non-farmer requests), exclude inactive products&#10;    // Only farmers should see their inactive products in their dashboard&#10;    if (!farmerId &amp;&amp; !farmerEmail &amp;&amp; !isDashboardContext) {&#10;      // This is a public request - exclude inactive products&#10;      query.status = { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] };&#10;    }&#10;&#10;    // Add search filter using text index for better performance&#10;    if (search) {&#10;      query.$text = { $search: search };&#10;    }&#10;&#10;    // Add category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      query.category = { $regex: new RegExp(category, &quot;i&quot;) };&#10;    }&#10;&#10;    // Add featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      query.featured = true;&#10;    }&#10;&#10;    // Add farmer filters for dashboard&#10;    if (farmerId || farmerEmail) {&#10;      query.$or = [];&#10;      if (farmerId) {&#10;        // First, try to get farmer info to match by name for hardcoded farmers&#10;        let farmerName = null;&#10;        let farmerFarmName = null;&#10;&#10;        try {&#10;          // Try to get farmer data to extract name for name-based matching&#10;          const farmersCollection = cachedDb.collection(&quot;farmers&quot;);&#10;          let farmer = null;&#10;&#10;          // Check if it's an ObjectId&#10;          if (farmerId.match(/^[0-9a-fA-F]{24}$/)) {&#10;            farmer = await farmersCollection.findOne({&#10;              _id: new ObjectId(farmerId),&#10;            });&#10;          } else {&#10;            // Check in farmers array for hardcoded farmers&#10;            const farmersDoc = await farmersCollection.findOne({&#10;              &quot;farmers._id&quot;: farmerId,&#10;            });&#10;            if (farmersDoc &amp;&amp; farmersDoc.farmers) {&#10;              farmer = farmersDoc.farmers.find((f) =&gt; f._id === farmerId);&#10;            }&#10;          }&#10;&#10;          if (farmer) {&#10;            farmerName = farmer.name;&#10;            farmerFarmName = farmer.farmName;&#10;          }&#10;        } catch (error) {&#10;          console.log(&quot;Could not fetch farmer for name-based matching:&quot;, error);&#10;        }&#10;&#10;        query.$or.push(&#10;          { farmerId: farmerId },&#10;          { farmerId: { $eq: farmerId } },&#10;          { &quot;farmer.id&quot;: farmerId },&#10;          { &quot;farmer._id&quot;: farmerId },&#10;        );&#10;&#10;        // Add name-based matching for hardcoded farmers&#10;        if (farmerName) {&#10;          query.$or.push(&#10;            { &quot;farmer.name&quot;: farmerName },&#10;            { &quot;farmer.name&quot;: { $regex: new RegExp(`^${farmerName}$`, &quot;i&quot;) } },&#10;          );&#10;        }&#10;        if (farmerFarmName) {&#10;          query.$or.push(&#10;            { &quot;farmer.farmName&quot;: farmerFarmName },&#10;            {&#10;              &quot;farmer.farmName&quot;: {&#10;                $regex: new RegExp(`^${farmerFarmName}$`, &quot;i&quot;),&#10;              },&#10;            },&#10;          );&#10;        }&#10;      }&#10;      if (farmerEmail) {&#10;        query.$or.push(&#10;          { farmerEmail: farmerEmail },&#10;          { &quot;farmer.email&quot;: farmerEmail },&#10;        );&#10;      }&#10;    }&#10;&#10;    // Add price range filter&#10;    if (minPrice !== null || maxPrice !== null) {&#10;      query.price = {};&#10;      if (minPrice !== null) query.price.$gte = minPrice;&#10;      if (maxPrice !== null) query.price.$lte = maxPrice;&#10;    }&#10;&#10;    // Add rating filter&#10;    if (minRating !== null) {&#10;      query.averageRating = { $gte: minRating };&#10;    }&#10;&#10;    // Optimized projection - only select needed fields to reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      name: 1,&#10;      description: 1,&#10;      price: 1,&#10;      stock: 1,&#10;      images: 1,&#10;      category: 1,&#10;      averageRating: 1,&#10;      totalReviews: 1,&#10;      reviews: 1, // Include reviews array for rating calculation&#10;      featured: 1,&#10;      status: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      farmer: 1,&#10;      farmerId: 1,&#10;      farmerEmail: 1,&#10;      farmerName: 1,&#10;      tags: 1,&#10;      isOrganic: 1,&#10;      isFresh: 1,&#10;      purchaseCount: 1,&#10;      unit: 1, // Add unit field for product cards&#10;      // Exclude heavy fields like detailed descriptions, etc.&#10;    };&#10;&#10;    // Build sort options for better Atlas performance&#10;    let sortOptions = {};&#10;    if (search) {&#10;      // Text search score for relevance&#10;      sortOptions = { score: { $meta: &quot;textScore&quot; }, createdAt: -1 };&#10;    } else {&#10;      switch (sortBy) {&#10;        case &quot;price-low&quot;:&#10;          sortOptions = { price: 1 };&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          sortOptions = { price: -1 };&#10;          break;&#10;        case &quot;rating&quot;:&#10;          sortOptions = { averageRating: -1, totalReviews: -1 };&#10;          break;&#10;        case &quot;popular&quot;:&#10;          sortOptions = { purchaseCount: -1, averageRating: -1 };&#10;          break;&#10;        case &quot;oldest&quot;:&#10;          sortOptions = { createdAt: 1 };&#10;          break;&#10;        case &quot;newest&quot;:&#10;        default:&#10;          sortOptions = { createdAt: -1 };&#10;          break;&#10;      }&#10;    }&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: sortOptions },&#10;    ];&#10;&#10;    // Add pagination only if needed&#10;    if (limit &lt; 1000) {&#10;      pipeline.push({ $skip: (page - 1) * limit }, { $limit: limit });&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [products, totalCount] = await Promise.all([&#10;      cachedCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedCollection.countDocuments(query)&#10;        : Promise.resolve(0), // We'll calculate this after products are resolved&#10;    ]);&#10;&#10;    // Calculate actual total count for large datasets&#10;    const actualTotalCount = limit &lt; 1000 ? totalCount : products.length;&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas query executed in ${queryTime}ms for ${products.length} products`,&#10;    );&#10;&#10;    // Enhance with ratings and review counts from the products collection&#10;    const enhancedProducts = await enhanceProductsWithRatings(&#10;      products,&#10;      cachedDb,&#10;    );&#10;&#10;    // Prepare response data&#10;    const responseData = {&#10;      products: enhancedProducts,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: actualTotalCount,&#10;        totalPages: Math.ceil(actualTotalCount / limit),&#10;        hasNext: page * limit &lt; actualTotalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        query: {&#10;          search,&#10;          category,&#10;          featured,&#10;          sortBy,&#10;          minPrice,&#10;          maxPrice,&#10;          minRating,&#10;        },&#10;        performance: {&#10;          queryTime,&#10;          cached: false,&#10;        },&#10;        timestamp: new Date().toISOString(), // Add timestamp for debugging&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, responseData);&#10;&#10;    const response = NextResponse.json(responseData);&#10;&#10;    // Add cache headers&#10;    response.headers.set(&quot;X-Cache&quot;, &quot;MISS&quot;);&#10;    response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;    response.headers.set(&quot;X-Generated-At&quot;, new Date().toISOString());&#10;&#10;    return response;&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch products&quot;,&#10;        message: error.message,&#10;        products: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 12,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;        timestamp: new Date().toISOString(),&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const body = await request.json();&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for the first POST operation&#10;    await initializeProductIndexes(db);&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne({&#10;      ...body,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      status: &quot;active&quot;,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      reviewCount: 0,&#10;      purchaseCount: 0,&#10;    });&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot;, message: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/farmer-orders/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/farmer-orders/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useRef, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;import { useOrderStatusUpdate } from &quot;@/hooks/useOrderStatusUpdate&quot;;&#10;  const [orders, setOrders] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [filteredOrders, setFilteredOrders] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [viewMode, setViewMode] = useState(&quot;detailed&quot;); // 'detailed', 'compact'&#10;  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  const RETRY_DELAY = 1000; // 1 second&#10;  // Performance optimizations&#10;  const [requestInProgress, setRequestInProgress] = useState(false);&#10;&#10;  const intervalRef = useRef(null);&#10;  // Performance optimizations&#10;  const [requestInProgress, setRequestInProgress] = useState(false);&#10;  const [refreshing, setRefreshing] = useState(false);&#10;&#10;  // Enhanced state for new features&#10;  // Performance optimizations&#10;  const [requestInProgress, setRequestInProgress] = useState(false);&#10;&#10;  const intervalRef = useRef(null);&#10;  const abortControllerRef = useRef(null);&#10;  const cacheRef = useRef(new Map());&#10;&#10;&#10;  const intervalRef = useRef(null);&#10;  const abortControllerRef = useRef(null);&#10;  const cacheRef = useRef(new Map());&#10;&#10;  const abortControllerRef = useRef(null);&#10;  const cacheRef = useRef(new Map());&#10;  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  const RETRY_DELAY = 1000; // 1 second&#10;&#10;    const notification = { id, message, type, timestamp: new Date() };&#10;  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  const RETRY_DELAY = 1000; // 1 second&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  // Enhanced CSV conversion with better data handling&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;  // Enhanced CSV conversion with better data handling&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;      &quot;Customer Email&quot;,&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;    // Apply sorting with improved performance&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;        // Check for new orders for notifications (only if not initial load)&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;  }, [memoizedFilteredOrders]);&#10;    }&#10;  // Auto-refresh functionality with better management&#10;&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;      );&#10;&#10;      // Clear cache to force refresh&#10;  // Optimized search handler&#10;&#10;        results.forEach((result) =&gt; {&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;            successCount++;&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;  // Enhanced refresh with better UX&#10;        // Clear cache to force refresh&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;                  onChange={handleStatusChange}&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;          addNotification(&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;    // Apply sorting with improved performance&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;    // Apply search filter with improved regex&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;                  onChange={handleStatusChange}&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;  }, [memoizedFilteredOrders]);&#10;    }&#10;  // Auto-refresh functionality with better management&#10;&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;            }&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;        ),&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;&#10;      // Clear cache to force refresh&#10;      cacheRef.current.clear();&#10;  // Optimized search handler&#10;        results.forEach((result) =&gt; {&#10;          if (result.status === &quot;fulfilled&quot; &amp;&amp; result.value.success) {&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;&#10;  // Enhanced refresh with better UX&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Optimized bulk operations with better error handling&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;          addNotification(&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;        if (Date.now() - value.timestamp &gt; CACHE_DURATION) {&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;    // Apply search filter with improved regex&#10;  // Enhanced file download with better error handling&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;  // Enhanced CSV conversion with better data handling&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;      &quot;Customer Email&quot;,&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;    // Apply sorting with improved performance&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;    // Apply sorting with improved performance&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;        // Check for new orders for notifications (only if not initial load)&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;  }, [memoizedFilteredOrders]);&#10;    }&#10;  // Auto-refresh functionality with better management&#10;&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;      );&#10;&#10;      // Clear cache to force refresh&#10;  // Optimized search handler&#10;&#10;        results.forEach((result) =&gt; {&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;                  onChange={handleStatusChange}&#10;            successCount++;&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;  // Enhanced refresh with better UX&#10;        // Clear cache to force refresh&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;                  onChange={handleStatusChange}&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;          addNotification(&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;    // Apply search filter with improved regex&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;  }, [memoizedFilteredOrders]);&#10;    }&#10;  // Auto-refresh functionality with better management&#10;&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;            }&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;        ),&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;&#10;      // Clear cache to force refresh&#10;      cacheRef.current.clear();&#10;  // Optimized search handler&#10;        results.forEach((result) =&gt; {&#10;          if (result.status === &quot;fulfilled&quot; &amp;&amp; result.value.success) {&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;&#10;  // Enhanced refresh with better UX&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Optimized bulk operations with better error handling&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;          addNotification(&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;        if (Date.now() - value.timestamp &gt; CACHE_DURATION) {&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;    // Apply search filter with improved regex&#10;  // Enhanced file download with better error handling&#10;  }, []);&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  const setCachedData = useCallback(&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;        timestamp: Date.now(),&#10;      });&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;      &quot;Customer Email&quot;,&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  // Enhanced file download with better error handling&#10;  );&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;    setNotifications((prev) =&gt; [notification, ...prev.slice(0, 4)]);&#10;&#10;    setTimeout(() =&gt; {&#10;      setNotifications((prev) =&gt; prev.filter((n) =&gt; n.id !== id));&#10;    }, 5000);&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;  // Enhanced CSV conversion with better data handling&#10;  );&#10;&#10;  const setCachedData = useCallback(&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;        timestamp: Date.now(),&#10;      });&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;      &quot;Customer Email&quot;,&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  // Enhanced file download with better error handling&#10;  );&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  // Enhanced CSV conversion with better data handling&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  const RETRY_DELAY = 1000; // 1 second&#10;  // Performance optimizations&#10;  const [requestInProgress, setRequestInProgress] = useState(false);&#10;&#10;  const intervalRef = useRef(null);&#10;  const abortControllerRef = useRef(null);&#10;  const cacheRef = useRef(new Map());&#10;&#10;        data,&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;      &quot;Customer Email&quot;,&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;    // Apply sorting with improved performance&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;    // Apply sorting with improved performance&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;        // Check for new orders for notifications (only if not initial load)&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;  }, [memoizedFilteredOrders]);&#10;    }&#10;  // Auto-refresh functionality with better management&#10;&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;      );&#10;&#10;      // Clear cache to force refresh&#10;  // Optimized search handler&#10;&#10;        results.forEach((result) =&gt; {&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;            successCount++;&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;  // Enhanced refresh with better UX&#10;        // Clear cache to force refresh&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;                  onChange={handleStatusChange}&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;          addNotification(&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;    // Apply search filter with improved regex&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;  }, [memoizedFilteredOrders]);&#10;    }&#10;  // Auto-refresh functionality with better management&#10;&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;            }&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;        ),&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;&#10;      // Clear cache to force refresh&#10;      cacheRef.current.clear();&#10;  // Optimized search handler&#10;        results.forEach((result) =&gt; {&#10;          if (result.status === &quot;fulfilled&quot; &amp;&amp; result.value.success) {&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;&#10;  // Enhanced refresh with better UX&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Optimized bulk operations with better error handling&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;          addNotification(&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;        if (Date.now() - value.timestamp &gt; CACHE_DURATION) {&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;    // Apply search filter with improved regex&#10;  // Enhanced file download with better error handling&#10;  }, []);&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  const setCachedData = useCallback(&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;        timestamp: Date.now(),&#10;      });&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;      &quot;Customer Email&quot;,&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  // Enhanced file download with better error handling&#10;  );&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  const debouncedSearch = useMemo(&#10;    () =&gt;&#10;      debounce((searchValue) =&gt; {&#10;        setSearchTerm(searchValue);&#10;      }, 300),&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;  // Enhanced CSV conversion with better data handling&#10;  );&#10;&#10;  const setCachedData = useCallback(&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;        timestamp: Date.now(),&#10;      });&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;      &quot;Customer Email&quot;,&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  // Enhanced file download with better error handling&#10;  );&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  // Enhanced CSV conversion with better data handling&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;    // Apply sorting with improved performance&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;        // Check for new orders for notifications (only if not initial load)&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;                  onChange={handleStatusChange}&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;  }, [memoizedFilteredOrders]);&#10;    }&#10;  // Auto-refresh functionality with better management&#10;&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;            }&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;        ),&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;&#10;      // Clear cache to force refresh&#10;      cacheRef.current.clear();&#10;  // Optimized search handler&#10;        results.forEach((result) =&gt; {&#10;          if (result.status === &quot;fulfilled&quot; &amp;&amp; result.value.success) {&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;&#10;  // Enhanced refresh with better UX&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Optimized bulk operations with better error handling&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;          addNotification(&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;        if (Date.now() - value.timestamp &gt; CACHE_DURATION) {&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;    // Apply search filter with improved regex&#10;  // Enhanced file download with better error handling&#10;  const downloadFile = useCallback(&#10;    (content, filename, mimeType) =&gt; {&#10;      try {&#10;        const blob = new Blob([content], { type: mimeType });&#10;        const url = URL.createObjectURL(blob);&#10;        const link = document.createElement(&quot;a&quot;);&#10;        link.href = url;&#10;        link.download = filename;&#10;        link.style.display = &quot;none&quot;;&#10;        document.body.appendChild(link);&#10;        link.click();&#10;        document.body.removeChild(link);&#10;        URL.revokeObjectURL(url);&#10;      } catch (error) {&#10;        console.error(&quot;Download error:&quot;, error);&#10;        addNotification(&quot;Failed to download file&quot;, &quot;error&quot;);&#10;      }&#10;    },&#10;    [addNotification],&#10;  );&#10;&#10;  // Enhanced CSV conversion with better data handling&#10;  const convertToCSV = useCallback((data) =&gt; {&#10;    const headers = [&#10;      &quot;Order ID&quot;,&#10;      &quot;Customer Name&quot;,&#10;      &quot;Customer Email&quot;,&#10;      &quot;Status&quot;,&#10;      &quot;Total Amount&quot;,&#10;      &quot;Order Date&quot;,&#10;      &quot;Items Count&quot;,&#10;      &quot;Payment Method&quot;,&#10;      &quot;Delivery Address&quot;,&#10;    ];&#10;&#10;    const csvData = data.map((order) =&gt; [&#10;      order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;,&#10;      (order.customerName || order.userName || &quot;&quot;).replace(/,/g, &quot;;&quot;),&#10;      order.customerEmail || order.userEmail || &quot;&quot;,&#10;      order.status || &quot;pending&quot;,&#10;      order.farmerSubtotal || order.total || 0,&#10;      new Date(order.createdAt).toLocaleDateString(),&#10;      order.items?.length || 0,&#10;      (order.paymentMethod || &quot;Cash on Delivery&quot;).replace(/,/g, &quot;;&quot;),&#10;      typeof order.deliveryAddress === &quot;object&quot;&#10;        ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`.replace(&#10;            /,/g,&#10;            &quot;;&quot;,&#10;          )&#10;        : (order.deliveryAddress || &quot;Not provided&quot;).replace(/,/g, &quot;;&quot;),&#10;    ]);&#10;&#10;    return [headers, ...csvData]&#10;      .map((row) =&gt; row.map((field) =&gt; `&quot;${field}&quot;`).join(&quot;,&quot;))&#10;      .join(&quot;\n&quot;);&#10;  }, []);&#10;&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;          throw error;&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;        // Check for new orders for notifications (only if not initial load)&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;        if (retryAttempt &lt; MAX_RETRY_ATTEMPTS) {&#10;          addNotification(&#10;            `Retrying to fetch orders... (${retryAttempt + 1}/${MAX_RETRY_ATTEMPTS})`,&#10;            &quot;warning&quot;,&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;    let filtered = [...orders];&#10;&#10;    // Apply status filter&#10;    if (statusFilter !== &quot;All Orders&quot;) {&#10;      filtered = filtered.filter(&#10;        (order) =&gt; order.status?.toLowerCase() === statusFilter.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    // Apply search filter with improved regex&#10;    if (searchTerm.trim()) {&#10;      const searchRegex = new RegExp(&#10;        searchTerm.trim().replace(/[.*+?^${}()|[\]\\]/g, &quot;\\$&amp;&quot;),&#10;        &quot;i&quot;,&#10;      );&#10;      filtered = filtered.filter((order) =&gt; {&#10;        const orderItemsMatch = order.items?.some(&#10;          (item) =&gt;&#10;            searchRegex.test(item.name) ||&#10;            searchRegex.test(item.productName) ||&#10;            searchRegex.test(item.category),&#10;        );&#10;        const customerMatch =&#10;          searchRegex.test(order.customerName) ||&#10;          searchRegex.test(order.customerEmail) ||&#10;          searchRegex.test(order.userEmail);&#10;        const orderIdMatch = searchRegex.test(order._id);&#10;&#10;        return orderItemsMatch || customerMatch || orderIdMatch;&#10;      });&#10;    }&#10;&#10;    // Apply date range filter&#10;    if (dateRange.start) {&#10;      const startDate = new Date(dateRange.start);&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &gt;= startDate,&#10;      );&#10;    }&#10;    if (dateRange.end) {&#10;      const endDate = new Date(dateRange.end);&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &lt;= endDate,&#10;      );&#10;    }&#10;&#10;    // Apply sorting with improved performance&#10;    filtered.sort((a, b) =&gt; {&#10;      switch (sortBy) {&#10;        case &quot;newest&quot;:&#10;          return new Date(b.createdAt) - new Date(a.createdAt);&#10;        case &quot;oldest&quot;:&#10;          return new Date(a.createdAt) - new Date(b.createdAt);&#10;        case &quot;highest-value&quot;:&#10;          return (&#10;            (b.farmerSubtotal || b.total || 0) -&#10;            (a.farmerSubtotal || a.total || 0)&#10;          );&#10;        case &quot;lowest-value&quot;:&#10;          return (&#10;            (a.farmerSubtotal || a.total || 0) -&#10;            (b.farmerSubtotal || b.total || 0)&#10;          );&#10;        case &quot;customer-name&quot;:&#10;          return (a.customerName || a.userName || &quot;&quot;).localeCompare(&#10;            b.customerName || b.userName || &quot;&quot;,&#10;          );&#10;        default:&#10;          return 0;&#10;      }&#10;    });&#10;&#10;    return filtered;&#10;  }, [orders, statusFilter, searchTerm, dateRange, sortBy]);&#10;&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;      fetchOrdersWithRetry();&#10;    }&#10;  }, [session?.user]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Update filtered orders when memoized value changes&#10;  useEffect(() =&gt; {&#10;    setFilteredOrders(memoizedFilteredOrders);&#10;    setCurrentPage(1);&#10;  }, [memoizedFilteredOrders]);&#10;&#10;  // Auto-refresh functionality with better management&#10;  useEffect(() =&gt; {&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;        intervalRef.current = null;&#10;      }&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Optimized bulk operations with better error handling&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;            }&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;        results.forEach((result) =&gt; {&#10;          if (result.status === &quot;fulfilled&quot; &amp;&amp; result.value.success) {&#10;            successCount++;&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;&#10;        // Clear cache to force refresh&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;&#10;  // Enhanced single order status update using the hook&#10;  const handleUpdateOrderStatus = async (orderId, newStatus) =&gt; {&#10;    const statusMessages = {&#10;      confirmed:&#10;        &quot;confirm this order? This will notify the customer that their order has been accepted.&quot;,&#10;      shipped:&#10;        &quot;mark this order as shipped? This will notify the customer that their order is on the way.&quot;,&#10;      delivered:&#10;                  onChange={handleStatusChange}&#10;      cancelled:&#10;        &quot;cancel this order? This action cannot be undone and will notify the customer.&quot;,&#10;    };&#10;&#10;    const confirmMessage =&#10;      statusMessages[newStatus] || `mark this order as ${newStatus}?`;&#10;&#10;    if (!confirm(`Are you sure you want to ${confirmMessage}`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      // Use the hook for updating status with real-time broadcasting&#10;      const result = await updateOrderStatus(orderId, newStatus, {&#10;        estimatedDeliveryDate:&#10;          newStatus === &quot;shipped&quot;&#10;            ? (() =&gt; {&#10;                const date = new Date();&#10;                date.setDate(date.getDate() + 3);&#10;                return date.toISOString();&#10;              })()&#10;            : undefined,&#10;      });&#10;&#10;      // Optimistic update of local state&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  result.order?.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: result.order?.statusHistory || [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  {&#10;                    status: newStatus,&#10;                    timestamp: new Date().toISOString(),&#10;                    updatedBy: session.user.email || session.user.name,&#10;                  },&#10;                ],&#10;              }&#10;            : order,&#10;        ),&#10;      );&#10;&#10;      // Clear cache to force refresh&#10;      cacheRef.current.clear();&#10;&#10;      const successMessages = {&#10;        confirmed: &quot;Order confirmed! Dashboard updated automatically.&quot;,&#10;        shipped: &quot;Order marked as shipped! Dashboard updated automatically.&quot;,&#10;        delivered: &quot;Order completed! Dashboard updated automatically.&quot;,&#10;        cancelled: &quot;Order cancelled! Dashboard updated automatically.&quot;,&#10;      };&#10;&#10;      addNotification(&#10;        successMessages[newStatus] ||&#10;          `Order status updated to ${newStatus} successfully! Dashboard updated automatically.`,&#10;        &quot;success&quot;,&#10;      );&#10;    } catch (error) {&#10;      console.error(&quot;Error updating order status:&quot;, error);&#10;      addNotification(&#10;        `Failed to update order status: ${error.message}`,&#10;        &quot;error&quot;,&#10;      );&#10;    }&#10;  };&#10;&#10;  // Enhanced refresh with better UX&#10;  const handleRefresh = async () =&gt; {&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;    addNotification(&quot;Orders refreshed successfully!&quot;, &quot;success&quot;);&#10;  };&#10;&#10;  // Optimized search handler&#10;  const handleSearchChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    debouncedSearch(value);&#10;  };&#10;&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;  const exportOrders = useCallback(&#10;    (format) =&gt; {&#10;      const dataToExport =&#10;        selectedOrders.length &gt; 0&#10;          ? filteredOrders.filter((order) =&gt; selectedOrders.includes(order._id))&#10;          : filteredOrders;&#10;&#10;      try {&#10;        if (format === &quot;csv&quot;) {&#10;          const csv = convertToCSV(dataToExport);&#10;          downloadFile(&#10;            csv,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.csv`,&#10;            &quot;text/csv&quot;,&#10;          );&#10;        } else if (format === &quot;json&quot;) {&#10;          const json = JSON.stringify(dataToExport, null, 2);&#10;          downloadFile(&#10;            json,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.json`,&#10;            &quot;application/json&quot;,&#10;          );&#10;        }&#10;&#10;        addNotification(&#10;          `${dataToExport.length} orders exported successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } catch (error) {&#10;        console.error(&quot;Export error:&quot;, error);&#10;        addNotification(&quot;Failed to export orders&quot;, &quot;error&quot;);&#10;      } finally {&#10;        setShowExportModal(false);&#10;      }&#10;    },&#10;    [&#10;      filteredOrders,&#10;      selectedOrders,&#10;      convertToCSV,&#10;      downloadFile,&#10;      addNotification,&#10;    ],&#10;  );&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status) =&gt; {&#10;    const statusConfig = {&#10;      pending: {&#10;        bg: &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;      },&#10;      confirmed: {&#10;        bg: &quot;bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;,&#10;        icon: &quot;fas fa-check&quot;,&#10;      },&#10;      shipped: {&#10;        bg: &quot;bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;,&#10;        icon: &quot;fas fa-truck&quot;,&#10;      },&#10;      delivered: {&#10;        bg: &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;        icon: &quot;fas fa-check-circle&quot;,&#10;      },&#10;      cancelled: {&#10;        bg: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;      },&#10;    };&#10;&#10;    const config = statusConfig[status?.toLowerCase()] || statusConfig.pending;&#10;&#10;    return (&#10;      &lt;span&#10;        className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.bg}`}&#10;      &gt;&#10;        &lt;i className={`${config.icon} mr-1`}&gt;&lt;/i&gt;&#10;        {status?.charAt(0).toUpperCase() + status?.slice(1) || &quot;Pending&quot;}&#10;      &lt;/span&gt;&#10;    );&#10;  };&#10;&#10;  const getOrderActions = (order) =&gt; {&#10;    const actions = [];&#10;&#10;    switch (order.status.toLowerCase()) {&#10;      case &quot;pending&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;confirm&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;confirmed&quot;)}&#10;            className=&quot;bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;            Confirm Order&#10;          &lt;/button&gt;,&#10;        );&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;cancel&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;cancelled&quot;)}&#10;            className=&quot;bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;            Cancel Order&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;confirmed&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;ship&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;shipped&quot;)}&#10;            className=&quot;bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Shipped&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;shipped&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;deliver&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;delivered&quot;)}&#10;            className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Delivered&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;    }&#10;&#10;    return actions;&#10;  };&#10;&#10;  // Pagination&#10;  const indexOfLastOrder = currentPage * ordersPerPage;&#10;  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;&#10;  const currentOrders = filteredOrders.slice(&#10;    indexOfFirstOrder,&#10;    indexOfLastOrder,&#10;  );&#10;  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);&#10;&#10;  const getOrderSummary = () =&gt; {&#10;    const summary = {&#10;      total: orders.length,&#10;      pending: orders.filter((o) =&gt; o.status === &quot;pending&quot;).length,&#10;      confirmed: orders.filter((o) =&gt; o.status === &quot;confirmed&quot;).length,&#10;      shipped: orders.filter((o) =&gt; o.status === &quot;shipped&quot;).length,&#10;      delivered: orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length,&#10;      cancelled: orders.filter((o) =&gt; o.status === &quot;cancelled&quot;).length,&#10;    };&#10;    return summary;&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;            Loading your enhanced orders dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const orderSummary = getOrderSummary();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Notification System */}&#10;      &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-2&quot;&gt;&#10;        {notifications.map((notification) =&gt; (&#10;          &lt;div&#10;            key={notification.id}&#10;            className={`px-6 py-4 rounded-lg shadow-lg text-white transform transition-all duration-500 ${&#10;              notification.type === &quot;success&quot;&#10;                ? &quot;bg-green-600&quot;&#10;                : notification.type === &quot;error&quot;&#10;                  ? &quot;bg-red-600&quot;&#10;                  : notification.type === &quot;warning&quot;&#10;                    ? &quot;bg-yellow-600&quot;&#10;                    : &quot;bg-blue-600&quot;&#10;            }`}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i&#10;                className={`fas ${&#10;                  notification.type === &quot;success&quot;&#10;                    ? &quot;fa-check-circle&quot;&#10;                    : notification.type === &quot;error&quot;&#10;                      ? &quot;fa-exclamation-circle&quot;&#10;                      : notification.type === &quot;warning&quot;&#10;                        ? &quot;fa-exclamation-triangle&quot;&#10;                        : &quot;fa-info-circle&quot;&#10;                } mr-2`}&#10;              &gt;&lt;/i&gt;&#10;              {notification.message}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Export Modal */}&#10;      {showExportModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md w-full mx-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Export Orders&#10;            &lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;              {selectedOrders.length &gt; 0&#10;                ? `Export ${selectedOrders.length} selected orders`&#10;                : `Export all ${filteredOrders.length} filtered orders`}&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;csv&quot;)}&#10;                className=&quot;flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-csv mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as CSV&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;json&quot;)}&#10;                className=&quot;flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-code mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as JSON&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowExportModal(false)}&#10;              className=&quot;w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg font-medium transition&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        {/* Enhanced Breadcrumb with Real-time Indicators */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-cog mr-1&quot;&gt;&lt;/i&gt;Manage&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-gray-900 dark:text-white font-medium&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-1&quot;&gt;&lt;/i&gt;Advanced Order&#10;                  Management&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Real-time Status Indicator */}&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div&#10;                className={`w-3 h-3 rounded-full ${autoRefresh ? &quot;bg-green-500 animate-pulse&quot; : &quot;bg-gray-400&quot;}`}&#10;              &gt;&lt;/div&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                {autoRefresh ? &quot;Live&quot; : &quot;Static&quot;}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Page Header with Quick Actions */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-blue-600 p-4 rounded-2xl&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Advanced Order Management&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                  Comprehensive order tracking and analytics dashboard&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4 mt-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                    Last updated: {new Date().toLocaleTimeString()}&#10;                  &lt;/span&gt;&#10;                  {autoRefresh &amp;&amp; (&#10;                    &lt;span className=&quot;bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                      Auto-refresh enabled&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6 lg:mt-0 flex flex-wrap gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setAutoRefresh(!autoRefresh)}&#10;                className={`inline-flex items-center px-4 py-3 rounded-lg font-medium transition ${&#10;                  autoRefresh&#10;                    ? &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                    : &quot;bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas ${autoRefresh ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                &gt;&lt;/i&gt;&#10;                {autoRefresh ? &quot;Pause&quot; : &quot;Auto&quot;} Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; setShowExportModal(true)}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;                Export&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={handleRefresh}&#10;                disabled={refreshing}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;animate-spin&quot; : &quot;&quot;}`}&#10;                &gt;&lt;/i&gt;&#10;                Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;inline-flex items-center px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Back to Manage&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Order Summary Cards with Animations */}&#10;          &lt;div className=&quot;grid grid-cols-2 md:grid-cols-6 gap-4 mb-8&quot;&gt;&#10;            {Object.entries(orderSummary).map(([key, value], index) =&gt; {&#10;              const config = {&#10;                total: {&#10;                  icon: &quot;fa-shopping-cart&quot;,&#10;                  color: &quot;gray&quot;,&#10;                  label: &quot;Total&quot;,&#10;                },&#10;                pending: {&#10;                  icon: &quot;fa-clock&quot;,&#10;                  color: &quot;yellow&quot;,&#10;                  label: &quot;Pending&quot;,&#10;                },&#10;                confirmed: {&#10;                  icon: &quot;fa-check&quot;,&#10;                  color: &quot;blue&quot;,&#10;                  label: &quot;Confirmed&quot;,&#10;                },&#10;                shipped: {&#10;                  icon: &quot;fa-truck&quot;,&#10;                  color: &quot;purple&quot;,&#10;                  label: &quot;Shipped&quot;,&#10;                },&#10;                delivered: {&#10;                  icon: &quot;fa-check-circle&quot;,&#10;                  color: &quot;green&quot;,&#10;                  label: &quot;Delivered&quot;,&#10;                },&#10;                cancelled: {&#10;                  icon: &quot;fa-times-circle&quot;,&#10;                  color: &quot;red&quot;,&#10;                  label: &quot;Cancelled&quot;,&#10;                },&#10;              }[key];&#10;&#10;              return (&#10;                &lt;div&#10;                  key={key}&#10;                  className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 transform hover:scale-105 transition-transform duration-200 cursor-pointer&quot;&#10;                  onClick={() =&gt;&#10;                    setStatusFilter(&#10;                      key === &quot;total&quot;&#10;                        ? &quot;All Orders&quot;&#10;                        : config.label.toLowerCase(),&#10;                    )&#10;                  }&#10;                  style={{ animationDelay: `${index * 100}ms` }}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div&#10;                      className={`p-2 bg-${config.color}-100 dark:bg-${config.color}-900 rounded-lg`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${config.icon} text-${config.color}-600 dark:text-${config.color}-300`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;ml-3&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {config.label}&#10;                      &lt;/p&gt;&#10;                      &lt;p&#10;                        className={`text-2xl font-bold text-${config.color}-600 dark:text-${config.color}-400`}&#10;                      &gt;&#10;                        {value}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Filters and Controls */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6&quot;&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4 lg:mb-0&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Advanced Filters &amp; Controls&#10;              &lt;/h3&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex space-x-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#10;                {[&quot;detailed&quot;, &quot;compact&quot;].map((mode) =&gt; (&#10;                  &lt;button&#10;                    key={mode}&#10;                    onClick={() =&gt; setViewMode(mode)}&#10;                    className={`px-4 py-2 rounded-md text-sm font-medium transition ${&#10;                      viewMode === mode&#10;                        ? &quot;bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow&quot;&#10;                        : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white&quot;&#10;                    }`}&#10;                  &gt;&#10;                    &lt;i&#10;                      className={`fas ${&#10;                        mode === &quot;detailed&quot;&#10;                          ? &quot;fa-list&quot;&#10;                          : mode === &quot;compact&quot;&#10;                            ? &quot;fa-th-list&quot;&#10;                            : &quot;&quot;&#10;                      } mr-1`}&#10;                    &gt;&lt;/i&gt;&#10;                    {mode.charAt(0).toUpperCase() + mode.slice(1)}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4&quot;&gt;&#10;              {/* Search */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Search Orders&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search by customer, email, or ID...&quot;&#10;                    value={searchTerm}&#10;                    onChange={handleSearchChange}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                  &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Status Filter */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Status Filter&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={statusFilter}&#10;                  onChange={handleStatusChange}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;All Orders&quot;&gt;All Orders&lt;/option&gt;&#10;                  &lt;option value=&quot;pending&quot;&gt;Pending&lt;/option&gt;&#10;                  &lt;option value=&quot;confirmed&quot;&gt;Confirmed&lt;/option&gt;&#10;                  &lt;option value=&quot;shipped&quot;&gt;Shipped&lt;/option&gt;&#10;                  &lt;option value=&quot;delivered&quot;&gt;Delivered&lt;/option&gt;&#10;                  &lt;option value=&quot;cancelled&quot;&gt;Cancelled&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Sort By */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Sort By&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={sortBy}&#10;                  onChange={(e) =&gt; setSortBy(e.target.value)}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                  &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                  &lt;option value=&quot;highest-value&quot;&gt;Highest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;lowest-value&quot;&gt;Lowest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;customer-name&quot;&gt;Customer Name&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Date Range */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date From&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.start}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, start: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date To&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.end}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, end: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Clear Filters */}&#10;              &lt;div className=&quot;flex items-end&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Bulk Operations */}&#10;            {selectedOrders.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center&quot;&gt;&#10;                  &lt;div className=&quot;mb-3 sm:mb-0&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                      {selectedOrders.length} order(s) selected&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                      Choose a bulk action to apply to selected orders&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;confirmed&quot;)}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Confirm All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;shipped&quot;)}&#10;                      className=&quot;bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;                      Ship All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setSelectedOrders([])}&#10;                      className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                      Clear Selection&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Orders List - Enhanced with different view modes */}&#10;          {currentOrders.length === 0 ? (&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-12 text-center&quot;&gt;&#10;              &lt;div className=&quot;max-w-md mx-auto&quot;&gt;&#10;                &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                  No orders found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                  {statusFilter === &quot;All Orders&quot;&#10;                    ? &quot;You haven't received any orders yet, or no orders match your current filters.&quot;&#10;                    : `No ${statusFilter.toLowerCase()} orders found matching your criteria.`}&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  Clear All Filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className={`space-y-${viewMode === &quot;compact&quot; ? &quot;3&quot; : &quot;6&quot;}`}&gt;&#10;              {/* Select All Checkbox */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;label className=&quot;flex items-center&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={selectedOrders.length === currentOrders.length}&#10;                    onChange={(e) =&gt; {&#10;                      if (e.target.checked) {&#10;                        setSelectedOrders(&#10;                          currentOrders.map((order) =&gt; order._id),&#10;                        );&#10;                      } else {&#10;                        setSelectedOrders([]);&#10;                      }&#10;                    }}&#10;                    className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                  /&gt;&#10;                  &lt;span className=&quot;ml-2 text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Select all visible orders ({currentOrders.length})&#10;                  &lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders */}&#10;              {currentOrders.map((order) =&gt; (&#10;                &lt;div&#10;                  key={order._id}&#10;                  className={`bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden transform hover:scale-[1.01] transition-all duration-200 ${&#10;                    selectedOrders.includes(order._id)&#10;                      ? &quot;ring-2 ring-green-500&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div className={`p-${viewMode === &quot;compact&quot; ? &quot;4&quot; : &quot;6&quot;}`}&gt;&#10;                    {/* Order Header with Checkbox */}&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedOrders.includes(order._id)}&#10;                          onChange={(e) =&gt; {&#10;                            if (e.target.checked) {&#10;                              setSelectedOrders((prev) =&gt; [...prev, order._id]);&#10;                            } else {&#10;                              setSelectedOrders((prev) =&gt;&#10;                                prev.filter((id) =&gt; id !== order._id),&#10;                              );&#10;                            }&#10;                          }}&#10;                          className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                        /&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3&#10;                            className={`${viewMode === &quot;compact&quot; ? &quot;text-base&quot; : &quot;text-lg&quot;} font-semibold text-gray-900 dark:text-white`}&#10;                          &gt;&#10;                            Order #&#10;                            {order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;}&#10;                          &lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Placed on {formatDate(order.createdAt)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        {getStatusBadge(order.status)}&#10;                        &lt;span className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice(&#10;                            order.farmerSubtotal || order.total || 0,&#10;                          )}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Information */}&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Customer Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Name:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerName || order.userName || &quot;Customer&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Email:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerEmail ||&#10;                              order.userEmail ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Phone:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerPhone ||&#10;                              order.userPhone ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Delivery Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Address:&lt;/span&gt;{&quot; &quot;}&#10;                            {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress&#10;                              ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`&#10;                                  .replace(/^,\s*/, &quot;&quot;)&#10;                                  .replace(/,\s*$/, &quot;&quot;) || &quot;Not provided&quot;&#10;                              : order.deliveryAddress || &quot;Not provided&quot;}&#10;                          &lt;/p&gt;&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.name &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Recipient:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.name}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.phone &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Contact:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.phone}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.instructions &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  Instructions:&#10;                                &lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.instructions}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Payment Method:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.paymentMethod || &quot;Cash on Delivery&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Order Items */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-6 mb-6&quot;&gt;&#10;                      &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                        Order Items ({order.items?.length || 0})&#10;                      &lt;/h4&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {order.items?.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;flex items-center justify-between py-3 px-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                              &lt;img&#10;                                src={&#10;                                  item.image ||&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                                }&#10;                                alt={item.name || item.productName}&#10;                                className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                              /&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.name || item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Quantity: {item.quantity} {item.unit || &quot;kg&quot;}&#10;                                &lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Unit Price: {formatPrice(item.price)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                              &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                {formatPrice(item.price * item.quantity)}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Action Buttons */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4&quot;&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                        {getOrderActions(order)}&#10;                        &lt;Link&#10;                          href={`/farmer-orders/${order._id}`}&#10;                          className=&quot;bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                          View Details&#10;                        &lt;/Link&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pagination */}&#10;          {totalPages &gt; 1 &amp;&amp; (&#10;            &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#10;              &lt;nav aria-label=&quot;Pagination&quot;&gt;&#10;                &lt;ul className=&quot;inline-flex items-center -space-x-px text-gray-600 dark:text-gray-300&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                      }&#10;                      disabled={currentPage === 1}&#10;                      className=&quot;block px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                  {[...Array(totalPages)].map((_, index) =&gt; (&#10;                    &lt;li key={index}&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(index + 1)}&#10;                        className={`px-3 py-2 leading-tight border ${&#10;                          currentPage === index + 1&#10;                            ? &quot;text-white bg-green-600 border-green-600 hover:bg-green-700&quot;&#10;                            : &quot;text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {index + 1}&#10;                      &lt;/button&gt;&#10;                    &lt;/li&gt;&#10;                  ))}&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.min(prev + 1, totalPages))&#10;                      }&#10;                      disabled={currentPage === totalPages}&#10;                      className=&quot;block px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ul&gt;&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;import { useOrderStatusUpdate } from &quot;@/hooks/useOrderStatusUpdate&quot;;&#10;import { useFarmerOrders } from &quot;@/hooks/useFarmerOrders&quot;;&#10;&#10;export default function FarmerOrders() {&#10;  const { data: session, status } = useSession();&#10;  const { updateOrderStatus, updating } = useOrderStatusUpdate();&#10;  &#10;  // Use React Query hook for orders data&#10;  const {&#10;    orders,&#10;    isLoading: loading,&#10;    error,&#10;    isRefetching: refreshing,&#10;    refetch: refetchOrders,&#10;    refreshOrders,&#10;  } = useFarmerOrders();&#10;&#10;  // Local UI state&#10;  const [statusFilter, setStatusFilter] = useState(&quot;All Orders&quot;);&#10;  const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [selectedOrders, setSelectedOrders] = useState([]);&#10;  const [viewMode, setViewMode] = useState(&quot;detailed&quot;);&#10;  const [sortBy, setSortBy] = useState(&quot;newest&quot;);&#10;  const [dateRange, setDateRange] = useState({ start: &quot;&quot;, end: &quot;&quot; });&#10;  const [showExportModal, setShowExportModal] = useState(false);&#10;  const [notifications, setNotifications] = useState([]);&#10;  const [autoRefresh, setAutoRefresh] = useState(false);&#10;&#10;  const ordersPerPage = viewMode === &quot;compact&quot; ? 20 : 10;&#10;&#10;  // Enhanced notification system&#10;  const addNotification = useCallback((message, type = &quot;info&quot;) =&gt; {&#10;    const id = Date.now() + Math.random();&#10;    const notification = { id, message, type, timestamp: new Date() };&#10;&#10;    setNotifications((prev) =&gt; [notification, ...prev.slice(0, 4)]);&#10;&#10;    setTimeout(() =&gt; {&#10;      setNotifications((prev) =&gt; prev.filter((n) =&gt; n.id !== id));&#10;    }, 5000);&#10;  }, []);&#10;&#10;  // Optimized debounced search&#10;  const debouncedSearch = useMemo(&#10;    () =&gt;&#10;      debounce((searchValue) =&gt; {&#10;        setSearchTerm(searchValue);&#10;      }, 300),&#10;    [],&#10;  );&#10;&#10;  // Enhanced file download&#10;  const downloadFile = useCallback(&#10;    (content, filename, mimeType) =&gt; {&#10;      try {&#10;        const blob = new Blob([content], { type: mimeType });&#10;        const url = URL.createObjectURL(blob);&#10;        const link = document.createElement(&quot;a&quot;);&#10;        link.href = url;&#10;        link.download = filename;&#10;        link.style.display = &quot;none&quot;;&#10;        document.body.appendChild(link);&#10;        link.click();&#10;        document.body.removeChild(link);&#10;        URL.revokeObjectURL(url);&#10;      } catch (error) {&#10;        console.error(&quot;Download error:&quot;, error);&#10;        addNotification(&quot;Failed to download file&quot;, &quot;error&quot;);&#10;      }&#10;    },&#10;    [addNotification],&#10;  );&#10;&#10;  // Enhanced CSV conversion&#10;  const convertToCSV = useCallback((data) =&gt; {&#10;    const headers = [&#10;      &quot;Order ID&quot;,&#10;      &quot;Customer Name&quot;,&#10;      &quot;Customer Email&quot;, &#10;      &quot;Status&quot;,&#10;      &quot;Total Amount&quot;,&#10;      &quot;Order Date&quot;,&#10;      &quot;Items Count&quot;,&#10;      &quot;Payment Method&quot;,&#10;      &quot;Delivery Address&quot;,&#10;    ];&#10;&#10;    const csvData = data.map((order) =&gt; [&#10;      order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;,&#10;      (order.customerName || order.userName || &quot;&quot;).replace(/,/g, &quot;;&quot;),&#10;      order.customerEmail || order.userEmail || &quot;&quot;,&#10;      order.status || &quot;pending&quot;,&#10;      order.farmerSubtotal || order.total || 0,&#10;      new Date(order.createdAt).toLocaleDateString(),&#10;      order.items?.length || 0,&#10;      (order.paymentMethod || &quot;Cash on Delivery&quot;).replace(/,/g, &quot;;&quot;),&#10;      typeof order.deliveryAddress === &quot;object&quot;&#10;        ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`.replace(&#10;            /,/g,&#10;            &quot;;&quot;,&#10;          )&#10;        : (order.deliveryAddress || &quot;Not provided&quot;).replace(/,/g, &quot;;&quot;),&#10;    ]);&#10;&#10;    return [headers, ...csvData]&#10;      .map((row) =&gt; row.map((field) =&gt; `&quot;${field}&quot;`).join(&quot;,&quot;))&#10;      .join(&quot;\n&quot;);&#10;  }, []);&#10;&#10;  // Memoized filtered orders&#10;  const filteredOrders = useMemo(() =&gt; {&#10;    let filtered = [...orders];&#10;&#10;    // Apply status filter&#10;    if (statusFilter !== &quot;All Orders&quot;) {&#10;      filtered = filtered.filter(&#10;        (order) =&gt; order.status?.toLowerCase() === statusFilter.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    // Apply search filter&#10;    if (searchTerm.trim()) {&#10;      const searchRegex = new RegExp(&#10;        searchTerm.trim().replace(/[.*+?^${}()|[\]\\]/g, &quot;\\$&amp;&quot;),&#10;        &quot;i&quot;,&#10;      );&#10;      filtered = filtered.filter((order) =&gt; {&#10;        const orderItemsMatch = order.items?.some(&#10;          (item) =&gt;&#10;            searchRegex.test(item.name) ||&#10;            searchRegex.test(item.productName) ||&#10;            searchRegex.test(item.category),&#10;        );&#10;        const customerMatch =&#10;          searchRegex.test(order.customerName) ||&#10;          searchRegex.test(order.customerEmail) ||&#10;          searchRegex.test(order.userEmail);&#10;        const orderIdMatch = searchRegex.test(order._id);&#10;&#10;        return orderItemsMatch || customerMatch || orderIdMatch;&#10;      });&#10;    }&#10;&#10;    // Apply date range filter&#10;    if (dateRange.start) {&#10;      const startDate = new Date(dateRange.start);&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &gt;= startDate,&#10;      );&#10;    }&#10;    if (dateRange.end) {&#10;      const endDate = new Date(dateRange.end);&#10;      endDate.setHours(23, 59, 59, 999);&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &lt;= endDate,&#10;      );&#10;    }&#10;&#10;    // Apply sorting&#10;    filtered.sort((a, b) =&gt; {&#10;      switch (sortBy) {&#10;        case &quot;newest&quot;:&#10;          return new Date(b.createdAt) - new Date(a.createdAt);&#10;        case &quot;oldest&quot;:&#10;          return new Date(a.createdAt) - new Date(b.createdAt);&#10;        case &quot;highest-value&quot;:&#10;          return (&#10;            (b.farmerSubtotal || b.total || 0) -&#10;            (a.farmerSubtotal || a.total || 0)&#10;          );&#10;        case &quot;lowest-value&quot;:&#10;          return (&#10;            (a.farmerSubtotal || a.total || 0) -&#10;            (b.farmerSubtotal || b.total || 0)&#10;          );&#10;        case &quot;customer-name&quot;:&#10;          return (a.customerName || a.userName || &quot;&quot;).localeCompare(&#10;            b.customerName || b.userName || &quot;&quot;,&#10;          );&#10;        default:&#10;          return 0;&#10;      }&#10;    });&#10;&#10;    return filtered;&#10;  }, [orders, statusFilter, searchTerm, dateRange, sortBy]);&#10;&#10;  // Reset page when filters change&#10;  useEffect(() =&gt; {&#10;    setCurrentPage(1);&#10;  }, [filteredOrders]);&#10;&#10;  // Auto-refresh functionality&#10;  useEffect(() =&gt; {&#10;    if (!autoRefresh) return;&#10;&#10;    const interval = setInterval(() =&gt; {&#10;      refreshOrders();&#10;    }, 30000); // 30 seconds&#10;&#10;    return () =&gt; clearInterval(interval);&#10;  }, [autoRefresh, refreshOrders]);&#10;&#10;  // Enhanced single order status update using the hook&#10;  const handleUpdateOrderStatus = async (orderId, newStatus) =&gt; {&#10;    const statusMessages = {&#10;      confirmed:&#10;        &quot;confirm this order? This will notify the customer that their order has been accepted.&quot;,&#10;      shipped:&#10;        &quot;mark this order as shipped? This will notify the customer that their order is on the way.&quot;,&#10;      delivered:&#10;        &quot;mark this order as delivered? This will complete the order and notify the customer.&quot;,&#10;      cancelled:&#10;        &quot;cancel this order? This action cannot be undone and will notify the customer.&quot;,&#10;    };&#10;&#10;    const confirmMessage =&#10;      statusMessages[newStatus] || `mark this order as ${newStatus}?`;&#10;&#10;    if (!confirm(`Are you sure you want to ${confirmMessage}`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      await updateOrderStatus(orderId, newStatus, {&#10;        estimatedDeliveryDate:&#10;          newStatus === &quot;shipped&quot;&#10;            ? (() =&gt; {&#10;                const date = new Date();&#10;                date.setDate(date.getDate() + 3);&#10;                return date.toISOString();&#10;              })()&#10;            : undefined,&#10;      });&#10;&#10;      const successMessages = {&#10;        confirmed: &quot;Order confirmed! Dashboard updated automatically.&quot;,&#10;        shipped: &quot;Order marked as shipped! Dashboard updated automatically.&quot;,&#10;        delivered: &quot;Order completed! Dashboard updated automatically.&quot;,&#10;        cancelled: &quot;Order cancelled! Dashboard updated automatically.&quot;,&#10;      };&#10;&#10;      addNotification(&#10;        successMessages[newStatus] ||&#10;          `Order status updated to ${newStatus} successfully! Dashboard updated automatically.`,&#10;        &quot;success&quot;,&#10;      );&#10;    } catch (error) {&#10;      console.error(&quot;Error updating order status:&quot;, error);&#10;      addNotification(&#10;        `Failed to update order status: ${error.message}`,&#10;        &quot;error&quot;,&#10;      );&#10;    }&#10;  };&#10;&#10;  // Enhanced refresh handler&#10;  const handleRefresh = async () =&gt; {&#10;    await refetchOrders();&#10;    addNotification(&quot;Orders refreshed successfully!&quot;, &quot;success&quot;);&#10;  };&#10;&#10;  // Search handler&#10;  const handleSearchChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    debouncedSearch(value);&#10;  };&#10;&#10;  // Export functionality&#10;  const exportOrders = useCallback(&#10;    (format) =&gt; {&#10;      const dataToExport =&#10;        selectedOrders.length &gt; 0&#10;          ? filteredOrders.filter((order) =&gt; selectedOrders.includes(order._id))&#10;          : filteredOrders;&#10;&#10;      try {&#10;        if (format === &quot;csv&quot;) {&#10;          const csv = convertToCSV(dataToExport);&#10;          downloadFile(&#10;            csv,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.csv`,&#10;            &quot;text/csv&quot;,&#10;          );&#10;        } else if (format === &quot;json&quot;) {&#10;          const json = JSON.stringify(dataToExport, null, 2);&#10;          downloadFile(&#10;            json,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.json`,&#10;            &quot;application/json&quot;,&#10;          );&#10;        }&#10;&#10;        addNotification(&#10;          `${dataToExport.length} orders exported successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } catch (error) {&#10;        console.error(&quot;Export error:&quot;, error);&#10;        addNotification(&quot;Failed to export orders&quot;, &quot;error&quot;);&#10;      } finally {&#10;        setShowExportModal(false);&#10;      }&#10;    },&#10;    [&#10;      filteredOrders,&#10;      selectedOrders,&#10;      convertToCSV,&#10;      downloadFile,&#10;      addNotification,&#10;    ],&#10;  );&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status) =&gt; {&#10;    const statusConfig = {&#10;      pending: {&#10;        bg: &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;      },&#10;      confirmed: {&#10;        bg: &quot;bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;,&#10;        icon: &quot;fas fa-check&quot;,&#10;      },&#10;      shipped: {&#10;        bg: &quot;bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;,&#10;        icon: &quot;fas fa-truck&quot;,&#10;      },&#10;      delivered: {&#10;        bg: &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;        icon: &quot;fas fa-check-circle&quot;,&#10;      },&#10;      cancelled: {&#10;        bg: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;      },&#10;    };&#10;&#10;    const config = statusConfig[status?.toLowerCase()] || statusConfig.pending;&#10;&#10;    return (&#10;      &lt;span&#10;        className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.bg}`}&#10;      &gt;&#10;        &lt;i className={`${config.icon} mr-1`}&gt;&lt;/i&gt;&#10;        {status?.charAt(0).toUpperCase() + status?.slice(1) || &quot;Pending&quot;}&#10;      &lt;/span&gt;&#10;    );&#10;  };&#10;&#10;  const getOrderActions = (order) =&gt; {&#10;    const actions = [];&#10;&#10;    switch (order.status.toLowerCase()) {&#10;      case &quot;pending&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;confirm&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;confirmed&quot;)}&#10;            className=&quot;bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;            Confirm Order&#10;          &lt;/button&gt;,&#10;        );&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;cancel&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;cancelled&quot;)}&#10;            className=&quot;bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;            Cancel Order&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;confirmed&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;ship&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;shipped&quot;)}&#10;            className=&quot;bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Shipped&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;shipped&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;deliver&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;delivered&quot;)}&#10;            className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Delivered&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;    }&#10;&#10;    return actions;&#10;  };&#10;&#10;  // Pagination&#10;  const indexOfLastOrder = currentPage * ordersPerPage;&#10;  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;&#10;  const currentOrders = filteredOrders.slice(&#10;    indexOfFirstOrder,&#10;    indexOfLastOrder,&#10;  );&#10;  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);&#10;&#10;  const getOrderSummary = () =&gt; {&#10;    const summary = {&#10;      total: orders.length,&#10;      pending: orders.filter((o) =&gt; o.status === &quot;pending&quot;).length,&#10;      confirmed: orders.filter((o) =&gt; o.status === &quot;confirmed&quot;).length,&#10;      shipped: orders.filter((o) =&gt; o.status === &quot;shipped&quot;).length,&#10;      delivered: orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length,&#10;      cancelled: orders.filter((o) =&gt; o.status === &quot;cancelled&quot;).length,&#10;    };&#10;    return summary;&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;            Loading your enhanced orders dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const orderSummary = getOrderSummary();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Notification System */}&#10;      &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-2&quot;&gt;&#10;        {notifications.map((notification) =&gt; (&#10;          &lt;div&#10;            key={notification.id}&#10;            className={`px-6 py-4 rounded-lg shadow-lg text-white transform transition-all duration-500 ${&#10;              notification.type === &quot;success&quot;&#10;                ? &quot;bg-green-600&quot;&#10;                : notification.type === &quot;error&quot;&#10;                  ? &quot;bg-red-600&quot;&#10;                  : notification.type === &quot;warning&quot;&#10;                    ? &quot;bg-yellow-600&quot;&#10;                    : &quot;bg-blue-600&quot;&#10;            }`}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i&#10;                className={`fas ${&#10;                  notification.type === &quot;success&quot;&#10;                    ? &quot;fa-check-circle&quot;&#10;                    : notification.type === &quot;error&quot;&#10;                      ? &quot;fa-exclamation-circle&quot;&#10;                      : notification.type === &quot;warning&quot;&#10;                        ? &quot;fa-exclamation-triangle&quot;&#10;                        : &quot;fa-info-circle&quot;&#10;                } mr-2`}&#10;              &gt;&lt;/i&gt;&#10;              {notification.message}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Export Modal */}&#10;      {showExportModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md w-full mx-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Export Orders&#10;            &lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;              {selectedOrders.length &gt; 0&#10;                ? `Export ${selectedOrders.length} selected orders`&#10;                : `Export all ${filteredOrders.length} filtered orders`}&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;csv&quot;)}&#10;                className=&quot;flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-csv mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as CSV&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;json&quot;)}&#10;                className=&quot;flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-code mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as JSON&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowExportModal(false)}&#10;              className=&quot;w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg font-medium transition&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        {/* Enhanced Breadcrumb with Real-time Indicators */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-cog mr-1&quot;&gt;&lt;/i&gt;Manage&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-gray-900 dark:text-white font-medium&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-1&quot;&gt;&lt;/i&gt;Advanced Order&#10;                  Management&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Real-time Status Indicator */}&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div&#10;                className={`w-3 h-3 rounded-full ${autoRefresh ? &quot;bg-green-500 animate-pulse&quot; : &quot;bg-gray-400&quot;}`}&#10;              &gt;&lt;/div&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                {autoRefresh ? &quot;Live&quot; : &quot;Static&quot;}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Page Header with Quick Actions */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-blue-600 p-4 rounded-2xl&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Advanced Order Management&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                  Comprehensive order tracking and analytics dashboard&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4 mt-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                    Last updated: {new Date().toLocaleTimeString()}&#10;                  &lt;/span&gt;&#10;                  {autoRefresh &amp;&amp; (&#10;                    &lt;span className=&quot;bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                      Auto-refresh enabled&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6 lg:mt-0 flex flex-wrap gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setAutoRefresh(!autoRefresh)}&#10;                className={`inline-flex items-center px-4 py-3 rounded-lg font-medium transition ${&#10;                  autoRefresh&#10;                    ? &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                    : &quot;bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas ${autoRefresh ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                &gt;&lt;/i&gt;&#10;                {autoRefresh ? &quot;Pause&quot; : &quot;Auto&quot;} Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; setShowExportModal(true)}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;                Export&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={handleRefresh}&#10;                disabled={refreshing}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;animate-spin&quot; : &quot;&quot;}`}&#10;                &gt;&lt;/i&gt;&#10;                Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;inline-flex items-center px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Back to Manage&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Order Summary Cards with Animations */}&#10;          &lt;div className=&quot;grid grid-cols-2 md:grid-cols-6 gap-4 mb-8&quot;&gt;&#10;            {Object.entries(orderSummary).map(([key, value], index) =&gt; {&#10;              const config = {&#10;                total: {&#10;                  icon: &quot;fa-shopping-cart&quot;,&#10;                  color: &quot;gray&quot;,&#10;                  label: &quot;Total&quot;,&#10;                },&#10;                pending: {&#10;                  icon: &quot;fa-clock&quot;,&#10;                  color: &quot;yellow&quot;,&#10;                  label: &quot;Pending&quot;,&#10;                },&#10;                confirmed: {&#10;                  icon: &quot;fa-check&quot;,&#10;                  color: &quot;blue&quot;,&#10;                  label: &quot;Confirmed&quot;,&#10;                },&#10;                shipped: {&#10;                  icon: &quot;fa-truck&quot;,&#10;                  color: &quot;purple&quot;,&#10;                  label: &quot;Shipped&quot;,&#10;                },&#10;                delivered: {&#10;                  icon: &quot;fa-check-circle&quot;,&#10;                  color: &quot;green&quot;,&#10;                  label: &quot;Delivered&quot;,&#10;                },&#10;                cancelled: {&#10;                  icon: &quot;fa-times-circle&quot;,&#10;                  color: &quot;red&quot;,&#10;                  label: &quot;Cancelled&quot;,&#10;                },&#10;              }[key];&#10;&#10;              return (&#10;                &lt;div&#10;                  key={key}&#10;                  className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 transform hover:scale-105 transition-transform duration-200 cursor-pointer&quot;&#10;                  onClick={() =&gt;&#10;                    setStatusFilter(&#10;                      key === &quot;total&quot;&#10;                        ? &quot;All Orders&quot;&#10;                        : config.label.toLowerCase(),&#10;                    )&#10;                  }&#10;                  style={{ animationDelay: `${index * 100}ms` }}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div&#10;                      className={`p-2 bg-${config.color}-100 dark:bg-${config.color}-900 rounded-lg`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${config.icon} text-${config.color}-600 dark:text-${config.color}-300`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;ml-3&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {config.label}&#10;                      &lt;/p&gt;&#10;                      &lt;p&#10;                        className={`text-2xl font-bold text-${config.color}-600 dark:text-${config.color}-400`}&#10;                      &gt;&#10;                        {value}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Filters and Controls */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6&quot;&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4 lg:mb-0&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Advanced Filters &amp; Controls&#10;              &lt;/h3&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex space-x-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#10;                {[&quot;detailed&quot;, &quot;compact&quot;].map((mode) =&gt; (&#10;                  &lt;button&#10;                    key={mode}&#10;                    onClick={() =&gt; setViewMode(mode)}&#10;                    className={`px-4 py-2 rounded-md text-sm font-medium transition ${&#10;                      viewMode === mode&#10;                        ? &quot;bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow&quot;&#10;                        : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white&quot;&#10;                    }`}&#10;                  &gt;&#10;                    &lt;i&#10;                      className={`fas ${&#10;                        mode === &quot;detailed&quot;&#10;                          ? &quot;fa-list&quot;&#10;                          : mode === &quot;compact&quot;&#10;                            ? &quot;fa-th-list&quot;&#10;                            : &quot;&quot;&#10;                      } mr-1`}&#10;                    &gt;&lt;/i&gt;&#10;                    {mode.charAt(0).toUpperCase() + mode.slice(1)}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4&quot;&gt;&#10;              {/* Search */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Search Orders&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search by customer, email, or ID...&quot;&#10;                    value={searchTerm}&#10;                    onChange={handleSearchChange}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                  &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Status Filter */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Status Filter&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={statusFilter}&#10;                  onChange={(e) =&gt; setStatusFilter(e.target.value)}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;All Orders&quot;&gt;All Orders&lt;/option&gt;&#10;                  &lt;option value=&quot;pending&quot;&gt;Pending&lt;/option&gt;&#10;                  &lt;option value=&quot;confirmed&quot;&gt;Confirmed&lt;/option&gt;&#10;                  &lt;option value=&quot;shipped&quot;&gt;Shipped&lt;/option&gt;&#10;                  &lt;option value=&quot;delivered&quot;&gt;Delivered&lt;/option&gt;&#10;                  &lt;option value=&quot;cancelled&quot;&gt;Cancelled&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Sort By */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Sort By&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={sortBy}&#10;                  onChange={(e) =&gt; setSortBy(e.target.value)}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                  &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                  &lt;option value=&quot;highest-value&quot;&gt;Highest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;lowest-value&quot;&gt;Lowest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;customer-name&quot;&gt;Customer Name&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Date Range */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date From&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.start}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, start: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date To&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.end}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, end: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Clear Filters */}&#10;              &lt;div className=&quot;flex items-end&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Bulk Operations */}&#10;            {selectedOrders.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center&quot;&gt;&#10;                  &lt;div className=&quot;mb-3 sm:mb-0&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                      {selectedOrders.length} order(s) selected&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                      Choose a bulk action to apply to selected orders&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;confirmed&quot;)}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Confirm All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;shipped&quot;)}&#10;                      className=&quot;bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;                      Ship All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setSelectedOrders([])}&#10;                      className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                      Clear Selection&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Orders List - Enhanced with different view modes */}&#10;          {currentOrders.length === 0 ? (&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-12 text-center&quot;&gt;&#10;              &lt;div className=&quot;max-w-md mx-auto&quot;&gt;&#10;                &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                  No orders found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                  {statusFilter === &quot;All Orders&quot;&#10;                    ? &quot;You haven't received any orders yet, or no orders match your current filters.&quot;&#10;                    : `No ${statusFilter.toLowerCase()} orders found matching your criteria.`}&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  Clear All Filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className={`space-y-${viewMode === &quot;compact&quot; ? &quot;3&quot; : &quot;6&quot;}`}&gt;&#10;              {/* Select All Checkbox */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;label className=&quot;flex items-center&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={selectedOrders.length === currentOrders.length}&#10;                    onChange={(e) =&gt; {&#10;                      if (e.target.checked) {&#10;                        setSelectedOrders(&#10;                          currentOrders.map((order) =&gt; order._id),&#10;                        );&#10;                      } else {&#10;                        setSelectedOrders([]);&#10;                      }&#10;                    }}&#10;                    className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                  /&gt;&#10;                  &lt;span className=&quot;ml-2 text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Select all visible orders ({currentOrders.length})&#10;                  &lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders */}&#10;              {currentOrders.map((order) =&gt; (&#10;                &lt;div&#10;                  key={order._id}&#10;                  className={`bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden transform hover:scale-[1.01] transition-all duration-200 ${&#10;                    selectedOrders.includes(order._id)&#10;                      ? &quot;ring-2 ring-green-500&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div className={`p-${viewMode === &quot;compact&quot; ? &quot;4&quot; : &quot;6&quot;}`}&gt;&#10;                    {/* Order Header with Checkbox */}&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedOrders.includes(order._id)}&#10;                          onChange={(e) =&gt; {&#10;                            if (e.target.checked) {&#10;                              setSelectedOrders((prev) =&gt; [...prev, order._id]);&#10;                            } else {&#10;                              setSelectedOrders((prev) =&gt;&#10;                                prev.filter((id) =&gt; id !== order._id),&#10;                              );&#10;                            }&#10;                          }}&#10;                          className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                        /&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3&#10;                            className={`${viewMode === &quot;compact&quot; ? &quot;text-base&quot; : &quot;text-lg&quot;} font-semibold text-gray-900 dark:text-white`}&#10;                          &gt;&#10;                            Order #&#10;                            {order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;}&#10;                          &lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Placed on {formatDate(order.createdAt)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        {getStatusBadge(order.status)}&#10;                        &lt;span className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice(&#10;                            order.farmerSubtotal || order.total || 0,&#10;                          )}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Information */}&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Customer Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Name:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerName || order.userName || &quot;Customer&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Email:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerEmail ||&#10;                              order.userEmail ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Phone:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerPhone ||&#10;                              order.userPhone ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Delivery Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Address:&lt;/span&gt;{&quot; &quot;}&#10;                            {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress&#10;                              ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`&#10;                                  .replace(/^,\s*/, &quot;&quot;)&#10;                                  .replace(/,\s*$/, &quot;&quot;) || &quot;Not provided&quot;&#10;                              : order.deliveryAddress || &quot;Not provided&quot;}&#10;                          &lt;/p&gt;&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.name &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Recipient:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.name}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.phone &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Contact:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.phone}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.instructions &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  Instructions:&#10;                                &lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.instructions}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Payment Method:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.paymentMethod || &quot;Cash on Delivery&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Order Items */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-6 mb-6&quot;&gt;&#10;                      &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                        Order Items ({order.items?.length || 0})&#10;                      &lt;/h4&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {order.items?.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;flex items-center justify-between py-3 px-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                              &lt;img&#10;                                src={&#10;                                  item.image ||&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                                }&#10;                                alt={item.name || item.productName}&#10;                                className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                              /&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.name || item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Quantity: {item.quantity} {item.unit || &quot;kg&quot;}&#10;                                &lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Unit Price: {formatPrice(item.price)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                              &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                {formatPrice(item.price * item.quantity)}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Action Buttons */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4&quot;&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                        {getOrderActions(order)}&#10;                        &lt;Link&#10;                          href={`/farmer-orders/${order._id}`}&#10;                          className=&quot;bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                          View Details&#10;                        &lt;/Link&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pagination */}&#10;          {totalPages &gt; 1 &amp;&amp; (&#10;            &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#10;              &lt;nav aria-label=&quot;Pagination&quot;&gt;&#10;                &lt;ul className=&quot;inline-flex items-center -space-x-px text-gray-600 dark:text-gray-300&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                      }&#10;                      disabled={currentPage === 1}&#10;                      className=&quot;block px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                  {[...Array(totalPages)].map((_, index) =&gt; (&#10;                    &lt;li key={index}&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(index + 1)}&#10;                        className={`px-3 py-2 leading-tight border ${&#10;                          currentPage === index + 1&#10;                            ? &quot;text-white bg-green-600 border-green-600 hover:bg-green-700&quot;&#10;                            : &quot;text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {index + 1}&#10;                      &lt;/button&gt;&#10;                    &lt;/li&gt;&#10;                  ))}&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.min(prev + 1, totalPages))&#10;                      }&#10;                      disabled={currentPage === totalPages}&#10;                      className=&quot;block px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ul&gt;&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/farmers/[id]/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/farmers/[id]/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;&#10;export default function FarmerPage() {&#10;  const router = useRouter();&#10;  const params = useParams();&#10;  const farmerId = params.id;&#10;&#10;  const [farmer, setFarmer] = useState(null);&#10;  const [products, setProducts] = useState([]);&#10;  const [reviews, setReviews] = useState([]);&#10;  const [stats, setStats] = useState({});&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;  const [activeTab, setActiveTab] = useState(&quot;story&quot;);&#10;&#10;  // Helper function to calculate years of experience (used only once)&#10;  const calculateYearsOfExperience = (joinedDate, createdAt) =&gt; {&#10;    const joinDate = new Date(joinedDate || createdAt);&#10;    const currentDate = new Date();&#10;    return Math.max(1, currentDate.getFullYear() - joinDate.getFullYear());&#10;  };&#10;&#10;  // Configuration objects to reduce repetition&#10;  const specializationConfig = {&#10;    Grains: {&#10;      icon: &quot;fas fa-seedling&quot;,&#10;      color: &quot;bg-amber-500&quot;,&#10;      description: &quot;Premium grain production&quot;,&#10;    },&#10;    Fruits: {&#10;      icon: &quot;fas fa-apple-alt&quot;,&#10;      color: &quot;bg-red-500&quot;,&#10;      description: &quot;Fresh seasonal fruits&quot;,&#10;    },&#10;    Vegetables: {&#10;      icon: &quot;fas fa-carrot&quot;,&#10;      color: &quot;bg-orange-500&quot;,&#10;      description: &quot;Organic vegetables&quot;,&#10;    },&#10;    Herbs: {&#10;      icon: &quot;fas fa-leaf&quot;,&#10;      color: &quot;bg-green-500&quot;,&#10;      description: &quot;Natural herbs &amp; spices&quot;,&#10;    },&#10;    Honey: {&#10;      icon: &quot;fas fa-bug&quot;,&#10;      color: &quot;bg-yellow-500&quot;,&#10;      description: &quot;Pure natural honey&quot;,&#10;    },&#10;    Dairy: {&#10;      icon: &quot;fas fa-glass-whiskey&quot;,&#10;      color: &quot;bg-blue-500&quot;,&#10;      description: &quot;Fresh dairy products&quot;,&#10;    },&#10;  };&#10;&#10;  const methodConfig = {&#10;    Organic: {&#10;      icon: &quot;fas fa-leaf&quot;,&#10;      color: &quot;text-green-600 dark:text-green-400&quot;,&#10;      description: &quot;Chemical-free farming practices&quot;,&#10;    },&#10;    Traditional: {&#10;      icon: &quot;fas fa-seedling&quot;,&#10;      color: &quot;text-brown-600 dark:text-yellow-400&quot;,&#10;      description: &quot;Time-tested farming wisdom&quot;,&#10;    },&#10;    Sustainable: {&#10;      icon: &quot;fas fa-recycle&quot;,&#10;      color: &quot;text-blue-600 dark:text-blue-400&quot;,&#10;      description: &quot;Environmentally conscious methods&quot;,&#10;    },&#10;    &quot;Natural Ripening&quot;: {&#10;      icon: &quot;fas fa-sun&quot;,&#10;      color: &quot;text-orange-600 dark:text-orange-400&quot;,&#10;      description: &quot;Natural maturation process&quot;,&#10;    },&#10;    &quot;Fruit Cultivation&quot;: {&#10;      icon: &quot;fas fa-apple-alt&quot;,&#10;      color: &quot;text-red-600 dark:text-red-400&quot;,&#10;      description: &quot;Specialized fruit growing&quot;,&#10;    },&#10;    &quot;Sun-dried&quot;: {&#10;      icon: &quot;fas fa-sun&quot;,&#10;      color: &quot;text-yellow-600 dark:text-yellow-400&quot;,&#10;      description: &quot;Solar-powered processing&quot;,&#10;    },&#10;  };&#10;&#10;  const ORDER_STATUS = {&#10;    PENDING: &quot;pending&quot;,&#10;    CONFIRMED: &quot;confirmed&quot;,&#10;    DELIVERED: &quot;delivered&quot;,&#10;    CANCELLED: &quot;cancelled&quot;,&#10;    RETURNED: &quot;returned&quot;,&#10;  };&#10;&#10;  // Helper function to render specialization cards&#10;  const renderSpecializationCard = (specialization, index) =&gt; {&#10;    const config = specializationConfig[specialization] || {&#10;      icon: &quot;fas fa-tractor&quot;,&#10;      color: &quot;bg-purple-500&quot;,&#10;      description: &quot;Farm specialization&quot;,&#10;    };&#10;&#10;    return (&#10;      &lt;div key={index} className=&quot;text-center&quot;&gt;&#10;        &lt;div&#10;          className={`w-12 h-12 ${config.color} rounded-full flex items-center justify-center mx-auto mb-3`}&#10;        &gt;&#10;          &lt;i className={`${config.icon} text-white`}&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;{specialization}&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;{config.description}&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Helper function to render farming method cards&#10;  const renderMethodCard = (method, index) =&gt; {&#10;    const config = methodConfig[method] || {&#10;      icon: &quot;fas fa-tractor&quot;,&#10;      color: &quot;text-gray-600 dark:text-gray-400&quot;,&#10;      description: &quot;Specialized farming technique&quot;,&#10;    };&#10;&#10;    return (&#10;      &lt;div&#10;        key={index}&#10;        className=&quot;bg-gray-50 dark:bg-gray-700 p-6 rounded-xl text-center&quot;&#10;      &gt;&#10;        &lt;i className={`${config.icon} text-4xl ${config.color} mb-4`}&gt;&lt;/i&gt;&#10;        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;          {method}&#10;        &lt;/h4&gt;&#10;        &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;          {config.description}&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Helper function to render generic fallback core values&#10;  const renderFallbackCoreValues = () =&gt; (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-3&quot;&gt;&#10;          &lt;i className=&quot;fas fa-leaf text-white&quot;&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;Sustainable&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Eco-friendly farming practices&lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-3&quot;&gt;&#10;          &lt;i className=&quot;fas fa-shield-alt text-white&quot;&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;Quality&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Premium fresh produce&lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-3&quot;&gt;&#10;          &lt;i className=&quot;fas fa-users text-white&quot;&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;Community&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Supporting local families&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    fetchFarmerData();&#10;  }, [farmerId]);&#10;&#10;  const fetchFarmerData = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setError(null);&#10;&#10;      // First fetch farmer data&#10;      const farmerResponse = await fetch(`/api/farmers/${farmerId}`, {&#10;        headers: { &quot;Cache-Control&quot;: &quot;no-cache&quot; },&#10;      });&#10;&#10;      if (!farmerResponse.ok) {&#10;        throw new Error(&quot;Farmer not found&quot;);&#10;      }&#10;&#10;      const farmerData = await farmerResponse.json();&#10;&#10;      // Now fetch products and orders with farmer information&#10;      const [ordersResponse] = await Promise.all([&#10;        fetch(&#10;          `/api/orders?farmerId=${farmerId}&amp;farmerEmail=${farmerData.farmer?.email || &quot;&quot;}`,&#10;          {&#10;            headers: { &quot;Cache-Control&quot;: &quot;no-cache&quot; },&#10;          },&#10;        ),&#10;      ]);&#10;&#10;      const ordersData = await ordersResponse.json();&#10;&#10;      setFarmer(farmerData.farmer);&#10;      setProducts(farmerData.farmer.products || []); // Use products from farmer data&#10;&#10;      // Use the stats already calculated by the API instead of recalculating&#10;      const farmerProducts = farmerData.farmer.products || [];&#10;      const totalProducts = farmerProducts.length;&#10;      const activeProducts = farmerProducts.filter((p) =&gt; p.stock &gt; 0).length;&#10;      const totalStock = farmerProducts.reduce(&#10;        (sum, p) =&gt; sum + (p.stock || 0),&#10;        0,&#10;      );&#10;      const averagePrice =&#10;        farmerProducts.length &gt; 0&#10;          ? (&#10;              farmerProducts.reduce((sum, p) =&gt; sum + (p.price || 0), 0) /&#10;              farmerProducts.length&#10;            ).toFixed(2)&#10;          : 0;&#10;      const averageRating =&#10;        farmerProducts.length &gt; 0&#10;          ? (&#10;              farmerProducts.reduce(&#10;                (sum, p) =&gt; sum + (p.averageRating || 0),&#10;                0,&#10;              ) / farmerProducts.length&#10;            ).toFixed(1)&#10;          : 0;&#10;&#10;      // Get categories from products&#10;      const categories = [&#10;        ...new Set(farmerProducts.map((p) =&gt; p.category).filter(Boolean)),&#10;      ];&#10;&#10;      // Get recent reviews from products&#10;      const allReviews = farmerProducts&#10;        .flatMap((p) =&gt;&#10;          (p.reviews || []).map((review) =&gt; ({&#10;            ...review,&#10;            productName: p.name,&#10;            productId: p._id,&#10;          })),&#10;        )&#10;        .sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt))&#10;        .slice(0, 5);&#10;&#10;      // Calculate revenue from orders&#10;      const farmerOrders = (ordersData.orders || []).filter((order) =&gt; {&#10;        return (&#10;          order.items &amp;&amp;&#10;          order.items.some(&#10;            (item) =&gt;&#10;              item.farmerId === farmerId ||&#10;              item.farmer?.id === farmerId ||&#10;              item.farmer?._id === farmerId ||&#10;              item.farmerEmail === farmerData.farmer?.email,&#10;          )&#10;        );&#10;      });&#10;&#10;      // Use exact same filtering logic as dashboard&#10;      const validOrders = farmerOrders.filter(&#10;        (order) =&gt;&#10;          order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;          order.status !== ORDER_STATUS.RETURNED,&#10;      );&#10;&#10;      // Calculate total revenue using the same method as dashboard analytics&#10;      const actualTotalRevenue = validOrders.reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;      // Calculate monthly revenue using the same method as dashboard&#10;      const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt);&#10;        const currentDate = new Date();&#10;        return (&#10;          orderDate.getMonth() === currentDate.getMonth() &amp;&amp;&#10;          orderDate.getFullYear() === currentDate.getFullYear()&#10;        );&#10;      });&#10;&#10;      const monthlyRevenue = thisMonthValidOrders.reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;      setReviews(allReviews);&#10;      setStats({&#10;        totalProducts,&#10;        activeProducts,&#10;        totalStock,&#10;        averagePrice,&#10;        averageRating,&#10;        categories,&#10;        totalReviews: allReviews.length,&#10;        familiesServed: Math.floor(totalProducts * 50 + Math.random() * 200),&#10;        farmSize: farmerData.farmer.farmSize || 0,&#10;        farmSizeUnit: farmerData.farmer.farmSizeUnit || &quot;acres&quot;,&#10;        yearsOfExperience:&#10;          farmerData.farmer.yearsOfExperience ||&#10;          calculateYearsOfExperience(&#10;            farmerData.farmer.joinedDate,&#10;            farmerData.farmer.createdAt,&#10;          ),&#10;        certificationStatus: farmerData.farmer.isCertified&#10;          ? &quot;Certified&quot;&#10;          : &quot;In Progress&quot;,&#10;        farmingMethods: farmerData.farmer.farmingMethods || [&#10;          &quot;Organic&quot;,&#10;          &quot;Sustainable&quot;,&#10;        ],&#10;        monthlyRevenue: monthlyRevenue.toFixed(2),&#10;        totalRevenue: actualTotalRevenue.toFixed(2),&#10;        inventoryValue: (parseFloat(averagePrice) * totalStock).toFixed(2),&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching farmer data:&quot;, error);&#10;      setError(error.message);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;relative&quot;&gt;&#10;              &lt;div className=&quot;animate-spin rounded-full h-20 w-20 border-4 border-green-200 dark:border-gray-600 border-t-green-600 dark:border-t-green-400 mx-auto mb-6&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-user-tie text-green-600 dark:text-green-400 text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;              Loading Farmer Profile&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;              Discovering their story...&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error || !farmer) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;          &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;            &lt;div className=&quot;text-red-500 text-6xl mb-6&quot;&gt;&#10;              &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Farmer Not Found&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;              {error ||&#10;                &quot;The farmer you're looking for doesn't exist or has been removed.&quot;}&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-center&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; router.back()}&#10;                className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Go Back&#10;              &lt;/button&gt;&#10;              &lt;Link&#10;                href=&quot;/farmers&quot;&#10;                className=&quot;bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-users mr-2&quot;&gt;&lt;/i&gt;&#10;                Browse Farmers&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        {/* Hero Section with Dynamic Farmer Story */}&#10;        &lt;div className=&quot;relative overflow-hidden&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-600 via-emerald-600 to-teal-600&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-black/20&quot;&gt;&lt;/div&gt;&#10;&#10;          &lt;div className=&quot;relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20&quot;&gt;&#10;            {/* Breadcrumb */}&#10;            &lt;nav className=&quot;flex mb-8&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/&quot;&#10;                    className=&quot;text-white/80 hover:text-white transition-colors flex items-center&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;&#10;                    Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-white/60 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/farmers&quot;&#10;                    className=&quot;text-white/80 hover:text-white transition-colors&quot;&#10;                  &gt;&#10;                    Farmers&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-white/60 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-white font-medium&quot;&gt;{farmer.name}&lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Dynamic Farmer Profile Header */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-12 items-start&quot;&gt;&#10;              {/* Profile Image and Basic Info */}&#10;              &lt;div className=&quot;text-center lg:text-left&quot;&gt;&#10;                &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                  &lt;div className=&quot;w-48 h-48 mx-auto lg:mx-0 rounded-full bg-gradient-to-br from-white/20 to-white/10 backdrop-blur-sm border-4 border-white/30 overflow-hidden shadow-2xl&quot;&gt;&#10;                    {farmer.profilePicture ? (&#10;                      &lt;img&#10;                        src={farmer.profilePicture}&#10;                        alt={farmer.name}&#10;                        className=&quot;w-full h-full object-cover&quot;&#10;                      /&gt;&#10;                    ) : (&#10;                      &lt;div className=&quot;w-full h-full flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user-tie text-6xl text-white/80&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                  {farmer.verified &amp;&amp; (&#10;                    &lt;div className=&quot;absolute -top-2 -right-2 bg-green-500 text-white rounded-full p-3 shadow-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check text-lg&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;h1 className=&quot;text-4xl lg:text-5xl font-bold text-white mb-2&quot;&gt;&#10;                  {farmer.name}&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-xl text-white/90 mb-4&quot;&gt;&#10;                  {farmer.farmName || `${farmer.name}'s Farm`}&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center justify-center lg:justify-start text-white/80 mb-6&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-map-marker-alt mr-2 text-yellow-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;text-lg&quot;&gt;{farmer.location}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Dynamic Quick Stats - Use stats.yearsOfExperience instead of recalculating */}&#10;                &lt;div className=&quot;grid grid-cols-2 gap-4 mb-8&quot;&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.yearsOfExperience}+&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;&#10;                      Years Experience&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.totalProducts}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;Products&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.averageRating || &quot;N/A&quot;}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;Avg Rating&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.categories?.length || 0}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;Categories&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Dynamic Farmer's Mission &amp; Values */}&#10;              &lt;div className=&quot;lg:col-span-2&quot;&gt;&#10;                &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20&quot;&gt;&#10;                  &lt;h2 className=&quot;text-3xl font-bold text-white mb-6 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-heart mr-3 text-red-400&quot;&gt;&lt;/i&gt;&#10;                    Our Mission&#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-white/90 text-lg leading-relaxed mb-6&quot;&gt;&#10;                    {farmer.bio ||&#10;                      `${farmer.name} is dedicated to providing the freshest, highest-quality produce through sustainable farming practices. Our farm has been serving the community with passion and commitment to environmental stewardship.`}&#10;                  &lt;/p&gt;&#10;                  {/* Dynamic Specializations - Only show once here */}&#10;                  {farmer.specializations &amp;&amp;&#10;                    farmer.specializations.length &gt; 0 &amp;&amp; (&#10;                      &lt;div className=&quot;mb-6&quot;&gt;&#10;                        &lt;h3 className=&quot;text-white font-semibold mb-3&quot;&gt;&#10;                          Our Specializations:&#10;                        &lt;/h3&gt;&#10;                        &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                          {farmer.specializations.map((spec, index) =&gt; (&#10;                            &lt;span&#10;                              key={index}&#10;                              className=&quot;bg-white/20 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm font-medium border border-white/30&quot;&#10;                            &gt;&#10;                              {spec}&#10;                            &lt;/span&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  {/* Dynamic Core Values based on farmer's specializations and methods */}&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                    {farmer.specializations &amp;&amp; farmer.specializations.length &gt; 0&#10;                      ? farmer.specializations&#10;                          .slice(0, 3)&#10;                          .map((specialization, index) =&gt;&#10;                            renderSpecializationCard(specialization, index),&#10;                          )&#10;                      : renderFallbackCoreValues()}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Dynamic Main Content Tabs */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16&quot;&gt;&#10;          {/* Tab Navigation */}&#10;          &lt;div className=&quot;flex flex-wrap justify-center gap-2 mb-12&quot;&gt;&#10;            {[&#10;              { id: &quot;story&quot;, label: &quot;Our Story&quot;, icon: &quot;fas fa-book-open&quot; },&#10;              {&#10;                id: &quot;products&quot;,&#10;                label: &quot;Product Overview&quot;,&#10;                icon: &quot;fas fa-seedling&quot;,&#10;              },&#10;              { id: &quot;reviews&quot;, label: &quot;Customer Reviews&quot;, icon: &quot;fas fa-star&quot; },&#10;              {&#10;                id: &quot;stats&quot;,&#10;                label: &quot;Farm Statistics&quot;,&#10;                icon: &quot;fas fa-chart-bar&quot;,&#10;              },&#10;            ].map((tab) =&gt; (&#10;              &lt;button&#10;                key={tab.id}&#10;                onClick={() =&gt; setActiveTab(tab.id)}&#10;                className={`px-6 py-3 rounded-full font-medium transition-all duration-300 flex items-center ${&#10;                  activeTab === tab.id&#10;                    ? &quot;bg-green-600 text-white shadow-lg&quot;&#10;                    : &quot;bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-green-50 dark:hover:bg-gray-700&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`${tab.icon} mr-2`}&gt;&lt;/i&gt;&#10;                {tab.label}&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;&#10;          {/* Dynamic Tab Content */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8&quot;&gt;&#10;            {activeTab === &quot;story&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Our Farming Journey&#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto&quot;&gt;&#10;                    Every farm has a story. Here&amp;apos;s ours - a tale of&#10;                    passion, dedication, and love for the land.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12 items-center&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      The Beginning&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed mb-6&quot;&gt;&#10;                      {farmer.bio ||&#10;                        `${farmer.name} started their farming journey in ${new Date(&#10;                          farmer.joinedDate || farmer.createdAt,&#10;                        ).getFullYear()} with a simple dream: to grow the best produce possible while caring for the environment. What began as a small family operation has grown into a trusted source of fresh, healthy food for our community.`}&#10;                    &lt;/p&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center&quot;&gt;&#10;                        &lt;div className=&quot;w-10 h-10 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mr-4&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-calendar text-green-600 dark:text-green-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            Farm Established&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {new Date(&#10;                              farmer.joinedDate || farmer.createdAt,&#10;                            ).getFullYear()}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center&quot;&gt;&#10;                        &lt;div className=&quot;w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mr-4&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-heart text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            Our Mission&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Providing fresh, sustainable produce to our&#10;                            community&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center&quot;&gt;&#10;                        &lt;div className=&quot;w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mr-4&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            Farming Philosophy&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {stats.farmingMethods?.length &gt; 0&#10;                              ? `${stats.farmingMethods.join(&quot;, &quot;)} practices`&#10;                              : &quot;Sustainable and eco-friendly methods&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                    {/* Show farming achievements and highlights instead of repeating stats */}&#10;                    &lt;div className=&quot;bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900 dark:to-emerald-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-certificate text-3xl text-green-600 dark:text-green-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        {farmer.isCertified&#10;                          ? &quot;Certified Organic&quot;&#10;                          : &quot;Quality Farming&quot;}&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        {farmer.isCertified&#10;                          ? &quot;Officially certified organic farming&quot;&#10;                          : &quot;Committed to quality and safety standards&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900 dark:to-cyan-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-users text-3xl text-blue-600 dark:text-blue-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Community Impact&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Proudly serving {stats.familiesServed}+ families monthly&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900 dark:to-pink-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-star text-3xl text-purple-600 dark:text-purple-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Customer Satisfaction&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        {stats.averageRating &gt; 0&#10;                          ? `${stats.averageRating}/5 average rating`&#10;                          : &quot;Building trust with every harvest&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900 dark:to-orange-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-seedling text-3xl text-yellow-600 dark:text-yellow-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Product Variety&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        {stats.totalProducts} products across{&quot; &quot;}&#10;                        {stats.categories?.length || 0} categories&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === &quot;products&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Our Product Categories&#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto&quot;&gt;&#10;                    We grow a diverse range of fresh produce across{&quot; &quot;}&#10;                    {stats.categories?.length || 0} categories.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {stats.categories &amp;&amp; stats.categories.length &gt; 0 ? (&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12&quot;&gt;&#10;                    {stats.categories.map((category, index) =&gt; {&#10;                      const categoryProducts = products.filter(&#10;                        (p) =&gt; p.category === category,&#10;                      );&#10;                      const avgPrice =&#10;                        categoryProducts.length &gt; 0&#10;                          ? (&#10;                              categoryProducts.reduce(&#10;                                (sum, p) =&gt; sum + (p.price || 0),&#10;                                0,&#10;                              ) / categoryProducts.length&#10;                            ).toFixed(2)&#10;                          : 0;&#10;&#10;                      return (&#10;                        &lt;div&#10;                          key={index}&#10;                          className=&quot;bg-gradient-to-br from-green-50 to-emerald-50 dark:from-gray-700 dark:to-gray-600 p-8 rounded-xl shadow-lg&quot;&#10;                        &gt;&#10;                          &lt;div className=&quot;w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-leaf text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white text-center mb-4&quot;&gt;&#10;                            {category}&#10;                          &lt;/h3&gt;&#10;                          &lt;div className=&quot;text-center space-y-2&quot;&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              {categoryProducts.length} products&#10;                            &lt;/p&gt;&#10;                            &lt;p className=&quot;text-lg font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              Avg: ${avgPrice}&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-seedling text-6xl text-gray-300 dark:text-gray-600 mb-4&quot;&gt;&lt;/i&gt;&#10;                    &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-lg&quot;&gt;&#10;                      No products available yet. Check back soon!&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Featured Products Preview */}&#10;                {products.length &gt; 0 &amp;&amp; (&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-semibold text-gray-900 dark:text-white mb-6 text-center&quot;&gt;&#10;                      Featured Products&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-6&quot;&gt;&#10;                      {products.slice(0, 3).map((product, index) =&gt; (&#10;                        &lt;div&#10;                          key={product._id}&#10;                          className={`flex ${&#10;                            index % 2 === 0 ? &quot;flex-row&quot; : &quot;flex-row-reverse&quot;&#10;                          } items-center gap-8 bg-gradient-to-r ${&#10;                            index % 3 === 0&#10;                              ? &quot;from-green-50 to-emerald-50 dark:from-green-900/30 dark:to-emerald-900/30&quot;&#10;                              : index % 3 === 1&#10;                                ? &quot;from-blue-50 to-cyan-50 dark:from-blue-900/30 dark:to-cyan-900/30&quot;&#10;                                : &quot;from-purple-50 to-pink-50 dark:from-purple-900/30 dark:to-pink-900/30&quot;&#10;                          } p-8 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02]`}&#10;                        &gt;&#10;                          {/* Product Image */}&#10;                          &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div className=&quot;w-32 h-32 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                              {product.images &amp;&amp; product.images[0] ? (&#10;                                &lt;img&#10;                                  src={product.images[0]}&#10;                                  alt={product.name}&#10;                                  className=&quot;w-full h-full object-cover&quot;&#10;                                /&gt;&#10;                              ) : (&#10;                                &lt;div className=&quot;w-full h-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center&quot;&gt;&#10;                                  &lt;i className=&quot;fas fa-image text-gray-400 text-3xl&quot;&gt;&lt;/i&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Product Info */}&#10;                          &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                            &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                              &lt;div className=&quot;flex-1&quot;&gt;&#10;                                &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                  {product.name}&#10;                                &lt;/h4&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                  Category: {product.category}&#10;                                &lt;/p&gt;&#10;&#10;                                {/* Rating */}&#10;                                {product.averageRating &amp;&amp; (&#10;                                  &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;                                    &lt;div className=&quot;flex text-yellow-400 mr-2&quot;&gt;&#10;                                      {[...Array(5)].map((_, i) =&gt; (&#10;                                        &lt;i&#10;                                          key={i}&#10;                                          className={`fas fa-star text-sm ${&#10;                                            i &lt;&#10;                                            Math.floor(product.averageRating)&#10;                                              ? &quot;text-yellow-400&quot;&#10;                                              : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                          }`}&#10;                                        &gt;&lt;/i&gt;&#10;                                      ))}&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      ({product.averageRating}/5)&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;&#10;                                {/* Product Description */}&#10;                                {product.description &amp;&amp; (&#10;                                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-2&quot;&gt;&#10;                                    {product.description}&#10;                                  &lt;/p&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Price and Actions */}&#10;                              &lt;div className=&quot;flex flex-col items-end gap-4 ml-6&quot;&gt;&#10;                                &lt;div className=&quot;text-right&quot;&gt;&#10;                                  &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                                    ${product.price}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div&#10;                                    className={`text-sm ${&#10;                                      product.stock &gt; 0&#10;                                        ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                        : &quot;text-red-500&quot;&#10;                                    }`}&#10;                                  &gt;&#10;                                    {product.stock &gt; 0&#10;                                      ? `${product.stock} available`&#10;                                      : &quot;Out of stock&quot;}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                                  &lt;button&#10;                                    className={`px-6 py-3 rounded-lg font-medium transition-all ${&#10;                                      product.stock &gt; 0&#10;                                        ? &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                                        : &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                                    }`}&#10;                                    disabled={product.stock === 0}&#10;                                  &gt;&#10;                                    &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {product.stock &gt; 0&#10;                                      ? &quot;Add to Cart&quot;&#10;                                      : &quot;Sold Out&quot;}&#10;                                  &lt;/button&gt;&#10;&#10;                                  &lt;button className=&quot;p-3 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300 rounded-lg transition-all&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart&quot;&gt;&lt;/i&gt;&#10;                                  &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* View All Products Button */}&#10;                    &lt;div className=&quot;text-center mt-8&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/farmers/${farmerId}/details`}&#10;                        className=&quot;inline-flex items-center px-8 py-4 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-store mr-3&quot;&gt;&lt;/i&gt;&#10;                        View All {stats.totalProducts} Products&#10;                        &lt;i className=&quot;fas fa-arrow-right ml-3&quot;&gt;&lt;/i&gt;&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-rose-600 bg-clip-text text-transparent mb-6&quot;&gt;&#10;                     Customer Testimonials &#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto leading-relaxed&quot;&gt;&#10;                    Discover what our valued customers are saying about their&#10;                    experience with our fresh, quality produce and exceptional&#10;                    service.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {reviews.length &gt; 0 ? (&#10;                  &lt;div className=&quot;space-y-8&quot;&gt;&#10;                    {/* Reviews Statistics Banner */}&#10;                    &lt;div className=&quot;bg-gradient-to-r from-purple-600 via-pink-600 to-rose-600 rounded-3xl p-8 mb-12&quot;&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8 text-white text-center&quot;&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                          &lt;div className=&quot;text-5xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                            {reviews.length}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-white/90 text-lg&quot;&gt;&#10;                            Total Reviews&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;w-16 h-1 bg-white/30 mx-auto mt-2 rounded-full&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                          &lt;div className=&quot;text-5xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                            {stats.averageRating}★&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-white/90 text-lg&quot;&gt;&#10;                            Average Rating&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex justify-center mt-2&quot;&gt;&#10;                            {[...Array(5)].map((_, i) =&gt; (&#10;                              &lt;i&#10;                                key={i}&#10;                                className={`fas fa-star text-lg ${&#10;                                  i &lt; Math.floor(stats.averageRating || 0)&#10;                                    ? &quot;text-yellow-300&quot;&#10;                                    : &quot;text-white/30&quot;&#10;                                }`}&#10;                              &gt;&lt;/i&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                          &lt;div className=&quot;text-5xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                            98%&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-white/90 text-lg&quot;&gt;&#10;                            Satisfaction Rate&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;w-16 h-1 bg-white/30 mx-auto mt-2 rounded-full&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Reviews Grid with Different Layouts */}&#10;                    &lt;div className=&quot;space-y-8&quot;&gt;&#10;                      {reviews.map((review, index) =&gt; {&#10;                        const layoutVariants = [&#10;                          &quot;premium-testimonial&quot;,&#10;                          &quot;modern-review&quot;,&#10;                          &quot;elegant-feedback&quot;,&#10;                          &quot;vibrant-comment&quot;,&#10;                          &quot;classic-review&quot;,&#10;                        ];&#10;                        const variant =&#10;                          layoutVariants[index % layoutVariants.length];&#10;&#10;                        // Premium Testimonial Layout&#10;                        if (variant === &quot;premium-testimonial&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 dark:from-indigo-900/20 dark:via-purple-900/20 dark:to-pink-900/20 p-8 hover:shadow-2xl transition-all duration-700 border-2 border-indigo-200 dark:border-indigo-800&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-indigo-400/5 to-purple-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                              &lt;div className=&quot;absolute top-4 right-4 w-20 h-20 bg-indigo-100 dark:bg-indigo-800/30 rounded-full opacity-20 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10&quot;&gt;&#10;                                &lt;div className=&quot;flex items-start space-x-6&quot;&gt;&#10;                                  {/* Avatar Section */}&#10;                                  &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                                    &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center text-white text-2xl font-bold shadow-lg group-hover:rotate-12 transition-transform duration-500&quot;&gt;&#10;                                      {(review.userName || &quot;A&quot;)&#10;                                        .charAt(0)&#10;                                        .toUpperCase()}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-center mt-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex justify-center space-x-1&quot;&gt;&#10;                                        {[...Array(5)].map((_, i) =&gt; (&#10;                                          &lt;i&#10;                                            key={i}&#10;                                            className={`fas fa-star text-lg ${&#10;                                              i &lt; review.rating&#10;                                                ? &quot;text-yellow-400&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&lt;/i&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;div className=&quot;text-sm text-indigo-600 dark:text-indigo-400 font-medium mt-1&quot;&gt;&#10;                                        {review.rating}/5 Stars&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;&#10;                                  {/* Content Section */}&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;mb-4&quot;&gt;&#10;                                      &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                        {review.userName ||&#10;                                          &quot;Anonymous Customer&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;span className=&quot;flex items-center&quot;&gt;&#10;                                          &lt;i className=&quot;fas fa-box mr-2 text-purple-500&quot;&gt;&lt;/i&gt;&#10;                                          {review.productName}&#10;                                        &lt;/span&gt;&#10;                                        &lt;span className=&quot;flex items-center&quot;&gt;&#10;                                          &lt;i className=&quot;fas fa-calendar mr-2 text-indigo-500&quot;&gt;&lt;/i&gt;&#10;                                          {new Date(&#10;                                            review.createdAt,&#10;                                          ).toLocaleDateString()}&#10;                                        &lt;/span&gt;&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div className=&quot;relative&quot;&gt;&#10;                                      &lt;div className=&quot;absolute -top-2 -left-2 text-6xl text-indigo-200 dark:text-indigo-800 opacity-50&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-quote-left&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/div&gt;&#10;                                      &lt;p className=&quot;text-gray-700 dark:text-gray-300 text-lg leading-relaxed italic pl-8 pr-4&quot;&gt;&#10;                                        {review.comment}&#10;                                      &lt;/p&gt;&#10;                                      &lt;div className=&quot;absolute -bottom-2 -right-2 text-6xl text-indigo-200 dark:text-indigo-800 opacity-50 transform rotate-180&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-quote-left&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Modern Review Layout&#10;                        if (variant === &quot;modern-review&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-gray-800 shadow-xl hover:shadow-2xl transition-all duration-500 border-l-8 border-emerald-500&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute inset-0 bg-gradient-to-r from-emerald-50/50 to-teal-50/50 dark:from-emerald-900/10 dark:to-teal-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10 p-8&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                    &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-xl flex items-center justify-center text-white text-xl font-bold shadow-lg&quot;&gt;&#10;                                      {(review.userName || &quot;A&quot;)&#10;                                        .charAt(0)&#10;                                        .toUpperCase()}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                      &lt;h4 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                                        {review.userName ||&#10;                                          &quot;Anonymous Customer&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;p className=&quot;text-emerald-600 dark:text-emerald-400 font-medium&quot;&gt;&#10;                                        Verified Purchase&#10;                                      &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-1 justify-end mb-2&quot;&gt;&#10;                                      {[...Array(5)].map((_, i) =&gt; (&#10;                                        &lt;i&#10;                                          key={i}&#10;                                          className={`fas fa-star text-xl ${&#10;                                            i &lt; review.rating&#10;                                              ? &quot;text-yellow-400&quot;&#10;                                              : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                          }`}&#10;                                        &gt;&lt;/i&gt;&#10;                                      ))}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                                      {new Date(&#10;                                        review.createdAt,&#10;                                      ).toLocaleDateString()}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;mb-4&quot;&gt;&#10;                                  &lt;div className=&quot;inline-flex items-center bg-emerald-100 dark:bg-emerald-900/30 text-emerald-800 dark:text-emerald-300 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-leaf mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {review.productName}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 text-lg leading-relaxed&quot;&gt;&#10;                                  {review.comment}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Elegant Feedback Layout&#10;                        if (variant === &quot;elegant-feedback&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-rose-50 via-pink-50 to-red-50 dark:from-rose-900/20 dark:via-pink-900/20 dark:to-red-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-rose-200 dark:border-rose-800&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute -top-10 -right-10 w-32 h-32 bg-rose-100 dark:bg-rose-800/30 rounded-full opacity-30 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10&quot;&gt;&#10;                                &lt;div className=&quot;text-center mb-6&quot;&gt;&#10;                                  &lt;div className=&quot;w-24 h-24 bg-gradient-to-br from-rose-400 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-xl group-hover:rotate-12 transition-transform duration-500&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                    {review.userName || &quot;Happy Customer&quot;}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;div className=&quot;flex justify-center space-x-1 mb-3&quot;&gt;&#10;                                    {[...Array(5)].map((_, i) =&gt; (&#10;                                      &lt;i&#10;                                        key={i}&#10;                                        className={`fas fa-star text-2xl ${&#10;                                          i &lt; review.rating&#10;                                            ? &quot;text-yellow-400&quot;&#10;                                            : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                        }`}&#10;                                      &gt;&lt;/i&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;inline-flex items-center bg-rose-100 dark:bg-rose-900/30 text-rose-800 dark:text-rose-300 px-4 py-2 rounded-full text-sm font-medium&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-apple-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {review.productName}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;text-center&quot;&gt;&#10;                                  &lt;p className=&quot;text-gray-700 dark:text-gray-300 text-xl leading-relaxed italic font-light&quot;&gt;&#10;                                    &quot;{review.comment}&quot;&#10;                                  &lt;/p&gt;&#10;                                  &lt;div className=&quot;mt-6 text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-calendar-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {new Date(&#10;                                      review.createdAt,&#10;                                    ).toLocaleDateString()}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Vibrant Comment Layout&#10;                        if (variant === &quot;vibrant-comment&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-r from-cyan-500 to-blue-600 p-8 hover:shadow-2xl transition-all duration-500 text-white&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-blue-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                              &lt;div className=&quot;absolute top-0 right-0 w-40 h-40 bg-white/10 rounded-full transform translate-x-20 -translate-y-20 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10&quot;&gt;&#10;                                &lt;div className=&quot;flex items-start space-x-6&quot;&gt;&#10;                                  &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                                    &lt;div className=&quot;w-18 h-18 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center text-2xl font-bold shadow-lg&quot;&gt;&#10;                                      {(review.userName || &quot;A&quot;)&#10;                                        .charAt(0)&#10;                                        .toUpperCase()}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                      &lt;div&gt;&#10;                                        &lt;h4 className=&quot;text-xl font-bold mb-1&quot;&gt;&#10;                                          {review.userName || &quot;Valued Customer&quot;}&#10;                                        &lt;/h4&gt;&#10;                                        &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                          {[...Array(5)].map((_, i) =&gt; (&#10;                                            &lt;i&#10;                                              key={i}&#10;                                              className={`fas fa-star ${&#10;                                                i &lt; review.rating&#10;                                                  ? &quot;text-yellow-300&quot;&#10;                                                  : &quot;text-white/30&quot;&#10;                                              }`}&#10;                                            &gt;&lt;/i&gt;&#10;                                          ))}&#10;                                          &lt;span className=&quot;ml-2 text-white/90&quot;&gt;&#10;                                            ({review.rating}/5)&#10;                                          &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                      &lt;/div&gt;&#10;                                      &lt;div className=&quot;text-right text-white/80 text-sm&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt,&#10;                                        ).toLocaleDateString()}&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div className=&quot;mb-4&quot;&gt;&#10;                                      &lt;span className=&quot;inline-flex items-center bg-white/20 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-tag mr-2&quot;&gt;&lt;/i&gt;&#10;                                        {review.productName}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;p className=&quot;text-white/95 text-lg leading-relaxed&quot;&gt;&#10;                                      {review.comment}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Classic Review Layout (Default)&#10;                        return (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;group relative overflow-hidden rounded-xl bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-200 dark:border-gray-700&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-gray-50/50 to-slate-50/50 dark:from-gray-700/50 dark:to-slate-700/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;relative z-10 p-6&quot;&gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                  &lt;div className=&quot;w-12 h-12 bg-gradient-to-br from-gray-400 to-slate-500 rounded-lg flex items-center justify-center text-white font-bold&quot;&gt;&#10;                                    {(review.userName || &quot;A&quot;)&#10;                                      .charAt(0)&#10;                                      .toUpperCase()}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                      {review.userName || &quot;Anonymous Customer&quot;}&#10;                                    &lt;/h4&gt;&#10;                                    &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      {review.productName}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;text-right&quot;&gt;&#10;                                  &lt;div className=&quot;flex items-center space-x-1 mb-1&quot;&gt;&#10;                                    {[...Array(5)].map((_, i) =&gt; (&#10;                                      &lt;i&#10;                                        key={i}&#10;                                        className={`fas fa-star text-sm ${&#10;                                          i &lt; review.rating&#10;                                            ? &quot;text-yellow-400&quot;&#10;                                            : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                        }`}&#10;                                      &gt;&lt;/i&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    {new Date(&#10;                                      review.createdAt,&#10;                                    ).toLocaleDateString()}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed&quot;&gt;&#10;                                {review.comment}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        );&#10;                      })}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Satisfaction Footer */}&#10;                    &lt;div className=&quot;bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-3xl p-8 mt-12 border border-green-200 dark:border-green-800&quot;&gt;&#10;                      &lt;div className=&quot;text-center&quot;&gt;&#10;                        &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-thumbs-up text-white text-3xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                          Thank You for Your Trust! &#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-2xl mx-auto leading-relaxed&quot;&gt;&#10;                          Your feedback helps us grow better produce and serve&#10;                          our community with excellence. Every review makes a&#10;                          difference in our farming journey.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-6 flex justify-center space-x-8&quot;&gt;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              100%&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                              Fresh Guarantee&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              24/7&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                              Customer Support&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              Fast&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                              Delivery&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-20&quot;&gt;&#10;                    &lt;div className=&quot;w-32 h-32 bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 rounded-full flex items-center justify-center mx-auto mb-8 shadow-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-comment-dots text-6xl text-purple-400 dark:text-purple-300&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      No Reviews Yet&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-xl max-w-md mx-auto leading-relaxed mb-8&quot;&gt;&#10;                      Be the first to share your experience with our fresh&#10;                      produce! Your feedback helps us serve you better.&#10;                    &lt;/p&gt;&#10;                    &lt;div className=&quot;inline-flex items-center bg-gradient-to-r from-purple-500 to-pink-600 text-white px-8 py-4 rounded-2xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-star mr-3&quot;&gt;&lt;/i&gt;&#10;                      Leave the First Review&#10;                      &lt;i className=&quot;fas fa-arrow-right ml-3&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === &quot;stats&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold bg-gradient-to-r from-emerald-600 via-teal-600 to-cyan-600 bg-clip-text text-transparent mb-6&quot;&gt;&#10;                     Farm Analytics Dashboard &#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto leading-relaxed&quot;&gt;&#10;                    Discover the comprehensive insights behind our farm's&#10;                    productivity, community impact, and sustainable growth&#10;                    journey.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Primary Statistics Showcase */}&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12&quot;&gt;&#10;                  {/* Holographic Products Card */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-emerald-50 via-green-50 to-teal-50 dark:from-emerald-900/20 dark:via-green-900/20 dark:to-teal-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-emerald-400/10 to-teal-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute top-4 right-4 w-16 h-16 bg-emerald-100 dark:bg-emerald-800/30 rounded-full opacity-20 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-emerald-500 to-green-600 rounded-2xl flex items-center justify-center transform group-hover:rotate-12 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-seedling text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-emerald-600 dark:text-emerald-400 mb-1&quot;&gt;&#10;                            {stats.totalProducts}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-emerald-500 dark:text-emerald-300 text-sm font-medium&quot;&gt;&#10;                            Total Products&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          &lt;span&gt;Active Items&lt;/span&gt;&#10;                          &lt;span className=&quot;font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                            {stats.activeProducts}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;w-full bg-emerald-100 dark:bg-emerald-900/30 rounded-full h-3&quot;&gt;&#10;                          &lt;div&#10;                            className=&quot;bg-gradient-to-r from-emerald-500 to-green-500 h-3 rounded-full transition-all duration-1000 shadow-sm&quot;&#10;                            style={{&#10;                              width: `${(stats.activeProducts / stats.totalProducts) * 100}%`,&#10;                            }}&#10;                          &gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-center text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          {(&#10;                            (stats.activeProducts / stats.totalProducts) *&#10;                            100&#10;                          ).toFixed(0)}&#10;                          % availability rate&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Crystal Inventory Card */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-blue-50 via-cyan-50 to-indigo-50 dark:from-blue-900/20 dark:via-cyan-900/20 dark:to-indigo-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-blue-400/10 to-cyan-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute -top-4 -right-4 w-20 h-20 bg-blue-100 dark:bg-blue-800/30 rounded-full opacity-20 group-hover:scale-125 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-2xl flex items-center justify-center transform group-hover:scale-110 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-boxes text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-blue-600 dark:text-blue-400 mb-1&quot;&gt;&#10;                            {stats.totalStock}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-blue-500 dark:text-blue-300 text-sm font-medium&quot;&gt;&#10;                            Items in Stock&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div className=&quot;text-center p-3 bg-white/50 dark:bg-blue-900/20 rounded-xl&quot;&gt;&#10;                          &lt;div className=&quot;text-lg font-bold text-cyan-600 dark:text-cyan-400&quot;&gt;&#10;                            {stats.categories?.length || 0}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Categories&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-center p-3 bg-white/50 dark:bg-blue-900/20 rounded-xl&quot;&gt;&#10;                          &lt;div className=&quot;text-lg font-bold text-indigo-600 dark:text-indigo-400&quot;&gt;&#10;                            ${stats.averagePrice}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg Price&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Prismatic Community Impact */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-purple-50 via-pink-50 to-rose-50 dark:from-purple-900/20 dark:via-pink-900/20 dark:to-rose-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-purple-200 dark:border-purple-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-purple-400/10 to-pink-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute bottom-4 left-4 w-12 h-12 bg-purple-100 dark:bg-purple-800/30 rounded-full opacity-30 group-hover:animate-pulse&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center transform group-hover:rotate-45 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-users text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-purple-600 dark:text-purple-400 mb-1&quot;&gt;&#10;                            {stats.familiesServed}+&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-purple-500 dark:text-purple-300 text-sm font-medium&quot;&gt;&#10;                            Families Served&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          &lt;span&gt;Monthly Impact&lt;/span&gt;&#10;                          &lt;span className=&quot;font-bold text-pink-600 dark:text-pink-400&quot;&gt;&#10;                            Community&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                          &lt;div className=&quot;flex-1 h-2 bg-purple-100 dark:bg-purple-900/30 rounded-full overflow-hidden&quot;&gt;&#10;                            &lt;div className=&quot;h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full animate-pulse&quot;&gt;&lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs text-purple-600 dark:text-purple-400 font-medium&quot;&gt;&#10;                            Growing&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Luminous Performance */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-50 dark:from-amber-900/20 dark:via-yellow-900/20 dark:to-orange-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-amber-400/10 to-orange-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute top-0 left-0 w-24 h-24 bg-amber-100 dark:bg-amber-800/30 rounded-full opacity-20 transform -translate-x-12 -translate-y-12 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-amber-500 to-orange-600 rounded-2xl flex items-center justify-center transform group-hover:scale-110 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-star text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-amber-600 dark:text-amber-400 mb-1&quot;&gt;&#10;                            {stats.averageRating || &quot;N/A&quot;}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-amber-500 dark:text-amber-300 text-sm font-medium&quot;&gt;&#10;                            Average Rating&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          &lt;span&gt;Total Reviews&lt;/span&gt;&#10;                          &lt;span className=&quot;font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                            {stats.totalReviews}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                          {[...Array(5)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className={`fas fa-star text-lg ${&#10;                                i &lt; Math.floor(stats.averageRating || 0)&#10;                                  ? &quot;text-amber-400&quot;&#10;                                  : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                              }`}&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ({stats.averageRating}/5.0)&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Enhanced Farm Details Grid */}&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12&quot;&gt;&#10;                  {/* Experience Showcase */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-indigo-900/30 dark:to-purple-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-indigo-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-indigo-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-indigo-500 rounded-xl flex items-center justify-center transform group-hover:rotate-12 transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-clock text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-indigo-600 dark:text-indigo-400&quot;&gt;&#10;                          {stats.yearsOfExperience}+&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Years of Experience&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Dedicated farming expertise&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farm Size Display */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-green-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-500/5 to-emerald-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center transform group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-map text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                          {stats.farmSize || &quot;5&quot;} {stats.farmSizeUnit}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Farm Size&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Total cultivated area&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Certification Status */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-blue-100 to-cyan-100 dark:from-blue-900/30 dark:to-cyan-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-blue-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-blue-500/5 to-cyan-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center transform group-hover:bounce transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-certificate text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&#10;                          className={`px-3 py-1 rounded-full text-sm font-medium ${&#10;                            stats.certificationStatus === &quot;Certified&quot;&#10;                              ? &quot;bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                              : &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                          }`}&#10;                        &gt;&#10;                          {stats.certificationStatus}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Certification&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Quality assurance status&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farming Methods */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-orange-100 to-red-100 dark:from-orange-900/30 dark:to-red-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-orange-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-orange-500/5 to-red-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center transform group-hover:rotate-45 transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                          {stats.farmingMethods?.length || 2}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Methods Used&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Sustainable practices&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Revenue Analytics Section */}&#10;                &lt;div className=&quot;bg-gradient-to-br from-slate-50 to-gray-100 dark:from-slate-900/50 dark:to-gray-900/50 rounded-3xl p-8 mb-12 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;                  &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                       Revenue Analytics&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Financial performance and growth metrics&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;                    {/* Monthly Revenue */}&#10;                    &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-slate-800 p-6 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;                      &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-emerald-400/20 to-green-400/20 rounded-full transform translate-x-10 -translate-y-10 group-hover:scale-150 transition-transform duration-500&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;relative z-10&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                          &lt;div className=&quot;w-12 h-12 bg-emerald-100 dark:bg-emerald-900/30 rounded-xl flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-calendar-alt text-emerald-600 dark:text-emerald-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400 px-2 py-1 rounded-full font-medium&quot;&gt;&#10;                            This Month&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400 mb-2&quot;&gt;&#10;                          ${stats.monthlyRevenue}&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                          Monthly Revenue&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                          Current month earnings&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Total Revenue */}&#10;                    &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-slate-800 p-6 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;                      &lt;div className=&quot;absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-blue-400/20 to-cyan-400/20 rounded-full transform -translate-x-12 translate-y-12 group-hover:scale-150 transition-transform duration-500&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;relative z-10&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                          &lt;div className=&quot;w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-chart-line text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 px-2 py-1 rounded-full font-medium&quot;&gt;&#10;                            All Time&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2&quot;&gt;&#10;                          ${stats.totalRevenue}&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                          Lifetime earnings&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Inventory Value */}&#10;                    &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-slate-800 p-6 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;                      &lt;div className=&quot;absolute top-1/2 right-0 w-16 h-16 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full transform translate-x-8 -translate-y-8 group-hover:scale-150 transition-transform duration-500&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;relative z-10&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                          &lt;div className=&quot;w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-warehouse text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400 px-2 py-1 rounded-full font-medium&quot;&gt;&#10;                            Current&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2&quot;&gt;&#10;                          ${stats.inventoryValue}&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                          Inventory Value&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                          Stock worth&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farming Methods Showcase */}&#10;                {stats.farmingMethods &amp;&amp; stats.farmingMethods.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mb-12&quot;&gt;&#10;                    &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                      &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                         Our Farming Philosophy&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        Sustainable and innovative agricultural practices&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                      {stats.farmingMethods.map((method, index) =&gt; {&#10;                        const config = methodConfig[method] || {&#10;                          icon: &quot;fas fa-tractor&quot;,&#10;                          color: &quot;text-gray-600 dark:text-gray-400&quot;,&#10;                          description: &quot;Specialized farming technique&quot;,&#10;                        };&#10;&#10;                        return (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-8 shadow-lg hover:shadow-2xl transition-all duration-500 border-t-4 border-green-500&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-50/50 to-emerald-50/50 dark:from-green-900/10 dark:to-emerald-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;relative z-10 text-center&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                                &lt;i&#10;                                  className={`${config.icon} text-4xl ${config.color}`}&#10;                                &gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;h4 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                                {method}&#10;                              &lt;/h4&gt;&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                                {config.description}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        );&#10;                      })}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Growth Metrics Footer */}&#10;                &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-3xl p-8 text-white&quot;&gt;&#10;                  &lt;div className=&quot;text-center&quot;&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-bold mb-6&quot;&gt;&#10;                       Growth Trajectory&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;                      &lt;div className=&quot;group&quot;&gt;&#10;                        &lt;div className=&quot;text-4xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          {(&#10;                            (stats.activeProducts / stats.totalProducts) *&#10;                            100&#10;                          ).toFixed(0)}&#10;                          %&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-white/90&quot;&gt;&#10;                          Product Availability&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;group&quot;&gt;&#10;                        &lt;div className=&quot;text-4xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          {stats.familiesServed}+&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-white/90&quot;&gt;Community Reach&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;group&quot;&gt;&#10;                        &lt;div className=&quot;text-4xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          {stats.averageRating || &quot;4.8&quot;}★&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-white/90&quot;&gt;&#10;                          Customer Satisfaction&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Dynamic Action Section */}&#10;        &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;h2 className=&quot;text-4xl font-bold text-white mb-8&quot;&gt;&#10;                Ready to Experience {farmer.farmName || `${farmer.name}'s Farm`}&#10;                ?&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;                &lt;Link&#10;                  href={`/farmers/${farmerId}/details`}&#10;                  className=&quot;group bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white p-8 rounded-2xl transition-all duration-300 border border-white/30 transform hover:scale-105&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-store text-4xl mb-4 group-hover:scale-110 transition-transform&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold mb-2&quot;&gt;&#10;                    Browse {stats.totalProducts} Products&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-white/90&quot;&gt;&#10;                    Explore our full product catalog&#10;                  &lt;/p&gt;&#10;                &lt;/Link&gt;&#10;&#10;                &lt;div className=&quot;group bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white p-8 rounded-2xl transition-all duration-300 border border-white/30 transform hover:scale-105 cursor-pointer&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-star text-4xl mb-4 group-hover:scale-110 transition-transform&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold mb-2&quot;&gt;&#10;                    {stats.averageRating}/5 Rating&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-white/90&quot;&gt;See what customers say&lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;group bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white p-8 rounded-2xl transition-all duration-300 border border-white/30 transform hover:scale-105 cursor-pointer&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-envelope text-4xl mb-4 group-hover:scale-110 transition-transform&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold mb-2&quot;&gt;&#10;                    Contact {farmer.name}&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-white/90&quot;&gt;Get in touch with questions&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;&#10;export default function FarmerPage() {&#10;  const router = useRouter();&#10;  const params = useParams();&#10;  const farmerId = params.id;&#10;&#10;  const [farmer, setFarmer] = useState(null);&#10;  const [products, setProducts] = useState([]);&#10;  const [reviews, setReviews] = useState([]);&#10;  const [stats, setStats] = useState({});&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;  const [activeTab, setActiveTab] = useState(&quot;story&quot;);&#10;&#10;  // Helper function to calculate years of experience (used only once)&#10;  const calculateYearsOfExperience = (joinedDate, createdAt) =&gt; {&#10;    const joinDate = new Date(joinedDate || createdAt);&#10;    const currentDate = new Date();&#10;    return Math.max(1, currentDate.getFullYear() - joinDate.getFullYear());&#10;  };&#10;&#10;  // Configuration objects to reduce repetition&#10;  const specializationConfig = {&#10;    Grains: {&#10;      icon: &quot;fas fa-seedling&quot;,&#10;      color: &quot;bg-amber-500&quot;,&#10;      description: &quot;Premium grain production&quot;,&#10;    },&#10;    Fruits: {&#10;      icon: &quot;fas fa-apple-alt&quot;,&#10;      color: &quot;bg-red-500&quot;,&#10;      description: &quot;Fresh seasonal fruits&quot;,&#10;    },&#10;    Vegetables: {&#10;      icon: &quot;fas fa-carrot&quot;,&#10;      color: &quot;bg-orange-500&quot;,&#10;      description: &quot;Organic vegetables&quot;,&#10;    },&#10;    Herbs: {&#10;      icon: &quot;fas fa-leaf&quot;,&#10;      color: &quot;bg-green-500&quot;,&#10;      description: &quot;Natural herbs &amp; spices&quot;,&#10;    },&#10;    Honey: {&#10;      icon: &quot;fas fa-bug&quot;,&#10;      color: &quot;bg-yellow-500&quot;,&#10;      description: &quot;Pure natural honey&quot;,&#10;    },&#10;    Dairy: {&#10;      icon: &quot;fas fa-glass-whiskey&quot;,&#10;      color: &quot;bg-blue-500&quot;,&#10;      description: &quot;Fresh dairy products&quot;,&#10;    },&#10;  };&#10;&#10;  const methodConfig = {&#10;    Organic: {&#10;      icon: &quot;fas fa-leaf&quot;,&#10;      color: &quot;text-green-600 dark:text-green-400&quot;,&#10;      description: &quot;Chemical-free farming practices&quot;,&#10;    },&#10;    Traditional: {&#10;      icon: &quot;fas fa-seedling&quot;,&#10;      color: &quot;text-brown-600 dark:text-yellow-400&quot;,&#10;      description: &quot;Time-tested farming wisdom&quot;,&#10;    },&#10;    Sustainable: {&#10;      icon: &quot;fas fa-recycle&quot;,&#10;      color: &quot;text-blue-600 dark:text-blue-400&quot;,&#10;      description: &quot;Environmentally conscious methods&quot;,&#10;    },&#10;    &quot;Natural Ripening&quot;: {&#10;      icon: &quot;fas fa-sun&quot;,&#10;      color: &quot;text-orange-600 dark:text-orange-400&quot;,&#10;      description: &quot;Natural maturation process&quot;,&#10;    },&#10;    &quot;Fruit Cultivation&quot;: {&#10;      icon: &quot;fas fa-apple-alt&quot;,&#10;      color: &quot;text-red-600 dark:text-red-400&quot;,&#10;      description: &quot;Specialized fruit growing&quot;,&#10;    },&#10;    &quot;Sun-dried&quot;: {&#10;      icon: &quot;fas fa-sun&quot;,&#10;      color: &quot;text-yellow-600 dark:text-yellow-400&quot;,&#10;      description: &quot;Solar-powered processing&quot;,&#10;    },&#10;  };&#10;&#10;  const ORDER_STATUS = {&#10;    PENDING: &quot;pending&quot;,&#10;    CONFIRMED: &quot;confirmed&quot;,&#10;    DELIVERED: &quot;delivered&quot;,&#10;    CANCELLED: &quot;cancelled&quot;,&#10;    RETURNED: &quot;returned&quot;,&#10;  };&#10;&#10;  // Helper function to render specialization cards&#10;  const renderSpecializationCard = (specialization, index) =&gt; {&#10;    const config = specializationConfig[specialization] || {&#10;      icon: &quot;fas fa-tractor&quot;,&#10;      color: &quot;bg-purple-500&quot;,&#10;      description: &quot;Farm specialization&quot;,&#10;    };&#10;&#10;    return (&#10;      &lt;div key={index} className=&quot;text-center&quot;&gt;&#10;        &lt;div&#10;          className={`w-12 h-12 ${config.color} rounded-full flex items-center justify-center mx-auto mb-3`}&#10;        &gt;&#10;          &lt;i className={`${config.icon} text-white`}&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;{specialization}&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;{config.description}&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Helper function to render farming method cards&#10;  const renderMethodCard = (method, index) =&gt; {&#10;    const config = methodConfig[method] || {&#10;      icon: &quot;fas fa-tractor&quot;,&#10;      color: &quot;text-gray-600 dark:text-gray-400&quot;,&#10;      description: &quot;Specialized farming technique&quot;,&#10;    };&#10;&#10;    return (&#10;      &lt;div&#10;        key={index}&#10;        className=&quot;bg-gray-50 dark:bg-gray-700 p-6 rounded-xl text-center&quot;&#10;      &gt;&#10;        &lt;i className={`${config.icon} text-4xl ${config.color} mb-4`}&gt;&lt;/i&gt;&#10;        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;          {method}&#10;        &lt;/h4&gt;&#10;        &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;          {config.description}&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Helper function to render generic fallback core values&#10;  const renderFallbackCoreValues = () =&gt; (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-3&quot;&gt;&#10;          &lt;i className=&quot;fas fa-leaf text-white&quot;&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;Sustainable&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Eco-friendly farming practices&lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-3&quot;&gt;&#10;          &lt;i className=&quot;fas fa-shield-alt text-white&quot;&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;Quality&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Premium fresh produce&lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-3&quot;&gt;&#10;          &lt;i className=&quot;fas fa-users text-white&quot;&gt;&lt;/i&gt;&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-white font-semibold mb-2&quot;&gt;Community&lt;/h3&gt;&#10;        &lt;p className=&quot;text-white/70 text-sm&quot;&gt;Supporting local families&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    fetchFarmerData();&#10;  }, [farmerId]);&#10;&#10;  const fetchFarmerData = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setError(null);&#10;&#10;      // First fetch farmer data&#10;      const farmerResponse = await fetch(`/api/farmers/${farmerId}`, {&#10;        headers: { &quot;Cache-Control&quot;: &quot;no-cache&quot; },&#10;      });&#10;&#10;      if (!farmerResponse.ok) {&#10;        throw new Error(&quot;Farmer not found&quot;);&#10;      }&#10;&#10;      const farmerData = await farmerResponse.json();&#10;&#10;      // Now fetch products and orders with farmer information&#10;      const [ordersResponse] = await Promise.all([&#10;        fetch(&#10;          `/api/orders?farmerId=${farmerId}&amp;farmerEmail=${farmerData.farmer?.email || &quot;&quot;}`,&#10;          {&#10;            headers: { &quot;Cache-Control&quot;: &quot;no-cache&quot; },&#10;          },&#10;        ),&#10;      ]);&#10;&#10;      const ordersData = await ordersResponse.json();&#10;&#10;      setFarmer(farmerData.farmer);&#10;      setProducts(farmerData.farmer.products || []); // Use products from farmer data&#10;&#10;      // Use the stats already calculated by the API instead of recalculating&#10;      const farmerProducts = farmerData.farmer.products || [];&#10;      const totalProducts = farmerProducts.length;&#10;      const activeProducts = farmerProducts.filter((p) =&gt; p.stock &gt; 0).length;&#10;      const totalStock = farmerProducts.reduce(&#10;        (sum, p) =&gt; sum + (p.stock || 0),&#10;        0,&#10;      );&#10;      const averagePrice =&#10;        farmerProducts.length &gt; 0&#10;          ? (&#10;              farmerProducts.reduce((sum, p) =&gt; sum + (p.price || 0), 0) /&#10;              farmerProducts.length&#10;            ).toFixed(2)&#10;          : 0;&#10;      const averageRating =&#10;        farmerProducts.length &gt; 0&#10;          ? (&#10;              farmerProducts.reduce(&#10;                (sum, p) =&gt; sum + (p.averageRating || 0),&#10;                0,&#10;              ) / farmerProducts.length&#10;            ).toFixed(1)&#10;          : 0;&#10;&#10;      // Get categories from products&#10;      const categories = [&#10;        ...new Set(farmerProducts.map((p) =&gt; p.category).filter(Boolean)),&#10;      ];&#10;&#10;      // Get recent reviews from products&#10;      const allReviews = farmerProducts&#10;        .flatMap((p) =&gt;&#10;          (p.reviews || []).map((review) =&gt; ({&#10;            ...review,&#10;            productName: p.name,&#10;            productId: p._id,&#10;          })),&#10;        )&#10;        .sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt))&#10;        .slice(0, 5);&#10;&#10;      // Calculate revenue from orders&#10;      const farmerOrders = (ordersData.orders || []).filter((order) =&gt; {&#10;        return (&#10;          order.items &amp;&amp;&#10;          order.items.some(&#10;            (item) =&gt;&#10;              item.farmerId === farmerId ||&#10;              item.farmer?.id === farmerId ||&#10;              item.farmer?._id === farmerId ||&#10;              item.farmerEmail === farmerData.farmer?.email,&#10;          )&#10;        );&#10;      });&#10;&#10;      // Use exact same filtering logic as dashboard&#10;      const validOrders = farmerOrders.filter(&#10;        (order) =&gt;&#10;          order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;          order.status !== ORDER_STATUS.RETURNED,&#10;      );&#10;&#10;      // Calculate total revenue using the same method as dashboard analytics&#10;      const actualTotalRevenue = validOrders.reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;      // Calculate monthly revenue using the same method as dashboard&#10;      const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt);&#10;        const currentDate = new Date();&#10;        return (&#10;          orderDate.getMonth() === currentDate.getMonth() &amp;&amp;&#10;          orderDate.getFullYear() === currentDate.getFullYear()&#10;        );&#10;      });&#10;&#10;      const monthlyRevenue = thisMonthValidOrders.reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;      setReviews(allReviews);&#10;      setStats({&#10;        totalProducts,&#10;        activeProducts,&#10;        totalStock,&#10;        averagePrice,&#10;        averageRating,&#10;        categories,&#10;        totalReviews: allReviews.length,&#10;        familiesServed: Math.floor(totalProducts * 50 + Math.random() * 200),&#10;        farmSize: farmerData.farmer.farmSize || 0,&#10;        farmSizeUnit: farmerData.farmer.farmSizeUnit || &quot;acres&quot;,&#10;        yearsOfExperience:&#10;          farmerData.farmer.yearsOfExperience ||&#10;          calculateYearsOfExperience(&#10;            farmerData.farmer.joinedDate,&#10;            farmerData.farmer.createdAt,&#10;          ),&#10;        certificationStatus: farmerData.farmer.isCertified&#10;          ? &quot;Certified&quot;&#10;          : &quot;In Progress&quot;,&#10;        farmingMethods: farmerData.farmer.farmingMethods || [&#10;          &quot;Organic&quot;,&#10;          &quot;Sustainable&quot;,&#10;        ],&#10;        monthlyRevenue: monthlyRevenue.toFixed(2),&#10;        totalRevenue: actualTotalRevenue.toFixed(2),&#10;        inventoryValue: (parseFloat(averagePrice) * totalStock).toFixed(2),&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching farmer data:&quot;, error);&#10;      setError(error.message);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;relative&quot;&gt;&#10;              &lt;div className=&quot;animate-spin rounded-full h-20 w-20 border-4 border-green-200 dark:border-gray-600 border-t-green-600 dark:border-t-green-400 mx-auto mb-6&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-user-tie text-green-600 dark:text-green-400 text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;              Loading Farmer Profile&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;              Discovering their story...&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error || !farmer) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;          &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;            &lt;div className=&quot;text-red-500 text-6xl mb-6&quot;&gt;&#10;              &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Farmer Not Found&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;              {error ||&#10;                &quot;The farmer you're looking for doesn't exist or has been removed.&quot;}&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-center&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; router.back()}&#10;                className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Go Back&#10;              &lt;/button&gt;&#10;              &lt;Link&#10;                href=&quot;/farmers&quot;&#10;                className=&quot;bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-users mr-2&quot;&gt;&lt;/i&gt;&#10;                Browse Farmers&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;        {/* Hero Section with Dynamic Farmer Story */}&#10;        &lt;div className=&quot;relative overflow-hidden&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-600 via-emerald-600 to-teal-600&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-black/20&quot;&gt;&lt;/div&gt;&#10;&#10;          &lt;div className=&quot;relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20&quot;&gt;&#10;            {/* Breadcrumb */}&#10;            &lt;nav className=&quot;flex mb-8&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/&quot;&#10;                    className=&quot;text-white/80 hover:text-white transition-colors flex items-center&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;&#10;                    Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-white/60 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/farmers&quot;&#10;                    className=&quot;text-white/80 hover:text-white transition-colors&quot;&#10;                  &gt;&#10;                    Farmers&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-white/60 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-white font-medium&quot;&gt;{farmer.name}&lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Dynamic Farmer Profile Header */}&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-12 items-start&quot;&gt;&#10;              {/* Profile Image and Basic Info */}&#10;              &lt;div className=&quot;text-center lg:text-left&quot;&gt;&#10;                &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                  &lt;div className=&quot;w-48 h-48 mx-auto lg:mx-0 rounded-full bg-gradient-to-br from-white/20 to-white/10 backdrop-blur-sm border-4 border-white/30 overflow-hidden shadow-2xl&quot;&gt;&#10;                    {farmer.profilePicture ? (&#10;                      &lt;img&#10;                        src={farmer.profilePicture}&#10;                        alt={farmer.name}&#10;                        className=&quot;w-full h-full object-cover&quot;&#10;                      /&gt;&#10;                    ) : (&#10;                      &lt;div className=&quot;w-full h-full flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user-tie text-6xl text-white/80&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                  {farmer.verified &amp;&amp; (&#10;                    &lt;div className=&quot;absolute -top-2 -right-2 bg-green-500 text-white rounded-full p-3 shadow-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check text-lg&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;h1 className=&quot;text-4xl lg:text-5xl font-bold text-white mb-2&quot;&gt;&#10;                  {farmer.name}&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-xl text-white/90 mb-4&quot;&gt;&#10;                  {farmer.farmName || `${farmer.name}'s Farm`}&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center justify-center lg:justify-start text-white/80 mb-6&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-map-marker-alt mr-2 text-yellow-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;text-lg&quot;&gt;{farmer.location}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Dynamic Quick Stats - Use stats.yearsOfExperience instead of recalculating */}&#10;                &lt;div className=&quot;grid grid-cols-2 gap-4 mb-8&quot;&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.yearsOfExperience}+&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;&#10;                      Years Experience&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.totalProducts}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;Products&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.averageRating || &quot;N/A&quot;}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;Avg Rating&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20&quot;&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-white&quot;&gt;&#10;                      {stats.categories?.length || 0}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-white/80 text-sm&quot;&gt;Categories&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Dynamic Farmer's Mission &amp; Values */}&#10;              &lt;div className=&quot;lg:col-span-2&quot;&gt;&#10;                &lt;div className=&quot;bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20&quot;&gt;&#10;                  &lt;h2 className=&quot;text-3xl font-bold text-white mb-6 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-heart mr-3 text-red-400&quot;&gt;&lt;/i&gt;&#10;                    Our Mission&#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-white/90 text-lg leading-relaxed mb-6&quot;&gt;&#10;                    {farmer.bio ||&#10;                      `${farmer.name} is dedicated to providing the freshest, highest-quality produce through sustainable farming practices. Our farm has been serving the community with passion and commitment to environmental stewardship.`}&#10;                  &lt;/p&gt;&#10;                  {/* Dynamic Specializations - Only show once here */}&#10;                  {farmer.specializations &amp;&amp;&#10;                    farmer.specializations.length &gt; 0 &amp;&amp; (&#10;                      &lt;div className=&quot;mb-6&quot;&gt;&#10;                        &lt;h3 className=&quot;text-white font-semibold mb-3&quot;&gt;&#10;                          Our Specializations:&#10;                        &lt;/h3&gt;&#10;                        &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                          {farmer.specializations.map((spec, index) =&gt; (&#10;                            &lt;span&#10;                              key={index}&#10;                              className=&quot;bg-white/20 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm font-medium border border-white/30&quot;&#10;                            &gt;&#10;                              {spec}&#10;                            &lt;/span&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  {/* Dynamic Core Values based on farmer's specializations and methods */}&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                    {farmer.specializations &amp;&amp; farmer.specializations.length &gt; 0&#10;                      ? farmer.specializations&#10;                          .slice(0, 3)&#10;                          .map((specialization, index) =&gt;&#10;                            renderSpecializationCard(specialization, index),&#10;                          )&#10;                      : renderFallbackCoreValues()}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Dynamic Main Content Tabs */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16&quot;&gt;&#10;          {/* Tab Navigation */}&#10;          &lt;div className=&quot;flex flex-wrap justify-center gap-2 mb-12&quot;&gt;&#10;            {[&#10;              { id: &quot;story&quot;, label: &quot;Our Story&quot;, icon: &quot;fas fa-book-open&quot; },&#10;              {&#10;                id: &quot;products&quot;,&#10;                label: &quot;Product Overview&quot;,&#10;                icon: &quot;fas fa-seedling&quot;,&#10;              },&#10;              { id: &quot;reviews&quot;, label: &quot;Customer Reviews&quot;, icon: &quot;fas fa-star&quot; },&#10;              {&#10;                id: &quot;stats&quot;,&#10;                label: &quot;Farm Statistics&quot;,&#10;                icon: &quot;fas fa-chart-bar&quot;,&#10;              },&#10;            ].map((tab) =&gt; (&#10;              &lt;button&#10;                key={tab.id}&#10;                onClick={() =&gt; setActiveTab(tab.id)}&#10;                className={`px-6 py-3 rounded-full font-medium transition-all duration-300 flex items-center ${&#10;                  activeTab === tab.id&#10;                    ? &quot;bg-green-600 text-white shadow-lg&quot;&#10;                    : &quot;bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-green-50 dark:hover:bg-gray-700&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`${tab.icon} mr-2`}&gt;&lt;/i&gt;&#10;                {tab.label}&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;&#10;          {/* Dynamic Tab Content */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8&quot;&gt;&#10;            {activeTab === &quot;story&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Our Farming Journey&#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto&quot;&gt;&#10;                    Every farm has a story. Here&amp;apos;s ours - a tale of&#10;                    passion, dedication, and love for the land.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12 items-center&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      The Beginning&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed mb-6&quot;&gt;&#10;                      {farmer.bio ||&#10;                        `${farmer.name} started their farming journey in ${new Date(&#10;                          farmer.joinedDate || farmer.createdAt,&#10;                        ).getFullYear()} with a simple dream: to grow the best produce possible while caring for the environment. What began as a small family operation has grown into a trusted source of fresh, healthy food for our community.`}&#10;                    &lt;/p&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center&quot;&gt;&#10;                        &lt;div className=&quot;w-10 h-10 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mr-4&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-calendar text-green-600 dark:text-green-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            Farm Established&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {new Date(&#10;                              farmer.joinedDate || farmer.createdAt,&#10;                            ).getFullYear()}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center&quot;&gt;&#10;                        &lt;div className=&quot;w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mr-4&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-heart text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            Our Mission&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Providing fresh, sustainable produce to our&#10;                            community&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center&quot;&gt;&#10;                        &lt;div className=&quot;w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mr-4&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            Farming Philosophy&#10;                          &lt;/h4&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {stats.farmingMethods?.length &gt; 0&#10;                              ? `${stats.farmingMethods.join(&quot;, &quot;)} practices`&#10;                              : &quot;Sustainable and eco-friendly methods&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                    {/* Show farming achievements and highlights instead of repeating stats */}&#10;                    &lt;div className=&quot;bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900 dark:to-emerald-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-certificate text-3xl text-green-600 dark:text-green-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        {farmer.isCertified&#10;                          ? &quot;Certified Organic&quot;&#10;                          : &quot;Quality Farming&quot;}&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        {farmer.isCertified&#10;                          ? &quot;Officially certified organic farming&quot;&#10;                          : &quot;Committed to quality and safety standards&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900 dark:to-cyan-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-users text-3xl text-blue-600 dark:text-blue-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Community Impact&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Proudly serving {stats.familiesServed}+ families monthly&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900 dark:to-pink-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-star text-3xl text-purple-600 dark:text-purple-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Customer Satisfaction&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        {stats.averageRating &gt; 0&#10;                          ? `${stats.averageRating}/5 average rating`&#10;                          : &quot;Building trust with every harvest&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900 dark:to-orange-900 p-6 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-seedling text-3xl text-yellow-600 dark:text-yellow-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Product Variety&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        {stats.totalProducts} products across{&quot; &quot;}&#10;                        {stats.categories?.length || 0} categories&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === &quot;products&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Our Product Categories&#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto&quot;&gt;&#10;                    We grow a diverse range of fresh produce across{&quot; &quot;}&#10;                    {stats.categories?.length || 0} categories.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {stats.categories &amp;&amp; stats.categories.length &gt; 0 ? (&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12&quot;&gt;&#10;                    {stats.categories.map((category, index) =&gt; {&#10;                      const categoryProducts = products.filter(&#10;                        (p) =&gt; p.category === category,&#10;                      );&#10;                      const avgPrice =&#10;                        categoryProducts.length &gt; 0&#10;                          ? (&#10;                              categoryProducts.reduce(&#10;                                (sum, p) =&gt; sum + (p.price || 0),&#10;                                0,&#10;                              ) / categoryProducts.length&#10;                            ).toFixed(2)&#10;                          : 0;&#10;&#10;                      return (&#10;                        &lt;div&#10;                          key={index}&#10;                          className=&quot;bg-gradient-to-br from-green-50 to-emerald-50 dark:from-gray-700 dark:to-gray-600 p-8 rounded-xl shadow-lg&quot;&#10;                        &gt;&#10;                          &lt;div className=&quot;w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-leaf text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white text-center mb-4&quot;&gt;&#10;                            {category}&#10;                          &lt;/h3&gt;&#10;                          &lt;div className=&quot;text-center space-y-2&quot;&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              {categoryProducts.length} products&#10;                            &lt;/p&gt;&#10;                            &lt;p className=&quot;text-lg font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              Avg: ${avgPrice}&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-seedling text-6xl text-gray-300 dark:text-gray-600 mb-4&quot;&gt;&lt;/i&gt;&#10;                    &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-lg&quot;&gt;&#10;                      No products available yet. Check back soon!&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Featured Products Preview */}&#10;                {products.length &gt; 0 &amp;&amp; (&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-semibold text-gray-900 dark:text-white mb-6 text-center&quot;&gt;&#10;                      Featured Products&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-6&quot;&gt;&#10;                      {products.slice(0, 3).map((product, index) =&gt; (&#10;                        &lt;div&#10;                          key={product._id}&#10;                          className={`flex ${&#10;                            index % 2 === 0 ? &quot;flex-row&quot; : &quot;flex-row-reverse&quot;&#10;                          } items-center gap-8 bg-gradient-to-r ${&#10;                            index % 3 === 0&#10;                              ? &quot;from-green-50 to-emerald-50 dark:from-green-900/30 dark:to-emerald-900/30&quot;&#10;                              : index % 3 === 1&#10;                                ? &quot;from-blue-50 to-cyan-50 dark:from-blue-900/30 dark:to-cyan-900/30&quot;&#10;                                : &quot;from-purple-50 to-pink-50 dark:from-purple-900/30 dark:to-pink-900/30&quot;&#10;                          } p-8 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02]`}&#10;                        &gt;&#10;                          {/* Product Image */}&#10;                          &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                            &lt;div className=&quot;w-32 h-32 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                              {product.images &amp;&amp; product.images[0] ? (&#10;                                &lt;img&#10;                                  src={product.images[0]}&#10;                                  alt={product.name}&#10;                                  className=&quot;w-full h-full object-cover&quot;&#10;                                /&gt;&#10;                              ) : (&#10;                                &lt;div className=&quot;w-full h-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center&quot;&gt;&#10;                                  &lt;i className=&quot;fas fa-image text-gray-400 text-3xl&quot;&gt;&lt;/i&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Product Info */}&#10;                          &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                            &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                              &lt;div className=&quot;flex-1&quot;&gt;&#10;                                &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                  {product.name}&#10;                                &lt;/h4&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                  Category: {product.category}&#10;                                &lt;/p&gt;&#10;&#10;                                {/* Rating */}&#10;                                {product.averageRating &amp;&amp; (&#10;                                  &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;                                    &lt;div className=&quot;flex text-yellow-400 mr-2&quot;&gt;&#10;                                      {[...Array(5)].map((_, i) =&gt; (&#10;                                        &lt;i&#10;                                          key={i}&#10;                                          className={`fas fa-star text-sm ${&#10;                                            i &lt;&#10;                                            Math.floor(product.averageRating)&#10;                                              ? &quot;text-yellow-400&quot;&#10;                                              : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                          }`}&#10;                                        &gt;&lt;/i&gt;&#10;                                      ))}&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                      ({product.averageRating}/5)&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;&#10;                                {/* Product Description */}&#10;                                {product.description &amp;&amp; (&#10;                                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-2&quot;&gt;&#10;                                    {product.description}&#10;                                  &lt;/p&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Price and Actions */}&#10;                              &lt;div className=&quot;flex flex-col items-end gap-4 ml-6&quot;&gt;&#10;                                &lt;div className=&quot;text-right&quot;&gt;&#10;                                  &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                                    ${product.price}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div&#10;                                    className={`text-sm ${&#10;                                      product.stock &gt; 0&#10;                                        ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                        : &quot;text-red-500&quot;&#10;                                    }`}&#10;                                  &gt;&#10;                                    {product.stock &gt; 0&#10;                                      ? `${product.stock} available`&#10;                                      : &quot;Out of stock&quot;}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                                  &lt;button&#10;                                    className={`px-6 py-3 rounded-lg font-medium transition-all ${&#10;                                      product.stock &gt; 0&#10;                                        ? &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                                        : &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                                    }`}&#10;                                    disabled={product.stock === 0}&#10;                                  &gt;&#10;                                    &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {product.stock &gt; 0&#10;                                      ? &quot;Add to Cart&quot;&#10;                                      : &quot;Sold Out&quot;}&#10;                                  &lt;/button&gt;&#10;&#10;                                  &lt;button className=&quot;p-3 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300 rounded-lg transition-all&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart&quot;&gt;&lt;/i&gt;&#10;                                  &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* View All Products Button */}&#10;                    &lt;div className=&quot;text-center mt-8&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/farmers/${farmerId}/details`}&#10;                        className=&quot;inline-flex items-center px-8 py-4 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-store mr-3&quot;&gt;&lt;/i&gt;&#10;                        View All {stats.totalProducts} Products&#10;                        &lt;i className=&quot;fas fa-arrow-right ml-3&quot;&gt;&lt;/i&gt;&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-rose-600 bg-clip-text text-transparent mb-6&quot;&gt;&#10;                     Customer Testimonials &#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto leading-relaxed&quot;&gt;&#10;                    Discover what our valued customers are saying about their&#10;                    experience with our fresh, quality produce and exceptional&#10;                    service.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {reviews.length &gt; 0 ? (&#10;                  &lt;div className=&quot;space-y-8&quot;&gt;&#10;                    {/* Reviews Statistics Banner */}&#10;                    &lt;div className=&quot;bg-gradient-to-r from-purple-600 via-pink-600 to-rose-600 rounded-3xl p-8 mb-12&quot;&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8 text-white text-center&quot;&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                          &lt;div className=&quot;text-5xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                            {reviews.length}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-white/90 text-lg&quot;&gt;&#10;                            Total Reviews&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;w-16 h-1 bg-white/30 mx-auto mt-2 rounded-full&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                          &lt;div className=&quot;text-5xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                            {stats.averageRating}★&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-white/90 text-lg&quot;&gt;&#10;                            Average Rating&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex justify-center mt-2&quot;&gt;&#10;                            {[...Array(5)].map((_, i) =&gt; (&#10;                              &lt;i&#10;                                key={i}&#10;                                className={`fas fa-star text-lg ${&#10;                                  i &lt; Math.floor(stats.averageRating || 0)&#10;                                    ? &quot;text-yellow-300&quot;&#10;                                    : &quot;text-white/30&quot;&#10;                                }`}&#10;                              &gt;&lt;/i&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;group&quot;&gt;&#10;                          &lt;div className=&quot;text-5xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                            98%&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-white/90 text-lg&quot;&gt;&#10;                            Satisfaction Rate&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;w-16 h-1 bg-white/30 mx-auto mt-2 rounded-full&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Reviews Grid with Different Layouts */}&#10;                    &lt;div className=&quot;space-y-8&quot;&gt;&#10;                      {reviews.map((review, index) =&gt; {&#10;                        const layoutVariants = [&#10;                          &quot;premium-testimonial&quot;,&#10;                          &quot;modern-review&quot;,&#10;                          &quot;elegant-feedback&quot;,&#10;                          &quot;vibrant-comment&quot;,&#10;                          &quot;classic-review&quot;,&#10;                        ];&#10;                        const variant =&#10;                          layoutVariants[index % layoutVariants.length];&#10;&#10;                        // Premium Testimonial Layout&#10;                        if (variant === &quot;premium-testimonial&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 dark:from-indigo-900/20 dark:via-purple-900/20 dark:to-pink-900/20 p-8 hover:shadow-2xl transition-all duration-700 border-2 border-indigo-200 dark:border-indigo-800&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-indigo-400/5 to-purple-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                              &lt;div className=&quot;absolute top-4 right-4 w-20 h-20 bg-indigo-100 dark:bg-indigo-800/30 rounded-full opacity-20 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10&quot;&gt;&#10;                                &lt;div className=&quot;flex items-start space-x-6&quot;&gt;&#10;                                  {/* Avatar Section */}&#10;                                  &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                                    &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center text-white text-2xl font-bold shadow-lg group-hover:rotate-12 transition-transform duration-500&quot;&gt;&#10;                                      {(review.reviewer || &quot;A&quot;)&#10;                                        .charAt(0)&#10;                                        .toUpperCase()}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-center mt-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex justify-center space-x-1&quot;&gt;&#10;                                        {[...Array(5)].map((_, i) =&gt; (&#10;                                          &lt;i&#10;                                            key={i}&#10;                                            className={`fas fa-star text-lg ${&#10;                                              i &lt; review.rating&#10;                                                ? &quot;text-yellow-400&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&lt;/i&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;div className=&quot;text-sm text-indigo-600 dark:text-indigo-400 font-medium mt-1&quot;&gt;&#10;                                        {review.rating}/5 Stars&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;&#10;                                  {/* Content Section */}&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;mb-4&quot;&gt;&#10;                                      &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                        {review.reviewer ||&#10;                                          &quot;Anonymous Customer&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                        &lt;span className=&quot;flex items-center&quot;&gt;&#10;                                          &lt;i className=&quot;fas fa-box mr-2 text-purple-500&quot;&gt;&lt;/i&gt;&#10;                                          {review.productName}&#10;                                        &lt;/span&gt;&#10;                                        &lt;span className=&quot;flex items-center&quot;&gt;&#10;                                          &lt;i className=&quot;fas fa-calendar mr-2 text-indigo-500&quot;&gt;&lt;/i&gt;&#10;                                          {new Date(&#10;                                            review.createdAt,&#10;                                          ).toLocaleDateString()}&#10;                                        &lt;/span&gt;&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div className=&quot;relative&quot;&gt;&#10;                                      &lt;div className=&quot;absolute -top-2 -left-2 text-6xl text-indigo-200 dark:text-indigo-800 opacity-50&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-quote-left&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/div&gt;&#10;                                      &lt;p className=&quot;text-gray-700 dark:text-gray-300 text-lg leading-relaxed italic pl-8 pr-4&quot;&gt;&#10;                                        {review.comment}&#10;                                      &lt;/p&gt;&#10;                                      &lt;div className=&quot;absolute -bottom-2 -right-2 text-6xl text-indigo-200 dark:text-indigo-800 opacity-50 transform rotate-180&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-quote-left&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Modern Review Layout&#10;                        if (variant === &quot;modern-review&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-gray-800 shadow-xl hover:shadow-2xl transition-all duration-500 border-l-8 border-emerald-500&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute inset-0 bg-gradient-to-r from-emerald-50/50 to-teal-50/50 dark:from-emerald-900/10 dark:to-teal-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10 p-8&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                    &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-xl flex items-center justify-center text-white text-xl font-bold shadow-lg&quot;&gt;&#10;                                      {(review.reviewer || &quot;A&quot;)&#10;                                        .charAt(0)&#10;                                        .toUpperCase()}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                      &lt;h4 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                                        {review.reviewer ||&#10;                                          &quot;Anonymous Customer&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;p className=&quot;text-emerald-600 dark:text-emerald-400 font-medium&quot;&gt;&#10;                                        Verified Purchase&#10;                                      &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-1 justify-end mb-2&quot;&gt;&#10;                                      {[...Array(5)].map((_, i) =&gt; (&#10;                                        &lt;i&#10;                                          key={i}&#10;                                          className={`fas fa-star text-xl ${&#10;                                            i &lt; review.rating&#10;                                              ? &quot;text-yellow-400&quot;&#10;                                              : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                          }`}&#10;                                        &gt;&lt;/i&gt;&#10;                                      ))}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                                      {new Date(&#10;                                        review.createdAt,&#10;                                      ).toLocaleDateString()}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;mb-4&quot;&gt;&#10;                                  &lt;div className=&quot;inline-flex items-center bg-emerald-100 dark:bg-emerald-900/30 text-emerald-800 dark:text-emerald-300 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-leaf mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {review.productName}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 text-lg leading-relaxed&quot;&gt;&#10;                                  {review.comment}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Elegant Feedback Layout&#10;                        if (variant === &quot;elegant-feedback&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-rose-50 via-pink-50 to-red-50 dark:from-rose-900/20 dark:via-pink-900/20 dark:to-red-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-rose-200 dark:border-rose-800&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-rose-400/5 to-pink-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                              &lt;div className=&quot;absolute top-4 right-4 w-20 h-20 bg-rose-100 dark:bg-rose-800/30 rounded-full opacity-20 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10&quot;&gt;&#10;                                &lt;div className=&quot;text-center mb-6&quot;&gt;&#10;                                  &lt;div className=&quot;w-24 h-24 bg-gradient-to-br from-rose-400 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-xl group-hover:rotate-12 transition-transform duration-500&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                                    {review.reviewer || &quot;Happy Customer&quot;}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;div className=&quot;flex justify-center space-x-1 mb-3&quot;&gt;&#10;                                    {[...Array(5)].map((_, i) =&gt; (&#10;                                      &lt;i&#10;                                        key={i}&#10;                                        className={`fas fa-star text-2xl ${&#10;                                          i &lt; review.rating&#10;                                            ? &quot;text-yellow-400&quot;&#10;                                            : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                        }`}&#10;                                      &gt;&lt;/i&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;inline-flex items-center bg-rose-100 dark:bg-rose-900/30 text-rose-800 dark:text-rose-300 px-4 py-2 rounded-full text-sm font-medium&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-apple-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {review.productName}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;text-center&quot;&gt;&#10;                                  &lt;p className=&quot;text-gray-700 dark:text-gray-300 text-xl leading-relaxed italic font-light&quot;&gt;&#10;                                    &quot;{review.comment}&quot;&#10;                                  &lt;/p&gt;&#10;                                  &lt;div className=&quot;mt-6 text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-calendar-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                    {new Date(&#10;                                      review.createdAt,&#10;                                    ).toLocaleDateString()}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Vibrant Comment Layout&#10;                        if (variant === &quot;vibrant-comment&quot;) {&#10;                          return (&#10;                            &lt;div&#10;                              key={index}&#10;                              className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-r from-cyan-500 to-blue-600 p-8 hover:shadow-2xl transition-all duration-500 text-white&quot;&#10;                            &gt;&#10;                              &lt;div className=&quot;absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-blue-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                              &lt;div className=&quot;absolute top-0 right-0 w-40 h-40 bg-white/10 rounded-full transform translate-x-20 -translate-y-20 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative z-10&quot;&gt;&#10;                                &lt;div className=&quot;flex items-start space-x-6&quot;&gt;&#10;                                  &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                                    &lt;div className=&quot;w-18 h-18 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center text-2xl font-bold shadow-lg&quot;&gt;&#10;                                      {(review.reviewer || &quot;A&quot;)&#10;                                        .charAt(0)&#10;                                        .toUpperCase()}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                      &lt;div&gt;&#10;                                        &lt;h4 className=&quot;text-xl font-bold mb-1&quot;&gt;&#10;                                          {review.reviewer || &quot;Valued Customer&quot;}&#10;                                        &lt;/h4&gt;&#10;                                        &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                          {[...Array(5)].map((_, i) =&gt; (&#10;                                            &lt;i&#10;                                              key={i}&#10;                                              className={`fas fa-star ${&#10;                                                i &lt; review.rating&#10;                                                  ? &quot;text-yellow-300&quot;&#10;                                                  : &quot;text-white/30&quot;&#10;                                              }`}&#10;                                            &gt;&lt;/i&gt;&#10;                                          ))}&#10;                                          &lt;span className=&quot;ml-2 text-white/90&quot;&gt;&#10;                                            ({review.rating}/5)&#10;                                          &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                      &lt;/div&gt;&#10;                                      &lt;div className=&quot;text-right text-white/80 text-sm&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt,&#10;                                        ).toLocaleDateString()}&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;div className=&quot;mb-4&quot;&gt;&#10;                                      &lt;span className=&quot;inline-flex items-center bg-white/20 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-tag mr-2&quot;&gt;&lt;/i&gt;&#10;                                        {review.productName}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;p className=&quot;text-white/95 text-lg leading-relaxed&quot;&gt;&#10;                                      {review.comment}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          );&#10;                        }&#10;&#10;                        // Classic Review Layout (Default)&#10;                        return (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;group relative overflow-hidden rounded-xl bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-200 dark:border-gray-700&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-gray-50/50 to-slate-50/50 dark:from-gray-700/50 dark:to-slate-700/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;relative z-10 p-6&quot;&gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                  &lt;div className=&quot;w-12 h-12 bg-gradient-to-br from-gray-400 to-slate-500 rounded-lg flex items-center justify-center text-white font-bold&quot;&gt;&#10;                                    {(review.reviewer || &quot;A&quot;)&#10;                                      .charAt(0)&#10;                                      .toUpperCase()}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                      {review.reviewer || &quot;Anonymous Customer&quot;}&#10;                                    &lt;/h4&gt;&#10;                                    &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      {review.productName}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;text-right&quot;&gt;&#10;                                  &lt;div className=&quot;flex items-center space-x-1 mb-1&quot;&gt;&#10;                                    {[...Array(5)].map((_, i) =&gt; (&#10;                                      &lt;i&#10;                                        key={i}&#10;                                        className={`fas fa-star text-sm ${&#10;                                          i &lt; review.rating&#10;                                            ? &quot;text-yellow-400&quot;&#10;                                            : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                        }`}&#10;                                      &gt;&lt;/i&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    {new Date(&#10;                                      review.createdAt,&#10;                                    ).toLocaleDateString()}&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed&quot;&gt;&#10;                                {review.comment}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        );&#10;                      })}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Satisfaction Footer */}&#10;                    &lt;div className=&quot;bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-3xl p-8 mt-12 border border-green-200 dark:border-green-800&quot;&gt;&#10;                      &lt;div className=&quot;text-center&quot;&gt;&#10;                        &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-thumbs-up text-white text-3xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                          Thank You for Your Trust! &#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-2xl mx-auto leading-relaxed&quot;&gt;&#10;                          Your feedback helps us grow better produce and serve&#10;                          our community with excellence. Every review makes a&#10;                          difference in our farming journey.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-6 flex justify-center space-x-8&quot;&gt;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              100%&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                              Fresh Guarantee&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              24/7&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                              Customer Support&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;text-3xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                              Fast&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                              Delivery&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-20&quot;&gt;&#10;                    &lt;div className=&quot;w-32 h-32 bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 rounded-full flex items-center justify-center mx-auto mb-8 shadow-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-comment-dots text-6xl text-purple-400 dark:text-purple-300&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      No Reviews Yet&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-xl max-w-md mx-auto leading-relaxed mb-8&quot;&gt;&#10;                      Be the first to share your experience with our fresh&#10;                      produce! Your feedback helps us serve you better.&#10;                    &lt;/p&gt;&#10;                    &lt;div className=&quot;inline-flex items-center bg-gradient-to-r from-purple-500 to-pink-600 text-white px-8 py-4 rounded-2xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-star mr-3&quot;&gt;&lt;/i&gt;&#10;                      Leave the First Review&#10;                      &lt;i className=&quot;fas fa-arrow-right ml-3&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {activeTab === &quot;stats&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-8&quot;&gt;&#10;                &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;                  &lt;h2 className=&quot;text-4xl font-bold bg-gradient-to-r from-emerald-600 via-teal-600 to-cyan-600 bg-clip-text text-transparent mb-6&quot;&gt;&#10;                     Farm Analytics Dashboard &#10;                  &lt;/h2&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg max-w-3xl mx-auto leading-relaxed&quot;&gt;&#10;                    Discover the comprehensive insights behind our farm's&#10;                    productivity, community impact, and sustainable growth&#10;                    journey.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Primary Statistics Showcase */}&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12&quot;&gt;&#10;                  {/* Holographic Products Card */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-emerald-50 via-green-50 to-teal-50 dark:from-emerald-900/20 dark:via-green-900/20 dark:to-teal-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-emerald-400/10 to-teal-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute top-4 right-4 w-16 h-16 bg-emerald-100 dark:bg-emerald-800/30 rounded-full opacity-20 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-emerald-500 to-green-600 rounded-2xl flex items-center justify-center transform group-hover:rotate-12 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-seedling text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-emerald-600 dark:text-emerald-400 mb-1&quot;&gt;&#10;                            {stats.totalProducts}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-emerald-500 dark:text-emerald-300 text-sm font-medium&quot;&gt;&#10;                            Total Products&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          &lt;span&gt;Active Items&lt;/span&gt;&#10;                          &lt;span className=&quot;font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                            {stats.activeProducts}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;w-full bg-emerald-100 dark:bg-emerald-900/30 rounded-full h-3&quot;&gt;&#10;                          &lt;div&#10;                            className=&quot;bg-gradient-to-r from-emerald-500 to-green-500 h-3 rounded-full transition-all duration-1000 shadow-sm&quot;&#10;                            style={{&#10;                              width: `${(stats.activeProducts / stats.totalProducts) * 100}%`,&#10;                            }}&#10;                          &gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-center text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          {(&#10;                            (stats.activeProducts / stats.totalProducts) *&#10;                            100&#10;                          ).toFixed(0)}&#10;                          % availability rate&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Crystal Inventory Card */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-blue-50 via-cyan-50 to-indigo-50 dark:from-blue-900/20 dark:via-cyan-900/20 dark:to-indigo-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-blue-400/10 to-cyan-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute -top-4 -right-4 w-20 h-20 bg-blue-100 dark:bg-blue-800/30 rounded-full opacity-20 group-hover:scale-125 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-2xl flex items-center justify-center transform group-hover:scale-110 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-boxes text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-blue-600 dark:text-blue-400 mb-1&quot;&gt;&#10;                            {stats.totalStock}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-blue-500 dark:text-blue-300 text-sm font-medium&quot;&gt;&#10;                            Items in Stock&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div className=&quot;text-center p-3 bg-white/50 dark:bg-blue-900/20 rounded-xl&quot;&gt;&#10;                          &lt;div className=&quot;text-lg font-bold text-cyan-600 dark:text-cyan-400&quot;&gt;&#10;                            {stats.categories?.length || 0}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Categories&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-center p-3 bg-white/50 dark:bg-blue-900/20 rounded-xl&quot;&gt;&#10;                          &lt;div className=&quot;text-lg font-bold text-indigo-600 dark:text-indigo-400&quot;&gt;&#10;                            ${stats.averagePrice}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg Price&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Prismatic Community Impact */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-purple-50 via-pink-50 to-rose-50 dark:from-purple-900/20 dark:via-pink-900/20 dark:to-rose-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-purple-200 dark:border-purple-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-purple-400/10 to-pink-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute bottom-4 left-4 w-12 h-12 bg-purple-100 dark:bg-purple-800/30 rounded-full opacity-30 group-hover:animate-pulse&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center transform group-hover:rotate-45 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-users text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-purple-600 dark:text-purple-400 mb-1&quot;&gt;&#10;                            {stats.familiesServed}+&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-purple-500 dark:text-purple-300 text-sm font-medium&quot;&gt;&#10;                            Families Served&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          &lt;span&gt;Monthly Impact&lt;/span&gt;&#10;                          &lt;span className=&quot;font-bold text-pink-600 dark:text-pink-400&quot;&gt;&#10;                            Community&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                          &lt;div className=&quot;flex-1 h-2 bg-purple-100 dark:bg-purple-900/30 rounded-full overflow-hidden&quot;&gt;&#10;                            &lt;div className=&quot;h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full animate-pulse&quot;&gt;&lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs text-purple-600 dark:text-purple-400 font-medium&quot;&gt;&#10;                            Growing&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Luminous Performance */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-50 dark:from-amber-900/20 dark:via-yellow-900/20 dark:to-orange-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-amber-400/10 to-orange-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;absolute top-0 left-0 w-24 h-24 bg-amber-100 dark:bg-amber-800/30 rounded-full opacity-20 transform -translate-x-12 -translate-y-12 group-hover:scale-150 transition-transform duration-700&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-amber-500 to-orange-600 rounded-2xl flex items-center justify-center transform group-hover:scale-110 transition-transform duration-500 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-star text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-right&quot;&gt;&#10;                          &lt;div className=&quot;text-4xl font-bold text-amber-600 dark:text-amber-400 mb-1&quot;&gt;&#10;                            {stats.averageRating || &quot;N/A&quot;}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-amber-500 dark:text-amber-300 text-sm font-medium&quot;&gt;&#10;                            Average Rating&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          &lt;span&gt;Total Reviews&lt;/span&gt;&#10;                          &lt;span className=&quot;font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                            {stats.totalReviews}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                          {[...Array(5)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className={`fas fa-star text-lg ${&#10;                                i &lt; Math.floor(stats.averageRating || 0)&#10;                                  ? &quot;text-amber-400&quot;&#10;                                  : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                              }`}&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ({stats.averageRating}/5.0)&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Enhanced Farm Details Grid */}&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12&quot;&gt;&#10;                  {/* Experience Showcase */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-indigo-900/30 dark:to-purple-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-indigo-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-indigo-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-indigo-500 rounded-xl flex items-center justify-center transform group-hover:rotate-12 transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-clock text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-indigo-600 dark:text-indigo-400&quot;&gt;&#10;                          {stats.yearsOfExperience}+&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Years of Experience&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Dedicated farming expertise&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farm Size Display */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-green-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-500/5 to-emerald-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center transform group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-map text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600 dark:text-green-400&quot;&gt;&#10;                          {stats.farmSize || &quot;5&quot;} {stats.farmSizeUnit}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Farm Size&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Total cultivated area&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Certification Status */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-blue-100 to-cyan-100 dark:from-blue-900/30 dark:to-cyan-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-blue-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-blue-500/5 to-cyan-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center transform group-hover:bounce transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-certificate text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&#10;                          className={`px-3 py-1 rounded-full text-sm font-medium ${&#10;                            stats.certificationStatus === &quot;Certified&quot;&#10;                              ? &quot;bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                              : &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                          }`}&#10;                        &gt;&#10;                          {stats.certificationStatus}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Certification&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Quality assurance status&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farming Methods */}&#10;                  &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-gradient-to-br from-orange-100 to-red-100 dark:from-orange-900/30 dark:to-red-900/30 p-6 hover:shadow-xl transition-all duration-500 border-l-4 border-orange-500&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-orange-500/5 to-red-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;relative z-10&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                        &lt;div className=&quot;w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center transform group-hover:rotate-45 transition-transform duration-300&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-white text-lg&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                          {stats.farmingMethods?.length || 2}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                        Methods Used&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                        Sustainable practices&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Revenue Analytics Section */}&#10;                &lt;div className=&quot;bg-gradient-to-br from-slate-50 to-gray-100 dark:from-slate-900/50 dark:to-gray-900/50 rounded-3xl p-8 mb-12 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;                  &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                       Revenue Analytics&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Financial performance and growth metrics&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;                    {/* Monthly Revenue */}&#10;                    &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-slate-800 p-6 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;                      &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-emerald-400/20 to-green-400/20 rounded-full transform translate-x-10 -translate-y-10 group-hover:scale-150 transition-transform duration-500&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;relative z-10&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                          &lt;div className=&quot;w-12 h-12 bg-emerald-100 dark:bg-emerald-900/30 rounded-xl flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-calendar-alt text-emerald-600 dark:text-emerald-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400 px-2 py-1 rounded-full font-medium&quot;&gt;&#10;                            This Month&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400 mb-2&quot;&gt;&#10;                          ${stats.monthlyRevenue}&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                          Monthly Revenue&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                          Current month earnings&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Total Revenue */}&#10;                    &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-slate-800 p-6 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;                      &lt;div className=&quot;absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-blue-400/20 to-cyan-400/20 rounded-full transform -translate-x-12 translate-y-12 group-hover:scale-150 transition-transform duration-500&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;relative z-10&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                          &lt;div className=&quot;w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-chart-line text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 px-2 py-1 rounded-full font-medium&quot;&gt;&#10;                            All Time&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2&quot;&gt;&#10;                          ${stats.totalRevenue}&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                          Lifetime earnings&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Inventory Value */}&#10;                    &lt;div className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-slate-800 p-6 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;                      &lt;div className=&quot;absolute top-1/2 right-0 w-16 h-16 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full transform translate-x-8 -translate-y-8 group-hover:scale-150 transition-transform duration-500&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;relative z-10&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                          &lt;div className=&quot;w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex items-center justify-center&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-warehouse text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400 px-2 py-1 rounded-full font-medium&quot;&gt;&#10;                            Current&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2&quot;&gt;&#10;                          ${stats.inventoryValue}&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-1&quot;&gt;&#10;                          Inventory Value&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                          Stock worth&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farming Methods Showcase */}&#10;                {stats.farmingMethods &amp;&amp; stats.farmingMethods.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mb-12&quot;&gt;&#10;                    &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                      &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                         Our Farming Philosophy&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        Sustainable and innovative agricultural practices&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                      {stats.farmingMethods.map((method, index) =&gt; {&#10;                        const config = methodConfig[method] || {&#10;                          icon: &quot;fas fa-tractor&quot;,&#10;                          color: &quot;text-gray-600 dark:text-gray-400&quot;,&#10;                          description: &quot;Specialized farming technique&quot;,&#10;                        };&#10;&#10;                        return (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-8 shadow-lg hover:shadow-2xl transition-all duration-500 border-t-4 border-green-500&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-50/50 to-emerald-50/50 dark:from-green-900/10 dark:to-emerald-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;relative z-10 text-center&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                                &lt;i&#10;                                  className={`${config.icon} text-4xl ${config.color}`}&#10;                                &gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;h4 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                                {method}&#10;                              &lt;/h4&gt;&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                                {config.description}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        );&#10;                      })}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Growth Metrics Footer */}&#10;                &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-3xl p-8 text-white&quot;&gt;&#10;                  &lt;div className=&quot;text-center&quot;&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-bold mb-6&quot;&gt;&#10;                       Growth Trajectory&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;                      &lt;div className=&quot;group&quot;&gt;&#10;                        &lt;div className=&quot;text-4xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          {(&#10;                            (stats.activeProducts / stats.totalProducts) *&#10;                            100&#10;                          ).toFixed(0)}&#10;                          %&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-white/90&quot;&gt;&#10;                          Product Availability&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;group&quot;&gt;&#10;                        &lt;div className=&quot;text-4xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          {stats.familiesServed}+&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-white/90&quot;&gt;Community Reach&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;group&quot;&gt;&#10;                        &lt;div className=&quot;text-4xl font-bold mb-2 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                          {stats.averageRating || &quot;4.8&quot;}★&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-white/90&quot;&gt;&#10;                          Customer Satisfaction&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Dynamic Action Section */}&#10;        &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;h2 className=&quot;text-4xl font-bold text-white mb-8&quot;&gt;&#10;                Ready to Experience {farmer.farmName || `${farmer.name}'s Farm`}&#10;                ?&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;                &lt;Link&#10;                  href={`/farmers/${farmerId}/details`}&#10;                  className=&quot;group bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white p-8 rounded-2xl transition-all duration-300 border border-white/30 transform hover:scale-105&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-store text-4xl mb-4 group-hover:scale-110 transition-transform&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold mb-2&quot;&gt;&#10;                    Browse {stats.totalProducts} Products&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-white/90&quot;&gt;&#10;                    Explore our full product catalog&#10;                  &lt;/p&gt;&#10;                &lt;/Link&gt;&#10;&#10;                &lt;div className=&quot;group bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white p-8 rounded-2xl transition-all duration-300 border border-white/30 transform hover:scale-105 cursor-pointer&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-star text-4xl mb-4 group-hover:scale-110 transition-transform&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold mb-2&quot;&gt;&#10;                    {stats.averageRating}/5 Rating&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-white/90&quot;&gt;See what customers say&lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;group bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white p-8 rounded-2xl transition-all duration-300 border border-white/30 transform hover:scale-105 cursor-pointer&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-envelope text-4xl mb-4 group-hover:scale-110 transition-transform&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold mb-2&quot;&gt;&#10;                    Contact {farmer.name}&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-white/90&quot;&gt;Get in touch with questions&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/manage/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/manage/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { useDashboardData } from &quot;@/hooks/useDashboardData&quot;;&#10;&#10;// Component imports&#10;import DashboardHeader from &quot;@/components/dashboard/DashboardHeader&quot;;&#10;import NavigationTabs from &quot;@/components/dashboard/NavigationTabs&quot;;&#10;import DashboardTab from &quot;@/components/dashboard/tabs/DashboardTab&quot;;&#10;import ProductsTab from &quot;@/components/dashboard/tabs/ProductsTab&quot;;&#10;import OrdersTab from &quot;@/components/dashboard/tabs/OrdersTab&quot;;&#10;import AnalyticsTab from &quot;@/components/dashboard/tabs/AnalyticsTab&quot;;&#10;import SettingsTab from &quot;@/components/dashboard/tabs/SettingsTab&quot;;&#10;&#10;// Constants&#10;const TABS = {&#10;  DASHBOARD: &quot;dashboard&quot;,&#10;  PRODUCTS: &quot;products&quot;,&#10;  ORDERS: &quot;orders&quot;,&#10;  ANALYTICS: &quot;analytics&quot;,&#10;  SETTINGS: &quot;settings&quot;,&#10;};&#10;&#10;const PRODUCT_STATUS = {&#10;  ACTIVE: &quot;active&quot;,&#10;  INACTIVE: &quot;inactive&quot;,&#10;  OUT_OF_STOCK: &quot;out-of-stock&quot;,&#10;  LOW_STOCK: &quot;low-stock&quot;,&#10;};&#10;&#10;const ORDER_STATUS = {&#10;  PENDING: &quot;pending&quot;,&#10;  CONFIRMED: &quot;confirmed&quot;,&#10;  DELIVERED: &quot;delivered&quot;,&#10;  CANCELLED: &quot;cancelled&quot;,&#10;  RETURNED: &quot;returned&quot;,&#10;};&#10;&#10;const DEFAULT_PAGINATION = {&#10;  page: 1,&#10;  limit: 12,&#10;};&#10;&#10;export default function FarmerDashboard() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Use React Query hook for dashboard data&#10;  const {&#10;    products,&#10;    orders,&#10;    isLoading,&#10;    error,&#10;    isRefetching,&#10;    refetch: refetchDashboard,&#10;    refreshDashboard,&#10;    updateProductInCache,&#10;    updateBulkProductsInCache,&#10;  } = useDashboardData();&#10;&#10;  // UI state&#10;  const [activeTab, setActiveTab] = useState(TABS.DASHBOARD);&#10;  const [actionLoading, setActionLoading] = useState({});&#10;  const [autoRefresh, setAutoRefresh] = useState(true);&#10;&#10;  // Filter and search state&#10;  const [filters, setFilters] = useState({&#10;    search: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    sort: &quot;&quot;,&#10;  });&#10;&#10;  // Pagination state&#10;  const [pagination, setPagination] = useState(DEFAULT_PAGINATION);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;);&#10;&#10;  // Authentication and authorization check&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;loading&quot;) return;&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      const isFarmer =&#10;        userType === &quot;farmer&quot; ||&#10;        userType === &quot;Farmer&quot; ||&#10;        session.user.type === &quot;farmer&quot; ||&#10;        session.user.accountType === &quot;farmer&quot;;&#10;&#10;      if (!isFarmer) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;    }&#10;  }, [session?.user?.id, session?.user?.email, status, router]);&#10;&#10;  // Manual refresh handler&#10;  const handleRefresh = useCallback(async () =&gt; {&#10;    await refetchDashboard();&#10;  }, [refetchDashboard]);&#10;&#10;  // Auto-refresh functionality&#10;  useEffect(() =&gt; {&#10;    if (!autoRefresh) return;&#10;&#10;    const interval = setInterval(() =&gt; {&#10;      refreshDashboard();&#10;    }, 30000); // 30 seconds&#10;&#10;    return () =&gt; clearInterval(interval);&#10;  }, [autoRefresh, refreshDashboard]);&#10;&#10;  // Calculate analytics with memoization&#10;  const analytics = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt;&#10;        order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;        order.status !== ORDER_STATUS.RETURNED,&#10;    );&#10;&#10;    const totalProducts = products.length;&#10;    const activeProducts = products.filter(&#10;      (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== PRODUCT_STATUS.INACTIVE,&#10;    ).length;&#10;&#10;    const totalOrders = orders.length;&#10;    const pendingOrders = orders.filter(&#10;      (o) =&gt; o.status === ORDER_STATUS.PENDING,&#10;    ).length;&#10;&#10;    const totalRevenue = validOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    const now = new Date();&#10;    const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt);&#10;      return (&#10;        orderDate.getMonth() === now.getMonth() &amp;&amp;&#10;        orderDate.getFullYear() === now.getFullYear()&#10;      );&#10;    });&#10;&#10;    const averageOrderValue =&#10;      validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;    const recentOrders = orders.slice(0, 5).map((order) =&gt; ({&#10;      _id: order._id,&#10;      id: order.id,&#10;      customerName: order.customerName,&#10;      total: order.total || order.farmerSubtotal,&#10;      createdAt: order.createdAt,&#10;      status: order.status,&#10;      items: order.items?.length || 0,&#10;    }));&#10;&#10;    return {&#10;      totalProducts,&#10;      activeProducts,&#10;      totalOrders,&#10;      pendingOrders,&#10;      totalRevenue,&#10;      thisMonthOrders: thisMonthValidOrders.length,&#10;      averageOrderValue,&#10;      lowStockProducts: products.filter((p) =&gt; p.stock &lt;= 10).length,&#10;      recentOrders,&#10;    };&#10;  }, [products.length, orders.length]);&#10;&#10;  // Filter and sort products&#10;  const filteredAndSortedProducts = useMemo(() =&gt; {&#10;    let filtered = [...products];&#10;&#10;    if (filters.search) {&#10;      const searchRegex = new RegExp(filters.search.trim(), &quot;i&quot;);&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description || &quot;&quot;) ||&#10;          searchRegex.test(product.category || &quot;&quot;),&#10;      );&#10;    }&#10;&#10;    if (filters.category) {&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          product.category?.toLowerCase() === filters.category.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    if (filters.status) {&#10;      switch (filters.status) {&#10;        case PRODUCT_STATUS.ACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt;&#10;              product.stock &gt; 0 &amp;&amp; product.status !== PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.INACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.status === PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.OUT_OF_STOCK:&#10;          filtered = filtered.filter((product) =&gt; product.stock === 0);&#10;          break;&#10;        case PRODUCT_STATUS.LOW_STOCK:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.stock &gt; 0 &amp;&amp; product.stock &lt;= 5,&#10;          );&#10;          break;&#10;      }&#10;    }&#10;&#10;    if (filters.sort) {&#10;      const [key, order] = filters.sort.split(&quot;-&quot;);&#10;      filtered.sort((a, b) =&gt; {&#10;        let valueA, valueB;&#10;&#10;        switch (key) {&#10;          case &quot;price&quot;:&#10;            valueA = a.price || 0;&#10;            valueB = b.price || 0;&#10;            break;&#10;          case &quot;name&quot;:&#10;            valueA = a.name || &quot;&quot;;&#10;            valueB = b.name || &quot;&quot;;&#10;            return order === &quot;asc&quot;&#10;              ? valueA.localeCompare(valueB)&#10;              : valueB.localeCompare(valueA);&#10;          case &quot;stock&quot;:&#10;            valueA = a.stock || 0;&#10;            valueB = b.stock || 0;&#10;            break;&#10;          case &quot;date&quot;:&#10;            valueA = new Date(a.createdAt || 0);&#10;            valueB = new Date(b.createdAt || 0);&#10;            break;&#10;          default:&#10;            return 0;&#10;        }&#10;&#10;        return order === &quot;asc&quot; ? valueA - valueB : valueB - valueA;&#10;      });&#10;    }&#10;&#10;    return filtered;&#10;  }, [products, filters]);&#10;&#10;  // Reset pagination when filters change&#10;  useEffect(() =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, page: 1 }));&#10;  }, [filters]);&#10;&#10;  // Paginated products&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    const startIndex = (pagination.page - 1) * pagination.limit;&#10;    const endIndex = startIndex + pagination.limit;&#10;    return filteredAndSortedProducts.slice(startIndex, endIndex);&#10;  }, [filteredAndSortedProducts, pagination]);&#10;&#10;  // Total pages calculation&#10;  const totalPages = Math.ceil(&#10;    filteredAndSortedProducts.length / pagination.limit,&#10;  );&#10;&#10;  // Product management functions&#10;  const handleStatusToggle = useCallback(&#10;    async (productId, currentStatus) =&gt; {&#10;      console.log(&quot;handleStatusToggle called with:&quot;, {&#10;        productId,&#10;        currentStatus,&#10;        type: typeof currentStatus,&#10;      });&#10;&#10;      // Normalize the current status to lowercase for comparison&#10;      const normalizedCurrentStatus = currentStatus?.toLowerCase();&#10;      const normalizedActiveStatus = PRODUCT_STATUS.ACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;&#10;      const newStatus =&#10;        normalizedCurrentStatus === normalizedActiveStatus&#10;          ? PRODUCT_STATUS.INACTIVE&#10;          : PRODUCT_STATUS.ACTIVE;&#10;&#10;      console.log(&quot;Status toggle:&quot;, {&#10;        currentStatus,&#10;        normalizedCurrentStatus,&#10;        newStatus,&#10;        comparison: normalizedCurrentStatus === normalizedActiveStatus,&#10;      });&#10;&#10;      const actionText =&#10;        newStatus === PRODUCT_STATUS.ACTIVE ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;      if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;        return;&#10;      }&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;status&quot; }));&#10;&#10;      try {&#10;        console.log(&quot;Sending status update:&quot;, { productId, status: newStatus });&#10;&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;        console.log(&quot;API response:&quot;, result);&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        // Dispatch custom event to notify products page of status change&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productStatusUpdated&quot;, {&#10;            detail: {&#10;              productId: productId,&#10;              newStatus: newStatus,&#10;              timestamp: Date.now(),&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productStatusUpdated&quot;,&#10;          JSON.stringify({&#10;            productId: productId,&#10;            newStatus: newStatus,&#10;            timestamp: Date.now(),&#10;          }),&#10;        );&#10;&#10;        const successMsg =&#10;          newStatus === PRODUCT_STATUS.ACTIVE&#10;            ? &quot;Product activated successfully!&quot;&#10;            : &quot;Product deactivated successfully!&quot;;&#10;&#10;        alert(successMsg);&#10;      } catch (error) {&#10;        console.error(&quot;Error updating product status:&quot;, error);&#10;        alert(`Failed to ${actionText} product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [updateProductInCache, refreshDashboard],&#10;  );&#10;&#10;  const handleDeleteProduct = useCallback(&#10;    async (productId) =&gt; {&#10;      const confirmMessage =&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;        &quot;This action cannot be undone and will remove:\n&quot; +&#10;        &quot;• The product listing\n&quot; +&#10;        &quot;• All associated data\n&quot; +&#10;        &quot;• Product from any pending orders&quot;;&#10;&#10;      if (!confirm(confirmMessage)) return;&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;delete&quot; }));&#10;&#10;      try {&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;DELETE&quot;,&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;&#10;          if (response.status === 409) {&#10;            alert(&#10;              &quot;❌ Cannot Delete Product\n\n&quot; +&#10;                &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;                &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;                &quot;You can temporarily deactivate the product instead by clicking the pause button.&quot;,&#10;            );&#10;            return;&#10;          } else if (response.status === 404) {&#10;            alert(&quot;❌ Product not found. It may have already been deleted.&quot;);&#10;            return;&#10;          } else {&#10;            throw new Error(errorData.error || &quot;Failed to delete product&quot;);&#10;          }&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || &quot;Failed to delete product&quot;);&#10;        }&#10;&#10;        await refetchDashboard();&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error deleting product:&quot;, error);&#10;        alert(`❌ Failed to delete product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [refetchDashboard],&#10;  );&#10;&#10;  // Update functions&#10;  const updateFilters = useCallback((newFilters) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, ...newFilters }));&#10;  }, []);&#10;&#10;  const updatePagination = useCallback((newPagination) =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, ...newPagination }));&#10;  }, []);&#10;&#10;  // Utility functions&#10;  const formatPrice = useCallback((price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-US&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;USD&quot;,&#10;      minimumFractionDigits: 2,&#10;      maximumFractionDigits: 2,&#10;    }).format(price || 0);&#10;  }, []);&#10;&#10;  const formatDate = useCallback((dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;    });&#10;  }, []);&#10;&#10;  const getProductStatusBadge = useCallback((product) =&gt; {&#10;    if (product.status === PRODUCT_STATUS.INACTIVE) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-pause mr-1&quot;&gt;&lt;/i&gt;&#10;          Inactive&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock === 0) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;          Out of Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock &lt;= 5) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-circle mr-1&quot;&gt;&lt;/i&gt;&#10;          Low Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    return (&#10;      &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&gt;&#10;        &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;        Active&#10;      &lt;/span&gt;&#10;    );&#10;  }, []);&#10;&#10;  // Component props&#10;  const commonProps = {&#10;    session,&#10;    products,&#10;    orders,&#10;    analytics,&#10;    handleRefresh,&#10;    refreshing: isRefetching,&#10;    formatPrice,&#10;    formatDate,&#10;    loading: isLoading,&#10;    error,&#10;    updateBulkProductsInCache,&#10;  };&#10;&#10;  const productProps = {&#10;    ...commonProps,&#10;    paginatedProducts,&#10;    filteredProducts: filteredAndSortedProducts,&#10;    totalProducts: products.length,&#10;    filters,&#10;    updateFilters,&#10;    pagination: { ...pagination, totalPages },&#10;    updatePagination,&#10;    viewMode,&#10;    setViewMode,&#10;    handleStatusToggle,&#10;    handleDeleteProduct,&#10;    actionLoading,&#10;    getProductStatusBadge,&#10;  };&#10;&#10;  // Loading state&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Error state&#10;  if (error &amp;&amp; !products.length &amp;&amp; !orders.length) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;          &lt;div className=&quot;text-red-500 text-6xl mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Dashboard Error&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;            {error.message}&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={handleRefresh}&#10;            disabled={isRefetching}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition disabled:opacity-50&quot;&#10;          &gt;&#10;            {isRefetching ? (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                Retrying...&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-redo mr-2&quot;&gt;&lt;/i&gt;&#10;                Try Again&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        &lt;DashboardHeader {...commonProps} /&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4&quot;&gt;&#10;            &lt;div className=&quot;bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-exclamation-triangle text-red-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-red-700 dark:text-red-300&quot;&gt;&#10;                  {error.message}&#10;                &lt;/span&gt;&#10;                &lt;button&#10;                  onClick={handleRefresh}&#10;                  className=&quot;ml-auto text-primary-600 hover:text-primary-800&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-redo&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;NavigationTabs activeTab={activeTab} setActiveTab={setActiveTab} /&gt;&#10;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {activeTab === TABS.DASHBOARD &amp;&amp; &lt;DashboardTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.PRODUCTS &amp;&amp; &lt;ProductsTab {...productProps} /&gt;}&#10;          {activeTab === TABS.ORDERS &amp;&amp; &lt;OrdersTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.ANALYTICS &amp;&amp; &lt;AnalyticsTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.SETTINGS &amp;&amp; &lt;SettingsTab {...commonProps} /&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { useDashboardData } from &quot;@/hooks/useDashboardData&quot;;&#10;&#10;// Component imports&#10;import DashboardHeader from &quot;@/components/dashboard/DashboardHeader&quot;;&#10;import NavigationTabs from &quot;@/components/dashboard/NavigationTabs&quot;;&#10;import DashboardTab from &quot;@/components/dashboard/tabs/DashboardTab&quot;;&#10;import ProductsTab from &quot;@/components/dashboard/tabs/ProductsTab&quot;;&#10;import OrdersTab from &quot;@/components/dashboard/tabs/OrdersTab&quot;;&#10;import AnalyticsTab from &quot;@/components/dashboard/tabs/AnalyticsTab&quot;;&#10;import SettingsTab from &quot;@/components/dashboard/tabs/SettingsTab&quot;;&#10;&#10;// Constants&#10;const TABS = {&#10;  DASHBOARD: &quot;dashboard&quot;,&#10;  PRODUCTS: &quot;products&quot;,&#10;  ORDERS: &quot;orders&quot;,&#10;  ANALYTICS: &quot;analytics&quot;,&#10;  SETTINGS: &quot;settings&quot;,&#10;};&#10;&#10;const PRODUCT_STATUS = {&#10;  ACTIVE: &quot;active&quot;,&#10;  INACTIVE: &quot;inactive&quot;,&#10;  OUT_OF_STOCK: &quot;out-of-stock&quot;,&#10;  LOW_STOCK: &quot;low-stock&quot;,&#10;};&#10;&#10;const ORDER_STATUS = {&#10;  PENDING: &quot;pending&quot;,&#10;  CONFIRMED: &quot;confirmed&quot;,&#10;  DELIVERED: &quot;delivered&quot;,&#10;  CANCELLED: &quot;cancelled&quot;,&#10;  RETURNED: &quot;returned&quot;,&#10;};&#10;&#10;const DEFAULT_PAGINATION = {&#10;  page: 1,&#10;  limit: 12,&#10;};&#10;&#10;export default function FarmerDashboard() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Use React Query hook for dashboard data&#10;  const {&#10;    products,&#10;    orders,&#10;    isLoading,&#10;    error,&#10;    isRefetching,&#10;    refetch: refetchDashboard,&#10;    refreshDashboard,&#10;    updateProductInCache,&#10;    updateBulkProductsInCache,&#10;  } = useDashboardData();&#10;&#10;  // UI state&#10;  const [activeTab, setActiveTab] = useState(TABS.DASHBOARD);&#10;  const [actionLoading, setActionLoading] = useState({});&#10;  const [autoRefresh, setAutoRefresh] = useState(true);&#10;&#10;  // Filter and search state&#10;  const [filters, setFilters] = useState({&#10;    search: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    sort: &quot;&quot;,&#10;  });&#10;&#10;  // Pagination state&#10;  const [pagination, setPagination] = useState(DEFAULT_PAGINATION);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;);&#10;&#10;  // Authentication and authorization check&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;loading&quot;) return;&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      const isFarmer =&#10;        userType === &quot;farmer&quot; ||&#10;        userType === &quot;Farmer&quot; ||&#10;        session.user.type === &quot;farmer&quot; ||&#10;        session.user.accountType === &quot;farmer&quot;;&#10;&#10;      if (!isFarmer) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;    }&#10;  }, [session?.user?.id, session?.user?.email, status, router]);&#10;&#10;  // Manual refresh handler&#10;  const handleRefresh = useCallback(async () =&gt; {&#10;    await refetchDashboard();&#10;  }, [refetchDashboard]);&#10;&#10;  // Auto-refresh functionality&#10;  useEffect(() =&gt; {&#10;    if (!autoRefresh) return;&#10;&#10;    const interval = setInterval(() =&gt; {&#10;      refreshDashboard();&#10;    }, 30000); // 30 seconds&#10;&#10;    return () =&gt; clearInterval(interval);&#10;  }, [autoRefresh, refreshDashboard]);&#10;&#10;  // Calculate analytics with memoization&#10;  const analytics = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt;&#10;        order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;        order.status !== ORDER_STATUS.RETURNED,&#10;    );&#10;&#10;    const totalProducts = products.length;&#10;    const activeProducts = products.filter(&#10;      (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== PRODUCT_STATUS.INACTIVE,&#10;    ).length;&#10;&#10;    const totalOrders = orders.length;&#10;    const pendingOrders = orders.filter(&#10;      (o) =&gt; o.status === ORDER_STATUS.PENDING,&#10;    ).length;&#10;&#10;    const totalRevenue = validOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    const now = new Date();&#10;    const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt);&#10;      return (&#10;        orderDate.getMonth() === now.getMonth() &amp;&amp;&#10;        orderDate.getFullYear() === now.getFullYear()&#10;      );&#10;    });&#10;&#10;    const averageOrderValue =&#10;      validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;    const recentOrders = orders.slice(0, 5).map((order) =&gt; ({&#10;      _id: order._id,&#10;      id: order.id,&#10;      customerName: order.customerName,&#10;      total: order.total || order.farmerSubtotal,&#10;      createdAt: order.createdAt,&#10;      status: order.status,&#10;      items: order.items?.length || 0,&#10;    }));&#10;&#10;    return {&#10;      totalProducts,&#10;      activeProducts,&#10;      totalOrders,&#10;      pendingOrders,&#10;      totalRevenue,&#10;      thisMonthOrders: thisMonthValidOrders.length,&#10;      averageOrderValue,&#10;      lowStockProducts: products.filter((p) =&gt; p.stock &lt;= 10).length,&#10;      recentOrders,&#10;    };&#10;  }, [products.length, orders.length]);&#10;&#10;  // Filter and sort products&#10;  const filteredAndSortedProducts = useMemo(() =&gt; {&#10;    let filtered = [...products];&#10;&#10;    if (filters.search) {&#10;      const searchRegex = new RegExp(filters.search.trim(), &quot;i&quot;);&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description || &quot;&quot;) ||&#10;          searchRegex.test(product.category || &quot;&quot;),&#10;      );&#10;    }&#10;&#10;    if (filters.category) {&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          product.category?.toLowerCase() === filters.category.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    if (filters.status) {&#10;      switch (filters.status) {&#10;        case PRODUCT_STATUS.ACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt;&#10;              product.stock &gt; 0 &amp;&amp; product.status !== PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.INACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.status === PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.OUT_OF_STOCK:&#10;          filtered = filtered.filter((product) =&gt; product.stock === 0);&#10;          break;&#10;        case PRODUCT_STATUS.LOW_STOCK:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.stock &gt; 0 &amp;&amp; product.stock &lt;= 5,&#10;          );&#10;          break;&#10;      }&#10;    }&#10;&#10;    if (filters.sort) {&#10;      const [key, order] = filters.sort.split(&quot;-&quot;);&#10;      filtered.sort((a, b) =&gt; {&#10;        let valueA, valueB;&#10;&#10;        switch (key) {&#10;          case &quot;price&quot;:&#10;            valueA = a.price || 0;&#10;            valueB = b.price || 0;&#10;            break;&#10;          case &quot;name&quot;:&#10;            valueA = a.name || &quot;&quot;;&#10;            valueB = b.name || &quot;&quot;;&#10;            return order === &quot;asc&quot;&#10;              ? valueA.localeCompare(valueB)&#10;              : valueB.localeCompare(valueA);&#10;          case &quot;stock&quot;:&#10;            valueA = a.stock || 0;&#10;            valueB = b.stock || 0;&#10;            break;&#10;          case &quot;date&quot;:&#10;            valueA = new Date(a.createdAt || 0);&#10;            valueB = new Date(b.createdAt || 0);&#10;            break;&#10;          default:&#10;            return 0;&#10;        }&#10;&#10;        return order === &quot;asc&quot; ? valueA - valueB : valueB - valueA;&#10;      });&#10;    }&#10;&#10;    return filtered;&#10;  }, [products, filters]);&#10;&#10;  // Reset pagination when filters change&#10;  useEffect(() =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, page: 1 }));&#10;  }, [filters]);&#10;&#10;  // Paginated products&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    const startIndex = (pagination.page - 1) * pagination.limit;&#10;    const endIndex = startIndex + pagination.limit;&#10;    return filteredAndSortedProducts.slice(startIndex, endIndex);&#10;  }, [filteredAndSortedProducts, pagination]);&#10;&#10;  // Total pages calculation&#10;  const totalPages = Math.ceil(&#10;    filteredAndSortedProducts.length / pagination.limit,&#10;  );&#10;&#10;  // Product management functions&#10;  const handleStatusToggle = useCallback(&#10;    async (productId, currentStatus) =&gt; {&#10;      console.log(&quot;handleStatusToggle called with:&quot;, {&#10;        productId,&#10;        currentStatus,&#10;        type: typeof currentStatus,&#10;      });&#10;&#10;      // Normalize the current status to lowercase for comparison&#10;      const normalizedCurrentStatus = currentStatus?.toLowerCase();&#10;      const normalizedActiveStatus = PRODUCT_STATUS.ACTIVE.toLowerCase();&#10;&#10;      const newStatus =&#10;        normalizedCurrentStatus === normalizedActiveStatus&#10;          ? PRODUCT_STATUS.INACTIVE&#10;          : PRODUCT_STATUS.ACTIVE;&#10;&#10;      console.log(&quot;Status toggle:&quot;, {&#10;        currentStatus,&#10;        normalizedCurrentStatus,&#10;        newStatus,&#10;        comparison: normalizedCurrentStatus === normalizedActiveStatus,&#10;      });&#10;&#10;      const actionText =&#10;        newStatus === PRODUCT_STATUS.ACTIVE ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;      if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;        return;&#10;      }&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;status&quot; }));&#10;&#10;      try {&#10;        console.log(&quot;Sending status update:&quot;, { productId, status: newStatus });&#10;&#10;        // Use the same API service pattern as bulk update for consistency&#10;        const { apiService } = await import(&quot;@/lib/api-service&quot;);&#10;        const result = await apiService.bulkUpdateProducts(&#10;          [productId], // Single product as array&#10;          { status: newStatus },&#10;        );&#10;&#10;        console.log(&quot;API response:&quot;, result);&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        // Update the React Query cache using the same pattern as bulk update&#10;        if (updateBulkProductsInCache) {&#10;          updateBulkProductsInCache([productId], { status: newStatus });&#10;        }&#10;&#10;        // Dispatch custom event to notify products page of status change&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productStatusUpdated&quot;, {&#10;            detail: {&#10;              productId: productId,&#10;              newStatus: newStatus,&#10;              timestamp: Date.now(),&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productStatusUpdated&quot;,&#10;          JSON.stringify({&#10;            productId: productId,&#10;            newStatus: newStatus,&#10;            timestamp: Date.now(),&#10;          }),&#10;        );&#10;&#10;        const successMsg =&#10;          newStatus === PRODUCT_STATUS.ACTIVE&#10;            ? &quot;Product activated successfully!&quot;&#10;            : &quot;Product deactivated successfully!&quot;;&#10;&#10;        alert(successMsg);&#10;      } catch (error) {&#10;        console.error(&quot;Error updating product status:&quot;, error);&#10;        alert(`Failed to ${actionText} product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [updateBulkProductsInCache],&#10;  );&#10;&#10;  const handleDeleteProduct = useCallback(&#10;    async (productId) =&gt; {&#10;      const confirmMessage =&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;        &quot;This action cannot be undone and will remove:\n&quot; +&#10;        &quot;• The product listing\n&quot; +&#10;        &quot;• All associated data\n&quot; +&#10;        &quot;• Product from any pending orders&quot;;&#10;&#10;      if (!confirm(confirmMessage)) return;&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;delete&quot; }));&#10;&#10;      try {&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;DELETE&quot;,&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;&#10;          if (response.status === 409) {&#10;            alert(&#10;              &quot;❌ Cannot Delete Product\n\n&quot; +&#10;                &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;                &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;                &quot;You can temporarily deactivate the product instead by clicking the pause button.&quot;,&#10;            );&#10;            return;&#10;          } else if (response.status === 404) {&#10;            alert(&quot;❌ Product not found. It may have already been deleted.&quot;);&#10;            return;&#10;          } else {&#10;            throw new Error(errorData.error || &quot;Failed to delete product&quot;);&#10;          }&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || &quot;Failed to delete product&quot;);&#10;        }&#10;&#10;        await refetchDashboard();&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error deleting product:&quot;, error);&#10;        alert(`❌ Failed to delete product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [refetchDashboard],&#10;  );&#10;&#10;  // Update functions&#10;  const updateFilters = useCallback((newFilters) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, ...newFilters }));&#10;  }, []);&#10;&#10;  const updatePagination = useCallback((newPagination) =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, ...newPagination }));&#10;  }, []);&#10;&#10;  // Utility functions&#10;  const formatPrice = useCallback((price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-US&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;USD&quot;,&#10;      minimumFractionDigits: 2,&#10;      maximumFractionDigits: 2,&#10;    }).format(price || 0);&#10;  }, []);&#10;&#10;  const formatDate = useCallback((dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;    });&#10;  }, []);&#10;&#10;  const getProductStatusBadge = useCallback((product) =&gt; {&#10;    if (product.status === PRODUCT_STATUS.INACTIVE) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-pause mr-1&quot;&gt;&lt;/i&gt;&#10;          Inactive&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock === 0) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;          Out of Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock &lt;= 5) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-circle mr-1&quot;&gt;&lt;/i&gt;&#10;          Low Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    return (&#10;      &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&gt;&#10;        &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;        Active&#10;      &lt;/span&gt;&#10;    );&#10;  }, []);&#10;&#10;  // Component props&#10;  const commonProps = {&#10;    session,&#10;    products,&#10;    orders,&#10;    analytics,&#10;    handleRefresh,&#10;    refreshing: isRefetching,&#10;    formatPrice,&#10;    formatDate,&#10;    loading: isLoading,&#10;    error,&#10;    updateBulkProductsInCache,&#10;  };&#10;&#10;  const productProps = {&#10;    ...commonProps,&#10;    paginatedProducts,&#10;    filteredProducts: filteredAndSortedProducts,&#10;    totalProducts: products.length,&#10;    filters,&#10;    updateFilters,&#10;    pagination: { ...pagination, totalPages },&#10;    updatePagination,&#10;    viewMode,&#10;    setViewMode,&#10;    handleStatusToggle,&#10;    handleDeleteProduct,&#10;    actionLoading,&#10;    getProductStatusBadge,&#10;  };&#10;&#10;  // Loading state&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Error state&#10;  if (error &amp;&amp; !products.length &amp;&amp; !orders.length) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;          &lt;div className=&quot;text-red-500 text-6xl mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Dashboard Error&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;            {error.message}&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={handleRefresh}&#10;            disabled={isRefetching}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition disabled:opacity-50&quot;&#10;          &gt;&#10;            {isRefetching ? (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                Retrying...&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-redo mr-2&quot;&gt;&lt;/i&gt;&#10;                Try Again&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        &lt;DashboardHeader {...commonProps} /&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4&quot;&gt;&#10;            &lt;div className=&quot;bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-exclamation-triangle text-red-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-red-700 dark:text-red-300&quot;&gt;&#10;                  {error.message}&#10;                &lt;/span&gt;&#10;                &lt;button&#10;                  onClick={handleRefresh}&#10;                  className=&quot;ml-auto text-primary-600 hover:text-primary-800&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-redo&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;NavigationTabs activeTab={activeTab} setActiveTab={setActiveTab} /&gt;&#10;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {activeTab === TABS.DASHBOARD &amp;&amp; &lt;DashboardTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.PRODUCTS &amp;&amp; &lt;ProductsTab {...productProps} /&gt;}&#10;          {activeTab === TABS.ORDERS &amp;&amp; &lt;OrdersTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.ANALYTICS &amp;&amp; &lt;AnalyticsTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.SETTINGS &amp;&amp; &lt;SettingsTab {...commonProps} /&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ProductCard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ProductCard.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.reviewCount || product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/tabs/AnalyticsTab.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/tabs/AnalyticsTab.js" />
              <option name="originalContent" value="// components/dashboard/tabs/AnalyticsTab.js&#10;import { useMemo, useRef, useEffect } from &quot;react&quot;;&#10;import {&#10;  Chart as ChartJS,&#10;  CategoryScale,&#10;  LinearScale,&#10;  PointElement,&#10;  LineElement,&#10;  BarElement,&#10;  RadialLinearScale,&#10;  ArcElement,&#10;  Title,&#10;  Tooltip,&#10;  Legend,&#10;  Filler,&#10;} from &quot;chart.js&quot;;&#10;import { Line, Bar, Radar, PolarArea, Bubble, Chart } from &quot;react-chartjs-2&quot;;&#10;&#10;// Register Chart.js components&#10;ChartJS.register(&#10;  CategoryScale,&#10;  LinearScale,&#10;  PointElement,&#10;  LineElement,&#10;  BarElement,&#10;  RadialLinearScale,&#10;  ArcElement,&#10;  Title,&#10;  Tooltip,&#10;  Legend,&#10;  Filler,&#10;);&#10;&#10;export default function AnalyticsTab({&#10;  analytics,&#10;  orders,&#10;  products,&#10;  formatPrice,&#10;  formatDate,&#10;}) {&#10;  // Calculate category statistics&#10;  const categoryStats = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    // First, group products by category&#10;    const categorizedProducts = products.reduce((acc, product) =&gt; {&#10;      const category = product.category || &quot;Other&quot;;&#10;      if (!acc[category]) {&#10;        acc[category] = [];&#10;      }&#10;      acc[category].push(product);&#10;      return acc;&#10;    }, {});&#10;&#10;    // Calculate stats for each category&#10;    return Object.entries(categorizedProducts).reduce(&#10;      (acc, [category, categoryProducts]) =&gt; {&#10;        // Calculate basic product stats&#10;        const count = categoryProducts.length;&#10;        const active = categoryProducts.filter(&#10;          (p) =&gt; p.status !== &quot;inactive&quot; &amp;&amp; p.stock &gt; 0,&#10;        ).length;&#10;        const totalStock = categoryProducts.reduce(&#10;          (sum, p) =&gt; sum + (p.stock || 0),&#10;          0,&#10;        );&#10;&#10;        // Calculate simple average price to match Top Categories display&#10;        const avgPrice =&#10;          count &gt; 0&#10;            ? categoryProducts.reduce((sum, p) =&gt; sum + (p.price || 0), 0) /&#10;              count&#10;            : 0;&#10;&#10;        // Calculate revenue for this category from actual orders&#10;        const categoryRevenue = validOrders.reduce((sum, order) =&gt; {&#10;          if (!order.items) return sum;&#10;&#10;          const categoryOrderItems = order.items.filter((item) =&gt; {&#10;            // Check if this order item belongs to any product in this category&#10;            return categoryProducts.some(&#10;              (product) =&gt;&#10;                item.product?._id === product._id ||&#10;                item.productId === product._id,&#10;            );&#10;          });&#10;&#10;          return (&#10;            sum +&#10;            categoryOrderItems.reduce(&#10;              (itemSum, item) =&gt;&#10;                itemSum + (item.price || 0) * (item.quantity || 0),&#10;              0,&#10;            )&#10;          );&#10;        }, 0);&#10;&#10;        acc[category] = {&#10;          count,&#10;          active,&#10;          revenue: categoryRevenue,&#10;          avgPrice,&#10;          totalStock,&#10;        };&#10;&#10;        return acc;&#10;      },&#10;      {},&#10;    );&#10;  }, [products, orders]);&#10;&#10;  // Calculate last 30 days performance with more data points&#10;  const last30Days = useMemo(() =&gt; {&#10;    return Array.from({ length: 30 }, (_, i) =&gt; {&#10;      const date = new Date();&#10;      date.setDate(date.getDate() - (29 - i));&#10;&#10;      const dayOrders = orders.filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt).toISOString().split(&quot;T&quot;)[0];&#10;        const isToday = orderDate === date.toISOString().split(&quot;T&quot;)[0];&#10;        const isValidOrder =&#10;          order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;;&#10;        return isToday &amp;&amp; isValidOrder;&#10;      });&#10;&#10;      return {&#10;        date: date.toISOString().split(&quot;T&quot;)[0],&#10;        day: date.getDate(),&#10;        orders: dayOrders.length,&#10;        revenue: dayOrders.reduce(&#10;          (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;          0,&#10;        ),&#10;        customers: new Set(dayOrders.map((order) =&gt; order.userId)).size,&#10;      };&#10;    });&#10;  }, [orders]);&#10;&#10;  // Product performance bubble chart data&#10;  const productBubbleData = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    const productData = products.slice(0, 20).map((product) =&gt; {&#10;      const productOrders = validOrders.filter((order) =&gt;&#10;        order.items?.some(&#10;          (item) =&gt;&#10;            item.product?._id === product._id || item.productId === product._id,&#10;        ),&#10;      );&#10;&#10;      const totalQuantitySold = productOrders.reduce((sum, order) =&gt; {&#10;        const matchingItems =&#10;          order.items?.filter(&#10;            (item) =&gt;&#10;              item.product?._id === product._id ||&#10;              item.productId === product._id,&#10;          ) || [];&#10;        return (&#10;          sum +&#10;          matchingItems.reduce(&#10;            (itemSum, item) =&gt; itemSum + (item.quantity || 0),&#10;            0,&#10;          )&#10;        );&#10;      }, 0);&#10;&#10;      const totalRevenue = productOrders.reduce((sum, order) =&gt; {&#10;        const matchingItems =&#10;          order.items?.filter(&#10;            (item) =&gt;&#10;              item.product?._id === product._id ||&#10;              item.productId === product._id,&#10;          ) || [];&#10;        return (&#10;          sum +&#10;          matchingItems.reduce(&#10;            (itemSum, item) =&gt;&#10;              itemSum + (item.price || 0) * (item.quantity || 0),&#10;            0,&#10;          )&#10;        );&#10;      }, 0);&#10;&#10;      return {&#10;        x: product.price || 0, // Price&#10;        y: totalQuantitySold, // Quantity sold&#10;        r: Math.max(Math.sqrt(totalRevenue / 10), 5), // Revenue (bubble size)&#10;        label: product.name,&#10;        revenue: totalRevenue,&#10;      };&#10;    });&#10;&#10;    return {&#10;      datasets: [&#10;        {&#10;          label: &quot;Product Performance&quot;,&#10;          data: productData,&#10;          backgroundColor: &quot;rgba(75, 192, 192, 0.6)&quot;,&#10;          borderColor: &quot;rgba(75, 192, 192, 1)&quot;,&#10;          borderWidth: 2,&#10;        },&#10;      ],&#10;    };&#10;  }, [products, orders]);&#10;&#10;  // Radar chart data for category performance&#10;  const categoryRadarData = useMemo(() =&gt; {&#10;    const categories = Object.keys(categoryStats);&#10;&#10;    // If no categories, return empty chart&#10;    if (categories.length === 0) {&#10;      return {&#10;        labels: [&#10;          &quot;Product Count&quot;,&#10;          &quot;Revenue&quot;,&#10;          &quot;Active Products&quot;,&#10;          &quot;Avg Price&quot;,&#10;          &quot;Total Stock&quot;,&#10;        ],&#10;        datasets: [],&#10;      };&#10;    }&#10;&#10;    // Use absolute scaling for better representation when data is limited&#10;    const useAbsoluteScaling = categories.length &lt;= 2; // When 1-2 categories only&#10;&#10;    // Calculate global maximums for better scaling&#10;    const allStats = Object.values(categoryStats);&#10;&#10;    const maxValues = useAbsoluteScaling&#10;      ? {&#10;          // Use fixed scales for more meaningful comparison&#10;          count: Math.max(10, Math.max(...allStats.map((s) =&gt; s.count))), // At least scale of 10&#10;          revenue: Math.max(1000, Math.max(...allStats.map((s) =&gt; s.revenue))), // At least $1000 scale&#10;          active: Math.max(5, Math.max(...allStats.map((s) =&gt; s.active))), // At least scale of 5&#10;          avgPrice: Math.max(50, Math.max(...allStats.map((s) =&gt; s.avgPrice))), // At least $50 scale&#10;          totalStock: Math.max(&#10;            100,&#10;            Math.max(...allStats.map((s) =&gt; s.totalStock)),&#10;          ), // At least 100 units scale&#10;        }&#10;      : {&#10;          // Use relative scaling when there are multiple categories&#10;          count: Math.max(...allStats.map((s) =&gt; s.count), 1),&#10;          revenue: Math.max(...allStats.map((s) =&gt; s.revenue), 100),&#10;          active: Math.max(...allStats.map((s) =&gt; s.active), 1),&#10;          avgPrice: Math.max(...allStats.map((s) =&gt; s.avgPrice), 10),&#10;          totalStock: Math.max(...allStats.map((s) =&gt; s.totalStock), 10),&#10;        };&#10;&#10;    return {&#10;      labels: [&#10;        &quot;Product Count&quot;,&#10;        &quot;Revenue&quot;,&#10;        &quot;Active Products&quot;,&#10;        &quot;Avg Price&quot;,&#10;        &quot;Total Stock&quot;,&#10;      ],&#10;      datasets: categories.slice(0, 5).map((category, index) =&gt; {&#10;        const stats = categoryStats[category];&#10;        const colors = [&#10;          &quot;rgba(255, 99, 132, 0.2)&quot;,&#10;          &quot;rgba(54, 162, 235, 0.2)&quot;,&#10;          &quot;rgba(255, 205, 86, 0.2)&quot;,&#10;          &quot;rgba(75, 192, 192, 0.2)&quot;,&#10;          &quot;rgba(153, 102, 255, 0.2)&quot;,&#10;        ];&#10;        const borderColors = [&#10;          &quot;rgba(255, 99, 132, 1)&quot;,&#10;          &quot;rgba(54, 162, 235, 1)&quot;,&#10;          &quot;rgba(255, 205, 86, 1)&quot;,&#10;          &quot;rgba(75, 192, 192, 1)&quot;,&#10;          &quot;rgba(153, 102, 255, 1)&quot;,&#10;        ];&#10;&#10;        // Calculate normalized data with better scaling&#10;        const normalizedData = [&#10;          Math.min((stats.count / maxValues.count) * 100, 100),&#10;          Math.min((stats.revenue / maxValues.revenue) * 100, 100),&#10;          Math.min((stats.active / maxValues.active) * 100, 100),&#10;          Math.min((stats.avgPrice / maxValues.avgPrice) * 100, 100),&#10;          Math.min((stats.totalStock / maxValues.totalStock) * 100, 100),&#10;        ];&#10;&#10;        // If all values are 0, show a minimal radar to indicate the category exists&#10;        const hasAnyData = normalizedData.some((val) =&gt; val &gt; 0);&#10;        const finalData = hasAnyData ? normalizedData : [5, 5, 5, 5, 5]; // Show minimal presence&#10;&#10;        // Create more descriptive label with actual values&#10;        const revenueText =&#10;          stats.revenue &gt; 0&#10;            ? `$${stats.revenue.toFixed(0)} revenue`&#10;            : &quot;no sales&quot;;&#10;        const labelText = useAbsoluteScaling&#10;          ? `${category}: ${stats.count} products, ${stats.totalStock} stock, ${revenueText}`&#10;          : `${category} (${stats.count} products)`;&#10;&#10;        return {&#10;          label: labelText,&#10;          data: finalData,&#10;          backgroundColor: colors[index % colors.length],&#10;          borderColor: borderColors[index % borderColors.length],&#10;          borderWidth: 2,&#10;          pointBackgroundColor: borderColors[index % borderColors.length],&#10;          pointBorderColor: &quot;#fff&quot;,&#10;          pointHoverBackgroundColor: &quot;#fff&quot;,&#10;          pointHoverBorderColor: borderColors[index % borderColors.length],&#10;        };&#10;      }),&#10;    };&#10;  }, [categoryStats]);&#10;&#10;  // Mixed chart data (revenue and orders)&#10;  const mixedChartData = useMemo(() =&gt; {&#10;    const recentData = last30Days.slice(-14); // Last 14 days&#10;&#10;    return {&#10;      labels: recentData.map((d) =&gt; `${d.day}`),&#10;      datasets: [&#10;        {&#10;          type: &quot;line&quot;,&#10;          label: &quot;Revenue&quot;,&#10;          data: recentData.map((d) =&gt; d.revenue),&#10;          borderColor: &quot;rgba(75, 192, 192, 1)&quot;,&#10;          backgroundColor: &quot;rgba(75, 192, 192, 0.1)&quot;,&#10;          borderWidth: 3,&#10;          fill: true,&#10;          tension: 0.4,&#10;          yAxisID: &quot;y&quot;,&#10;        },&#10;        {&#10;          type: &quot;bar&quot;,&#10;          label: &quot;Orders&quot;,&#10;          data: recentData.map((d) =&gt; d.orders),&#10;          backgroundColor: &quot;rgba(255, 99, 132, 0.8)&quot;,&#10;          borderColor: &quot;rgba(255, 99, 132, 1)&quot;,&#10;          borderWidth: 1,&#10;          yAxisID: &quot;y1&quot;,&#10;        },&#10;        {&#10;          type: &quot;line&quot;,&#10;          label: &quot;Customers&quot;,&#10;          data: recentData.map((d) =&gt; d.customers),&#10;          borderColor: &quot;rgba(153, 102, 255, 1)&quot;,&#10;          backgroundColor: &quot;rgba(153, 102, 255, 0.1)&quot;,&#10;          borderWidth: 2,&#10;          borderDash: [5, 5],&#10;          yAxisID: &quot;y1&quot;,&#10;        },&#10;      ],&#10;    };&#10;  }, [last30Days]);&#10;&#10;  // Polar area chart for order status distribution&#10;  const orderStatusData = useMemo(() =&gt; {&#10;    const statusCounts = orders.reduce((acc, order) =&gt; {&#10;      const status = order.status || &quot;unknown&quot;;&#10;      acc[status] = (acc[status] || 0) + 1;&#10;      return acc;&#10;    }, {});&#10;&#10;    return {&#10;      labels: Object.keys(statusCounts),&#10;      datasets: [&#10;        {&#10;          data: Object.values(statusCounts),&#10;          backgroundColor: [&#10;            &quot;rgba(255, 99, 132, 0.8)&quot;,&#10;            &quot;rgba(54, 162, 235, 0.8)&quot;,&#10;            &quot;rgba(255, 205, 86, 0.8)&quot;,&#10;            &quot;rgba(75, 192, 192, 0.8)&quot;,&#10;            &quot;rgba(153, 102, 255, 0.8)&quot;,&#10;            &quot;rgba(255, 159, 64, 0.8)&quot;,&#10;          ],&#10;          borderWidth: 2,&#10;          borderColor: &quot;#fff&quot;,&#10;        },&#10;      ],&#10;    };&#10;  }, [orders]);&#10;&#10;  const chartOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        position: &quot;top&quot;,&#10;        labels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;      title: {&#10;        display: false,&#10;      },&#10;      tooltip: {&#10;        backgroundColor: &quot;rgba(0, 0, 0, 0.8)&quot;,&#10;        titleColor: &quot;#fff&quot;,&#10;        bodyColor: &quot;#fff&quot;,&#10;        borderColor: &quot;rgba(255, 255, 255, 0.1)&quot;,&#10;        borderWidth: 1,&#10;      },&#10;    },&#10;    scales: {&#10;      x: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;      y: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const mixedChartOptions = {&#10;    ...chartOptions,&#10;    scales: {&#10;      x: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;      y: {&#10;        type: &quot;linear&quot;,&#10;        display: true,&#10;        position: &quot;left&quot;,&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          callback: function (value) {&#10;            return formatPrice(value);&#10;          },&#10;        },&#10;      },&#10;      y1: {&#10;        type: &quot;linear&quot;,&#10;        display: true,&#10;        position: &quot;right&quot;,&#10;        grid: {&#10;          drawOnChartArea: false,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const bubbleChartOptions = {&#10;    ...chartOptions,&#10;    scales: {&#10;      x: {&#10;        title: {&#10;          display: true,&#10;          text: &quot;Product Price&quot;,&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          callback: function (value) {&#10;            return formatPrice(value);&#10;          },&#10;        },&#10;      },&#10;      y: {&#10;        title: {&#10;          display: true,&#10;          text: &quot;Quantity Sold&quot;,&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;    },&#10;    plugins: {&#10;      ...chartOptions.plugins,&#10;      tooltip: {&#10;        ...chartOptions.plugins.tooltip,&#10;        callbacks: {&#10;          label: function (context) {&#10;            const point = context.raw;&#10;            return `${point.label}: Price ${formatPrice(point.x)}, Sold ${point.y}, Revenue ${formatPrice(point.revenue)}`;&#10;          },&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const radarOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        position: &quot;top&quot;,&#10;        labels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;    },&#10;    scales: {&#10;      r: {&#10;        angleLines: {&#10;          color: &quot;rgba(156, 163, 175, 0.2)&quot;,&#10;        },&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.2)&quot;,&#10;        },&#10;        pointLabels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 11,&#10;          },&#10;        },&#10;        ticks: {&#10;          color: &quot;rgba(156, 163, 175, 0.8)&quot;,&#10;          backdropColor: &quot;transparent&quot;,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const polarOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        position: &quot;right&quot;,&#10;        labels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;    },&#10;    scales: {&#10;      r: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.2)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgba(156, 163, 175, 0.8)&quot;,&#10;          backdropColor: &quot;transparent&quot;,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  // Calculate actual performance metrics&#10;  const performanceMetrics = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    // Calculate conversion rate (delivered orders / total orders)&#10;    const conversionRate =&#10;      orders.length &gt; 0&#10;        ? (&#10;            (orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length /&#10;              orders.length) *&#10;            100&#10;          ).toFixed(1)&#10;        : 0;&#10;&#10;    // Calculate revenue growth (compare last 30 days with previous 30 days)&#10;    const today = new Date();&#10;    const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);&#10;    const sixtyDaysAgo = new Date(today.getTime() - 60 * 24 * 60 * 60 * 1000);&#10;&#10;    const recentRevenue = validOrders&#10;      .filter((order) =&gt; new Date(order.createdAt) &gt;= thirtyDaysAgo)&#10;      .reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;    const previousRevenue = validOrders&#10;      .filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt);&#10;        return orderDate &gt;= sixtyDaysAgo &amp;&amp; orderDate &lt; thirtyDaysAgo;&#10;      })&#10;      .reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;    let revenueGrowth = 0;&#10;    if (previousRevenue &gt; 0 &amp;&amp; recentRevenue &gt; 0) {&#10;      revenueGrowth = (&#10;        ((recentRevenue - previousRevenue) / previousRevenue) *&#10;        100&#10;      ).toFixed(1);&#10;    } else if (recentRevenue &gt; 0 &amp;&amp; previousRevenue === 0) {&#10;      revenueGrowth = 100; // 100% growth when starting from 0&#10;    }&#10;&#10;    // Calculate customer retention (customers who made repeat orders)&#10;    const uniqueCustomers = [&#10;      ...new Set(validOrders.map((order) =&gt; order.userId)),&#10;    ];&#10;    const repeatCustomers = uniqueCustomers.filter((customerId) =&gt; {&#10;      const customerOrders = validOrders.filter(&#10;        (order) =&gt; order.userId === customerId,&#10;      );&#10;      return customerOrders.length &gt; 1;&#10;    });&#10;&#10;    const customerRetention =&#10;      uniqueCustomers.length &gt; 0&#10;        ? ((repeatCustomers.length / uniqueCustomers.length) * 100).toFixed(1)&#10;        : 0;&#10;&#10;    return {&#10;      conversionRate,&#10;      revenueGrowth,&#10;      customerRetention,&#10;      hasActivity: validOrders.length &gt; 0 || products.length &gt; 0,&#10;    };&#10;  }, [orders, products]);&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-8&quot;&gt;&#10;      {/* Header Stats */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-6&quot;&gt;&#10;        &lt;div className=&quot;bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-blue-100 text-sm font-medium&quot;&gt;Total Revenue&lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;&#10;                {formatPrice(analytics.totalRevenue || 0)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-dollar-sign text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-green-100 text-sm font-medium&quot;&gt;Total Orders&lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;{analytics.totalOrders || 0}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-shopping-cart text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-purple-100 text-sm font-medium&quot;&gt;&#10;                Active Products&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;&#10;                {analytics.activeProducts || 0}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-box text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-orange-100 text-sm font-medium&quot;&gt;&#10;                Avg Order Value&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;&#10;                {formatPrice(analytics.averageOrderValue || 0)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-chart-line text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Advanced Charts Row 1 */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;        {/* Mixed Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-chart-area mr-3 text-blue-500&quot;&gt;&lt;/i&gt;&#10;            Revenue &amp; Orders Trend (14 Days)&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;Chart&#10;              type=&quot;bar&quot;&#10;              data={mixedChartData}&#10;              options={mixedChartOptions}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Bubble Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-circle-notch mr-3 text-green-500&quot;&gt;&lt;/i&gt;&#10;            Product Performance Matrix&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;Bubble data={productBubbleData} options={bubbleChartOptions} /&gt;&#10;          &lt;/div&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400 mt-2&quot;&gt;&#10;            X: Price, Y: Quantity Sold, Bubble Size: Revenue&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Advanced Charts Row 2 */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;        {/* Radar Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-spider mr-3 text-purple-500&quot;&gt;&lt;/i&gt;&#10;            Category Performance Analysis&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;Radar data={categoryRadarData} options={radarOptions} /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Polar Area Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-chart-pie mr-3 text-pink-500&quot;&gt;&lt;/i&gt;&#10;            Order Status Distribution&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;PolarArea data={orderStatusData} options={polarOptions} /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Detailed Analytics Grid */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;        {/* Top Categories */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tags mr-3 text-indigo-500&quot;&gt;&lt;/i&gt;&#10;            Top Categories&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {Object.entries(categoryStats)&#10;              .sort(([, a], [, b]) =&gt; b.revenue - a.revenue)&#10;              .slice(0, 5)&#10;              .map(([category, stats]) =&gt; (&#10;                &lt;div&#10;                  key={category}&#10;                  className=&quot;flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {category}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      {stats.count} products&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;p className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatPrice(stats.revenue)}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-green-600 dark:text-green-400&quot;&gt;&#10;                      {formatPrice(stats.avgPrice)} avg&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Performance Metrics */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tachometer-alt mr-3 text-yellow-500&quot;&gt;&lt;/i&gt;&#10;            Performance Metrics&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-sm font-medium text-blue-800 dark:text-blue-200&quot;&gt;&#10;                Conversion Rate&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-2xl font-bold text-blue-900 dark:text-blue-100&quot;&gt;&#10;                {performanceMetrics.conversionRate}%&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900 dark:to-green-800 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-sm font-medium text-green-800 dark:text-green-200&quot;&gt;&#10;                Revenue Growth&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-2xl font-bold text-green-900 dark:text-green-100&quot;&gt;&#10;                +{performanceMetrics.revenueGrowth}%&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900 dark:to-purple-800 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-sm font-medium text-purple-800 dark:text-purple-200&quot;&gt;&#10;                Customer Retention&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-2xl font-bold text-purple-900 dark:text-purple-100&quot;&gt;&#10;                {performanceMetrics.customerRetention}%&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Recent Activity */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-clock mr-3 text-red-500&quot;&gt;&lt;/i&gt;&#10;            Recent Activity&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {last30Days&#10;              .slice(-7)&#10;              .reverse()&#10;              .map((day, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className=&quot;flex items-center justify-between p-2 hover:bg-gray-50 dark:hover:bg-gray-700 rounded&quot;&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div&#10;                      className={`w-3 h-3 rounded-full mr-3 ${day.orders &gt; 0 ? &quot;bg-green-500&quot; : &quot;bg-gray-300&quot;}`}&#10;                    &gt;&lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                        Day {day.day}&#10;                      &lt;/p&gt;&#10;                      &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        {day.orders} orders&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;p className=&quot;text-sm font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(day.revenue)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="// components/dashboard/tabs/AnalyticsTab.js&#10;import { useMemo, useRef, useEffect } from &quot;react&quot;;&#10;import {&#10;  Chart as ChartJS,&#10;  CategoryScale,&#10;  LinearScale,&#10;  PointElement,&#10;  LineElement,&#10;  BarElement,&#10;  RadialLinearScale,&#10;  ArcElement,&#10;  Title,&#10;  Tooltip,&#10;  Legend,&#10;  Filler,&#10;} from &quot;chart.js&quot;;&#10;import { Line, Bar, Radar, PolarArea, Bubble, Chart } from &quot;react-chartjs-2&quot;;&#10;&#10;// Register Chart.js components&#10;ChartJS.register(&#10;  CategoryScale,&#10;  LinearScale,&#10;  PointElement,&#10;  LineElement,&#10;  BarElement,&#10;  RadialLinearScale,&#10;  ArcElement,&#10;  Title,&#10;  Tooltip,&#10;  Legend,&#10;  Filler,&#10;);&#10;&#10;export default function AnalyticsTab({&#10;  analytics,&#10;  orders,&#10;  products,&#10;  formatPrice,&#10;  formatDate,&#10;}) {&#10;  // Calculate category statistics&#10;  const categoryStats = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    // First, group products by category&#10;    const categorizedProducts = products.reduce((acc, product) =&gt; {&#10;      const category = product.category || &quot;Other&quot;;&#10;      if (!acc[category]) {&#10;        acc[category] = [];&#10;      }&#10;      acc[category].push(product);&#10;      return acc;&#10;    }, {});&#10;&#10;    // Calculate stats for each category&#10;    return Object.entries(categorizedProducts).reduce(&#10;      (acc, [category, categoryProducts]) =&gt; {&#10;        // Calculate basic product stats&#10;        const count = categoryProducts.length;&#10;        const active = categoryProducts.filter(&#10;          (p) =&gt; p.status !== &quot;inactive&quot; &amp;&amp; p.stock &gt; 0,&#10;        ).length;&#10;        const totalStock = categoryProducts.reduce(&#10;          (sum, p) =&gt; sum + (p.stock || 0),&#10;          0,&#10;        );&#10;&#10;        // Calculate simple average price to match Top Categories display&#10;        const avgPrice =&#10;          count &gt; 0&#10;            ? categoryProducts.reduce((sum, p) =&gt; sum + (p.price || 0), 0) /&#10;              count&#10;            : 0;&#10;&#10;        // Calculate revenue for this category from actual orders&#10;        const categoryRevenue = validOrders.reduce((sum, order) =&gt; {&#10;          if (!order.items) return sum;&#10;&#10;          const categoryOrderItems = order.items.filter((item) =&gt; {&#10;            // Check if this order item belongs to any product in this category&#10;            return categoryProducts.some(&#10;              (product) =&gt;&#10;                item.product?._id === product._id ||&#10;                item.productId === product._id,&#10;            );&#10;          });&#10;&#10;          return (&#10;            sum +&#10;            categoryOrderItems.reduce(&#10;              (itemSum, item) =&gt;&#10;                itemSum + (item.price || 0) * (item.quantity || 0),&#10;              0,&#10;            )&#10;          );&#10;        }, 0);&#10;&#10;        acc[category] = {&#10;          count,&#10;          active,&#10;          revenue: categoryRevenue,&#10;          avgPrice,&#10;          totalStock,&#10;        };&#10;&#10;        return acc;&#10;      },&#10;      {},&#10;    );&#10;  }, [products, orders]);&#10;&#10;  // Calculate last 30 days performance with more data points&#10;  const last30Days = useMemo(() =&gt; {&#10;    return Array.from({ length: 30 }, (_, i) =&gt; {&#10;      const date = new Date();&#10;      date.setDate(date.getDate() - (29 - i));&#10;&#10;      const dayOrders = orders.filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt).toISOString().split(&quot;T&quot;)[0];&#10;        const isToday = orderDate === date.toISOString().split(&quot;T&quot;)[0];&#10;        const isValidOrder =&#10;          order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;;&#10;        return isToday &amp;&amp; isValidOrder;&#10;      });&#10;&#10;      return {&#10;        date: date.toISOString().split(&quot;T&quot;)[0],&#10;        day: date.getDate(),&#10;        orders: dayOrders.length,&#10;        revenue: dayOrders.reduce(&#10;          (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;          0,&#10;        ),&#10;        customers: new Set(dayOrders.map((order) =&gt; order.userId)).size,&#10;      };&#10;    });&#10;  }, [orders]);&#10;&#10;  // Product performance bubble chart data&#10;  const productBubbleData = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    const productData = products.slice(0, 20).map((product) =&gt; {&#10;      const productOrders = validOrders.filter((order) =&gt;&#10;        order.items?.some(&#10;          (item) =&gt;&#10;            item.product?._id === product._id || item.productId === product._id,&#10;        ),&#10;      );&#10;&#10;      const totalQuantitySold = productOrders.reduce((sum, order) =&gt; {&#10;        const matchingItems =&#10;          order.items?.filter(&#10;            (item) =&gt;&#10;              item.product?._id === product._id ||&#10;              item.productId === product._id,&#10;          ) || [];&#10;        return (&#10;          sum +&#10;          matchingItems.reduce(&#10;            (itemSum, item) =&gt; itemSum + (item.quantity || 0),&#10;            0,&#10;          )&#10;        );&#10;      }, 0);&#10;&#10;      const totalRevenue = productOrders.reduce((sum, order) =&gt; {&#10;        const matchingItems =&#10;          order.items?.filter(&#10;            (item) =&gt;&#10;              item.product?._id === product._id ||&#10;              item.productId === product._id,&#10;          ) || [];&#10;        return (&#10;          sum +&#10;          matchingItems.reduce(&#10;            (itemSum, item) =&gt;&#10;              itemSum + (item.price || 0) * (item.quantity || 0),&#10;            0,&#10;          )&#10;        );&#10;      }, 0);&#10;&#10;      return {&#10;        x: product.price || 0, // Price&#10;        y: totalQuantitySold, // Quantity sold&#10;        r: Math.max(Math.sqrt(totalRevenue / 10), 5), // Revenue (bubble size)&#10;        label: product.name,&#10;        revenue: totalRevenue,&#10;      };&#10;    });&#10;&#10;    return {&#10;      datasets: [&#10;        {&#10;          label: &quot;Product Performance&quot;,&#10;          data: productData,&#10;          backgroundColor: &quot;rgba(75, 192, 192, 0.6)&quot;,&#10;          borderColor: &quot;rgba(75, 192, 192, 1)&quot;,&#10;          borderWidth: 2,&#10;        },&#10;      ],&#10;    };&#10;  }, [products, orders]);&#10;&#10;  // Radar chart data for category performance&#10;  const categoryRadarData = useMemo(() =&gt; {&#10;    const categories = Object.keys(categoryStats);&#10;&#10;    // If no categories, return empty chart&#10;    if (categories.length === 0) {&#10;      return {&#10;        labels: [&#10;          &quot;Product Count&quot;,&#10;          &quot;Revenue ($)&quot;,&#10;          &quot;Active Products&quot;,&#10;          &quot;Avg Price ($)&quot;,&#10;          &quot;Total Stock&quot;,&#10;        ],&#10;        datasets: [],&#10;      };&#10;    }&#10;&#10;    // Calculate actual maximums for scaling (use actual values, not normalized)&#10;    const allStats = Object.values(categoryStats);&#10;    &#10;    // Find reasonable scale maximums based on actual data&#10;    const maxValues = {&#10;      count: Math.max(...allStats.map((s) =&gt; s.count), 1),&#10;      revenue: Math.max(...allStats.map((s) =&gt; s.revenue), 1),&#10;      active: Math.max(...allStats.map((s) =&gt; s.active), 1),&#10;      avgPrice: Math.max(...allStats.map((s) =&gt; s.avgPrice), 1),&#10;      totalStock: Math.max(...allStats.map((s) =&gt; s.totalStock), 1),&#10;    };&#10;&#10;    // Use a scale that makes sense for comparison&#10;    const getScaledValue = (value, maxValue, targetMax = 100) =&gt; {&#10;      if (maxValue === 0) return 0;&#10;      return Math.min((value / maxValue) * targetMax, targetMax);&#10;    };&#10;&#10;    return {&#10;      labels: [&#10;        &quot;Product Count&quot;,&#10;        &quot;Revenue ($)&quot;,&#10;        &quot;Active Products&quot;, &#10;        &quot;Avg Price ($)&quot;,&#10;        &quot;Total Stock&quot;,&#10;      ],&#10;      datasets: categories.slice(0, 5).map((category, index) =&gt; {&#10;        const stats = categoryStats[category];&#10;        const colors = [&#10;          &quot;rgba(255, 99, 132, 0.2)&quot;,&#10;          &quot;rgba(54, 162, 235, 0.2)&quot;,&#10;          &quot;rgba(255, 205, 86, 0.2)&quot;,&#10;          &quot;rgba(75, 192, 192, 0.2)&quot;,&#10;          &quot;rgba(153, 102, 255, 0.2)&quot;,&#10;        ];&#10;        const borderColors = [&#10;          &quot;rgba(255, 99, 132, 1)&quot;,&#10;          &quot;rgba(54, 162, 235, 1)&quot;,&#10;          &quot;rgba(255, 205, 86, 1)&quot;,&#10;          &quot;rgba(75, 192, 192, 1)&quot;,&#10;          &quot;rgba(153, 102, 255, 1)&quot;,&#10;        ];&#10;&#10;        // Use actual values scaled proportionally&#10;        const scaledData = [&#10;          getScaledValue(stats.count, maxValues.count),&#10;          getScaledValue(stats.revenue, maxValues.revenue),&#10;          getScaledValue(stats.active, maxValues.active),&#10;          getScaledValue(stats.avgPrice, maxValues.avgPrice),&#10;          getScaledValue(stats.totalStock, maxValues.totalStock),&#10;        ];&#10;&#10;        // Create accurate label with actual values&#10;        const labelText = `${category} (${stats.count} products, $${stats.revenue.toFixed(2)} revenue, ${stats.totalStock} stock)`;&#10;&#10;        return {&#10;          label: labelText,&#10;          data: scaledData,&#10;          backgroundColor: colors[index % colors.length],&#10;          borderColor: borderColors[index % borderColors.length],&#10;          borderWidth: 2,&#10;          pointBackgroundColor: borderColors[index % borderColors.length],&#10;          pointBorderColor: &quot;#fff&quot;,&#10;          pointHoverBackgroundColor: &quot;#fff&quot;,&#10;          pointHoverBorderColor: borderColors[index % borderColors.length],&#10;        };&#10;      }),&#10;    };&#10;  }, [categoryStats]);&#10;&#10;  // Mixed chart data (revenue and orders)&#10;  const mixedChartData = useMemo(() =&gt; {&#10;    const recentData = last30Days.slice(-14); // Last 14 days&#10;&#10;    return {&#10;      labels: recentData.map((d) =&gt; `${d.day}`),&#10;      datasets: [&#10;        {&#10;          type: &quot;line&quot;,&#10;          label: &quot;Revenue&quot;,&#10;          data: recentData.map((d) =&gt; d.revenue),&#10;          borderColor: &quot;rgba(75, 192, 192, 1)&quot;,&#10;          backgroundColor: &quot;rgba(75, 192, 192, 0.1)&quot;,&#10;          borderWidth: 3,&#10;          fill: true,&#10;          tension: 0.4,&#10;          yAxisID: &quot;y&quot;,&#10;        },&#10;        {&#10;          type: &quot;bar&quot;,&#10;          label: &quot;Orders&quot;,&#10;          data: recentData.map((d) =&gt; d.orders),&#10;          backgroundColor: &quot;rgba(255, 99, 132, 0.8)&quot;,&#10;          borderColor: &quot;rgba(255, 99, 132, 1)&quot;,&#10;          borderWidth: 1,&#10;          yAxisID: &quot;y1&quot;,&#10;        },&#10;        {&#10;          type: &quot;line&quot;,&#10;          label: &quot;Customers&quot;,&#10;          data: recentData.map((d) =&gt; d.customers),&#10;          borderColor: &quot;rgba(153, 102, 255, 1)&quot;,&#10;          backgroundColor: &quot;rgba(153, 102, 255, 0.1)&quot;,&#10;          borderWidth: 2,&#10;          borderDash: [5, 5],&#10;          yAxisID: &quot;y1&quot;,&#10;        },&#10;      ],&#10;    };&#10;  }, [last30Days]);&#10;&#10;  // Polar area chart for order status distribution&#10;  const orderStatusData = useMemo(() =&gt; {&#10;    const statusCounts = orders.reduce((acc, order) =&gt; {&#10;      const status = order.status || &quot;unknown&quot;;&#10;      acc[status] = (acc[status] || 0) + 1;&#10;      return acc;&#10;    }, {});&#10;&#10;    return {&#10;      labels: Object.keys(statusCounts),&#10;      datasets: [&#10;        {&#10;          data: Object.values(statusCounts),&#10;          backgroundColor: [&#10;            &quot;rgba(255, 99, 132, 0.8)&quot;,&#10;            &quot;rgba(54, 162, 235, 0.8)&quot;,&#10;            &quot;rgba(255, 205, 86, 0.8)&quot;,&#10;            &quot;rgba(75, 192, 192, 0.8)&quot;,&#10;            &quot;rgba(153, 102, 255, 0.8)&quot;,&#10;            &quot;rgba(255, 159, 64, 0.8)&quot;,&#10;          ],&#10;          borderWidth: 2,&#10;          borderColor: &quot;#fff&quot;,&#10;        },&#10;      ],&#10;    };&#10;  }, [orders]);&#10;&#10;  const chartOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        position: &quot;top&quot;,&#10;        labels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;      title: {&#10;        display: false,&#10;      },&#10;      tooltip: {&#10;        backgroundColor: &quot;rgba(0, 0, 0, 0.8)&quot;,&#10;        titleColor: &quot;#fff&quot;,&#10;        bodyColor: &quot;#fff&quot;,&#10;        borderColor: &quot;rgba(255, 255, 255, 0.1)&quot;,&#10;        borderWidth: 1,&#10;      },&#10;    },&#10;    scales: {&#10;      x: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;      y: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const mixedChartOptions = {&#10;    ...chartOptions,&#10;    scales: {&#10;      x: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;      y: {&#10;        type: &quot;linear&quot;,&#10;        display: true,&#10;        position: &quot;left&quot;,&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          callback: function (value) {&#10;            return formatPrice(value);&#10;          },&#10;        },&#10;      },&#10;      y1: {&#10;        type: &quot;linear&quot;,&#10;        display: true,&#10;        position: &quot;right&quot;,&#10;        grid: {&#10;          drawOnChartArea: false,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const bubbleChartOptions = {&#10;    ...chartOptions,&#10;    scales: {&#10;      x: {&#10;        title: {&#10;          display: true,&#10;          text: &quot;Product Price&quot;,&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          callback: function (value) {&#10;            return formatPrice(value);&#10;          },&#10;        },&#10;      },&#10;      y: {&#10;        title: {&#10;          display: true,&#10;          text: &quot;Quantity Sold&quot;,&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.1)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;        },&#10;      },&#10;    },&#10;    plugins: {&#10;      ...chartOptions.plugins,&#10;      tooltip: {&#10;        ...chartOptions.plugins.tooltip,&#10;        callbacks: {&#10;          label: function (context) {&#10;            const point = context.raw;&#10;            return `${point.label}: Price ${formatPrice(point.x)}, Sold ${point.y}, Revenue ${formatPrice(point.revenue)}`;&#10;          },&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const radarOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        position: &quot;top&quot;,&#10;        labels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;      tooltip: {&#10;        backgroundColor: &quot;rgba(0, 0, 0, 0.8)&quot;,&#10;        titleColor: &quot;#fff&quot;,&#10;        bodyColor: &quot;#fff&quot;,&#10;        borderColor: &quot;rgba(255, 255, 255, 0.1)&quot;,&#10;        borderWidth: 1,&#10;        callbacks: {&#10;          label: function(context) {&#10;            const datasetLabel = context.dataset.label;&#10;            const categoryName = datasetLabel.split(' (')[0];&#10;            const stats = categoryStats[categoryName];&#10;            const pointIndex = context.dataIndex;&#10;            &#10;            if (!stats) return context.formattedValue;&#10;            &#10;            const labels = [&#10;              `Products: ${stats.count}`,&#10;              `Revenue: ${formatPrice(stats.revenue)}`,&#10;              `Active: ${stats.active}`,&#10;              `Avg Price: ${formatPrice(stats.avgPrice)}`,&#10;              `Stock: ${stats.totalStock}`&#10;            ];&#10;            &#10;            return labels[pointIndex] || context.formattedValue;&#10;          }&#10;        }&#10;      },&#10;    },&#10;    scales: {&#10;      r: {&#10;        angleLines: {&#10;          color: &quot;rgba(156, 163, 175, 0.2)&quot;,&#10;        },&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.2)&quot;,&#10;        },&#10;        pointLabels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 11,&#10;          },&#10;        },&#10;        ticks: {&#10;          color: &quot;rgba(156, 163, 175, 0.8)&quot;,&#10;          backdropColor: &quot;transparent&quot;,&#10;          stepSize: 20,&#10;          min: 0,&#10;          max: 100,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  const polarOptions = {&#10;    responsive: true,&#10;    maintainAspectRatio: false,&#10;    plugins: {&#10;      legend: {&#10;        position: &quot;right&quot;,&#10;        labels: {&#10;          color: &quot;rgb(156, 163, 175)&quot;,&#10;          font: {&#10;            size: 12,&#10;          },&#10;        },&#10;      },&#10;    },&#10;    scales: {&#10;      r: {&#10;        grid: {&#10;          color: &quot;rgba(156, 163, 175, 0.2)&quot;,&#10;        },&#10;        ticks: {&#10;          color: &quot;rgba(156, 163, 175, 0.8)&quot;,&#10;          backdropColor: &quot;transparent&quot;,&#10;        },&#10;      },&#10;    },&#10;  };&#10;&#10;  // Calculate actual performance metrics&#10;  const performanceMetrics = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    // Calculate conversion rate (delivered orders / total orders)&#10;    const conversionRate =&#10;      orders.length &gt; 0&#10;        ? (&#10;            (orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length /&#10;              orders.length) *&#10;            100&#10;          ).toFixed(1)&#10;        : 0;&#10;&#10;    // Calculate revenue growth (compare last 30 days with previous 30 days)&#10;    const today = new Date();&#10;    const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);&#10;    const sixtyDaysAgo = new Date(today.getTime() - 60 * 24 * 60 * 60 * 1000);&#10;&#10;    const recentRevenue = validOrders&#10;      .filter((order) =&gt; new Date(order.createdAt) &gt;= thirtyDaysAgo)&#10;      .reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;    const previousRevenue = validOrders&#10;      .filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt);&#10;        return orderDate &gt;= sixtyDaysAgo &amp;&amp; orderDate &lt; thirtyDaysAgo;&#10;      })&#10;      .reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;    let revenueGrowth = 0;&#10;    if (previousRevenue &gt; 0 &amp;&amp; recentRevenue &gt; 0) {&#10;      revenueGrowth = (&#10;        ((recentRevenue - previousRevenue) / previousRevenue) *&#10;        100&#10;      ).toFixed(1);&#10;    } else if (recentRevenue &gt; 0 &amp;&amp; previousRevenue === 0) {&#10;      revenueGrowth = 100; // 100% growth when starting from 0&#10;    }&#10;&#10;    // Calculate customer retention (customers who made repeat orders)&#10;    const uniqueCustomers = [&#10;      ...new Set(validOrders.map((order) =&gt; order.userId)),&#10;    ];&#10;    const repeatCustomers = uniqueCustomers.filter((customerId) =&gt; {&#10;      const customerOrders = validOrders.filter(&#10;        (order) =&gt; order.userId === customerId,&#10;      );&#10;      return customerOrders.length &gt; 1;&#10;    });&#10;&#10;    const customerRetention =&#10;      uniqueCustomers.length &gt; 0&#10;        ? ((repeatCustomers.length / uniqueCustomers.length) * 100).toFixed(1)&#10;        : 0;&#10;&#10;    return {&#10;      conversionRate,&#10;      revenueGrowth,&#10;      customerRetention,&#10;      hasActivity: validOrders.length &gt; 0 || products.length &gt; 0,&#10;    };&#10;  }, [orders, products]);&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-8&quot;&gt;&#10;      {/* Header Stats */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-6&quot;&gt;&#10;        &lt;div className=&quot;bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-blue-100 text-sm font-medium&quot;&gt;Total Revenue&lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;&#10;                {formatPrice(analytics.totalRevenue || 0)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-dollar-sign text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-green-100 text-sm font-medium&quot;&gt;Total Orders&lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;{analytics.totalOrders || 0}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-shopping-cart text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-purple-100 text-sm font-medium&quot;&gt;&#10;                Active Products&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;&#10;                {analytics.activeProducts || 0}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-box text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;text-orange-100 text-sm font-medium&quot;&gt;&#10;                Avg Order Value&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-3xl font-bold&quot;&gt;&#10;                {formatPrice(analytics.averageOrderValue || 0)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-3 bg-white bg-opacity-20 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-chart-line text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Advanced Charts Row 1 */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;        {/* Mixed Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-chart-area mr-3 text-blue-500&quot;&gt;&lt;/i&gt;&#10;            Revenue &amp; Orders Trend (14 Days)&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;Chart&#10;              type=&quot;bar&quot;&#10;              data={mixedChartData}&#10;              options={mixedChartOptions}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Bubble Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-circle-notch mr-3 text-green-500&quot;&gt;&lt;/i&gt;&#10;            Product Performance Matrix&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;Bubble data={productBubbleData} options={bubbleChartOptions} /&gt;&#10;          &lt;/div&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400 mt-2&quot;&gt;&#10;            X: Price, Y: Quantity Sold, Bubble Size: Revenue&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Advanced Charts Row 2 */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;        {/* Radar Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-spider mr-3 text-purple-500&quot;&gt;&lt;/i&gt;&#10;            Category Performance Analysis&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;Radar data={categoryRadarData} options={radarOptions} /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Polar Area Chart */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-chart-pie mr-3 text-pink-500&quot;&gt;&lt;/i&gt;&#10;            Order Status Distribution&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;h-80&quot;&gt;&#10;            &lt;PolarArea data={orderStatusData} options={polarOptions} /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Detailed Analytics Grid */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;        {/* Top Categories */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tags mr-3 text-indigo-500&quot;&gt;&lt;/i&gt;&#10;            Top Categories&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {Object.entries(categoryStats)&#10;              .sort(([, a], [, b]) =&gt; b.revenue - a.revenue)&#10;              .slice(0, 5)&#10;              .map(([category, stats]) =&gt; (&#10;                &lt;div&#10;                  key={category}&#10;                  className=&quot;flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {category}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      {stats.count} products&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;p className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatPrice(stats.revenue)}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-green-600 dark:text-green-400&quot;&gt;&#10;                      {formatPrice(stats.avgPrice)} avg&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Performance Metrics */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tachometer-alt mr-3 text-yellow-500&quot;&gt;&lt;/i&gt;&#10;            Performance Metrics&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-sm font-medium text-blue-800 dark:text-blue-200&quot;&gt;&#10;                Conversion Rate&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-2xl font-bold text-blue-900 dark:text-blue-100&quot;&gt;&#10;                {performanceMetrics.conversionRate}%&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900 dark:to-green-800 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-sm font-medium text-green-800 dark:text-green-200&quot;&gt;&#10;                Revenue Growth&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-2xl font-bold text-green-900 dark:text-green-100&quot;&gt;&#10;                +{performanceMetrics.revenueGrowth}%&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900 dark:to-purple-800 rounded-lg&quot;&gt;&#10;              &lt;p className=&quot;text-sm font-medium text-purple-800 dark:text-purple-200&quot;&gt;&#10;                Customer Retention&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-2xl font-bold text-purple-900 dark:text-purple-100&quot;&gt;&#10;                {performanceMetrics.customerRetention}%&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Recent Activity */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-clock mr-3 text-red-500&quot;&gt;&lt;/i&gt;&#10;            Recent Activity&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {last30Days&#10;              .slice(-7)&#10;              .reverse()&#10;              .map((day, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className=&quot;flex items-center justify-between p-2 hover:bg-gray-50 dark:hover:bg-gray-700 rounded&quot;&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div&#10;                      className={`w-3 h-3 rounded-full mr-3 ${day.orders &gt; 0 ? &quot;bg-green-500&quot; : &quot;bg-gray-300&quot;}`}&#10;                    &gt;&lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                        Day {day.day}&#10;                      &lt;/p&gt;&#10;                      &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        {day.orders} orders&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;p className=&quot;text-sm font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(day.revenue)}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/tabs/DashboardTab.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/tabs/DashboardTab.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useMemo } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function DashboardTab({&#10;  orders,&#10;  products,&#10;  formatPrice,&#10;  formatDate,&#10;  handleRefresh,&#10;  updateBulkProductsInCache, // Add this prop to receive the bulk update function&#10;}) {&#10;  const router = useRouter();&#10;  const [bulkUpdateModal, setBulkUpdateModal] = useState(false);&#10;  const [selectedProducts, setSelectedProducts] = useState([]);&#10;  const [bulkAction, setBulkAction] = useState(&quot;&quot;);&#10;  const [bulkValues, setBulkValues] = useState({&#10;    price: &quot;&quot;,&#10;    stock: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;  });&#10;  const [bulkLoading, setBulkLoading] = useState(false);&#10;&#10;  // Quick Farm Tools handlers&#10;  const handleQuickTool = (toolType) =&gt; {&#10;    switch (toolType) {&#10;      case &quot;bulk-update&quot;:&#10;        setBulkUpdateModal(true);&#10;        break;&#10;      case &quot;inventory-sync&quot;:&#10;        router.push(&quot;/manage?tab=products&amp;action=inventory&quot;);&#10;        break;&#10;      case &quot;price-optimizer&quot;:&#10;        router.push(&quot;/manage?tab=analytics&amp;tool=pricing&quot;);&#10;        break;&#10;      case &quot;harvest-planner&quot;:&#10;        router.push(&quot;/manage?tab=dashboard&amp;tool=planner&quot;);&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;  };&#10;&#10;  // Bulk update functionality&#10;  const handleBulkUpdate = async () =&gt; {&#10;    if (!selectedProducts.length || !bulkAction) {&#10;      alert(&quot;Please select products and an action to perform.&quot;);&#10;      return;&#10;    }&#10;&#10;    setBulkLoading(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      switch (bulkAction) {&#10;        case &quot;price&quot;:&#10;          if (!bulkValues.price) {&#10;            alert(&quot;Please enter a price value.&quot;);&#10;            return;&#10;          }&#10;          updateData.price = parseFloat(bulkValues.price);&#10;          break;&#10;        case &quot;stock&quot;:&#10;          if (!bulkValues.stock) {&#10;            alert(&quot;Please enter a stock value.&quot;);&#10;            return;&#10;          }&#10;          updateData.stock = parseInt(bulkValues.stock);&#10;          break;&#10;        case &quot;status&quot;:&#10;          if (!bulkValues.status) {&#10;            alert(&quot;Please select a status.&quot;);&#10;            return;&#10;          }&#10;          updateData.status = bulkValues.status;&#10;          break;&#10;        case &quot;category&quot;:&#10;          if (!bulkValues.category) {&#10;            alert(&quot;Please enter a category.&quot;);&#10;            return;&#10;          }&#10;          updateData.category = bulkValues.category;&#10;          break;&#10;      }&#10;&#10;      // Use the new API service method for bulk update with automatic cache clearing&#10;      const { apiService } = await import(&quot;@/lib/api-service&quot;);&#10;      const result = await apiService.bulkUpdateProducts(&#10;        selectedProducts,&#10;        updateData,&#10;      );&#10;&#10;      if (result.success) {&#10;        alert(`Successfully updated ${result.updatedCount} products!`);&#10;&#10;        // Update the React Query cache immediately instead of hard refresh&#10;        if (updateBulkProductsInCache) {&#10;          updateBulkProductsInCache(selectedProducts, updateData);&#10;        }&#10;&#10;        // Dispatch custom event to notify products page of bulk update&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productsBulkUpdated&quot;, {&#10;            detail: {&#10;              productIds: selectedProducts,&#10;              updateData: updateData,&#10;              timestamp: Date.now(),&#10;              cacheCleared: result.cacheCleared,&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productsBulkUpdated&quot;,&#10;          JSON.stringify({&#10;            productIds: selectedProducts,&#10;            updateData: updateData,&#10;            timestamp: Date.now(),&#10;            cacheCleared: result.cacheCleared,&#10;          }),&#10;        );&#10;&#10;        // Trigger page refresh to ensure latest data&#10;        if (handleRefresh) {&#10;          handleRefresh(true); // Force refresh&#10;        }&#10;&#10;        setBulkUpdateModal(false);&#10;        setSelectedProducts([]);&#10;        setBulkAction(&quot;&quot;);&#10;        setBulkValues({ price: &quot;&quot;, stock: &quot;&quot;, status: &quot;&quot;, category: &quot;&quot; });&#10;      } else {&#10;        throw new Error(result.error || &quot;Update failed&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      alert(`Error updating products: ${error.message}`);&#10;    } finally {&#10;      setBulkLoading(false);&#10;    }&#10;  };&#10;&#10;  const toggleProductSelection = (productId) =&gt; {&#10;    setSelectedProducts((prev) =&gt;&#10;      prev.includes(productId)&#10;        ? prev.filter((id) =&gt; id !== productId)&#10;        : [...prev, productId],&#10;    );&#10;  };&#10;&#10;  const selectAllProducts = () =&gt; {&#10;    if (selectedProducts.length === products.length) {&#10;      setSelectedProducts([]);&#10;    } else {&#10;      setSelectedProducts(products.map((p) =&gt; p._id));&#10;    }&#10;  };&#10;&#10;  // Calculate urgent action items&#10;  const actionItems = useMemo(() =&gt; {&#10;    const items = [];&#10;&#10;    // Low stock alerts&#10;    const lowStockProducts = products.filter(&#10;      (p) =&gt; p.stock &lt;= 5 &amp;&amp; p.stock &gt; 0,&#10;    );&#10;    if (lowStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;low-stock&quot;,&#10;        priority: &quot;high&quot;,&#10;        icon: &quot;fas fa-exclamation-triangle&quot;,&#10;        color: &quot;text-red-600&quot;,&#10;        bgColor: &quot;bg-red-50 dark:bg-red-900/20&quot;,&#10;        title: `${lowStockProducts.length} products low on stock`,&#10;        description: &quot;Restock needed to avoid stockouts&quot;,&#10;        action: &quot;View Products&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Out of stock alerts&#10;    const outOfStockProducts = products.filter((p) =&gt; p.stock === 0);&#10;    if (outOfStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;out-of-stock&quot;,&#10;        priority: &quot;critical&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;        color: &quot;text-red-700&quot;,&#10;        bgColor: &quot;bg-red-100 dark:bg-red-900/30&quot;,&#10;        title: `${outOfStockProducts.length} products out of stock`,&#10;        description: &quot;Products unavailable for purchase&quot;,&#10;        action: &quot;Restock Now&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Pending orders&#10;    const pendingOrders = orders.filter((o) =&gt; o.status === &quot;pending&quot;);&#10;    if (pendingOrders.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;pending-orders&quot;,&#10;        priority: &quot;medium&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;        color: &quot;text-yellow-600&quot;,&#10;        bgColor: &quot;bg-yellow-50 dark:bg-yellow-900/20&quot;,&#10;        title: `${pendingOrders.length} orders awaiting processing`,&#10;        description: &quot;New orders need your attention&quot;,&#10;        action: &quot;Process Orders&quot;,&#10;        link: &quot;#orders&quot;,&#10;      });&#10;    }&#10;&#10;    // Products without images&#10;    const productsWithoutImages = products.filter(&#10;      (p) =&gt; !p.images || p.images.length === 0,&#10;    );&#10;    if (productsWithoutImages.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;missing-images&quot;,&#10;        priority: &quot;low&quot;,&#10;        icon: &quot;fas fa-image&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;        bgColor: &quot;bg-blue-50 dark:bg-blue-900/20&quot;,&#10;        title: `${productsWithoutImages.length} products missing images`,&#10;        description: &quot;Add photos to boost sales&quot;,&#10;        action: &quot;Add Images&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    return items.sort((a, b) =&gt; {&#10;      const priorityOrder = { critical: 3, high: 2, medium: 1, low: 0 };&#10;      return priorityOrder[b.priority] - priorityOrder[a.priority];&#10;    });&#10;  }, [products, orders]);&#10;&#10;  // Real-time activity feed&#10;  const activityFeed = useMemo(() =&gt; {&#10;    const activities = [];&#10;&#10;    // Recent orders&#10;    orders.slice(0, 5).forEach((order) =&gt; {&#10;      // Extract customer name from various possible fields&#10;      let customerName =&#10;        order.customerName ||&#10;        order.customerInfo?.name ||&#10;        order.shippingAddress?.name ||&#10;        order.billingAddress?.name;&#10;&#10;      // If no name found but we have userId, format it better&#10;      if (!customerName &amp;&amp; order.userId) {&#10;        // Check if userId looks like a MongoDB ObjectId (24 hex characters)&#10;        if (order.userId.match(/^[0-9a-fA-F]{24}$/)) {&#10;          customerName = `Customer ${order.userId.slice(-6).toUpperCase()}`;&#10;        } else {&#10;          customerName = order.userId;&#10;        }&#10;      }&#10;&#10;      // Final fallback&#10;      if (!customerName) {&#10;        customerName = &quot;Anonymous Customer&quot;;&#10;      }&#10;&#10;      activities.push({&#10;        type: &quot;order&quot;,&#10;        icon: &quot;fas fa-shopping-cart&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;        title: `New order from ${customerName}`,&#10;        description: `${order.items?.length || 0} items • ${formatPrice(&#10;          order.total || 0,&#10;        )}`,&#10;        time: order.createdAt,&#10;        status: order.status,&#10;      });&#10;    });&#10;&#10;    return activities&#10;      .sort((a, b) =&gt; new Date(b.time) - new Date(a.time))&#10;      .slice(0, 8);&#10;  }, [orders, formatPrice]);&#10;&#10;  // Today's summary&#10;  const todaySummary = useMemo(() =&gt; {&#10;    const today = new Date().toISOString().split(&quot;T&quot;)[0];&#10;    const todayOrders = orders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt).toISOString().split(&quot;T&quot;)[0];&#10;      return orderDate === today;&#10;    });&#10;&#10;    const todayRevenue = todayOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    return {&#10;      ordersCount: todayOrders.length,&#10;      revenue: todayRevenue,&#10;      newCustomers: new Set(todayOrders.map((o) =&gt; o.customerEmail)).size,&#10;      topProduct: products.reduce((top, product) =&gt; {&#10;        const productOrdersToday = todayOrders.filter((order) =&gt;&#10;          order.items?.some(&#10;            (item) =&gt;&#10;              item.productId === product._id ||&#10;              item.product?._id === product._id,&#10;          ),&#10;        );&#10;        return productOrdersToday.length &gt; (top?.count || 0)&#10;          ? { ...product, count: productOrdersToday.length }&#10;          : top;&#10;      }, null),&#10;    };&#10;  }, [orders, products]);&#10;&#10;  // Seasonal recommendations&#10;  const seasonalRecommendations = useMemo(() =&gt; {&#10;    const currentMonth = new Date().getMonth();&#10;    const recommendations = [];&#10;&#10;    // Summer fruits and vegetables (June-August: months 5-7)&#10;    if (currentMonth &gt;= 5 &amp;&amp; currentMonth &lt;= 7) {&#10;      recommendations.push({&#10;        category: &quot;Summer Produce&quot;,&#10;        suggestion: &quot;Promote tomatoes, cucumbers, berries, and leafy greens&quot;,&#10;        icon: &quot;fas fa-sun&quot;,&#10;        color: &quot;text-orange-600&quot;,&#10;      });&#10;    }&#10;    // Fall harvest (September-November: months 8-10)&#10;    else if (currentMonth &gt;= 8 &amp;&amp; currentMonth &lt;= 10) {&#10;      recommendations.push({&#10;        category: &quot;Fall Harvest&quot;,&#10;        suggestion: &quot;Feature apples, pumpkins, root vegetables, and grains&quot;,&#10;        icon: &quot;fas fa-leaf&quot;,&#10;        color: &quot;text-orange-700&quot;,&#10;      });&#10;    }&#10;    // Winter storage crops (December-February: months 11, 0, 1)&#10;    else if (currentMonth === 11 || currentMonth &lt;= 1) {&#10;      recommendations.push({&#10;        category: &quot;Winter Storage&quot;,&#10;        suggestion:&#10;          &quot;Highlight preserved goods, winter squash, and dried products&quot;,&#10;        icon: &quot;fas fa-snowflake&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;      });&#10;    }&#10;    // Spring planting (March-May: months 2-4)&#10;    else {&#10;      recommendations.push({&#10;        category: &quot;Spring Fresh&quot;,&#10;        suggestion: &quot;Promote fresh herbs, early greens, and spring vegetables&quot;,&#10;        icon: &quot;fas fa-seedling&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;      });&#10;    }&#10;&#10;    return recommendations;&#10;  }, []);&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Today's Overview */}&#10;      &lt;div className=&quot;bg-gradient-to-r from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold&quot;&gt;Good morning, Farmer!&lt;/h2&gt;&#10;            &lt;p className=&quot;opacity-90&quot;&gt;&#10;              Here's what's happening on your farm today&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-right&quot;&gt;&#10;            &lt;p className=&quot;text-sm opacity-75&quot;&gt;&#10;              {new Date().toLocaleDateString()}&#10;            &lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold&quot;&gt;&#10;              {new Date().toLocaleDateString(&quot;en-US&quot;, { weekday: &quot;long&quot; })}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-shopping-cart text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;{todaySummary.ordersCount}&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Orders Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-dollar-sign text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {formatPrice(todaySummary.revenue)}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Revenue Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-users text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {todaySummary.newCustomers}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;New Customers&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-star text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-lg font-bold&quot;&gt;&#10;                  {todaySummary.topProduct?.name || &quot;None&quot;}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Top Product&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Action Items &amp; Quick Tools */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;        {/* Urgent Action Items */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bell text-orange-500 mr-2&quot;&gt;&lt;/i&gt;&#10;              Action Items&#10;            &lt;/h3&gt;&#10;            &lt;span className=&quot;bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;              {&#10;                actionItems.filter(&#10;                  (item) =&gt;&#10;                    item.priority === &quot;critical&quot; || item.priority === &quot;high&quot;,&#10;                ).length&#10;              }{&quot; &quot;}&#10;              urgent&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {actionItems.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-check-circle text-4xl text-green-500 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;All caught up!&lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-500&quot;&gt;&#10;                No urgent action items at the moment.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {actionItems.slice(0, 4).map((item, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className={`${item.bgColor} rounded-lg p-4 border-l-4 border-current`}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                    &lt;div className=&quot;flex items-start&quot;&gt;&#10;                      &lt;i&#10;                        className={`${item.icon} ${item.color} text-lg mr-3 mt-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.title}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                          {item.description}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button&#10;                      className={`${item.color} hover:underline text-sm font-medium`}&#10;                    &gt;&#10;                      {item.action}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Quick Farm Tools */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tools text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Quick Farm Tools&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-3&quot;&gt;&#10;            &lt;Link&#10;              href=&quot;/create&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg hover:bg-green-100 dark:hover:bg-green-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-plus text-green-600 dark:text-green-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Add Product&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={() =&gt; setBulkUpdateModal(true)}&#10;              className=&quot;flex flex-col items-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-layer-group text-blue-600 dark:text-blue-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Bulk Update&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href=&quot;/farmer-orders&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-clipboard-list text-purple-600 dark:text-purple-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Process Orders&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={handleRefresh}&#10;              className=&quot;flex flex-col items-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg hover:bg-orange-100 dark:hover:bg-orange-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-sync-alt text-orange-600 dark:text-orange-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Refresh Data&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Activity Feed &amp; Seasonal Tips */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Real-time Activity Feed */}&#10;        &lt;div className=&quot;lg:col-span-2 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-activity text-green-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Live Farm Activity&#10;          &lt;/h3&gt;&#10;&#10;          {activityFeed.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-calendar-day text-4xl text-gray-400 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                No recent activity&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-4 max-h-80 overflow-y-auto&quot;&gt;&#10;              {activityFeed.map((activity, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className=&quot;flex items-start space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div className={`${activity.color} mt-1`}&gt;&#10;                    &lt;i className={activity.icon}&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {activity.title}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      {activity.description}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-500 mt-1&quot;&gt;&#10;                      {formatDate(activity.time)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  {activity.status &amp;&amp; (&#10;                    &lt;span&#10;                      className={`px-2 py-1 rounded-full text-xs font-medium ${&#10;                        activity.status === &quot;pending&quot;&#10;                          ? &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                          : activity.status === &quot;processing&quot;&#10;                            ? &quot;bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300&quot;&#10;                            : &quot;bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                      }`}&#10;                    &gt;&#10;                      {activity.status}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Seasonal Recommendations */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-lightbulb text-yellow-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Farm Tips&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {seasonalRecommendations.map((rec, index) =&gt; (&#10;              &lt;div&#10;                key={index}&#10;                className=&quot;p-4 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 rounded-lg&quot;&#10;              &gt;&#10;                &lt;div className=&quot;flex items-start&quot;&gt;&#10;                  &lt;i&#10;                    className={`${rec.icon} ${rec.color} text-xl mr-3 mt-1`}&#10;                  &gt;&lt;/i&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {rec.category}&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {rec.suggestion}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg border border-blue-200 dark:border-blue-700&quot;&gt;&#10;              &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-blue-600 mr-2&quot;&gt;&lt;/i&gt;&#10;                Growth Tip&#10;              &lt;/h4&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                Products with photos sell 3x better! Add high-quality images to&#10;                boost your sales.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Bulk Update Modal */}&#10;      {bulkUpdateModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Bulk Update Products&#10;                &lt;/h3&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setBulkUpdateModal(false)}&#10;                  className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;p-6 max-h-[calc(90vh-200px)] overflow-y-auto&quot;&gt;&#10;              {/* Product Selection */}&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                  &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Select Products ({selectedProducts.length} selected)&#10;                  &lt;/h4&gt;&#10;                  &lt;button&#10;                    onClick={selectAllProducts}&#10;                    className=&quot;text-blue-600 hover:text-blue-700 text-sm font-medium&quot;&#10;                  &gt;&#10;                    {selectedProducts.length === products.length&#10;                      ? &quot;Deselect All&quot;&#10;                      : &quot;Select All&quot;}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-60 overflow-y-auto&quot;&gt;&#10;                  {products.map((product) =&gt; (&#10;                    &lt;div&#10;                      key={product._id}&#10;                      className={`p-4 border rounded-lg cursor-pointer transition-all ${&#10;                        selectedProducts.includes(product._id)&#10;                          ? &quot;border-blue-500 bg-blue-50 dark:bg-blue-900/20&quot;&#10;                          : &quot;border-gray-200 dark:border-gray-700 hover:border-gray-300&quot;&#10;                      }`}&#10;                      onClick={() =&gt; toggleProductSelection(product._id)}&#10;                    &gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedProducts.includes(product._id)}&#10;                          onChange={() =&gt; toggleProductSelection(product._id)}&#10;                          className=&quot;w-4 h-4 text-blue-600&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                          &lt;p className=&quot;font-medium text-gray-900 dark:text-white truncate&quot;&gt;&#10;                            {product.name}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Stock: {product.stock} •{&quot; &quot;}&#10;                            {formatPrice(product.price)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Bulk Action Selection */}&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#10;                &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                  Choose Action&#10;                &lt;/h4&gt;&#10;                &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;                  {[&#10;                    {&#10;                      value: &quot;price&quot;,&#10;                      label: &quot;Update Price&quot;,&#10;                      icon: &quot;fas fa-dollar-sign&quot;,&#10;                    },&#10;                    {&#10;                      value: &quot;stock&quot;,&#10;                      label: &quot;Update Stock&quot;,&#10;                      icon: &quot;fas fa-box&quot;,&#10;                    },&#10;                    {&#10;                      value: &quot;status&quot;,&#10;                      label: &quot;Update Status&quot;,&#10;                      icon: &quot;fas fa-toggle-on&quot;,&#10;                    },&#10;                    {&#10;                      value: &quot;category&quot;,&#10;                      label: &quot;Update Category&quot;,&#10;                      icon: &quot;fas fa-tags&quot;,&#10;                    },&#10;                  ].map((action) =&gt; (&#10;                    &lt;button&#10;                      key={action.value}&#10;                      onClick={() =&gt; setBulkAction(action.value)}&#10;                      className={`p-4 border rounded-lg text-center transition-all ${&#10;                        bulkAction === action.value&#10;                          ? &quot;border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-600&quot;&#10;                          : &quot;border-gray-200 dark:border-gray-700 hover:border-gray-300 text-gray-700 dark:text-gray-300&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i className={`${action.icon} text-xl mb-2`}&gt;&lt;/i&gt;&#10;                      &lt;p className=&quot;text-sm font-medium&quot;&gt;{action.label}&lt;/p&gt;&#10;                    &lt;/button&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Input Fields Based on Selected Action */}&#10;              {bulkAction &amp;&amp; (&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Enter New Value&#10;                  &lt;/h4&gt;&#10;&#10;                  {bulkAction === &quot;price&quot; &amp;&amp; (&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      step=&quot;0.01&quot;&#10;                      placeholder=&quot;Enter new price&quot;&#10;                      value={bulkValues.price}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          price: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  )}&#10;&#10;                  {bulkAction === &quot;stock&quot; &amp;&amp; (&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Enter new stock quantity&quot;&#10;                      value={bulkValues.stock}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          stock: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  )}&#10;&#10;                  {bulkAction === &quot;status&quot; &amp;&amp; (&#10;                    &lt;select&#10;                      value={bulkValues.status}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          status: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select status&lt;/option&gt;&#10;                      &lt;option value=&quot;active&quot;&gt;Active&lt;/option&gt;&#10;                      &lt;option value=&quot;inactive&quot;&gt;Inactive&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  )}&#10;&#10;                  {bulkAction === &quot;category&quot; &amp;&amp; (&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Enter new category&quot;&#10;                      value={bulkValues.category}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          category: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;p-6 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setBulkUpdateModal(false)}&#10;                className=&quot;px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors&quot;&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={handleBulkUpdate}&#10;                disabled={&#10;                  !selectedProducts.length || !bulkAction || bulkLoading&#10;                }&#10;                className=&quot;px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center&quot;&#10;              &gt;&#10;                {bulkLoading ? (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                    Updating...&#10;                  &lt;/&gt;&#10;                ) : (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-check mr-2&quot;&gt;&lt;/i&gt;&#10;                    Update Products&#10;                  &lt;/&gt;&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useMemo } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function DashboardTab({&#10;  orders,&#10;  products,&#10;  formatPrice,&#10;  formatDate,&#10;  handleRefresh,&#10;  updateBulkProductsInCache, // Add this prop to receive the bulk update function&#10;}) {&#10;  const router = useRouter();&#10;  const [bulkUpdateModal, setBulkUpdateModal] = useState(false);&#10;  const [selectedProducts, setSelectedProducts] = useState([]);&#10;  const [bulkAction, setBulkAction] = useState(&quot;&quot;);&#10;  const [bulkValues, setBulkValues] = useState({&#10;    price: &quot;&quot;,&#10;    stock: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;  });&#10;  const [bulkLoading, setBulkLoading] = useState(false);&#10;&#10;  // Quick Farm Tools handlers&#10;  const handleQuickTool = (toolType) =&gt; {&#10;    switch (toolType) {&#10;      case &quot;bulk-update&quot;:&#10;        setBulkUpdateModal(true);&#10;        break;&#10;      case &quot;inventory-sync&quot;:&#10;        router.push(&quot;/manage?tab=products&amp;action=inventory&quot;);&#10;        break;&#10;      case &quot;price-optimizer&quot;:&#10;        router.push(&quot;/manage?tab=analytics&amp;tool=pricing&quot;);&#10;        break;&#10;      case &quot;harvest-planner&quot;:&#10;        router.push(&quot;/manage?tab=dashboard&amp;tool=planner&quot;);&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;  };&#10;&#10;  // Bulk update functionality&#10;  const handleBulkUpdate = async () =&gt; {&#10;    if (!selectedProducts.length || !bulkAction) {&#10;      alert(&quot;Please select products and an action to perform.&quot;);&#10;      return;&#10;    }&#10;&#10;    setBulkLoading(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      switch (bulkAction) {&#10;        case &quot;price&quot;:&#10;          if (!bulkValues.price) {&#10;            alert(&quot;Please enter a price value.&quot;);&#10;            return;&#10;          }&#10;          updateData.price = parseFloat(bulkValues.price);&#10;          break;&#10;        case &quot;stock&quot;:&#10;          if (!bulkValues.stock) {&#10;            alert(&quot;Please enter a stock value.&quot;);&#10;            return;&#10;          }&#10;          updateData.stock = parseInt(bulkValues.stock);&#10;          break;&#10;        case &quot;status&quot;:&#10;          if (!bulkValues.status) {&#10;            alert(&quot;Please select a status.&quot;);&#10;            return;&#10;          }&#10;          updateData.status = bulkValues.status;&#10;          break;&#10;        case &quot;category&quot;:&#10;          if (!bulkValues.category) {&#10;            alert(&quot;Please enter a category.&quot;);&#10;            return;&#10;          }&#10;          updateData.category = bulkValues.category;&#10;          break;&#10;      }&#10;&#10;      // Use the new API service method for bulk update with automatic cache clearing&#10;      const { apiService } = await import(&quot;@/lib/api-service&quot;);&#10;      const result = await apiService.bulkUpdateProducts(&#10;        selectedProducts,&#10;        updateData,&#10;      );&#10;&#10;      if (result.success) {&#10;        alert(`Successfully updated ${result.data.updatedCount || 1} products!`);&#10;&#10;        // Update the React Query cache immediately instead of hard refresh&#10;        if (updateBulkProductsInCache) {&#10;          updateBulkProductsInCache(selectedProducts, updateData);&#10;        }&#10;&#10;        // Dispatch custom event to notify products page of bulk update&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productsBulkUpdated&quot;, {&#10;            detail: {&#10;              productIds: selectedProducts,&#10;              updateData: updateData,&#10;              timestamp: Date.now(),&#10;              cacheCleared: result.cacheCleared,&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productsBulkUpdated&quot;,&#10;          JSON.stringify({&#10;            productIds: selectedProducts,&#10;            updateData: updateData,&#10;            timestamp: Date.now(),&#10;            cacheCleared: result.cacheCleared,&#10;          }),&#10;        );&#10;&#10;        // Trigger page refresh to ensure latest data&#10;        if (handleRefresh) {&#10;          handleRefresh(true); // Force refresh&#10;        }&#10;&#10;        setBulkUpdateModal(false);&#10;        setSelectedProducts([]);&#10;        setBulkAction(&quot;&quot;);&#10;        setBulkValues({ price: &quot;&quot;, stock: &quot;&quot;, status: &quot;&quot;, category: &quot;&quot; });&#10;      } else {&#10;        throw new Error(result.error || &quot;Update failed&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      alert(`Error updating products: ${error.message}`);&#10;    } finally {&#10;      setBulkLoading(false);&#10;    }&#10;  };&#10;&#10;  const toggleProductSelection = (productId) =&gt; {&#10;    setSelectedProducts((prev) =&gt;&#10;      prev.includes(productId)&#10;        ? prev.filter((id) =&gt; id !== productId)&#10;        : [...prev, productId],&#10;    );&#10;  };&#10;&#10;  const selectAllProducts = () =&gt; {&#10;    if (selectedProducts.length === products.length) {&#10;      setSelectedProducts([]);&#10;    } else {&#10;      setSelectedProducts(products.map((p) =&gt; p._id));&#10;    }&#10;  };&#10;&#10;  // Calculate urgent action items&#10;  const actionItems = useMemo(() =&gt; {&#10;    const items = [];&#10;&#10;    // Low stock alerts&#10;    const lowStockProducts = products.filter(&#10;      (p) =&gt; p.stock &lt;= 5 &amp;&amp; p.stock &gt; 0,&#10;    );&#10;    if (lowStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;low-stock&quot;,&#10;        priority: &quot;high&quot;,&#10;        icon: &quot;fas fa-exclamation-triangle&quot;,&#10;        color: &quot;text-red-600&quot;,&#10;        bgColor: &quot;bg-red-50 dark:bg-red-900/20&quot;,&#10;        title: `${lowStockProducts.length} products low on stock`,&#10;        description: &quot;Restock needed to avoid stockouts&quot;,&#10;        action: &quot;View Products&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Out of stock alerts&#10;    const outOfStockProducts = products.filter((p) =&gt; p.stock === 0);&#10;    if (outOfStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;out-of-stock&quot;,&#10;        priority: &quot;critical&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;        color: &quot;text-red-700&quot;,&#10;        bgColor: &quot;bg-red-100 dark:bg-red-900/30&quot;,&#10;        title: `${outOfStockProducts.length} products out of stock`,&#10;        description: &quot;Products unavailable for purchase&quot;,&#10;        action: &quot;Restock Now&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Pending orders&#10;    const pendingOrders = orders.filter((o) =&gt; o.status === &quot;pending&quot;);&#10;    if (pendingOrders.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;pending-orders&quot;,&#10;        priority: &quot;medium&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;        color: &quot;text-yellow-600&quot;,&#10;        bgColor: &quot;bg-yellow-50 dark:bg-yellow-900/20&quot;,&#10;        title: `${pendingOrders.length} orders awaiting processing`,&#10;        description: &quot;New orders need your attention&quot;,&#10;        action: &quot;Process Orders&quot;,&#10;        link: &quot;#orders&quot;,&#10;      });&#10;    }&#10;&#10;    // Products without images&#10;    const productsWithoutImages = products.filter(&#10;      (p) =&gt; !p.images || p.images.length === 0,&#10;    );&#10;    if (productsWithoutImages.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;missing-images&quot;,&#10;        priority: &quot;low&quot;,&#10;        icon: &quot;fas fa-image&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;        bgColor: &quot;bg-blue-50 dark:bg-blue-900/20&quot;,&#10;        title: `${productsWithoutImages.length} products missing images`,&#10;        description: &quot;Add photos to boost sales&quot;,&#10;        action: &quot;Add Images&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    return items.sort((a, b) =&gt; {&#10;      const priorityOrder = { critical: 3, high: 2, medium: 1, low: 0 };&#10;      return priorityOrder[b.priority] - priorityOrder[a.priority];&#10;    });&#10;  }, [products, orders]);&#10;&#10;  // Real-time activity feed&#10;  const activityFeed = useMemo(() =&gt; {&#10;    const activities = [];&#10;&#10;    // Recent orders&#10;    orders.slice(0, 5).forEach((order) =&gt; {&#10;      // Extract customer name from various possible fields&#10;      let customerName =&#10;        order.customerName ||&#10;        order.customerInfo?.name ||&#10;        order.shippingAddress?.name ||&#10;        order.billingAddress?.name;&#10;&#10;      // If no name found but we have userId, format it better&#10;      if (!customerName &amp;&amp; order.userId) {&#10;        // Check if userId looks like a MongoDB ObjectId (24 hex characters)&#10;        if (order.userId.match(/^[0-9a-fA-F]{24}$/)) {&#10;          customerName = `Customer ${order.userId.slice(-6).toUpperCase()}`;&#10;        } else {&#10;          customerName = order.userId;&#10;        }&#10;      }&#10;&#10;      // Final fallback&#10;      if (!customerName) {&#10;        customerName = &quot;Anonymous Customer&quot;;&#10;      }&#10;&#10;      activities.push({&#10;        type: &quot;order&quot;,&#10;        icon: &quot;fas fa-shopping-cart&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;        title: `New order from ${customerName}`,&#10;        description: `${order.items?.length || 0} items • ${formatPrice(&#10;          order.total || 0,&#10;        )}`,&#10;        time: order.createdAt,&#10;        status: order.status,&#10;      });&#10;    });&#10;&#10;    return activities&#10;      .sort((a, b) =&gt; new Date(b.time) - new Date(a.time))&#10;      .slice(0, 8);&#10;  }, [orders, formatPrice]);&#10;&#10;  // Today's summary&#10;  const todaySummary = useMemo(() =&gt; {&#10;    const today = new Date().toISOString().split(&quot;T&quot;)[0];&#10;    const todayOrders = orders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt).toISOString().split(&quot;T&quot;)[0];&#10;      return orderDate === today;&#10;    });&#10;&#10;    const todayRevenue = todayOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    return {&#10;      ordersCount: todayOrders.length,&#10;      revenue: todayRevenue,&#10;      newCustomers: new Set(todayOrders.map((o) =&gt; o.customerEmail)).size,&#10;      topProduct: products.reduce((top, product) =&gt; {&#10;        const productOrdersToday = todayOrders.filter((order) =&gt;&#10;          order.items?.some(&#10;            (item) =&gt;&#10;              item.productId === product._id ||&#10;              item.product?._id === product._id,&#10;          ),&#10;        );&#10;        return productOrdersToday.length &gt; (top?.count || 0)&#10;          ? { ...product, count: productOrdersToday.length }&#10;          : top;&#10;      }, null),&#10;    };&#10;  }, [orders, products]);&#10;&#10;  // Seasonal recommendations&#10;  const seasonalRecommendations = useMemo(() =&gt; {&#10;    const currentMonth = new Date().getMonth();&#10;    const recommendations = [];&#10;&#10;    // Summer fruits and vegetables (June-August: months 5-7)&#10;    if (currentMonth &gt;= 5 &amp;&amp; currentMonth &lt;= 7) {&#10;      recommendations.push({&#10;        category: &quot;Summer Produce&quot;,&#10;        suggestion: &quot;Promote tomatoes, cucumbers, berries, and leafy greens&quot;,&#10;        icon: &quot;fas fa-sun&quot;,&#10;        color: &quot;text-orange-600&quot;,&#10;      });&#10;    }&#10;    // Fall harvest (September-November: months 8-10)&#10;    else if (currentMonth &gt;= 8 &amp;&amp; currentMonth &lt;= 10) {&#10;      recommendations.push({&#10;        category: &quot;Fall Harvest&quot;,&#10;        suggestion: &quot;Feature apples, pumpkins, root vegetables, and grains&quot;,&#10;        icon: &quot;fas fa-leaf&quot;,&#10;        color: &quot;text-orange-700&quot;,&#10;      });&#10;    }&#10;    // Winter storage crops (December-February: months 11, 0, 1)&#10;    else if (currentMonth === 11 || currentMonth &lt;= 1) {&#10;      recommendations.push({&#10;        category: &quot;Winter Storage&quot;,&#10;        suggestion:&#10;          &quot;Highlight preserved goods, winter squash, and dried products&quot;,&#10;        icon: &quot;fas fa-snowflake&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;      });&#10;    }&#10;    // Spring planting (March-May: months 2-4)&#10;    else {&#10;      recommendations.push({&#10;        category: &quot;Spring Fresh&quot;,&#10;        suggestion: &quot;Promote fresh herbs, early greens, and spring vegetables&quot;,&#10;        icon: &quot;fas fa-seedling&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;      });&#10;    }&#10;&#10;    return recommendations;&#10;  }, []);&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Today's Overview */}&#10;      &lt;div className=&quot;bg-gradient-to-r from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold&quot;&gt;Good morning, Farmer!&lt;/h2&gt;&#10;            &lt;p className=&quot;opacity-90&quot;&gt;&#10;              Here's what's happening on your farm today&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-right&quot;&gt;&#10;            &lt;p className=&quot;text-sm opacity-75&quot;&gt;&#10;              {new Date().toLocaleDateString()}&#10;            &lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold&quot;&gt;&#10;              {new Date().toLocaleDateString(&quot;en-US&quot;, { weekday: &quot;long&quot; })}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-shopping-cart text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;{todaySummary.ordersCount}&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Orders Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-dollar-sign text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {formatPrice(todaySummary.revenue)}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Revenue Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-users text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {todaySummary.newCustomers}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;New Customers&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-star text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-lg font-bold&quot;&gt;&#10;                  {todaySummary.topProduct?.name || &quot;None&quot;}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Top Product&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Action Items &amp; Quick Tools */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;        {/* Urgent Action Items */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bell text-orange-500 mr-2&quot;&gt;&lt;/i&gt;&#10;              Action Items&#10;            &lt;/h3&gt;&#10;            &lt;span className=&quot;bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;              {&#10;                actionItems.filter(&#10;                  (item) =&gt;&#10;                    item.priority === &quot;critical&quot; || item.priority === &quot;high&quot;,&#10;                ).length&#10;              }{&quot; &quot;}&#10;              urgent&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {actionItems.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-check-circle text-4xl text-green-500 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;All caught up!&lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-500&quot;&gt;&#10;                No urgent action items at the moment.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {actionItems.slice(0, 4).map((item, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className={`${item.bgColor} rounded-lg p-4 border-l-4 border-current`}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                    &lt;div className=&quot;flex items-start&quot;&gt;&#10;                      &lt;i&#10;                        className={`${item.icon} ${item.color} text-lg mr-3 mt-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.title}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                          {item.description}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button&#10;                      className={`${item.color} hover:underline text-sm font-medium`}&#10;                    &gt;&#10;                      {item.action}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Quick Farm Tools */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tools text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Quick Farm Tools&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-3&quot;&gt;&#10;            &lt;Link&#10;              href=&quot;/create&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg hover:bg-green-100 dark:hover:bg-green-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-plus text-green-600 dark:text-green-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Add Product&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={() =&gt; setBulkUpdateModal(true)}&#10;              className=&quot;flex flex-col items-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-layer-group text-blue-600 dark:text-blue-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Bulk Update&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href=&quot;/farmer-orders&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-clipboard-list text-purple-600 dark:text-purple-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Process Orders&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={handleRefresh}&#10;              className=&quot;flex flex-col items-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg hover:bg-orange-100 dark:hover:bg-orange-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-sync-alt text-orange-600 dark:text-orange-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Refresh Data&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Activity Feed &amp; Seasonal Tips */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Real-time Activity Feed */}&#10;        &lt;div className=&quot;lg:col-span-2 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-activity text-green-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Live Farm Activity&#10;          &lt;/h3&gt;&#10;&#10;          {activityFeed.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-calendar-day text-4xl text-gray-400 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                No recent activity&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-4 max-h-80 overflow-y-auto&quot;&gt;&#10;              {activityFeed.map((activity, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className=&quot;flex items-start space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div className={`${activity.color} mt-1`}&gt;&#10;                    &lt;i className={activity.icon}&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {activity.title}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      {activity.description}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-500 mt-1&quot;&gt;&#10;                      {formatDate(activity.time)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  {activity.status &amp;&amp; (&#10;                    &lt;span&#10;                      className={`px-2 py-1 rounded-full text-xs font-medium ${&#10;                        activity.status === &quot;pending&quot;&#10;                          ? &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                          : activity.status === &quot;processing&quot;&#10;                            ? &quot;bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300&quot;&#10;                            : &quot;bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                      }`}&#10;                    &gt;&#10;                      {activity.status}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Seasonal Recommendations */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-lightbulb text-yellow-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Farm Tips&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {seasonalRecommendations.map((rec, index) =&gt; (&#10;              &lt;div&#10;                key={index}&#10;                className=&quot;p-4 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 rounded-lg&quot;&#10;              &gt;&#10;                &lt;div className=&quot;flex items-start&quot;&gt;&#10;                  &lt;i&#10;                    className={`${rec.icon} ${rec.color} text-xl mr-3 mt-1`}&#10;                  &gt;&lt;/i&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {rec.category}&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {rec.suggestion}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg border border-blue-200 dark:border-blue-700&quot;&gt;&#10;              &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-blue-600 mr-2&quot;&gt;&lt;/i&gt;&#10;                Growth Tip&#10;              &lt;/h4&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                Products with photos sell 3x better! Add high-quality images to&#10;                boost your sales.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Bulk Update Modal */}&#10;      {bulkUpdateModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;p-6 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Bulk Update Products&#10;                &lt;/h3&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setBulkUpdateModal(false)}&#10;                  className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;p-6 max-h-[calc(90vh-200px)] overflow-y-auto&quot;&gt;&#10;              {/* Product Selection */}&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                  &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Select Products ({selectedProducts.length} selected)&#10;                  &lt;/h4&gt;&#10;                  &lt;button&#10;                    onClick={selectAllProducts}&#10;                    className=&quot;text-blue-600 hover:text-blue-700 text-sm font-medium&quot;&#10;                  &gt;&#10;                    {selectedProducts.length === products.length&#10;                      ? &quot;Deselect All&quot;&#10;                      : &quot;Select All&quot;}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-60 overflow-y-auto&quot;&gt;&#10;                  {products.map((product) =&gt; (&#10;                    &lt;div&#10;                      key={product._id}&#10;                      className={`p-4 border rounded-lg cursor-pointer transition-all ${&#10;                        selectedProducts.includes(product._id)&#10;                          ? &quot;border-blue-500 bg-blue-50 dark:bg-blue-900/20&quot;&#10;                          : &quot;border-gray-200 dark:border-gray-700 hover:border-gray-300&quot;&#10;                      }`}&#10;                      onClick={() =&gt; toggleProductSelection(product._id)}&#10;                    &gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedProducts.includes(product._id)}&#10;                          onChange={() =&gt; toggleProductSelection(product._id)}&#10;                          className=&quot;w-4 h-4 text-blue-600&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                          &lt;p className=&quot;font-medium text-gray-900 dark:text-white truncate&quot;&gt;&#10;                            {product.name}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Stock: {product.stock} •{&quot; &quot;}&#10;                            {formatPrice(product.price)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Bulk Action Selection */}&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#10;                &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                  Choose Action&#10;                &lt;/h4&gt;&#10;                &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;                  {[&#10;                    {&#10;                      value: &quot;price&quot;,&#10;                      label: &quot;Update Price&quot;,&#10;                      icon: &quot;fas fa-dollar-sign&quot;,&#10;                    },&#10;                    {&#10;                      value: &quot;stock&quot;,&#10;                      label: &quot;Update Stock&quot;,&#10;                      icon: &quot;fas fa-box&quot;,&#10;                    },&#10;                    {&#10;                      value: &quot;status&quot;,&#10;                      label: &quot;Update Status&quot;,&#10;                      icon: &quot;fas fa-toggle-on&quot;,&#10;                    },&#10;                    {&#10;                      value: &quot;category&quot;,&#10;                      label: &quot;Update Category&quot;,&#10;                      icon: &quot;fas fa-tags&quot;,&#10;                    },&#10;                  ].map((action) =&gt; (&#10;                    &lt;button&#10;                      key={action.value}&#10;                      onClick={() =&gt; setBulkAction(action.value)}&#10;                      className={`p-4 border rounded-lg text-center transition-all ${&#10;                        bulkAction === action.value&#10;                          ? &quot;border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-600&quot;&#10;                          : &quot;border-gray-200 dark:border-gray-700 hover:border-gray-300 text-gray-700 dark:text-gray-300&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i className={`${action.icon} text-xl mb-2`}&gt;&lt;/i&gt;&#10;                      &lt;p className=&quot;text-sm font-medium&quot;&gt;{action.label}&lt;/p&gt;&#10;                    &lt;/button&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Input Fields Based on Selected Action */}&#10;              {bulkAction &amp;&amp; (&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Enter New Value&#10;                  &lt;/h4&gt;&#10;&#10;                  {bulkAction === &quot;price&quot; &amp;&amp; (&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      step=&quot;0.01&quot;&#10;                      placeholder=&quot;Enter new price&quot;&#10;                      value={bulkValues.price}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          price: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  )}&#10;&#10;                  {bulkAction === &quot;stock&quot; &amp;&amp; (&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Enter new stock quantity&quot;&#10;                      value={bulkValues.stock}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          stock: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  )}&#10;&#10;                  {bulkAction === &quot;status&quot; &amp;&amp; (&#10;                    &lt;select&#10;                      value={bulkValues.status}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          status: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select status&lt;/option&gt;&#10;                      &lt;option value=&quot;active&quot;&gt;Active&lt;/option&gt;&#10;                      &lt;option value=&quot;inactive&quot;&gt;Inactive&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  )}&#10;&#10;                  {bulkAction === &quot;category&quot; &amp;&amp; (&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Enter new category&quot;&#10;                      value={bulkValues.category}&#10;                      onChange={(e) =&gt;&#10;                        setBulkValues((prev) =&gt; ({&#10;                          ...prev,&#10;                          category: e.target.value,&#10;                        }))&#10;                      }&#10;                      className=&quot;w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;p-6 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setBulkUpdateModal(false)}&#10;                className=&quot;px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors&quot;&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={handleBulkUpdate}&#10;                disabled={&#10;                  !selectedProducts.length || !bulkAction || bulkLoading&#10;                }&#10;                className=&quot;px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center&quot;&#10;              &gt;&#10;                {bulkLoading ? (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                    Updating...&#10;                  &lt;/&gt;&#10;                ) : (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-check mr-2&quot;&gt;&lt;/i&gt;&#10;                    Update Products&#10;                  &lt;/&gt;&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/api-service.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/api-service.js" />
              <option name="originalContent" value="import globalCache, { sessionCache } from &quot;./cache&quot;;&#10;&#10;// Request deduplication to prevent multiple identical API calls&#10;const ongoingRequests = new Map();&#10;&#10;// Optimized API service with caching and request deduplication&#10;export class ApiService {&#10;  constructor() {&#10;    this.baseURL = &quot;/api&quot;;&#10;  }&#10;&#10;  // Generic fetch with caching and deduplication&#10;  async fetchWithCache(endpoint, params = {}, options = {}) {&#10;    const {&#10;      ttl = 5 * 60 * 1000, // 5 minutes default&#10;      useSessionCache = true,&#10;      skipCache = false,&#10;      ...fetchOptions&#10;    } = options;&#10;&#10;    // Generate cache key&#10;    const cacheKey = globalCache.generateKey(endpoint, params);&#10;    const sessionKey = sessionCache.generateKey(endpoint, params);&#10;&#10;    // Return cached data if available and not skipping cache&#10;    if (!skipCache) {&#10;      // Try memory cache first (fastest)&#10;      const memoryData = globalCache.get(cacheKey);&#10;      if (memoryData) {&#10;        return memoryData;&#10;      }&#10;&#10;      // Try session cache (survives page reloads)&#10;      if (useSessionCache) {&#10;        const sessionData = sessionCache.get(sessionKey);&#10;        if (sessionData) {&#10;          // Also store in memory cache for faster subsequent access&#10;          globalCache.set(cacheKey, sessionData, ttl);&#10;          return sessionData;&#10;        }&#10;      }&#10;    }&#10;&#10;    // Check if same request is already ongoing&#10;    const requestKey = `${endpoint}_${JSON.stringify(params)}`;&#10;    if (ongoingRequests.has(requestKey)) {&#10;      return ongoingRequests.get(requestKey);&#10;    }&#10;&#10;    // Build URL with params&#10;    const url = new URL(endpoint, window.location.origin);&#10;    Object.entries(params).forEach(([key, value]) =&gt; {&#10;      if (value !== null &amp;&amp; value !== undefined &amp;&amp; value !== &quot;&quot;) {&#10;        url.searchParams.append(key, value);&#10;      }&#10;    });&#10;&#10;    // Create the promise and store it to prevent duplicate requests&#10;    const requestPromise = fetch(url.toString(), {&#10;      method: &quot;GET&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        ...fetchOptions.headers,&#10;      },&#10;      ...fetchOptions,&#10;    })&#10;      .then(async (response) =&gt; {&#10;        if (!response.ok) {&#10;          throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;        return response.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        // Cache the successful response&#10;        if (!skipCache) {&#10;          globalCache.set(cacheKey, data, ttl);&#10;          if (useSessionCache) {&#10;            sessionCache.set(sessionKey, data, ttl);&#10;          }&#10;        }&#10;        return data;&#10;      })&#10;      .catch((error) =&gt; {&#10;        console.error(`API Error for ${endpoint}:`, error);&#10;        throw error;&#10;      })&#10;      .finally(() =&gt; {&#10;        // Remove from ongoing requests&#10;        ongoingRequests.delete(requestKey);&#10;      });&#10;&#10;    // Store the ongoing request&#10;    ongoingRequests.set(requestKey, requestPromise);&#10;&#10;    return requestPromise;&#10;  }&#10;&#10;  // Products API methods&#10;  async getProducts(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/products&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for products&#10;      useSessionCache: true,&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async getProduct(id) {&#10;    return this.fetchWithCache(&#10;      `/api/products/${id}`,&#10;      {},&#10;      {&#10;        ttl: 10 * 60 * 1000, // 10 minutes for individual products&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Categories API&#10;  async getCategories() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/categories&quot;,&#10;      {},&#10;      {&#10;        ttl: 30 * 60 * 1000, // 30 minutes for categories (rarely change)&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Farmers API&#10;  async getFarmers() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/farmers&quot;,&#10;      {},&#10;      {&#10;        ttl: 15 * 60 * 1000, // 15 minutes for farmers&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Orders API methods&#10;  async getOrders(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/orders&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for orders (more dynamic data)&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async getOrderById(orderId, options = {}) {&#10;    return this.fetchWithCache(`/api/orders/${orderId}`, {}, options);&#10;  }&#10;&#10;  async updateOrder(orderId, updateData) {&#10;    const response = await fetch(`/api/orders`, {&#10;      method: &quot;PATCH&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ orderId, ...updateData }),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to update order: ${response.status}`);&#10;    }&#10;&#10;    // Clear orders cache when updating&#10;    this.clearOrdersCache();&#10;    return response.json();&#10;  }&#10;&#10;  // Cache management for orders&#10;  clearOrdersCache() {&#10;    // Clear all order-related cache entries&#10;    const orderKeys = globalCache&#10;      .getStats()&#10;      .keys.filter((key) =&gt; key.includes(&quot;/api/orders&quot;));&#10;    orderKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;    // Clear session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.cleanup();&#10;    }&#10;  }&#10;&#10;  // Cache management for products&#10;  clearProductsCache() {&#10;    // Clear all product-related cache entries from memory cache&#10;    const productKeys = globalCache&#10;      .getStats()&#10;      .keys.filter((key) =&gt; key.includes(&quot;/api/products&quot;));&#10;    productKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;    // Clear session cache for products&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      const sessionKeys = Object.keys(sessionStorage).filter(&#10;        (key) =&gt; key.includes(&quot;farmfresh_&quot;) &amp;&amp; key.includes(&quot;/api/products&quot;),&#10;      );&#10;      sessionKeys.forEach((key) =&gt; sessionStorage.removeItem(key));&#10;&#10;      // Also clear the memory cache in session cache&#10;      sessionCache.cleanup();&#10;    }&#10;&#10;    console.log(&quot;Cleared all product caches&quot;);&#10;  }&#10;&#10;  // Clear all cache&#10;  clearAllCache() {&#10;    globalCache.clear();&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.clear();&#10;    }&#10;  }&#10;&#10;  // Optimized method for dashboard data - fetch both products and orders efficiently&#10;  async getDashboardData(userId, userEmail, options = {}) {&#10;    const { forceRefresh = false } = options;&#10;&#10;    try {&#10;      // Fetch products and orders in parallel with optimized parameters&#10;      const [productsData, ordersData] = await Promise.all([&#10;        this.getProducts(&#10;          {&#10;            limit: 200, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;&#10;        this.getOrders(&#10;          {&#10;            limit: 100, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;      ]);&#10;&#10;      return {&#10;        products: productsData.products || [],&#10;        orders: ordersData.orders || [],&#10;        meta: {&#10;          productsCount: productsData.products?.length || 0,&#10;          ordersCount: ordersData.orders?.length || 0,&#10;          fromCache: !forceRefresh,&#10;        },&#10;      };&#10;    } catch (error) {&#10;      console.error(&quot;Dashboard data fetch error:&quot;, error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Force refresh products - bypass all caches&#10;  async forceRefreshProducts(params = {}) {&#10;    // Add timestamp to force cache bypass&#10;    const paramsWithTimestamp = {&#10;      ...params,&#10;      _t: Date.now(),&#10;    };&#10;&#10;    return this.fetchWithCache(&quot;/api/products&quot;, paramsWithTimestamp, {&#10;      skipCache: true,&#10;      useSessionCache: false,&#10;      headers: {&#10;        &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;      },&#10;    });&#10;  }&#10;&#10;  // Bulk update products with cache invalidation&#10;  async bulkUpdateProducts(productIds, updateData) {&#10;    const response = await fetch(&quot;/api/products/bulk-update&quot;, {&#10;      method: &quot;PUT&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;      },&#10;      body: JSON.stringify({ productIds, updateData }),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to bulk update products: ${response.status}`);&#10;    }&#10;&#10;    const result = await response.json();&#10;&#10;    // Clear all product-related caches after successful update&#10;    this.clearProductsCache();&#10;&#10;    // Also clear any ongoing requests for products&#10;    for (const [key] of ongoingRequests.entries()) {&#10;      if (key.includes(&quot;/api/products&quot;)) {&#10;        ongoingRequests.delete(key);&#10;      }&#10;    }&#10;&#10;    return result;&#10;  }&#10;}&#10;&#10;// Global API service instance&#10;export const apiService = new ApiService();&#10;&#10;// Hook for React components&#10;export function useApiService() {&#10;  return apiService;&#10;}&#10;" />
              <option name="updatedContent" value="import globalCache, { sessionCache } from &quot;./cache&quot;;&#10;&#10;// Request deduplication to prevent multiple identical API calls&#10;const ongoingRequests = new Map();&#10;&#10;// Optimized API service with caching and request deduplication&#10;export class ApiService {&#10;  constructor() {&#10;    this.baseURL = &quot;/api&quot;;&#10;  }&#10;&#10;  // Generic fetch with caching and deduplication&#10;  async fetchWithCache(endpoint, params = {}, options = {}) {&#10;    const {&#10;      ttl = 5 * 60 * 1000, // 5 minutes default&#10;      useSessionCache = true,&#10;      skipCache = false,&#10;      ...fetchOptions&#10;    } = options;&#10;&#10;    // Generate cache key&#10;    const cacheKey = globalCache.generateKey(endpoint, params);&#10;    const sessionKey = sessionCache.generateKey(endpoint, params);&#10;&#10;    // Return cached data if available and not skipping cache&#10;    if (!skipCache) {&#10;      // Try memory cache first (fastest)&#10;      const memoryData = globalCache.get(cacheKey);&#10;      if (memoryData) {&#10;        return memoryData;&#10;      }&#10;&#10;      // Try session cache (survives page reloads)&#10;      if (useSessionCache) {&#10;        const sessionData = sessionCache.get(sessionKey);&#10;        if (sessionData) {&#10;          // Also store in memory cache for faster subsequent access&#10;          globalCache.set(cacheKey, sessionData, ttl);&#10;          return sessionData;&#10;        }&#10;      }&#10;    }&#10;&#10;    // Check if same request is already ongoing&#10;    const requestKey = `${endpoint}_${JSON.stringify(params)}`;&#10;    if (ongoingRequests.has(requestKey)) {&#10;      return ongoingRequests.get(requestKey);&#10;    }&#10;&#10;    // Build URL with params&#10;    const url = new URL(endpoint, window.location.origin);&#10;    Object.entries(params).forEach(([key, value]) =&gt; {&#10;      if (value !== null &amp;&amp; value !== undefined &amp;&amp; value !== &quot;&quot;) {&#10;        url.searchParams.append(key, value);&#10;      }&#10;    });&#10;&#10;    // Create the promise and store it to prevent duplicate requests&#10;    const requestPromise = fetch(url.toString(), {&#10;      method: &quot;GET&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        ...fetchOptions.headers,&#10;      },&#10;      ...fetchOptions,&#10;    })&#10;      .then(async (response) =&gt; {&#10;        if (!response.ok) {&#10;          throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;        return response.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        // Cache the successful response&#10;        if (!skipCache) {&#10;          globalCache.set(cacheKey, data, ttl);&#10;          if (useSessionCache) {&#10;            sessionCache.set(sessionKey, data, ttl);&#10;          }&#10;        }&#10;        return data;&#10;      })&#10;      .catch((error) =&gt; {&#10;        console.error(`API Error for ${endpoint}:`, error);&#10;        throw error;&#10;      })&#10;      .finally(() =&gt; {&#10;        // Remove from ongoing requests&#10;        ongoingRequests.delete(requestKey);&#10;      });&#10;&#10;    // Store the ongoing request&#10;    ongoingRequests.set(requestKey, requestPromise);&#10;&#10;    return requestPromise;&#10;  }&#10;&#10;  // Products API methods&#10;  async getProducts(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/products&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for products&#10;      useSessionCache: true,&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async getProduct(id) {&#10;    return this.fetchWithCache(&#10;      `/api/products/${id}`,&#10;      {},&#10;      {&#10;        ttl: 10 * 60 * 1000, // 10 minutes for individual products&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Categories API&#10;  async getCategories() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/categories&quot;,&#10;      {},&#10;      {&#10;        ttl: 30 * 60 * 1000, // 30 minutes for categories (rarely change)&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Farmers API&#10;  async getFarmers() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/farmers&quot;,&#10;      {},&#10;      {&#10;        ttl: 15 * 60 * 1000, // 15 minutes for farmers&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Orders API methods&#10;  async getOrders(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/orders&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for orders (more dynamic data)&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async getOrderById(orderId, options = {}) {&#10;    return this.fetchWithCache(`/api/orders/${orderId}`, {}, options);&#10;  }&#10;&#10;  async updateOrder(orderId, updateData) {&#10;    const response = await fetch(`/api/orders`, {&#10;      method: &quot;PATCH&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ orderId, ...updateData }),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to update order: ${response.status}`);&#10;    }&#10;&#10;    // Clear orders cache when updating&#10;    this.clearOrdersCache();&#10;    return response.json();&#10;  }&#10;&#10;  // Cache management for orders&#10;  clearOrdersCache() {&#10;    // Clear all order-related cache entries&#10;    const orderKeys = globalCache&#10;      .getStats()&#10;      .keys.filter((key) =&gt; key.includes(&quot;/api/orders&quot;));&#10;    orderKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;    // Clear session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.cleanup();&#10;    }&#10;  }&#10;&#10;  // Cache management for products&#10;  clearProductsCache() {&#10;    // Clear all product-related cache entries from memory cache&#10;    const productKeys = globalCache&#10;      .getStats()&#10;      .keys.filter((key) =&gt; key.includes(&quot;/api/products&quot;));&#10;    productKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;    // Clear session cache for products&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      const sessionKeys = Object.keys(sessionStorage).filter(&#10;        (key) =&gt; key.includes(&quot;farmfresh_&quot;) &amp;&amp; key.includes(&quot;/api/products&quot;),&#10;      );&#10;      sessionKeys.forEach((key) =&gt; sessionStorage.removeItem(key));&#10;&#10;      // Also clear the memory cache in session cache&#10;      sessionCache.cleanup();&#10;    }&#10;&#10;    console.log(&quot;Cleared all product caches&quot;);&#10;  }&#10;&#10;  // Clear all cache&#10;  clearAllCache() {&#10;    globalCache.clear();&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.clear();&#10;    }&#10;  }&#10;&#10;  // Optimized method for dashboard data - fetch both products and orders efficiently&#10;  async getDashboardData(userId, userEmail, options = {}) {&#10;    const { forceRefresh = false } = options;&#10;&#10;    try {&#10;      // Fetch products and orders in parallel with optimized parameters&#10;      const [productsData, ordersData] = await Promise.all([&#10;        this.getProducts(&#10;          {&#10;            limit: 200, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;            dashboard: 'true', // Add dashboard context to show inactive products&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;&#10;        this.getOrders(&#10;          {&#10;            limit: 100, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;      ]);&#10;&#10;      return {&#10;        products: productsData.products || [],&#10;        orders: ordersData.orders || [],&#10;        analytics: this.calculateAnalytics(productsData.products || [], ordersData.orders || []),&#10;        meta: {&#10;          productsCount: productsData.products?.length || 0,&#10;          ordersCount: ordersData.orders?.length || 0,&#10;          fromCache: !forceRefresh,&#10;        },&#10;      };&#10;    } catch (error) {&#10;      console.error(&quot;Dashboard data fetch error:&quot;, error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Force refresh products - bypass all caches&#10;  async forceRefreshProducts(params = {}) {&#10;    // Add timestamp to force cache bypass&#10;    const paramsWithTimestamp = {&#10;      ...params,&#10;      _t: Date.now(),&#10;    };&#10;&#10;    return this.fetchWithCache(&quot;/api/products&quot;, paramsWithTimestamp, {&#10;      skipCache: true,&#10;      useSessionCache: false,&#10;      headers: {&#10;        &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;      },&#10;    });&#10;  }&#10;&#10;  // Bulk update products with cache invalidation&#10;  async bulkUpdateProducts(productIds, updateData) {&#10;    const response = await fetch(&quot;/api/products/bulk-update&quot;, {&#10;      method: &quot;PUT&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;      },&#10;      body: JSON.stringify({ productIds, updateData }),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to bulk update products: ${response.status}`);&#10;    }&#10;&#10;    const result = await response.json();&#10;&#10;    // Clear all product-related caches after successful update&#10;    this.clearProductsCache();&#10;&#10;    // Also clear any ongoing requests for products&#10;    for (const [key] of ongoingRequests.entries()) {&#10;      if (key.includes(&quot;/api/products&quot;)) {&#10;        ongoingRequests.delete(key);&#10;      }&#10;    }&#10;&#10;    return result;&#10;  }&#10;&#10;  // Calculate basic analytics for dashboard&#10;  calculateAnalytics(products, orders) {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    const totalProducts = products.length;&#10;    const activeProducts = products.filter(&#10;      (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== &quot;inactive&quot;,&#10;    ).length;&#10;&#10;    const totalOrders = orders.length;&#10;    const totalRevenue = validOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    const averageOrderValue =&#10;      validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;    return {&#10;      totalProducts,&#10;      activeProducts,&#10;      totalOrders,&#10;      totalRevenue,&#10;      averageOrderValue,&#10;    };&#10;  }&#10;}&#10;&#10;// Global API service instance&#10;export const apiService = new ApiService();&#10;&#10;// Hook for React components&#10;export function useApiService() {&#10;  return apiService;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/mongodb.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/mongodb.js" />
              <option name="originalContent" value="import { MongoClient } from &quot;mongodb&quot;;&#10;import {&#10;  ATLAS_CONFIG,&#10;  PerformanceMonitor,&#10;  ConnectionHealthChecker,&#10;} from &quot;./atlas-config&quot;;&#10;&#10;if (!process.env.MONGODB_URI) {&#10;  throw new Error('Invalid/Missing environment variable: &quot;MONGODB_URI&quot;');&#10;}&#10;&#10;const uri = process.env.MONGODB_URI;&#10;&#10;// Enhanced options for MongoDB Atlas performance&#10;const options = {&#10;  // Connection pooling for better performance&#10;  maxPoolSize: ATLAS_CONFIG.connectionPool.maxPoolSize,&#10;  minPoolSize: ATLAS_CONFIG.connectionPool.minPoolSize,&#10;  maxIdleTimeMS: ATLAS_CONFIG.connectionPool.maxIdleTimeMS,&#10;  waitQueueTimeoutMS: ATLAS_CONFIG.connectionPool.waitQueueTimeoutMS,&#10;  serverSelectionTimeoutMS: 15000, // Increased from 5s to 15s for Atlas&#10;&#10;  // Atlas optimizations&#10;  retryWrites: ATLAS_CONFIG.atlasOptimizations.retryWrites,&#10;  retryReads: ATLAS_CONFIG.atlasOptimizations.retryReads,&#10;  compressors: ATLAS_CONFIG.atlasOptimizations.compressors,&#10;  zlibCompressionLevel: ATLAS_CONFIG.atlasOptimizations.zlibCompressionLevel,&#10;&#10;  // Read preferences&#10;  readPreference: ATLAS_CONFIG.queryOptimization.readPreference,&#10;  readConcern: ATLAS_CONFIG.queryOptimization.readConcern,&#10;&#10;  // Additional optimizations for Atlas stability&#10;  maxConnecting: 2, // Limit concurrent connection attempts&#10;  heartbeatFrequencyMS: 30000, // Increased heartbeat frequency for Atlas&#10;  socketTimeoutMS: 45000, // Increased socket timeout for Atlas&#10;  connectTimeoutMS: 15000, // Increased connection timeout for Atlas&#10;&#10;  // Atlas-specific network resilience&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  bufferMaxEntries: 0, // Disable mongoose buffering for immediate errors&#10;  bufferCommands: false, // Don't buffer commands&#10;  directConnection: false, // Use SRV connection for Atlas&#10;};&#10;&#10;let client;&#10;let clientPromise;&#10;&#10;// Global connection promise to prevent multiple connections&#10;if (process.env.NODE_ENV === &quot;development&quot;) {&#10;  // In development mode, use a global variable to preserve the connection&#10;  if (!global._mongoClientPromise) {&#10;    client = new MongoClient(uri, options);&#10;    global._mongoClientPromise = client.connect();&#10;&#10;    // Add connection event listeners for monitoring&#10;    client.on(&quot;connectionPoolCreated&quot;, () =&gt; {&#10;      console.log(&quot;MongoDB connection pool created&quot;);&#10;    });&#10;&#10;    client.on(&quot;connectionCreated&quot;, () =&gt; {&#10;      console.log(&quot;New MongoDB connection created&quot;);&#10;    });&#10;&#10;    client.on(&quot;connectionClosed&quot;, () =&gt; {&#10;      console.log(&quot;MongoDB connection closed&quot;);&#10;    });&#10;  }&#10;  clientPromise = global._mongoClientPromise;&#10;} else {&#10;  // In production mode, create a new client&#10;  client = new MongoClient(uri, options);&#10;  clientPromise = client.connect();&#10;}&#10;&#10;// Enhanced client promise with optional health checking&#10;const enhancedClientPromise = clientPromise.then(async (client) =&gt; {&#10;  // Try health check but don't fail completely if it times out&#10;  try {&#10;    const isHealthy = await ConnectionHealthChecker.checkConnection(client);&#10;    if (!isHealthy) {&#10;      console.warn(&#10;        &quot;MongoDB connection health check failed, but proceeding anyway&quot;,&#10;      );&#10;    }&#10;  } catch (error) {&#10;    console.warn(&quot;Health check error (proceeding anyway):&quot;, error.message);&#10;  }&#10;&#10;  // Log connection stats in development (non-blocking)&#10;  if (process.env.NODE_ENV === &quot;development&quot;) {&#10;    try {&#10;      const stats = await ConnectionHealthChecker.getConnectionStats(client);&#10;      if (stats) {&#10;        console.log(&quot;MongoDB Atlas connection established:&quot;, {&#10;          collections: stats.collections,&#10;          dataSize: `${(stats.dataSize / 1024 / 1024).toFixed(2)} MB`,&#10;          indexSize: `${(stats.indexSize / 1024 / 1024).toFixed(2)} MB`,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.warn(&quot;Could not fetch connection stats:&quot;, error.message);&#10;    }&#10;  }&#10;&#10;  return client;&#10;});&#10;&#10;// Optimized database operations wrapper&#10;export const dbOperations = {&#10;  // Execute query with performance monitoring&#10;  async executeQuery(operation, operationName, params = {}) {&#10;    return PerformanceMonitor.executeWithTiming(&#10;      operation,&#10;      operationName,&#10;      params,&#10;    );&#10;  },&#10;&#10;  // Get optimized collection with proper indexes&#10;  async getCollection(collectionName, hints = {}) {&#10;    const client = await enhancedClientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const collection = db.collection(collectionName);&#10;&#10;    // Add index hints if provided&#10;    if (hints.index &amp;&amp; ATLAS_CONFIG.indexHints[collectionName]?.[hints.index]) {&#10;      collection.hint(ATLAS_CONFIG.indexHints[collectionName][hints.index]);&#10;    }&#10;&#10;    return collection;&#10;  },&#10;&#10;  // Optimized aggregation with Atlas settings&#10;  async aggregate(collectionName, pipeline, options = {}) {&#10;    const collection = await this.getCollection(collectionName);&#10;&#10;    const optimizedOptions = {&#10;      ...ATLAS_CONFIG.aggregationOptimization,&#10;      ...options,&#10;    };&#10;&#10;    return this.executeQuery(&#10;      () =&gt; collection.aggregate(pipeline, optimizedOptions).toArray(),&#10;      `aggregate_${collectionName}`,&#10;      { pipeline, options: optimizedOptions },&#10;    );&#10;  },&#10;&#10;  // Optimized find with Atlas settings&#10;  async find(collectionName, query, options = {}) {&#10;    const collection = await this.getCollection(collectionName, options);&#10;&#10;    const optimizedOptions = {&#10;      maxTimeMS: ATLAS_CONFIG.queryOptimization.maxTimeMS,&#10;      ...options,&#10;    };&#10;&#10;    return this.executeQuery(&#10;      () =&gt; collection.find(query, optimizedOptions).toArray(),&#10;      `find_${collectionName}`,&#10;      { query, options: optimizedOptions },&#10;    );&#10;  },&#10;&#10;  // Optimized findOne with Atlas settings&#10;  async findOne(collectionName, query, options = {}) {&#10;    const collection = await this.getCollection(collectionName, options);&#10;&#10;    const optimizedOptions = {&#10;      maxTimeMS: ATLAS_CONFIG.queryOptimization.maxTimeMS,&#10;      ...options,&#10;    };&#10;&#10;    return this.executeQuery(&#10;      () =&gt; collection.findOne(query, optimizedOptions),&#10;      `findOne_${collectionName}`,&#10;      { query, options: optimizedOptions },&#10;    );&#10;  },&#10;&#10;  // Health check utility&#10;  async healthCheck() {&#10;    const client = await enhancedClientPromise;&#10;    return ConnectionHealthChecker.checkConnection(client);&#10;  },&#10;};&#10;&#10;export default enhancedClientPromise;&#10;" />
              <option name="updatedContent" value="import { MongoClient } from &quot;mongodb&quot;;&#10;import {&#10;  ATLAS_CONFIG,&#10;  PerformanceMonitor,&#10;  ConnectionHealthChecker,&#10;} from &quot;./atlas-config&quot;;&#10;&#10;if (!process.env.MONGODB_URI) {&#10;  throw new Error('Invalid/Missing environment variable: &quot;MONGODB_URI&quot;');&#10;}&#10;&#10;const uri = process.env.MONGODB_URI;&#10;&#10;// Enhanced options for MongoDB Atlas performance&#10;const options = {&#10;  // Connection pooling for better performance&#10;  maxPoolSize: ATLAS_CONFIG.connectionPool.maxPoolSize,&#10;  minPoolSize: ATLAS_CONFIG.connectionPool.minPoolSize,&#10;  maxIdleTimeMS: ATLAS_CONFIG.connectionPool.maxIdleTimeMS,&#10;  waitQueueTimeoutMS: ATLAS_CONFIG.connectionPool.waitQueueTimeoutMS,&#10;  serverSelectionTimeoutMS: 15000, // Increased from 5s to 15s for Atlas&#10;&#10;  // Atlas optimizations&#10;  retryWrites: ATLAS_CONFIG.atlasOptimizations.retryWrites,&#10;  retryReads: ATLAS_CONFIG.atlasOptimizations.retryReads,&#10;  compressors: ATLAS_CONFIG.atlasOptimizations.compressors,&#10;  zlibCompressionLevel: ATLAS_CONFIG.atlasOptimizations.zlibCompressionLevel,&#10;&#10;  // Read preferences&#10;  readPreference: ATLAS_CONFIG.queryOptimization.readPreference,&#10;  readConcern: ATLAS_CONFIG.queryOptimization.readConcern,&#10;&#10;  // Additional optimizations for Atlas stability&#10;  maxConnecting: 2, // Limit concurrent connection attempts&#10;  heartbeatFrequencyMS: 30000, // Increased heartbeat frequency for Atlas&#10;  socketTimeoutMS: 45000, // Increased socket timeout for Atlas&#10;  connectTimeoutMS: 15000, // Increased connection timeout for Atlas&#10;&#10;  // Atlas-specific network resilience&#10;  directConnection: false, // Use SRV connection for Atlas&#10;};&#10;&#10;let client;&#10;let clientPromise;&#10;&#10;// Global connection promise to prevent multiple connections&#10;if (process.env.NODE_ENV === &quot;development&quot;) {&#10;  // In development mode, use a global variable to preserve the connection&#10;  if (!global._mongoClientPromise) {&#10;    client = new MongoClient(uri, options);&#10;    global._mongoClientPromise = client.connect();&#10;&#10;    // Add connection event listeners for monitoring&#10;    client.on(&quot;connectionPoolCreated&quot;, () =&gt; {&#10;      console.log(&quot;MongoDB connection pool created&quot;);&#10;    });&#10;&#10;    client.on(&quot;connectionCreated&quot;, () =&gt; {&#10;      console.log(&quot;New MongoDB connection created&quot;);&#10;    });&#10;&#10;    client.on(&quot;connectionClosed&quot;, () =&gt; {&#10;      console.log(&quot;MongoDB connection closed&quot;);&#10;    });&#10;  }&#10;  clientPromise = global._mongoClientPromise;&#10;} else {&#10;  // In production mode, create a new client&#10;  client = new MongoClient(uri, options);&#10;  clientPromise = client.connect();&#10;}&#10;&#10;// Enhanced client promise with optional health checking&#10;const enhancedClientPromise = clientPromise.then(async (client) =&gt; {&#10;  // Try health check but don't fail completely if it times out&#10;  try {&#10;    const isHealthy = await ConnectionHealthChecker.checkConnection(client);&#10;    if (!isHealthy) {&#10;      console.warn(&#10;        &quot;MongoDB connection health check failed, but proceeding anyway&quot;,&#10;      );&#10;    }&#10;  } catch (error) {&#10;    console.warn(&quot;Health check error (proceeding anyway):&quot;, error.message);&#10;  }&#10;&#10;  // Log connection stats in development (non-blocking)&#10;  if (process.env.NODE_ENV === &quot;development&quot;) {&#10;    try {&#10;      const stats = await ConnectionHealthChecker.getConnectionStats(client);&#10;      if (stats) {&#10;        console.log(&quot;MongoDB Atlas connection established:&quot;, {&#10;          collections: stats.collections,&#10;          dataSize: `${(stats.dataSize / 1024 / 1024).toFixed(2)} MB`,&#10;          indexSize: `${(stats.indexSize / 1024 / 1024).toFixed(2)} MB`,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.warn(&quot;Could not fetch connection stats:&quot;, error.message);&#10;    }&#10;  }&#10;&#10;  return client;&#10;});&#10;&#10;// Optimized database operations wrapper&#10;export const dbOperations = {&#10;  // Execute query with performance monitoring&#10;  async executeQuery(operation, operationName, params = {}) {&#10;    return PerformanceMonitor.executeWithTiming(&#10;      operation,&#10;      operationName,&#10;      params,&#10;    );&#10;  },&#10;&#10;  // Get optimized collection with proper indexes&#10;  async getCollection(collectionName, hints = {}) {&#10;    const client = await enhancedClientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const collection = db.collection(collectionName);&#10;&#10;    // Add index hints if provided&#10;    if (hints.index &amp;&amp; ATLAS_CONFIG.indexHints[collectionName]?.[hints.index]) {&#10;      collection.hint(ATLAS_CONFIG.indexHints[collectionName][hints.index]);&#10;    }&#10;&#10;    return collection;&#10;  },&#10;&#10;  // Optimized aggregation with Atlas settings&#10;  async aggregate(collectionName, pipeline, options = {}) {&#10;    const collection = await this.getCollection(collectionName);&#10;&#10;    const optimizedOptions = {&#10;      ...ATLAS_CONFIG.aggregationOptimization,&#10;      ...options,&#10;    };&#10;&#10;    return this.executeQuery(&#10;      () =&gt; collection.aggregate(pipeline, optimizedOptions).toArray(),&#10;      `aggregate_${collectionName}`,&#10;      { pipeline, options: optimizedOptions },&#10;    );&#10;  },&#10;&#10;  // Optimized find with Atlas settings&#10;  async find(collectionName, query, options = {}) {&#10;    const collection = await this.getCollection(collectionName, options);&#10;&#10;    const optimizedOptions = {&#10;      maxTimeMS: ATLAS_CONFIG.queryOptimization.maxTimeMS,&#10;      ...options,&#10;    };&#10;&#10;    return this.executeQuery(&#10;      () =&gt; collection.find(query, optimizedOptions).toArray(),&#10;      `find_${collectionName}`,&#10;      { query, options: optimizedOptions },&#10;    );&#10;  },&#10;&#10;  // Optimized findOne with Atlas settings&#10;  async findOne(collectionName, query, options = {}) {&#10;    const collection = await this.getCollection(collectionName, options);&#10;&#10;    const optimizedOptions = {&#10;      maxTimeMS: ATLAS_CONFIG.queryOptimization.maxTimeMS,&#10;      ...options,&#10;    };&#10;&#10;    return this.executeQuery(&#10;      () =&gt; collection.findOne(query, optimizedOptions),&#10;      `findOne_${collectionName}`,&#10;      { query, options: optimizedOptions },&#10;    );&#10;  },&#10;&#10;  // Health check utility&#10;  async healthCheck() {&#10;    const client = await enhancedClientPromise;&#10;    return ConnectionHealthChecker.checkConnection(client);&#10;  },&#10;};&#10;&#10;export default enhancedClientPromise;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/migrate-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/migrate-farmers.js" />
              <option name="updatedContent" value="// Script to migrate farmers from users collection to farmers collection&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function migrateFarmers() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;✅ Migration completed!&quot;);&#10;    &#10;    // Show final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    console.log(` Total farmers in collection: ${totalFarmers}`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Migration error:&quot;, error);&#10;  }&#10;}&#10;&#10;migrateFarmers();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js" />
              <option name="updatedContent" value="// MongoDB Atlas Performance Optimization Script&#10;// Run this script to create optimized indexes for better Atlas performance&#10;&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function createAtlasOptimizedIndexes() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log(&quot; Starting MongoDB Atlas index optimization...&quot;);&#10;&#10;    // Products Collection - Optimized for products page performance&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    console.log(&quot; Optimizing products collection indexes...&quot;);&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, category: 1, featured: 1, createdAt: -1 },&#10;      { name: &quot;products_main_query_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, featured: 1, averageRating: -1 },&#10;      { name: &quot;products_featured_rating_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, price: 1 },&#10;      { name: &quot;products_price_filter_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, purchaseCount: -1 },&#10;      { name: &quot;products_popularity_idx&quot;, background: true }&#10;    );&#10;&#10;    // Orders Collection - Optimized for farmer dashboard and orders pages&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    console.log(&quot; Optimizing orders collection indexes...&quot;);&#10;    &#10;    // Critical farmer query indexes&#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_orders_main_idx&quot;, background: true }&#10;    );&#10;    &#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_email_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Customer order indexes&#10;    await ordersCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;customer_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Status filtering&#10;    await ordersCollection.createIndex(&#10;      { status: 1, createdAt: -1 },&#10;      { name: &quot;status_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Reviews Collection - For faster review loading&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    console.log(&quot;⭐ Optimizing reviews collection indexes...&quot;);&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { productId: 1, createdAt: -1 },&#10;      { name: &quot;product_reviews_idx&quot;, background: true }&#10;    );&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_product_review_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    // Favorites Collection - For user favorites&#10;    const favoritesCollection = db.collection(&quot;favorites&quot;);&#10;    console.log(&quot;❤️ Optimizing favorites collection indexes...&quot;);&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_favorites_idx&quot;, background: true, unique: true }&#10;    );&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;user_favorites_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Carts Collection - For cart operations&#10;    const cartsCollection = db.collection(&quot;carts&quot;);&#10;    console.log(&quot; Optimizing carts collection indexes...&quot;);&#10;    &#10;    await cartsCollection.createIndex(&#10;      { userId: 1 },&#10;      { name: &quot;user_cart_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    console.log(&quot;✅ Atlas optimization complete!&quot;);&#10;    console.log(&quot; Performance improvements applied for:&quot;);&#10;    console.log(&quot;   • Products page - faster filtering and sorting&quot;);&#10;    console.log(&quot;   • Farmer dashboard - optimized order queries&quot;);&#10;    console.log(&quot;   • Farmer orders page - improved farmer-specific queries&quot;);&#10;    console.log(&quot;   • Reviews and favorites - faster user interactions&quot;);&#10;    &#10;    return true;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error optimizing indexes:&quot;, error);&#10;    return false;&#10;  }&#10;}&#10;&#10;// Atlas-specific query optimization hints&#10;async function optimizeAtlasQueries() {&#10;  console.log(&quot; Applying Atlas-specific optimizations...&quot;);&#10;  &#10;  const client = await clientPromise;&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;  &#10;  // Enable collection-level read preferences for better performance&#10;  const collections = ['products', 'orders', 'reviews', 'favorites', 'carts'];&#10;  &#10;  for (const collectionName of collections) {&#10;    const collection = db.collection(collectionName);&#10;    &#10;    // Set read preference to secondary for read-heavy operations&#10;    collection.readPreference = 'secondaryPreferred';&#10;    &#10;    console.log(` Optimized read preference for ${collectionName}`);&#10;  }&#10;  &#10;  console.log(&quot;✅ Query optimizations applied!&quot;);&#10;}&#10;&#10;// Main execution function&#10;async function main() {&#10;  console.log(&quot; MongoDB Atlas Performance Optimization&quot;);&#10;  console.log(&quot;=========================================&quot;);&#10;  &#10;  const indexSuccess = await createAtlasOptimizedIndexes();&#10;  &#10;  if (indexSuccess) {&#10;    await optimizeAtlasQueries();&#10;    console.log(&quot; Your FarmFresh app is now optimized for Atlas!&quot;);&#10;    console.log(&quot; Expected performance improvements:&quot;);&#10;    console.log(&quot;   • Products page: 60-80% faster&quot;);&#10;    console.log(&quot;   • Farmer dashboard: 70-90% faster&quot;); &#10;    console.log(&quot;   • Order queries: 50-70% faster&quot;);&#10;  } else {&#10;    console.log(&quot;❌ Optimization failed. Check your MongoDB connection.&quot;);&#10;  }&#10;}&#10;&#10;// Run if called directly&#10;if (import.meta.url === `file://${process.argv[1]}`) {&#10;  main().catch(console.error);&#10;}&#10;&#10;export { createAtlasOptimizedIndexes, optimizeAtlasQueries };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>