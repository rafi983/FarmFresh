<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/api/orders/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/orders/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let indexesInitialized = false;&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeOrderIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (indexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await ordersCollection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Core user queries&#10;      {&#10;        key: { userId: 1, createdAt: -1 },&#10;        name: &quot;userId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries - optimized for Atlas&#10;      {&#10;        key: { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerId_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerEmail_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Alternative farmer fields&#10;      {&#10;        key: { farmerIds: 1, createdAt: -1 },&#10;        name: &quot;farmerIds_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { farmerEmails: 1, createdAt: -1 },&#10;        name: &quot;farmerEmails_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Product queries&#10;      {&#10;        key: { &quot;items.productId&quot;: 1, createdAt: -1 },&#10;        name: &quot;items_productId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Status and date queries&#10;      {&#10;        key: { status: 1, createdAt: -1 },&#10;        name: &quot;status_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // General date sorting&#10;      {&#10;        key: { createdAt: -1 },&#10;        name: &quot;createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await ordersCollection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    // Products collection indexes for order operations&#10;    const productIndexes = await productsCollection.listIndexes().toArray();&#10;    const productIndexNames = productIndexes.map((index) =&gt; index.name);&#10;&#10;    if (!productIndexNames.includes(&quot;stock_status_idx&quot;)) {&#10;      await productsCollection.createIndex(&#10;        { stock: 1, status: 1 },&#10;        { name: &quot;stock_status_idx&quot;, background: true },&#10;      );&#10;    }&#10;&#10;    indexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized order indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Order index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;    const orderId = searchParams.get(&quot;orderId&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const productId = searchParams.get(&quot;productId&quot;);&#10;    const limit = parseInt(searchParams.get(&quot;limit&quot;)) || null;&#10;&#10;    if (!userId &amp;&amp; !orderId &amp;&amp; !farmerId &amp;&amp; !farmerEmail &amp;&amp; !productId) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;User ID, Order ID, Farmer ID, Farmer Email, or Product ID is required&quot;,&#10;        },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes only once - optimized to prevent repeated calls&#10;    await initializeOrderIndexes(db);&#10;&#10;    if (orderId) {&#10;      // Get specific order using optimized query&#10;      const orderPipeline = [&#10;        { $match: { _id: new ObjectId(orderId) } },&#10;        { $limit: 1 },&#10;      ];&#10;&#10;      const [order] = await db&#10;        .collection(&quot;orders&quot;)&#10;        .aggregate(orderPipeline)&#10;        .toArray();&#10;&#10;      if (!order) {&#10;        return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;      }&#10;&#10;      return NextResponse.json({ order });&#10;    } else if (productId) {&#10;      // Get orders containing a specific product using aggregation pipeline&#10;      const productOrdersPipeline = [&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items._id&quot;: productId },&#10;              { &quot;products.productId&quot;: productId },&#10;              { &quot;products._id&quot;: productId },&#10;              ...(ObjectId.isValid(productId)&#10;                ? [&#10;                    { &quot;items.productId&quot;: new ObjectId(productId) },&#10;                    { &quot;items._id&quot;: new ObjectId(productId) },&#10;                    { &quot;products.productId&quot;: new ObjectId(productId) },&#10;                    { &quot;products._id&quot;: new ObjectId(productId) },&#10;                  ]&#10;                : []),&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $addFields: {&#10;            matchingItems: {&#10;              $filter: {&#10;                input: { $ifNull: [&quot;$items&quot;, &quot;$products&quot;] },&#10;                cond: {&#10;                  $or: [&#10;                    { $eq: [&quot;$$this.productId&quot;, productId] },&#10;                    { $eq: [&quot;$$this._id&quot;, productId] },&#10;                    ...(ObjectId.isValid(productId)&#10;                      ? [&#10;                          {&#10;                            $eq: [&quot;$$this.productId&quot;, new ObjectId(productId)],&#10;                          },&#10;                          { $eq: [&quot;$$this._id&quot;, new ObjectId(productId)] },&#10;                        ]&#10;                      : []),&#10;                  ],&#10;                },&#10;              },&#10;            },&#10;          },&#10;        },&#10;        {&#10;          $addFields: {&#10;            items: &quot;$matchingItems&quot;,&#10;            products: &quot;$matchingItems&quot;,&#10;            matchingItemsCount: { $size: &quot;$matchingItems&quot; },&#10;          },&#10;        },&#10;        { $match: { matchingItemsCount: { $gt: 0 } } },&#10;        { $sort: { createdAt: -1 } },&#10;        ...(limit ? [{ $limit: limit }] : []),&#10;      ];&#10;&#10;      const orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .aggregate(productOrdersPipeline)&#10;        .toArray();&#10;&#10;      return NextResponse.json({&#10;        orders,&#10;        total: orders.length,&#10;      });&#10;    } else if (farmerId || farmerEmail) {&#10;      // Get orders for farmer using optimized aggregation pipeline&#10;      let farmerMatchCriteria = { $or: [] };&#10;&#10;      // Build safer match criteria for farmer queries&#10;      if (farmerId) {&#10;        // Handle both string and ObjectId formats for farmerId&#10;        if (ObjectId.isValid(farmerId)) {&#10;          farmerMatchCriteria.$or.push(&#10;            { &quot;items.farmerId&quot;: farmerId },&#10;            { &quot;items.farmerId&quot;: new ObjectId(farmerId) },&#10;            { farmerIds: farmerId },&#10;            { farmerIds: new ObjectId(farmerId) },&#10;          );&#10;        } else {&#10;          farmerMatchCriteria.$or.push(&#10;            { &quot;items.farmerId&quot;: farmerId },&#10;            { farmerIds: farmerId },&#10;          );&#10;        }&#10;      }&#10;&#10;      if (farmerEmail) {&#10;        farmerMatchCriteria.$or.push(&#10;          { &quot;items.farmerEmail&quot;: farmerEmail },&#10;          { farmerEmails: farmerEmail },&#10;        );&#10;      }&#10;&#10;      // If no valid criteria, return empty result&#10;      if (farmerMatchCriteria.$or.length === 0) {&#10;        return NextResponse.json({&#10;          orders: [],&#10;          message: &quot;No valid farmer criteria provided&quot;,&#10;        });&#10;      }&#10;&#10;      const farmerOrdersPipeline = [&#10;        { $match: farmerMatchCriteria },&#10;        // Add allowDiskUse option and optimize the pipeline order&#10;        {&#10;          $addFields: {&#10;            farmerItems: {&#10;              $filter: {&#10;                input: { $ifNull: [&quot;$items&quot;, []] },&#10;                cond: {&#10;                  $or: [&#10;                    ...(farmerId&#10;                      ? [&#10;                          { $eq: [&quot;$$this.farmerId&quot;, farmerId] },&#10;                          ...(ObjectId.isValid(farmerId)&#10;                            ? [&#10;                                {&#10;                                  $eq: [&#10;                                    &quot;$$this.farmerId&quot;,&#10;                                    new ObjectId(farmerId),&#10;                                  ],&#10;                                },&#10;                              ]&#10;                            : []),&#10;                        ]&#10;                      : []),&#10;                    ...(farmerEmail&#10;                      ? [{ $eq: [&quot;$$this.farmerEmail&quot;, farmerEmail] }]&#10;                      : []),&#10;                  ],&#10;                },&#10;              },&#10;            },&#10;          },&#10;        },&#10;        // Filter out orders with no matching items early to reduce dataset size&#10;        {&#10;          $match: {&#10;            $expr: { $gt: [{ $size: { $ifNull: [&quot;$farmerItems&quot;, []] } }, 0] },&#10;          },&#10;        },&#10;        {&#10;          $addFields: {&#10;            items: &quot;$farmerItems&quot;,&#10;            farmerSubtotal: {&#10;              $sum: {&#10;                $map: {&#10;                  input: &quot;$farmerItems&quot;,&#10;                  as: &quot;item&quot;,&#10;                  in: {&#10;                    $multiply: [&#10;                      { $ifNull: [&quot;$$item.price&quot;, 0] },&#10;                      { $ifNull: [&quot;$$item.quantity&quot;, 0] },&#10;                    ],&#10;                  },&#10;                },&#10;              },&#10;            },&#10;          },&#10;        },&#10;        // Sort after filtering to reduce memory usage&#10;        { $sort: { createdAt: -1 } },&#10;        ...(limit ? [{ $limit: limit }] : [{ $limit: 100 }]), // Always limit to prevent memory issues&#10;      ];&#10;&#10;      try {&#10;        const orders = await db&#10;          .collection(&quot;orders&quot;)&#10;          .aggregate(farmerOrdersPipeline, {&#10;            allowDiskUse: true, // Enable disk-based sorting&#10;            maxTimeMS: 30000, // 30 second timeout&#10;          })&#10;          .toArray();&#10;&#10;        return NextResponse.json({&#10;          orders,&#10;          total: orders.length,&#10;          message: `Found ${orders.length} orders for farmer`,&#10;        });&#10;      } catch (aggregationError) {&#10;        console.error(&quot;Farmer orders aggregation error:&quot;, aggregationError);&#10;&#10;        // Fallback to simpler query if aggregation fails&#10;        const simpleQuery = {};&#10;        if (farmerId) {&#10;          simpleQuery[&quot;items.farmerId&quot;] = farmerId;&#10;        }&#10;        if (farmerEmail) {&#10;          simpleQuery[&quot;items.farmerEmail&quot;] = farmerEmail;&#10;        }&#10;&#10;        const fallbackOrders = await db&#10;          .collection(&quot;orders&quot;)&#10;          .find(simpleQuery)&#10;          .sort({ createdAt: -1 })&#10;          .limit(limit || 100)&#10;          .toArray();&#10;&#10;        return NextResponse.json({&#10;          orders: fallbackOrders,&#10;          total: fallbackOrders.length,&#10;          message: `Found ${fallbackOrders.length} orders for farmer (fallback query)`,&#10;        });&#10;      }&#10;    } else {&#10;      // Get orders for customer using optimized query&#10;      const customerOrdersPipeline = [&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { userId: userId },&#10;              ...(ObjectId.isValid(userId)&#10;                ? [{ userId: new ObjectId(userId) }]&#10;                : []),&#10;            ],&#10;          },&#10;        },&#10;        { $sort: { createdAt: -1 } },&#10;      ];&#10;&#10;      const orders = await db&#10;        .collection(&quot;orders&quot;)&#10;        .aggregate(customerOrdersPipeline)&#10;        .toArray();&#10;&#10;      return NextResponse.json({&#10;        orders,&#10;        message: `Found ${orders.length} orders for customer`,&#10;      });&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;Orders API error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Internal server error&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const orderData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for optimal performance&#10;    await initializeOrderIndexes(db);&#10;&#10;    // Optimize stock validation using aggregation pipeline&#10;    const productIds = orderData.items.map(&#10;      (item) =&gt; new ObjectId(item.productId),&#10;    );&#10;&#10;    const stockValidationPipeline = [&#10;      { $match: { _id: { $in: productIds } } },&#10;      {&#10;        $project: {&#10;          _id: 1,&#10;          stock: 1,&#10;          name: 1,&#10;        },&#10;      },&#10;    ];&#10;&#10;    const products = await db&#10;      .collection(&quot;products&quot;)&#10;      .aggregate(stockValidationPipeline)&#10;      .toArray();&#10;&#10;    // Create lookup map for faster validation&#10;    const productMap = new Map(products.map((p) =&gt; [p._id.toString(), p]));&#10;&#10;    // Validate stock availability&#10;    const stockUpdates = [];&#10;    for (const item of orderData.items) {&#10;      const product = productMap.get(item.productId);&#10;&#10;      if (!product) {&#10;        throw new Error(`Product ${item.name} not found`);&#10;      }&#10;&#10;      if (product.stock &lt; item.quantity) {&#10;        throw new Error(&#10;          `Insufficient stock for ${item.name}. Available: ${product.stock}, Requested: ${item.quantity}`,&#10;        );&#10;      }&#10;&#10;      stockUpdates.push({&#10;        updateOne: {&#10;          filter: { _id: new ObjectId(item.productId) },&#10;          update: {&#10;            $inc: { stock: -item.quantity },&#10;            $set: { updatedAt: new Date() },&#10;          },&#10;        },&#10;      });&#10;    }&#10;&#10;    // Perform bulk stock updates for better performance&#10;    if (stockUpdates.length &gt; 0) {&#10;      await db.collection(&quot;products&quot;).bulkWrite(stockUpdates);&#10;    }&#10;&#10;    // Add timestamps to order&#10;    const newOrder = {&#10;      ...orderData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    };&#10;&#10;    // Create the order&#10;    const result = await db.collection(&quot;orders&quot;).insertOne(newOrder);&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order created successfully&quot;,&#10;      orderId: result.insertedId,&#10;      order: { ...newOrder, _id: result.insertedId },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Create order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function PATCH(request) {&#10;  try {&#10;    const { orderId, ...updateData } = await request.json();&#10;&#10;    if (!orderId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Order ID is required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get the current order to check status changes (without transactions)&#10;    const currentOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    if (!currentOrder) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Check if order status is being changed to cancelled/returned&#10;    const isBeingCancelled =&#10;      updateData.status &amp;&amp;&#10;      (updateData.status === &quot;cancelled&quot; || updateData.status === &quot;returned&quot;) &amp;&amp;&#10;      currentOrder.status !== &quot;cancelled&quot; &amp;&amp;&#10;      currentOrder.status !== &quot;returned&quot;;&#10;&#10;    // If order is being cancelled, restore stock&#10;    if (isBeingCancelled &amp;&amp; currentOrder.items) {&#10;      console.log(&#10;        `Order ${orderId} is being cancelled/returned, restoring stock...`,&#10;      );&#10;&#10;      for (const item of currentOrder.items) {&#10;        const productId = item.productId;&#10;        const orderQuantity = item.quantity;&#10;&#10;        // Get current product&#10;        const product = await db&#10;          .collection(&quot;products&quot;)&#10;          .findOne({ _id: new ObjectId(productId) });&#10;&#10;        if (product) {&#10;          // Restore product stock&#10;          const newStock = product.stock + orderQuantity;&#10;          await db.collection(&quot;products&quot;).updateOne(&#10;            { _id: new ObjectId(productId) },&#10;            {&#10;              $set: {&#10;                stock: newStock,&#10;                updatedAt: new Date(),&#10;              },&#10;            },&#10;          );&#10;        } else {&#10;          console.warn(`Product ${productId} not found when restoring stock`);&#10;        }&#10;      }&#10;    }&#10;&#10;    // Update the order&#10;    const result = await db.collection(&quot;orders&quot;).updateOne(&#10;      { _id: new ObjectId(orderId) },&#10;      {&#10;        $set: {&#10;          ...updateData,&#10;          updatedAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Get the updated order&#10;    const updatedOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order updated successfully&quot;,&#10;      order: updatedOrder,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Update order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let indexesInitialized = false;&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeOrderIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (indexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await ordersCollection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Core user queries&#10;      {&#10;        key: { userId: 1, createdAt: -1 },&#10;        name: &quot;userId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries - optimized for Atlas&#10;      {&#10;        key: { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerId_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerEmail_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Alternative farmer fields&#10;      {&#10;        key: { farmerIds: 1, createdAt: -1 },&#10;        name: &quot;farmerIds_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { farmerEmails: 1, createdAt: -1 },&#10;        name: &quot;farmerEmails_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Product queries&#10;      {&#10;        key: { &quot;items.productId&quot;: 1, createdAt: -1 },&#10;        name: &quot;items_productId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Status and date queries&#10;      {&#10;        key: { status: 1, createdAt: -1 },&#10;        name: &quot;status_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // General date sorting&#10;      {&#10;        key: { createdAt: -1 },&#10;        name: &quot;createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await ordersCollection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    // Products collection indexes for order operations&#10;    const productIndexes = await productsCollection.listIndexes().toArray();&#10;    const productIndexNames = productIndexes.map((index) =&gt; index.name);&#10;&#10;    if (!productIndexNames.includes(&quot;stock_status_idx&quot;)) {&#10;      await productsCollection.createIndex(&#10;        { stock: 1, status: 1 },&#10;        { name: &quot;stock_status_idx&quot;, background: true },&#10;      );&#10;    }&#10;&#10;    indexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized order indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Order index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedOrdersCollection = null;&#10;&#10;// Response cache for identical requests (3 minutes for orders - shorter than products)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 3 * 60 * 1000;&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clean up expired entries&#10;  if (responseCache.size &gt; 50) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      return NextResponse.json(cachedResponse);&#10;    }&#10;&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const status = searchParams.get(&quot;status&quot;);&#10;    const limit = parseInt(searchParams.get(&quot;limit&quot;)) || 50;&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Reuse database connection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedOrdersCollection = cachedDb.collection(&quot;orders&quot;);&#10;    }&#10;&#10;    // Initialize indexes&#10;    await initializeOrderIndexes(cachedDb);&#10;&#10;    // Build optimized query&#10;    const query = {};&#10;&#10;    if (userId) {&#10;      query.userId = userId;&#10;    }&#10;&#10;    if (status) {&#10;      query.status = status;&#10;    }&#10;&#10;    // Optimized farmer filtering for better Atlas performance&#10;    if (farmerId || farmerEmail) {&#10;      const farmerConditions = [];&#10;&#10;      if (farmerId) {&#10;        farmerConditions.push(&#10;          { &quot;items.farmerId&quot;: farmerId },&#10;          { &quot;items.farmer.id&quot;: farmerId },&#10;          { &quot;items.farmer._id&quot;: farmerId },&#10;          { farmerIds: farmerId },&#10;        );&#10;      }&#10;&#10;      if (farmerEmail) {&#10;        farmerConditions.push(&#10;          { &quot;items.farmerEmail&quot;: farmerEmail },&#10;          { &quot;items.farmer.email&quot;: farmerEmail },&#10;          { farmerEmails: farmerEmail },&#10;        );&#10;      }&#10;&#10;      query.$or = farmerConditions;&#10;    }&#10;&#10;    // Optimized projection - reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      userId: 1,&#10;      status: 1,&#10;      total: 1,&#10;      farmerSubtotal: 1,&#10;      shippingAddress: 1,&#10;      paymentMethod: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      // Include essential item fields only&#10;      &quot;items._id&quot;: 1,&#10;      &quot;items.productId&quot;: 1,&#10;      &quot;items.name&quot;: 1,&#10;      &quot;items.price&quot;: 1,&#10;      &quot;items.quantity&quot;: 1,&#10;      &quot;items.subtotal&quot;: 1,&#10;      &quot;items.farmerId&quot;: 1,&#10;      &quot;items.farmerEmail&quot;: 1,&#10;      &quot;items.farmerName&quot;: 1,&#10;      &quot;items.farmer&quot;: 1,&#10;      // Exclude heavy fields like detailed product data, full user info, etc.&#10;    };&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: { createdAt: -1 } },&#10;    ];&#10;&#10;    // Add pagination&#10;    if (limit &lt; 1000) {&#10;      pipeline.push(&#10;        { $skip: (page - 1) * limit },&#10;        { $limit: limit },&#10;      );&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [orders, totalCount] = await Promise.all([&#10;      cachedOrdersCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedOrdersCollection.countDocuments(query)&#10;        : Promise.resolve(orders.length),&#10;    ]);&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas orders query executed in ${queryTime}ms for ${orders.length} orders`,&#10;    );&#10;&#10;    // Build response&#10;    const response = {&#10;      orders,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: totalCount,&#10;        totalPages: Math.ceil(totalCount / limit),&#10;        hasNext: page * limit &lt; totalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        queryTime,&#10;        cached: false,&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, response);&#10;&#10;    return NextResponse.json(response);&#10;  } catch (error) {&#10;    console.error(&quot;Orders API Error:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch orders&quot;,&#10;        details: error.message,&#10;        orders: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 50,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const orderData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for optimal performance&#10;    await initializeOrderIndexes(db);&#10;&#10;    // Optimize stock validation using aggregation pipeline&#10;    const productIds = orderData.items.map(&#10;      (item) =&gt; new ObjectId(item.productId),&#10;    );&#10;&#10;    const stockValidationPipeline = [&#10;      { $match: { _id: { $in: productIds } } },&#10;      {&#10;        $project: {&#10;          _id: 1,&#10;          stock: 1,&#10;          name: 1,&#10;        },&#10;      },&#10;    ];&#10;&#10;    const products = await db&#10;      .collection(&quot;products&quot;)&#10;      .aggregate(stockValidationPipeline)&#10;      .toArray();&#10;&#10;    // Create lookup map for faster validation&#10;    const productMap = new Map(products.map((p) =&gt; [p._id.toString(), p]));&#10;&#10;    // Validate stock availability&#10;    const stockUpdates = [];&#10;    for (const item of orderData.items) {&#10;      const product = productMap.get(item.productId);&#10;&#10;      if (!product) {&#10;        throw new Error(`Product ${item.name} not found`);&#10;      }&#10;&#10;      if (product.stock &lt; item.quantity) {&#10;        throw new Error(&#10;          `Insufficient stock for ${item.name}. Available: ${product.stock}, Requested: ${item.quantity}`,&#10;        );&#10;      }&#10;&#10;      stockUpdates.push({&#10;        updateOne: {&#10;          filter: { _id: new ObjectId(item.productId) },&#10;          update: {&#10;            $inc: { stock: -item.quantity },&#10;            $set: { updatedAt: new Date() },&#10;          },&#10;        },&#10;      });&#10;    }&#10;&#10;    // Perform bulk stock updates for better performance&#10;    if (stockUpdates.length &gt; 0) {&#10;      await db.collection(&quot;products&quot;).bulkWrite(stockUpdates);&#10;    }&#10;&#10;    // Add timestamps to order&#10;    const newOrder = {&#10;      ...orderData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    };&#10;&#10;    // Create the order&#10;    const result = await db.collection(&quot;orders&quot;).insertOne(newOrder);&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order created successfully&quot;,&#10;      orderId: result.insertedId,&#10;      order: { ...newOrder, _id: result.insertedId },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Create order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function PATCH(request) {&#10;  try {&#10;    const { orderId, ...updateData } = await request.json();&#10;&#10;    if (!orderId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Order ID is required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get the current order to check status changes (without transactions)&#10;    const currentOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    if (!currentOrder) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Check if order status is being changed to cancelled/returned&#10;    const isBeingCancelled =&#10;      updateData.status &amp;&amp;&#10;      (updateData.status === &quot;cancelled&quot; || updateData.status === &quot;returned&quot;) &amp;&amp;&#10;      currentOrder.status !== &quot;cancelled&quot; &amp;&amp;&#10;      currentOrder.status !== &quot;returned&quot;;&#10;&#10;    // If order is being cancelled, restore stock&#10;    if (isBeingCancelled &amp;&amp; currentOrder.items) {&#10;      console.log(&#10;        `Order ${orderId} is being cancelled/returned, restoring stock...`,&#10;      );&#10;&#10;      for (const item of currentOrder.items) {&#10;        const productId = item.productId;&#10;        const orderQuantity = item.quantity;&#10;&#10;        // Get current product&#10;        const product = await db&#10;          .collection(&quot;products&quot;)&#10;          .findOne({ _id: new ObjectId(productId) });&#10;&#10;        if (product) {&#10;          // Restore product stock&#10;          const newStock = product.stock + orderQuantity;&#10;          await db.collection(&quot;products&quot;).updateOne(&#10;            { _id: new ObjectId(productId) },&#10;            {&#10;              $set: {&#10;                stock: newStock,&#10;                updatedAt: new Date(),&#10;              },&#10;            },&#10;          );&#10;        } else {&#10;          console.warn(`Product ${productId} not found when restoring stock`);&#10;        }&#10;      }&#10;    }&#10;&#10;    // Update the order&#10;    const result = await db.collection(&quot;orders&quot;).updateOne(&#10;      { _id: new ObjectId(orderId) },&#10;      {&#10;        $set: {&#10;          ...updateData,&#10;          updatedAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Get the updated order&#10;    const updatedOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order updated successfully&quot;,&#10;      order: updatedOrder,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Update order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let productIndexesInitialized = false;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedCollection = null;&#10;&#10;// Response cache for identical requests (5 minutes)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 5 * 60 * 1000;&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeProductIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (productIndexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const collection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await collection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Simplified Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Primary query index - most common pattern&#10;      {&#10;        key: { status: 1, category: 1, createdAt: -1 },&#10;        name: &quot;primary_query_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Search index&#10;      {&#10;        key: { name: &quot;text&quot;, description: &quot;text&quot;, category: &quot;text&quot; },&#10;        name: &quot;products_text_search_idx&quot;,&#10;        options: {&#10;          background: true,&#10;          weights: { name: 10, category: 5, description: 1 },&#10;        },&#10;      },&#10;      // Price and rating filters&#10;      {&#10;        key: { status: 1, price: 1, averageRating: -1 },&#10;        name: &quot;price_rating_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries&#10;      {&#10;        key: { &quot;farmer._id&quot;: 1, status: 1 },&#10;        name: &quot;farmer_status_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await collection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    productIndexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized product indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Product index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clean up expired entries if cache gets too large&#10;  if (responseCache.size &gt; 100) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      return NextResponse.json(cachedResponse);&#10;    }&#10;&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : 12; // Default to 12 for pagination&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Simplified filtering parameters&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minPrice&quot;))&#10;      : null;&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;maxPrice&quot;))&#10;      : null;&#10;    const minRating = searchParams.get(&quot;minRating&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minRating&quot;))&#10;      : null;&#10;&#10;    // Reuse database connection and collection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedCollection = cachedDb.collection(&quot;products&quot;);&#10;    }&#10;&#10;    // Initialize indexes only once&#10;    await initializeProductIndexes(cachedDb);&#10;&#10;    // Build optimized query for Atlas&#10;    const query = { status: { $ne: &quot;deleted&quot; } };&#10;&#10;    // Add search filter using text index for better performance&#10;    if (search) {&#10;      query.$text = { $search: search };&#10;    }&#10;&#10;    // Add category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      query.category = { $regex: new RegExp(category, &quot;i&quot;) };&#10;    }&#10;&#10;    // Add featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      query.featured = true;&#10;    }&#10;&#10;    // Add farmer filters for dashboard&#10;    if (farmerId || farmerEmail) {&#10;      query.$or = [];&#10;      if (farmerId) {&#10;        query.$or.push(&#10;          { farmerId: farmerId },&#10;          { farmerId: { $eq: farmerId } },&#10;          { &quot;farmer.id&quot;: farmerId },&#10;          { &quot;farmer._id&quot;: farmerId },&#10;        );&#10;      }&#10;      if (farmerEmail) {&#10;        query.$or.push(&#10;          { farmerEmail: farmerEmail },&#10;          { &quot;farmer.email&quot;: farmerEmail },&#10;        );&#10;      }&#10;    }&#10;&#10;    // Add price range filter&#10;    if (minPrice !== null || maxPrice !== null) {&#10;      query.price = {};&#10;      if (minPrice !== null) query.price.$gte = minPrice;&#10;      if (maxPrice !== null) query.price.$lte = maxPrice;&#10;    }&#10;&#10;    // Add rating filter&#10;    if (minRating !== null) {&#10;      query.averageRating = { $gte: minRating };&#10;    }&#10;&#10;    // Optimized projection - only select needed fields to reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      name: 1,&#10;      description: 1,&#10;      price: 1,&#10;      stock: 1,&#10;      images: 1,&#10;      category: 1,&#10;      averageRating: 1,&#10;      totalReviews: 1,&#10;      featured: 1,&#10;      status: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      farmer: 1,&#10;      farmerId: 1,&#10;      farmerEmail: 1,&#10;      farmerName: 1,&#10;      tags: 1,&#10;      isOrganic: 1,&#10;      isFresh: 1,&#10;      purchaseCount: 1,&#10;      // Exclude heavy fields like detailed descriptions, reviews array, etc.&#10;    };&#10;&#10;    // Build sort options for better Atlas performance&#10;    let sortOptions = {};&#10;    if (search) {&#10;      // Text search score for relevance&#10;      sortOptions = { score: { $meta: &quot;textScore&quot; }, createdAt: -1 };&#10;    } else {&#10;      switch (sortBy) {&#10;        case &quot;price-low&quot;:&#10;          sortOptions = { price: 1 };&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          sortOptions = { price: -1 };&#10;          break;&#10;        case &quot;rating&quot;:&#10;          sortOptions = { averageRating: -1, totalReviews: -1 };&#10;          break;&#10;        case &quot;popular&quot;:&#10;          sortOptions = { purchaseCount: -1, averageRating: -1 };&#10;          break;&#10;        case &quot;oldest&quot;:&#10;          sortOptions = { createdAt: 1 };&#10;          break;&#10;        case &quot;newest&quot;:&#10;        default:&#10;          sortOptions = { createdAt: -1 };&#10;          break;&#10;      }&#10;    }&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: sortOptions },&#10;    ];&#10;&#10;    // Add pagination only if needed&#10;    if (limit &lt; 1000) {&#10;      pipeline.push({ $skip: (page - 1) * limit }, { $limit: limit });&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [products, totalCount] = await Promise.all([&#10;      cachedCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedCollection.countDocuments(query)&#10;        : Promise.resolve(products.length),&#10;    ]);&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas query executed in ${queryTime}ms for ${products.length} products`,&#10;    );&#10;&#10;    // Enhance with ratings only if needed (for detailed views)&#10;    const enhancedProducts =&#10;      search || limit &lt;= 50&#10;        ? await enhanceProductsWithRatings(products, cachedDb)&#10;        : products; // Skip rating enhancement for large datasets&#10;&#10;    // Build response&#10;    const response = {&#10;      products: enhancedProducts,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: totalCount,&#10;        totalPages: Math.ceil(totalCount / limit),&#10;        hasNext: page * limit &lt; totalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        queryTime,&#10;        cached: false,&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, response);&#10;&#10;    return NextResponse.json(response);&#10;  } catch (error) {&#10;    console.error(&quot;Products API Error:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch products&quot;,&#10;        details: error.message,&#10;        products: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 12,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const productData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Clear cache when new product is added&#10;    responseCache.clear();&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne({&#10;      ...productData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    });&#10;&#10;    return NextResponse.json(&#10;      { message: &quot;Product created successfully&quot;, id: result.insertedId },&#10;      { status: 201 },&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let productIndexesInitialized = false;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedCollection = null;&#10;&#10;// Response cache for identical requests (5 minutes)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 5 * 60 * 1000;&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeProductIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (productIndexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const collection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await collection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Simplified Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Primary query index - most common pattern&#10;      {&#10;        key: { status: 1, category: 1, createdAt: -1 },&#10;        name: &quot;primary_query_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Search index&#10;      {&#10;        key: { name: &quot;text&quot;, description: &quot;text&quot;, category: &quot;text&quot; },&#10;        name: &quot;products_text_search_idx&quot;,&#10;        options: {&#10;          background: true,&#10;          weights: { name: 10, category: 5, description: 1 },&#10;        },&#10;      },&#10;      // Price and rating filters&#10;      {&#10;        key: { status: 1, price: 1, averageRating: -1 },&#10;        name: &quot;price_rating_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries&#10;      {&#10;        key: { &quot;farmer._id&quot;: 1, status: 1 },&#10;        name: &quot;farmer_status_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await collection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    productIndexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized product indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Product index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clean up expired entries if cache gets too large&#10;  if (responseCache.size &gt; 100) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      return NextResponse.json(cachedResponse);&#10;    }&#10;&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : 12; // Default to 12 for pagination&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Simplified filtering parameters&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minPrice&quot;))&#10;      : null;&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;maxPrice&quot;))&#10;      : null;&#10;    const minRating = searchParams.get(&quot;minRating&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minRating&quot;))&#10;      : null;&#10;&#10;    // Reuse database connection and collection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedCollection = cachedDb.collection(&quot;products&quot;);&#10;    }&#10;&#10;    // Initialize indexes only once&#10;    await initializeProductIndexes(cachedDb);&#10;&#10;    // Build optimized query for Atlas&#10;    const query = { status: { $ne: &quot;deleted&quot; } };&#10;&#10;    // Add search filter using text index for better performance&#10;    if (search) {&#10;      query.$text = { $search: search };&#10;    }&#10;&#10;    // Add category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      query.category = { $regex: new RegExp(category, &quot;i&quot;) };&#10;    }&#10;&#10;    // Add featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      query.featured = true;&#10;    }&#10;&#10;    // Add farmer filters for dashboard&#10;    if (farmerId || farmerEmail) {&#10;      query.$or = [];&#10;      if (farmerId) {&#10;        query.$or.push(&#10;          { farmerId: farmerId },&#10;          { farmerId: { $eq: farmerId } },&#10;          { &quot;farmer.id&quot;: farmerId },&#10;          { &quot;farmer._id&quot;: farmerId },&#10;        );&#10;      }&#10;      if (farmerEmail) {&#10;        query.$or.push(&#10;          { farmerEmail: farmerEmail },&#10;          { &quot;farmer.email&quot;: farmerEmail },&#10;        );&#10;      }&#10;    }&#10;&#10;    // Add price range filter&#10;    if (minPrice !== null || maxPrice !== null) {&#10;      query.price = {};&#10;      if (minPrice !== null) query.price.$gte = minPrice;&#10;      if (maxPrice !== null) query.price.$lte = maxPrice;&#10;    }&#10;&#10;    // Add rating filter&#10;    if (minRating !== null) {&#10;      query.averageRating = { $gte: minRating };&#10;    }&#10;&#10;    // Optimized projection - only select needed fields to reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      name: 1,&#10;      description: 1,&#10;      price: 1,&#10;      stock: 1,&#10;      images: 1,&#10;      category: 1,&#10;      averageRating: 1,&#10;      totalReviews: 1,&#10;      featured: 1,&#10;      status: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      farmer: 1,&#10;      farmerId: 1,&#10;      farmerEmail: 1,&#10;      farmerName: 1,&#10;      tags: 1,&#10;      isOrganic: 1,&#10;      isFresh: 1,&#10;      purchaseCount: 1,&#10;      // Exclude heavy fields like detailed descriptions, reviews array, etc.&#10;    };&#10;&#10;    // Build sort options for better Atlas performance&#10;    let sortOptions = {};&#10;    if (search) {&#10;      // Text search score for relevance&#10;      sortOptions = { score: { $meta: &quot;textScore&quot; }, createdAt: -1 };&#10;    } else {&#10;      switch (sortBy) {&#10;        case &quot;price-low&quot;:&#10;          sortOptions = { price: 1 };&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          sortOptions = { price: -1 };&#10;          break;&#10;        case &quot;rating&quot;:&#10;          sortOptions = { averageRating: -1, totalReviews: -1 };&#10;          break;&#10;        case &quot;popular&quot;:&#10;          sortOptions = { purchaseCount: -1, averageRating: -1 };&#10;          break;&#10;        case &quot;oldest&quot;:&#10;          sortOptions = { createdAt: 1 };&#10;          break;&#10;        case &quot;newest&quot;:&#10;        default:&#10;          sortOptions = { createdAt: -1 };&#10;          break;&#10;      }&#10;    }&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: sortOptions },&#10;    ];&#10;&#10;    // Add pagination only if needed&#10;    if (limit &lt; 1000) {&#10;      pipeline.push({ $skip: (page - 1) * limit }, { $limit: limit });&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [products, totalCount] = await Promise.all([&#10;      cachedCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedCollection.countDocuments(query)&#10;        : Promise.resolve(0), // We'll calculate this after products are resolved&#10;    ]);&#10;&#10;    // Calculate actual total count for large datasets&#10;    const actualTotalCount = limit &lt; 1000 ? totalCount : products.length;&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas query executed in ${queryTime}ms for ${products.length} products`,&#10;    );&#10;&#10;    // Enhance with ratings only if needed (for detailed views)&#10;    const enhancedProducts =&#10;      search || limit &lt;= 50&#10;        ? await enhanceProductsWithRatings(products, cachedDb)&#10;        : products; // Skip rating enhancement for large datasets&#10;&#10;    // Build response&#10;    const response = {&#10;      products: enhancedProducts,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: actualTotalCount,&#10;        totalPages: Math.ceil(actualTotalCount / limit),&#10;        hasNext: page * limit &lt; actualTotalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        queryTime,&#10;        cached: false,&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, response);&#10;&#10;    return NextResponse.json(response);&#10;  } catch (error) {&#10;    console.error(&quot;Products API Error:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch products&quot;,&#10;        details: error.message,&#10;        products: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 12,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const productData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Clear cache when new product is added&#10;    responseCache.clear();&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne({&#10;      ...productData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    });&#10;&#10;    return NextResponse.json(&#10;      { message: &quot;Product created successfully&quot;, id: result.insertedId },&#10;      { status: 201 },&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/farmer-orders/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/farmer-orders/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useRef, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;&#10;export default function FarmerOrders() {&#10;  const { data: session, status } = useSession();&#10;  const [orders, setOrders] = useState([]);&#10;  const [filteredOrders, setFilteredOrders] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [statusFilter, setStatusFilter] = useState(&quot;All Orders&quot;);&#10;  const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [refreshing, setRefreshing] = useState(false);&#10;&#10;  // Enhanced state for new features&#10;  const [selectedOrders, setSelectedOrders] = useState([]);&#10;  const [viewMode, setViewMode] = useState(&quot;detailed&quot;); // 'detailed', 'compact'&#10;  const [sortBy, setSortBy] = useState(&quot;newest&quot;);&#10;  const [dateRange, setDateRange] = useState({ start: &quot;&quot;, end: &quot;&quot; });&#10;  const [showExportModal, setShowExportModal] = useState(false);&#10;  const [notifications, setNotifications] = useState([]);&#10;  const [autoRefresh, setAutoRefresh] = useState(false);&#10;&#10;  // Performance optimizations&#10;  const [requestInProgress, setRequestInProgress] = useState(false);&#10;&#10;  const intervalRef = useRef(null);&#10;  const abortControllerRef = useRef(null);&#10;  const cacheRef = useRef(new Map());&#10;&#10;  const ordersPerPage = viewMode === &quot;compact&quot; ? 20 : 10;&#10;  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  const RETRY_DELAY = 1000; // 1 second&#10;&#10;  // Enhanced notification system&#10;  const addNotification = useCallback((message, type = &quot;info&quot;) =&gt; {&#10;    const id = Date.now() + Math.random();&#10;    const notification = { id, message, type, timestamp: new Date() };&#10;&#10;    setNotifications((prev) =&gt; [notification, ...prev.slice(0, 4)]);&#10;&#10;    setTimeout(() =&gt; {&#10;      setNotifications((prev) =&gt; prev.filter((n) =&gt; n.id !== id));&#10;    }, 5000);&#10;  }, []);&#10;&#10;  // Optimized debounced search&#10;  const debouncedSearch = useMemo(&#10;    () =&gt;&#10;      debounce((searchValue) =&gt; {&#10;        setSearchTerm(searchValue);&#10;      }, 300),&#10;    [],&#10;  );&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  const setCachedData = useCallback(&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;        timestamp: Date.now(),&#10;      });&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;        if (Date.now() - value.timestamp &gt; CACHE_DURATION) {&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  // Enhanced file download with better error handling&#10;  const downloadFile = useCallback(&#10;    (content, filename, mimeType) =&gt; {&#10;      try {&#10;        const blob = new Blob([content], { type: mimeType });&#10;        const url = URL.createObjectURL(blob);&#10;        const link = document.createElement(&quot;a&quot;);&#10;        link.href = url;&#10;        link.download = filename;&#10;        link.style.display = &quot;none&quot;;&#10;        document.body.appendChild(link);&#10;        link.click();&#10;        document.body.removeChild(link);&#10;        URL.revokeObjectURL(url);&#10;      } catch (error) {&#10;        console.error(&quot;Download error:&quot;, error);&#10;        addNotification(&quot;Failed to download file&quot;, &quot;error&quot;);&#10;      }&#10;    },&#10;    [addNotification],&#10;  );&#10;&#10;  // Enhanced CSV conversion with better data handling&#10;  const convertToCSV = useCallback((data) =&gt; {&#10;    const headers = [&#10;      &quot;Order ID&quot;,&#10;      &quot;Customer Name&quot;,&#10;      &quot;Customer Email&quot;,&#10;      &quot;Status&quot;,&#10;      &quot;Total Amount&quot;,&#10;      &quot;Order Date&quot;,&#10;      &quot;Items Count&quot;,&#10;      &quot;Payment Method&quot;,&#10;      &quot;Delivery Address&quot;,&#10;    ];&#10;&#10;    const csvData = data.map((order) =&gt; [&#10;      order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;,&#10;      (order.customerName || order.userName || &quot;&quot;).replace(/,/g, &quot;;&quot;),&#10;      order.customerEmail || order.userEmail || &quot;&quot;,&#10;      order.status || &quot;pending&quot;,&#10;      order.farmerSubtotal || order.total || 0,&#10;      new Date(order.createdAt).toLocaleDateString(),&#10;      order.items?.length || 0,&#10;      (order.paymentMethod || &quot;Cash on Delivery&quot;).replace(/,/g, &quot;;&quot;),&#10;      typeof order.deliveryAddress === &quot;object&quot;&#10;        ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`.replace(&#10;            /,/g,&#10;            &quot;;&quot;,&#10;          )&#10;        : (order.deliveryAddress || &quot;Not provided&quot;).replace(/,/g, &quot;;&quot;),&#10;    ]);&#10;&#10;    return [headers, ...csvData]&#10;      .map((row) =&gt; row.map((field) =&gt; `&quot;${field}&quot;`).join(&quot;,&quot;))&#10;      .join(&quot;\n&quot;);&#10;  }, []);&#10;&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;          throw error;&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;        // Check for new orders for notifications (only if not initial load)&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;        if (retryAttempt &lt; MAX_RETRY_ATTEMPTS) {&#10;          addNotification(&#10;            `Retrying to fetch orders... (${retryAttempt + 1}/${MAX_RETRY_ATTEMPTS})`,&#10;            &quot;warning&quot;,&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;    let filtered = [...orders];&#10;&#10;    // Apply status filter&#10;    if (statusFilter !== &quot;All Orders&quot;) {&#10;      filtered = filtered.filter(&#10;        (order) =&gt; order.status?.toLowerCase() === statusFilter.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    // Apply search filter with improved regex&#10;    if (searchTerm.trim()) {&#10;      const searchRegex = new RegExp(&#10;        searchTerm.trim().replace(/[.*+?^${}()|[\]\\]/g, &quot;\\$&amp;&quot;),&#10;        &quot;i&quot;,&#10;      );&#10;      filtered = filtered.filter((order) =&gt; {&#10;        const orderItemsMatch = order.items?.some(&#10;          (item) =&gt;&#10;            searchRegex.test(item.name) ||&#10;            searchRegex.test(item.productName) ||&#10;            searchRegex.test(item.category),&#10;        );&#10;        const customerMatch =&#10;          searchRegex.test(order.customerName) ||&#10;          searchRegex.test(order.customerEmail) ||&#10;          searchRegex.test(order.userEmail);&#10;        const orderIdMatch = searchRegex.test(order._id);&#10;&#10;        return orderItemsMatch || customerMatch || orderIdMatch;&#10;      });&#10;    }&#10;&#10;    // Apply date range filter&#10;    if (dateRange.start) {&#10;      const startDate = new Date(dateRange.start);&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &gt;= startDate,&#10;      );&#10;    }&#10;    if (dateRange.end) {&#10;      const endDate = new Date(dateRange.end);&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &lt;= endDate,&#10;      );&#10;    }&#10;&#10;    // Apply sorting with improved performance&#10;    filtered.sort((a, b) =&gt; {&#10;      switch (sortBy) {&#10;        case &quot;newest&quot;:&#10;          return new Date(b.createdAt) - new Date(a.createdAt);&#10;        case &quot;oldest&quot;:&#10;          return new Date(a.createdAt) - new Date(b.createdAt);&#10;        case &quot;highest-value&quot;:&#10;          return (&#10;            (b.farmerSubtotal || b.total || 0) -&#10;            (a.farmerSubtotal || a.total || 0)&#10;          );&#10;        case &quot;lowest-value&quot;:&#10;          return (&#10;            (a.farmerSubtotal || a.total || 0) -&#10;            (b.farmerSubtotal || b.total || 0)&#10;          );&#10;        case &quot;customer-name&quot;:&#10;          return (a.customerName || a.userName || &quot;&quot;).localeCompare(&#10;            b.customerName || b.userName || &quot;&quot;,&#10;          );&#10;        default:&#10;          return 0;&#10;      }&#10;    });&#10;&#10;    return filtered;&#10;  }, [orders, statusFilter, searchTerm, dateRange, sortBy]);&#10;&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    fetchOrdersWithRetry();&#10;  }, [session?.user, fetchOrdersWithRetry]);&#10;&#10;  // Optimized bulk operations with better error handling&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;&#10;        // Clear cache to force refresh&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;&#10;  // Enhanced single order status update&#10;  const handleUpdateOrderStatus = async (orderId, newStatus) =&gt; {&#10;    const statusMessages = {&#10;      confirmed:&#10;        &quot;confirm this order? This will notify the customer that their order has been accepted.&quot;,&#10;      shipped:&#10;        &quot;mark this order as shipped? This will notify the customer that their order is on the way.&quot;,&#10;      delivered:&#10;        &quot;mark this order as delivered? This will complete the order and notify the customer.&quot;,&#10;      cancelled:&#10;        &quot;cancel this order? This action cannot be undone and will notify the customer.&quot;,&#10;    };&#10;&#10;    const confirmMessage =&#10;      statusMessages[newStatus] || `mark this order as ${newStatus}?`;&#10;&#10;    if (!confirm(`Are you sure you want to ${confirmMessage}`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      const updateData = {&#10;        status: newStatus,&#10;        statusHistory: {&#10;          status: newStatus,&#10;          timestamp: new Date().toISOString(),&#10;          updatedBy: session.user.email || session.user.name,&#10;        },&#10;      };&#10;&#10;      // Add estimated delivery date for shipped status&#10;      if (newStatus === &quot;shipped&quot;) {&#10;        const estimatedDelivery = new Date();&#10;        estimatedDelivery.setDate(estimatedDelivery.getDate() + 3);&#10;        updateData.estimatedDeliveryDate = estimatedDelivery.toISOString();&#10;      }&#10;&#10;      const response = await fetch(`/api/orders/${orderId}`, {&#10;        method: &quot;PATCH&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;          &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;        },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json().catch(() =&gt; ({}));&#10;        const error = new Error(&#10;          errorData.error || `HTTP ${response.status}: ${response.statusText}`,&#10;        );&#10;        console.error(&quot;Order update error:&quot;, error);&#10;        throw error;&#10;      }&#10;&#10;      // Optimistic update&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  updateData.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  updateData.statusHistory,&#10;                ],&#10;              }&#10;            : order,&#10;        ),&#10;      );&#10;&#10;      // Clear cache&#10;      cacheRef.current.clear();&#10;&#10;      const successMessages = {&#10;        confirmed: &quot;Order confirmed! Customer has been notified.&quot;,&#10;        shipped:&#10;          &quot;Order marked as shipped! Customer has been notified with tracking information.&quot;,&#10;        delivered:&#10;          &quot;Order completed! Customer has been notified of successful delivery.&quot;,&#10;        cancelled: &quot;Order cancelled. Customer has been notified.&quot;,&#10;      };&#10;&#10;      addNotification(&#10;        successMessages[newStatus] ||&#10;          `Order status updated to ${newStatus} successfully!`,&#10;        &quot;success&quot;,&#10;      );&#10;    } catch (error) {&#10;      console.error(&quot;Error updating order status:&quot;, error);&#10;      addNotification(&#10;        `Failed to update order status: ${error.message}`,&#10;        &quot;error&quot;,&#10;      );&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;&#10;  // Enhanced refresh with better UX&#10;  const handleRefresh = async () =&gt; {&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;    addNotification(&quot;Orders refreshed successfully!&quot;, &quot;success&quot;);&#10;  };&#10;&#10;  // Optimized search handler&#10;  const handleSearchChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    debouncedSearch(value);&#10;  };&#10;&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;  const exportOrders = useCallback(&#10;    (format) =&gt; {&#10;      const dataToExport =&#10;        selectedOrders.length &gt; 0&#10;          ? filteredOrders.filter((order) =&gt; selectedOrders.includes(order._id))&#10;          : filteredOrders;&#10;&#10;      try {&#10;        if (format === &quot;csv&quot;) {&#10;          const csv = convertToCSV(dataToExport);&#10;          downloadFile(&#10;            csv,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.csv`,&#10;            &quot;text/csv&quot;,&#10;          );&#10;        } else if (format === &quot;json&quot;) {&#10;          const json = JSON.stringify(dataToExport, null, 2);&#10;          downloadFile(&#10;            json,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.json`,&#10;            &quot;application/json&quot;,&#10;          );&#10;        }&#10;&#10;        addNotification(&#10;          `${dataToExport.length} orders exported successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } catch (error) {&#10;        console.error(&quot;Export error:&quot;, error);&#10;        addNotification(&quot;Failed to export orders&quot;, &quot;error&quot;);&#10;      } finally {&#10;        setShowExportModal(false);&#10;      }&#10;    },&#10;    [&#10;      filteredOrders,&#10;      selectedOrders,&#10;      convertToCSV,&#10;      downloadFile,&#10;      addNotification,&#10;    ],&#10;  );&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status) =&gt; {&#10;    const statusConfig = {&#10;      pending: {&#10;        bg: &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;      },&#10;      confirmed: {&#10;        bg: &quot;bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;,&#10;        icon: &quot;fas fa-check&quot;,&#10;      },&#10;      shipped: {&#10;        bg: &quot;bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;,&#10;        icon: &quot;fas fa-truck&quot;,&#10;      },&#10;      delivered: {&#10;        bg: &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;        icon: &quot;fas fa-check-circle&quot;,&#10;      },&#10;      cancelled: {&#10;        bg: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;      },&#10;    };&#10;&#10;    const config = statusConfig[status?.toLowerCase()] || statusConfig.pending;&#10;&#10;    return (&#10;      &lt;span&#10;        className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.bg}`}&#10;      &gt;&#10;        &lt;i className={`${config.icon} mr-1`}&gt;&lt;/i&gt;&#10;        {status?.charAt(0).toUpperCase() + status?.slice(1) || &quot;Pending&quot;}&#10;      &lt;/span&gt;&#10;    );&#10;  };&#10;&#10;  const getOrderActions = (order) =&gt; {&#10;    const actions = [];&#10;&#10;    switch (order.status.toLowerCase()) {&#10;      case &quot;pending&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;confirm&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;confirmed&quot;)}&#10;            className=&quot;bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;            Confirm Order&#10;          &lt;/button&gt;,&#10;        );&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;cancel&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;cancelled&quot;)}&#10;            className=&quot;bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;            Cancel Order&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;confirmed&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;ship&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;shipped&quot;)}&#10;            className=&quot;bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Shipped&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;shipped&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;deliver&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;delivered&quot;)}&#10;            className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Delivered&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;    }&#10;&#10;    return actions;&#10;  };&#10;&#10;  // Pagination&#10;  const indexOfLastOrder = currentPage * ordersPerPage;&#10;  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;&#10;  const currentOrders = filteredOrders.slice(&#10;    indexOfFirstOrder,&#10;    indexOfLastOrder,&#10;  );&#10;  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);&#10;&#10;  const getOrderSummary = () =&gt; {&#10;    const summary = {&#10;      total: orders.length,&#10;      pending: orders.filter((o) =&gt; o.status === &quot;pending&quot;).length,&#10;      confirmed: orders.filter((o) =&gt; o.status === &quot;confirmed&quot;).length,&#10;      shipped: orders.filter((o) =&gt; o.status === &quot;shipped&quot;).length,&#10;      delivered: orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length,&#10;      cancelled: orders.filter((o) =&gt; o.status === &quot;cancelled&quot;).length,&#10;    };&#10;    return summary;&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;            Loading your enhanced orders dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const orderSummary = getOrderSummary();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Notification System */}&#10;      &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-2&quot;&gt;&#10;        {notifications.map((notification) =&gt; (&#10;          &lt;div&#10;            key={notification.id}&#10;            className={`px-6 py-4 rounded-lg shadow-lg text-white transform transition-all duration-500 ${&#10;              notification.type === &quot;success&quot;&#10;                ? &quot;bg-green-600&quot;&#10;                : notification.type === &quot;error&quot;&#10;                  ? &quot;bg-red-600&quot;&#10;                  : notification.type === &quot;warning&quot;&#10;                    ? &quot;bg-yellow-600&quot;&#10;                    : &quot;bg-blue-600&quot;&#10;            }`}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i&#10;                className={`fas ${&#10;                  notification.type === &quot;success&quot;&#10;                    ? &quot;fa-check-circle&quot;&#10;                    : notification.type === &quot;error&quot;&#10;                      ? &quot;fa-exclamation-circle&quot;&#10;                      : notification.type === &quot;warning&quot;&#10;                        ? &quot;fa-exclamation-triangle&quot;&#10;                        : &quot;fa-info-circle&quot;&#10;                } mr-2`}&#10;              &gt;&lt;/i&gt;&#10;              {notification.message}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Export Modal */}&#10;      {showExportModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md w-full mx-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Export Orders&#10;            &lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;              {selectedOrders.length &gt; 0&#10;                ? `Export ${selectedOrders.length} selected orders`&#10;                : `Export all ${filteredOrders.length} filtered orders`}&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;csv&quot;)}&#10;                className=&quot;flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-csv mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as CSV&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;json&quot;)}&#10;                className=&quot;flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-code mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as JSON&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowExportModal(false)}&#10;              className=&quot;w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg font-medium transition&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        {/* Enhanced Breadcrumb with Real-time Indicators */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-cog mr-1&quot;&gt;&lt;/i&gt;Manage&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-gray-900 dark:text-white font-medium&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-1&quot;&gt;&lt;/i&gt;Advanced Order&#10;                  Management&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Real-time Status Indicator */}&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div&#10;                className={`w-3 h-3 rounded-full ${autoRefresh ? &quot;bg-green-500 animate-pulse&quot; : &quot;bg-gray-400&quot;}`}&#10;              &gt;&lt;/div&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                {autoRefresh ? &quot;Live&quot; : &quot;Static&quot;}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Page Header with Quick Actions */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-blue-600 p-4 rounded-2xl&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Advanced Order Management&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                  Comprehensive order tracking and analytics dashboard&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4 mt-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                    Last updated: {new Date().toLocaleTimeString()}&#10;                  &lt;/span&gt;&#10;                  {autoRefresh &amp;&amp; (&#10;                    &lt;span className=&quot;bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                      Auto-refresh enabled&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6 lg:mt-0 flex flex-wrap gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setAutoRefresh(!autoRefresh)}&#10;                className={`inline-flex items-center px-4 py-3 rounded-lg font-medium transition ${&#10;                  autoRefresh&#10;                    ? &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                    : &quot;bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas ${autoRefresh ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                &gt;&lt;/i&gt;&#10;                {autoRefresh ? &quot;Pause&quot; : &quot;Auto&quot;} Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; setShowExportModal(true)}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;                Export&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={handleRefresh}&#10;                disabled={refreshing}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;animate-spin&quot; : &quot;&quot;}`}&#10;                &gt;&lt;/i&gt;&#10;                Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;inline-flex items-center px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Back to Manage&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Order Summary Cards with Animations */}&#10;          &lt;div className=&quot;grid grid-cols-2 md:grid-cols-6 gap-4 mb-8&quot;&gt;&#10;            {Object.entries(orderSummary).map(([key, value], index) =&gt; {&#10;              const config = {&#10;                total: {&#10;                  icon: &quot;fa-shopping-cart&quot;,&#10;                  color: &quot;gray&quot;,&#10;                  label: &quot;Total&quot;,&#10;                },&#10;                pending: {&#10;                  icon: &quot;fa-clock&quot;,&#10;                  color: &quot;yellow&quot;,&#10;                  label: &quot;Pending&quot;,&#10;                },&#10;                confirmed: {&#10;                  icon: &quot;fa-check&quot;,&#10;                  color: &quot;blue&quot;,&#10;                  label: &quot;Confirmed&quot;,&#10;                },&#10;                shipped: {&#10;                  icon: &quot;fa-truck&quot;,&#10;                  color: &quot;purple&quot;,&#10;                  label: &quot;Shipped&quot;,&#10;                },&#10;                delivered: {&#10;                  icon: &quot;fa-check-circle&quot;,&#10;                  color: &quot;green&quot;,&#10;                  label: &quot;Delivered&quot;,&#10;                },&#10;                cancelled: {&#10;                  icon: &quot;fa-times-circle&quot;,&#10;                  color: &quot;red&quot;,&#10;                  label: &quot;Cancelled&quot;,&#10;                },&#10;              }[key];&#10;&#10;              return (&#10;                &lt;div&#10;                  key={key}&#10;                  className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 transform hover:scale-105 transition-transform duration-200 cursor-pointer&quot;&#10;                  onClick={() =&gt;&#10;                    setStatusFilter(&#10;                      key === &quot;total&quot;&#10;                        ? &quot;All Orders&quot;&#10;                        : config.label.toLowerCase(),&#10;                    )&#10;                  }&#10;                  style={{ animationDelay: `${index * 100}ms` }}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div&#10;                      className={`p-2 bg-${config.color}-100 dark:bg-${config.color}-900 rounded-lg`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${config.icon} text-${config.color}-600 dark:text-${config.color}-300`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;ml-3&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {config.label}&#10;                      &lt;/p&gt;&#10;                      &lt;p&#10;                        className={`text-2xl font-bold text-${config.color}-600 dark:text-${config.color}-400`}&#10;                      &gt;&#10;                        {value}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Filters and Controls */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6&quot;&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4 lg:mb-0&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Advanced Filters &amp; Controls&#10;              &lt;/h3&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex space-x-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#10;                {[&quot;detailed&quot;, &quot;compact&quot;].map((mode) =&gt; (&#10;                  &lt;button&#10;                    key={mode}&#10;                    onClick={() =&gt; setViewMode(mode)}&#10;                    className={`px-4 py-2 rounded-md text-sm font-medium transition ${&#10;                      viewMode === mode&#10;                        ? &quot;bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow&quot;&#10;                        : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white&quot;&#10;                    }`}&#10;                  &gt;&#10;                    &lt;i&#10;                      className={`fas ${&#10;                        mode === &quot;detailed&quot;&#10;                          ? &quot;fa-list&quot;&#10;                          : mode === &quot;compact&quot;&#10;                            ? &quot;fa-th-list&quot;&#10;                            : &quot;&quot;&#10;                      } mr-1`}&#10;                    &gt;&lt;/i&gt;&#10;                    {mode.charAt(0).toUpperCase() + mode.slice(1)}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4&quot;&gt;&#10;              {/* Search */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Search Orders&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search by customer, email, or ID...&quot;&#10;                    value={searchTerm}&#10;                    onChange={handleSearchChange}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                  &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Status Filter */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Status Filter&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={statusFilter}&#10;                  onChange={handleStatusChange}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;All Orders&quot;&gt;All Orders&lt;/option&gt;&#10;                  &lt;option value=&quot;pending&quot;&gt;Pending&lt;/option&gt;&#10;                  &lt;option value=&quot;confirmed&quot;&gt;Confirmed&lt;/option&gt;&#10;                  &lt;option value=&quot;shipped&quot;&gt;Shipped&lt;/option&gt;&#10;                  &lt;option value=&quot;delivered&quot;&gt;Delivered&lt;/option&gt;&#10;                  &lt;option value=&quot;cancelled&quot;&gt;Cancelled&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Sort By */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Sort By&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={sortBy}&#10;                  onChange={(e) =&gt; setSortBy(e.target.value)}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                  &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                  &lt;option value=&quot;highest-value&quot;&gt;Highest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;lowest-value&quot;&gt;Lowest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;customer-name&quot;&gt;Customer Name&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Date Range */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date From&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.start}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, start: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date To&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.end}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, end: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Clear Filters */}&#10;              &lt;div className=&quot;flex items-end&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Bulk Operations */}&#10;            {selectedOrders.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center&quot;&gt;&#10;                  &lt;div className=&quot;mb-3 sm:mb-0&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                      {selectedOrders.length} order(s) selected&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                      Choose a bulk action to apply to selected orders&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;confirmed&quot;)}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Confirm All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;shipped&quot;)}&#10;                      className=&quot;bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;                      Ship All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setSelectedOrders([])}&#10;                      className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                      Clear Selection&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Orders List - Enhanced with different view modes */}&#10;          {currentOrders.length === 0 ? (&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-12 text-center&quot;&gt;&#10;              &lt;div className=&quot;max-w-md mx-auto&quot;&gt;&#10;                &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                  No orders found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                  {statusFilter === &quot;All Orders&quot;&#10;                    ? &quot;You haven't received any orders yet, or no orders match your current filters.&quot;&#10;                    : `No ${statusFilter.toLowerCase()} orders found matching your criteria.`}&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  Clear All Filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className={`space-y-${viewMode === &quot;compact&quot; ? &quot;3&quot; : &quot;6&quot;}`}&gt;&#10;              {/* Select All Checkbox */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;label className=&quot;flex items-center&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={selectedOrders.length === currentOrders.length}&#10;                    onChange={(e) =&gt; {&#10;                      if (e.target.checked) {&#10;                        setSelectedOrders(&#10;                          currentOrders.map((order) =&gt; order._id),&#10;                        );&#10;                      } else {&#10;                        setSelectedOrders([]);&#10;                      }&#10;                    }}&#10;                    className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                  /&gt;&#10;                  &lt;span className=&quot;ml-2 text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Select all visible orders ({currentOrders.length})&#10;                  &lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders */}&#10;              {currentOrders.map((order) =&gt; (&#10;                &lt;div&#10;                  key={order._id}&#10;                  className={`bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden transform hover:scale-[1.01] transition-all duration-200 ${&#10;                    selectedOrders.includes(order._id)&#10;                      ? &quot;ring-2 ring-green-500&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div className={`p-${viewMode === &quot;compact&quot; ? &quot;4&quot; : &quot;6&quot;}`}&gt;&#10;                    {/* Order Header with Checkbox */}&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedOrders.includes(order._id)}&#10;                          onChange={(e) =&gt; {&#10;                            if (e.target.checked) {&#10;                              setSelectedOrders((prev) =&gt; [...prev, order._id]);&#10;                            } else {&#10;                              setSelectedOrders((prev) =&gt;&#10;                                prev.filter((id) =&gt; id !== order._id),&#10;                              );&#10;                            }&#10;                          }}&#10;                          className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                        /&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3&#10;                            className={`${viewMode === &quot;compact&quot; ? &quot;text-base&quot; : &quot;text-lg&quot;} font-semibold text-gray-900 dark:text-white`}&#10;                          &gt;&#10;                            Order #&#10;                            {order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;}&#10;                          &lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Placed on {formatDate(order.createdAt)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        {getStatusBadge(order.status)}&#10;                        &lt;span className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice(&#10;                            order.farmerSubtotal || order.total || 0,&#10;                          )}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Information */}&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Customer Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Name:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerName || order.userName || &quot;Customer&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Email:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerEmail ||&#10;                              order.userEmail ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Phone:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerPhone ||&#10;                              order.userPhone ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Delivery Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Address:&lt;/span&gt;{&quot; &quot;}&#10;                            {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress&#10;                              ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`&#10;                                  .replace(/^,\s*/, &quot;&quot;)&#10;                                  .replace(/,\s*$/, &quot;&quot;) || &quot;Not provided&quot;&#10;                              : order.deliveryAddress || &quot;Not provided&quot;}&#10;                          &lt;/p&gt;&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.name &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Recipient:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.name}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.phone &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Contact:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.phone}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.instructions &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  Instructions:&#10;                                &lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.instructions}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Payment Method:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.paymentMethod || &quot;Cash on Delivery&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Order Items */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-6 mb-6&quot;&gt;&#10;                      &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                        Order Items ({order.items?.length || 0})&#10;                      &lt;/h4&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {order.items?.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;flex items-center justify-between py-3 px-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                              &lt;img&#10;                                src={&#10;                                  item.image ||&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                                }&#10;                                alt={item.name || item.productName}&#10;                                className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                              /&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.name || item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Quantity: {item.quantity} {item.unit || &quot;kg&quot;}&#10;                                &lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Unit Price: {formatPrice(item.price)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                              &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                {formatPrice(item.price * item.quantity)}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Action Buttons */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4&quot;&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                        {getOrderActions(order)}&#10;                        &lt;Link&#10;                          href={`/farmer-orders/${order._id}`}&#10;                          className=&quot;bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                          View Details&#10;                        &lt;/Link&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pagination */}&#10;          {totalPages &gt; 1 &amp;&amp; (&#10;            &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#10;              &lt;nav aria-label=&quot;Pagination&quot;&gt;&#10;                &lt;ul className=&quot;inline-flex items-center -space-x-px text-gray-600 dark:text-gray-300&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                      }&#10;                      disabled={currentPage === 1}&#10;                      className=&quot;block px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                  {[...Array(totalPages)].map((_, index) =&gt; (&#10;                    &lt;li key={index}&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(index + 1)}&#10;                        className={`px-3 py-2 leading-tight border ${&#10;                          currentPage === index + 1&#10;                            ? &quot;text-white bg-green-600 border-green-600 hover:bg-green-700&quot;&#10;                            : &quot;text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {index + 1}&#10;                      &lt;/button&gt;&#10;                    &lt;/li&gt;&#10;                  ))}&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.min(prev + 1, totalPages))&#10;                      }&#10;                      disabled={currentPage === totalPages}&#10;                      className=&quot;block px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ul&gt;&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useRef, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;&#10;export default function FarmerOrders() {&#10;  const { data: session, status } = useSession();&#10;  const [orders, setOrders] = useState([]);&#10;  const [filteredOrders, setFilteredOrders] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [statusFilter, setStatusFilter] = useState(&quot;All Orders&quot;);&#10;  const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [refreshing, setRefreshing] = useState(false);&#10;&#10;  // Enhanced state for new features&#10;  const [selectedOrders, setSelectedOrders] = useState([]);&#10;  const [viewMode, setViewMode] = useState(&quot;detailed&quot;); // 'detailed', 'compact'&#10;  const [sortBy, setSortBy] = useState(&quot;newest&quot;);&#10;  const [dateRange, setDateRange] = useState({ start: &quot;&quot;, end: &quot;&quot; });&#10;  const [showExportModal, setShowExportModal] = useState(false);&#10;  const [notifications, setNotifications] = useState([]);&#10;  const [autoRefresh, setAutoRefresh] = useState(false);&#10;&#10;  // Performance optimizations&#10;  const [requestInProgress, setRequestInProgress] = useState(false);&#10;&#10;  const intervalRef = useRef(null);&#10;  const abortControllerRef = useRef(null);&#10;  const cacheRef = useRef(new Map());&#10;&#10;  const ordersPerPage = viewMode === &quot;compact&quot; ? 20 : 10;&#10;  const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes&#10;  const MAX_RETRY_ATTEMPTS = 3;&#10;  const RETRY_DELAY = 1000; // 1 second&#10;&#10;  // Enhanced notification system&#10;  const addNotification = useCallback((message, type = &quot;info&quot;) =&gt; {&#10;    const id = Date.now() + Math.random();&#10;    const notification = { id, message, type, timestamp: new Date() };&#10;&#10;    setNotifications((prev) =&gt; [notification, ...prev.slice(0, 4)]);&#10;&#10;    setTimeout(() =&gt; {&#10;      setNotifications((prev) =&gt; prev.filter((n) =&gt; n.id !== id));&#10;    }, 5000);&#10;  }, []);&#10;&#10;  // Optimized debounced search&#10;  const debouncedSearch = useMemo(&#10;    () =&gt;&#10;      debounce((searchValue) =&gt; {&#10;        setSearchTerm(searchValue);&#10;      }, 300),&#10;    [],&#10;  );&#10;&#10;  // Optimized cache management&#10;  const getCacheKey = useCallback((userId, userEmail) =&gt; {&#10;    return `farmer-orders-${userId || userEmail}`;&#10;  }, []);&#10;&#10;  const getCachedData = useCallback(&#10;    (cacheKey) =&gt; {&#10;      const cached = cacheRef.current.get(cacheKey);&#10;      if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_DURATION) {&#10;        return cached.data;&#10;      }&#10;      return null;&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  const setCachedData = useCallback(&#10;    (cacheKey, data) =&gt; {&#10;      cacheRef.current.set(cacheKey, {&#10;        data,&#10;        timestamp: Date.now(),&#10;      });&#10;      // Clean up old cache entries&#10;      for (const [key, value] of cacheRef.current.entries()) {&#10;        if (Date.now() - value.timestamp &gt; CACHE_DURATION) {&#10;          cacheRef.current.delete(key);&#10;        }&#10;      }&#10;    },&#10;    [CACHE_DURATION],&#10;  );&#10;&#10;  // Enhanced file download with better error handling&#10;  const downloadFile = useCallback(&#10;    (content, filename, mimeType) =&gt; {&#10;      try {&#10;        const blob = new Blob([content], { type: mimeType });&#10;        const url = URL.createObjectURL(blob);&#10;        const link = document.createElement(&quot;a&quot;);&#10;        link.href = url;&#10;        link.download = filename;&#10;        link.style.display = &quot;none&quot;;&#10;        document.body.appendChild(link);&#10;        link.click();&#10;        document.body.removeChild(link);&#10;        URL.revokeObjectURL(url);&#10;      } catch (error) {&#10;        console.error(&quot;Download error:&quot;, error);&#10;        addNotification(&quot;Failed to download file&quot;, &quot;error&quot;);&#10;      }&#10;    },&#10;    [addNotification],&#10;  );&#10;&#10;  // Enhanced CSV conversion with better data handling&#10;  const convertToCSV = useCallback((data) =&gt; {&#10;    const headers = [&#10;      &quot;Order ID&quot;,&#10;      &quot;Customer Name&quot;,&#10;      &quot;Customer Email&quot;,&#10;      &quot;Status&quot;,&#10;      &quot;Total Amount&quot;,&#10;      &quot;Order Date&quot;,&#10;      &quot;Items Count&quot;,&#10;      &quot;Payment Method&quot;,&#10;      &quot;Delivery Address&quot;,&#10;    ];&#10;&#10;    const csvData = data.map((order) =&gt; [&#10;      order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;,&#10;      (order.customerName || order.userName || &quot;&quot;).replace(/,/g, &quot;;&quot;),&#10;      order.customerEmail || order.userEmail || &quot;&quot;,&#10;      order.status || &quot;pending&quot;,&#10;      order.farmerSubtotal || order.total || 0,&#10;      new Date(order.createdAt).toLocaleDateString(),&#10;      order.items?.length || 0,&#10;      (order.paymentMethod || &quot;Cash on Delivery&quot;).replace(/,/g, &quot;;&quot;),&#10;      typeof order.deliveryAddress === &quot;object&quot;&#10;        ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`.replace(&#10;            /,/g,&#10;            &quot;;&quot;,&#10;          )&#10;        : (order.deliveryAddress || &quot;Not provided&quot;).replace(/,/g, &quot;;&quot;),&#10;    ]);&#10;&#10;    return [headers, ...csvData]&#10;      .map((row) =&gt; row.map((field) =&gt; `&quot;${field}&quot;`).join(&quot;,&quot;))&#10;      .join(&quot;\n&quot;);&#10;  }, []);&#10;&#10;  // Enhanced fetch function with retry logic&#10;  const fetchOrdersWithRetry = useCallback(&#10;    async (showLoading = true, retryAttempt = 0) =&gt; {&#10;      if (!session?.user || requestInProgress) return;&#10;&#10;      try {&#10;        if (showLoading) setLoading(true);&#10;        setRequestInProgress(true);&#10;&#10;        const userId =&#10;          session.user.userId || session.user.id || session.user._id;&#10;        const userEmail = session.user.email;&#10;        const cacheKey = getCacheKey(userId, userEmail);&#10;&#10;        // Check cache first&#10;        if (!showLoading &amp;&amp; retryAttempt === 0) {&#10;          const cachedData = getCachedData(cacheKey);&#10;          if (cachedData) {&#10;            setOrders(cachedData);&#10;            setRequestInProgress(false);&#10;            return;&#10;          }&#10;        }&#10;&#10;        // Cancel previous request&#10;        if (abortControllerRef.current) {&#10;          abortControllerRef.current.abort();&#10;        }&#10;        abortControllerRef.current = new AbortController();&#10;&#10;        const params = new URLSearchParams();&#10;        if (userId) params.append(&quot;farmerId&quot;, userId);&#10;        if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;        const response = await fetch(`/api/orders?${params.toString()}`, {&#10;          cache: &quot;no-store&quot;,&#10;          signal: abortControllerRef.current.signal,&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;          },&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const error = new Error(&#10;            `HTTP ${response.status}: ${response.statusText}`,&#10;          );&#10;          console.error(&quot;Response error:&quot;, error);&#10;          throw error;&#10;        }&#10;&#10;        const data = await response.json();&#10;        const ordersData = data.orders || [];&#10;&#10;        // Check for new orders for notifications (only if not initial load)&#10;        if (&#10;          !showLoading &amp;&amp;&#10;          orders.length &gt; 0 &amp;&amp;&#10;          ordersData.length &gt; orders.length&#10;        ) {&#10;          const newOrdersCount = ordersData.length - orders.length;&#10;          addNotification(&#10;            `${newOrdersCount} new order(s) received!`,&#10;            &quot;success&quot;,&#10;          );&#10;        }&#10;&#10;        setOrders(ordersData);&#10;        setCachedData(cacheKey, ordersData);&#10;      } catch (error) {&#10;        if (error.name === &quot;AbortError&quot;) {&#10;          return; // Request was cancelled, don't treat as error&#10;        }&#10;&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;&#10;        // Retry logic&#10;        if (retryAttempt &lt; MAX_RETRY_ATTEMPTS) {&#10;          addNotification(&#10;            `Retrying to fetch orders... (${retryAttempt + 1}/${MAX_RETRY_ATTEMPTS})`,&#10;            &quot;warning&quot;,&#10;          );&#10;&#10;          setTimeout(&#10;            () =&gt; {&#10;              fetchOrdersWithRetry(showLoading, retryAttempt + 1);&#10;            },&#10;            RETRY_DELAY * Math.pow(2, retryAttempt),&#10;          ); // Exponential backoff&#10;&#10;          return;&#10;        }&#10;&#10;        setOrders([]);&#10;        addNotification(&quot;Failed to fetch orders. Please try again.&quot;, &quot;error&quot;);&#10;      } finally {&#10;        if (showLoading) setLoading(false);&#10;        setRequestInProgress(false);&#10;      }&#10;    },&#10;    [&#10;      session,&#10;      orders.length,&#10;      getCacheKey,&#10;      getCachedData,&#10;      setCachedData,&#10;      requestInProgress,&#10;      addNotification,&#10;      MAX_RETRY_ATTEMPTS,&#10;      RETRY_DELAY,&#10;    ],&#10;  );&#10;&#10;  // Memoized filtered orders with performance optimization&#10;  const memoizedFilteredOrders = useMemo(() =&gt; {&#10;    let filtered = [...orders];&#10;&#10;    // Apply status filter&#10;    if (statusFilter !== &quot;All Orders&quot;) {&#10;      filtered = filtered.filter(&#10;        (order) =&gt; order.status?.toLowerCase() === statusFilter.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    // Apply search filter with improved regex&#10;    if (searchTerm.trim()) {&#10;      const searchRegex = new RegExp(&#10;        searchTerm.trim().replace(/[.*+?^${}()|[\]\\]/g, &quot;\\$&amp;&quot;),&#10;        &quot;i&quot;,&#10;      );&#10;      filtered = filtered.filter((order) =&gt; {&#10;        const orderItemsMatch = order.items?.some(&#10;          (item) =&gt;&#10;            searchRegex.test(item.name) ||&#10;            searchRegex.test(item.productName) ||&#10;            searchRegex.test(item.category),&#10;        );&#10;        const customerMatch =&#10;          searchRegex.test(order.customerName) ||&#10;          searchRegex.test(order.customerEmail) ||&#10;          searchRegex.test(order.userEmail);&#10;        const orderIdMatch = searchRegex.test(order._id);&#10;&#10;        return orderItemsMatch || customerMatch || orderIdMatch;&#10;      });&#10;    }&#10;&#10;    // Apply date range filter&#10;    if (dateRange.start) {&#10;      const startDate = new Date(dateRange.start);&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &gt;= startDate,&#10;      );&#10;    }&#10;    if (dateRange.end) {&#10;      const endDate = new Date(dateRange.end);&#10;      endDate.setHours(23, 59, 59, 999); // Include entire end date&#10;      filtered = filtered.filter(&#10;        (order) =&gt; new Date(order.createdAt) &lt;= endDate,&#10;      );&#10;    }&#10;&#10;    // Apply sorting with improved performance&#10;    filtered.sort((a, b) =&gt; {&#10;      switch (sortBy) {&#10;        case &quot;newest&quot;:&#10;          return new Date(b.createdAt) - new Date(a.createdAt);&#10;        case &quot;oldest&quot;:&#10;          return new Date(a.createdAt) - new Date(b.createdAt);&#10;        case &quot;highest-value&quot;:&#10;          return (&#10;            (b.farmerSubtotal || b.total || 0) -&#10;            (a.farmerSubtotal || a.total || 0)&#10;          );&#10;        case &quot;lowest-value&quot;:&#10;          return (&#10;            (a.farmerSubtotal || a.total || 0) -&#10;            (b.farmerSubtotal || b.total || 0)&#10;          );&#10;        case &quot;customer-name&quot;:&#10;          return (a.customerName || a.userName || &quot;&quot;).localeCompare(&#10;            b.customerName || b.userName || &quot;&quot;,&#10;          );&#10;        default:&#10;          return 0;&#10;      }&#10;    });&#10;&#10;    return filtered;&#10;  }, [orders, statusFilter, searchTerm, dateRange, sortBy]);&#10;&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    if (session?.user &amp;&amp; !requestInProgress) {&#10;      fetchOrdersWithRetry();&#10;    }&#10;  }, [session?.user]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Update filtered orders when memoized value changes&#10;  useEffect(() =&gt; {&#10;    setFilteredOrders(memoizedFilteredOrders);&#10;    setCurrentPage(1);&#10;  }, [memoizedFilteredOrders]);&#10;&#10;  // Auto-refresh functionality with better management&#10;  useEffect(() =&gt; {&#10;    if (autoRefresh &amp;&amp; !loading &amp;&amp; !requestInProgress) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        fetchOrdersWithRetry(false);&#10;      }, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;        intervalRef.current = null;&#10;      }&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh, loading, requestInProgress]); // Removed fetchOrdersWithRetry dependency&#10;&#10;  // Optimized bulk operations with better error handling&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      addNotification(&quot;Please select orders to update&quot;, &quot;warning&quot;);&#10;      return;&#10;    }&#10;&#10;    if (&#10;      !confirm(&#10;        `Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      // Process in batches for better performance&#10;      const batchSize = 5;&#10;      const batches = [];&#10;      for (let i = 0; i &lt; selectedOrders.length; i += batchSize) {&#10;        batches.push(selectedOrders.slice(i, i + batchSize));&#10;      }&#10;&#10;      let successCount = 0;&#10;      let errorCount = 0;&#10;&#10;      for (const batch of batches) {&#10;        const updatePromises = batch.map(async (orderId) =&gt; {&#10;          try {&#10;            const response = await fetch(`/api/orders/${orderId}`, {&#10;              method: &quot;PATCH&quot;,&#10;              headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;              },&#10;              body: JSON.stringify({&#10;                status: newStatus,&#10;                statusHistory: {&#10;                  status: newStatus,&#10;                  timestamp: new Date().toISOString(),&#10;                  updatedBy: session.user.email || session.user.name,&#10;                },&#10;              }),&#10;            });&#10;&#10;            if (!response.ok) {&#10;              const error = new Error(`Failed to update order ${orderId}`);&#10;              console.error(&quot;Bulk update error:&quot;, error);&#10;              throw error;&#10;            }&#10;&#10;            return { success: true, orderId };&#10;          } catch (error) {&#10;            console.error(`Error updating order ${orderId}:`, error);&#10;            return { success: false, orderId, error: error.message };&#10;          }&#10;        });&#10;&#10;        const results = await Promise.allSettled(updatePromises);&#10;&#10;        results.forEach((result) =&gt; {&#10;          if (result.status === &quot;fulfilled&quot; &amp;&amp; result.value.success) {&#10;            successCount++;&#10;          } else {&#10;            errorCount++;&#10;          }&#10;        });&#10;      }&#10;&#10;      if (successCount &gt; 0) {&#10;        // Update local state optimistically&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            selectedOrders.includes(order._id)&#10;              ? { ...order, status: newStatus }&#10;              : order,&#10;          ),&#10;        );&#10;        setSelectedOrders([]);&#10;&#10;        // Clear cache to force refresh&#10;        cacheRef.current.clear();&#10;      }&#10;&#10;      if (errorCount === 0) {&#10;        addNotification(&#10;          `${successCount} orders updated successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } else {&#10;        addNotification(&#10;          `${successCount} orders updated, ${errorCount} failed`,&#10;          &quot;warning&quot;,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      addNotification(&quot;Failed to update orders&quot;, &quot;error&quot;);&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;&#10;  // Enhanced single order status update&#10;  const handleUpdateOrderStatus = async (orderId, newStatus) =&gt; {&#10;    const statusMessages = {&#10;      confirmed:&#10;        &quot;confirm this order? This will notify the customer that their order has been accepted.&quot;,&#10;      shipped:&#10;        &quot;mark this order as shipped? This will notify the customer that their order is on the way.&quot;,&#10;      delivered:&#10;        &quot;mark this order as delivered? This will complete the order and notify the customer.&quot;,&#10;      cancelled:&#10;        &quot;cancel this order? This action cannot be undone and will notify the customer.&quot;,&#10;    };&#10;&#10;    const confirmMessage =&#10;      statusMessages[newStatus] || `mark this order as ${newStatus}?`;&#10;&#10;    if (!confirm(`Are you sure you want to ${confirmMessage}`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      setRequestInProgress(true);&#10;&#10;      const updateData = {&#10;        status: newStatus,&#10;        statusHistory: {&#10;          status: newStatus,&#10;          timestamp: new Date().toISOString(),&#10;          updatedBy: session.user.email || session.user.name,&#10;        },&#10;      };&#10;&#10;      // Add estimated delivery date for shipped status&#10;      if (newStatus === &quot;shipped&quot;) {&#10;        const estimatedDelivery = new Date();&#10;        estimatedDelivery.setDate(estimatedDelivery.getDate() + 3);&#10;        updateData.estimatedDeliveryDate = estimatedDelivery.toISOString();&#10;      }&#10;&#10;      const response = await fetch(`/api/orders/${orderId}`, {&#10;        method: &quot;PATCH&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;          &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,&#10;        },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json().catch(() =&gt; ({}));&#10;        const error = new Error(&#10;          errorData.error || `HTTP ${response.status}: ${response.statusText}`,&#10;        );&#10;        console.error(&quot;Order update error:&quot;, error);&#10;        throw error;&#10;      }&#10;&#10;      // Optimistic update&#10;      setOrders((prev) =&gt;&#10;        prev.map((order) =&gt;&#10;          order._id === orderId&#10;            ? {&#10;                ...order,&#10;                status: newStatus,&#10;                estimatedDeliveryDate:&#10;                  updateData.estimatedDeliveryDate ||&#10;                  order.estimatedDeliveryDate,&#10;                statusHistory: [&#10;                  ...(Array.isArray(order.statusHistory)&#10;                    ? order.statusHistory&#10;                    : []),&#10;                  updateData.statusHistory,&#10;                ],&#10;              }&#10;            : order,&#10;        ),&#10;      );&#10;&#10;      // Clear cache&#10;      cacheRef.current.clear();&#10;&#10;      const successMessages = {&#10;        confirmed: &quot;Order confirmed! Customer has been notified.&quot;,&#10;        shipped:&#10;          &quot;Order marked as shipped! Customer has been notified with tracking information.&quot;,&#10;        delivered:&#10;          &quot;Order completed! Customer has been notified of successful delivery.&quot;,&#10;        cancelled: &quot;Order cancelled. Customer has been notified.&quot;,&#10;      };&#10;&#10;      addNotification(&#10;        successMessages[newStatus] ||&#10;          `Order status updated to ${newStatus} successfully!`,&#10;        &quot;success&quot;,&#10;      );&#10;    } catch (error) {&#10;      console.error(&quot;Error updating order status:&quot;, error);&#10;      addNotification(&#10;        `Failed to update order status: ${error.message}`,&#10;        &quot;error&quot;,&#10;      );&#10;    } finally {&#10;      setRequestInProgress(false);&#10;    }&#10;  };&#10;&#10;  // Enhanced refresh with better UX&#10;  const handleRefresh = async () =&gt; {&#10;    setRefreshing(true);&#10;    cacheRef.current.clear(); // Clear cache to force fresh data&#10;    await fetchOrdersWithRetry(false);&#10;    setRefreshing(false);&#10;    addNotification(&quot;Orders refreshed successfully!&quot;, &quot;success&quot;);&#10;  };&#10;&#10;  // Optimized search handler&#10;  const handleSearchChange = (e) =&gt; {&#10;    const value = e.target.value;&#10;    debouncedSearch(value);&#10;  };&#10;&#10;  // Enhanced status filter handler&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  // Optimized export functionality with better performance&#10;  const exportOrders = useCallback(&#10;    (format) =&gt; {&#10;      const dataToExport =&#10;        selectedOrders.length &gt; 0&#10;          ? filteredOrders.filter((order) =&gt; selectedOrders.includes(order._id))&#10;          : filteredOrders;&#10;&#10;      try {&#10;        if (format === &quot;csv&quot;) {&#10;          const csv = convertToCSV(dataToExport);&#10;          downloadFile(&#10;            csv,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.csv`,&#10;            &quot;text/csv&quot;,&#10;          );&#10;        } else if (format === &quot;json&quot;) {&#10;          const json = JSON.stringify(dataToExport, null, 2);&#10;          downloadFile(&#10;            json,&#10;            `farmer-orders-${new Date().toISOString().split(&quot;T&quot;)[0]}.json`,&#10;            &quot;application/json&quot;,&#10;          );&#10;        }&#10;&#10;        addNotification(&#10;          `${dataToExport.length} orders exported successfully!`,&#10;          &quot;success&quot;,&#10;        );&#10;      } catch (error) {&#10;        console.error(&quot;Export error:&quot;, error);&#10;        addNotification(&quot;Failed to export orders&quot;, &quot;error&quot;);&#10;      } finally {&#10;        setShowExportModal(false);&#10;      }&#10;    },&#10;    [&#10;      filteredOrders,&#10;      selectedOrders,&#10;      convertToCSV,&#10;      downloadFile,&#10;      addNotification,&#10;    ],&#10;  );&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status) =&gt; {&#10;    const statusConfig = {&#10;      pending: {&#10;        bg: &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;      },&#10;      confirmed: {&#10;        bg: &quot;bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;,&#10;        icon: &quot;fas fa-check&quot;,&#10;      },&#10;      shipped: {&#10;        bg: &quot;bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;,&#10;        icon: &quot;fas fa-truck&quot;,&#10;      },&#10;      delivered: {&#10;        bg: &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;        icon: &quot;fas fa-check-circle&quot;,&#10;      },&#10;      cancelled: {&#10;        bg: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;      },&#10;    };&#10;&#10;    const config = statusConfig[status?.toLowerCase()] || statusConfig.pending;&#10;&#10;    return (&#10;      &lt;span&#10;        className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.bg}`}&#10;      &gt;&#10;        &lt;i className={`${config.icon} mr-1`}&gt;&lt;/i&gt;&#10;        {status?.charAt(0).toUpperCase() + status?.slice(1) || &quot;Pending&quot;}&#10;      &lt;/span&gt;&#10;    );&#10;  };&#10;&#10;  const getOrderActions = (order) =&gt; {&#10;    const actions = [];&#10;&#10;    switch (order.status.toLowerCase()) {&#10;      case &quot;pending&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;confirm&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;confirmed&quot;)}&#10;            className=&quot;bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;            Confirm Order&#10;          &lt;/button&gt;,&#10;        );&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;cancel&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;cancelled&quot;)}&#10;            className=&quot;bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;            Cancel Order&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;confirmed&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;ship&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;shipped&quot;)}&#10;            className=&quot;bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Shipped&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;shipped&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;deliver&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;delivered&quot;)}&#10;            className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Delivered&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;    }&#10;&#10;    return actions;&#10;  };&#10;&#10;  // Pagination&#10;  const indexOfLastOrder = currentPage * ordersPerPage;&#10;  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;&#10;  const currentOrders = filteredOrders.slice(&#10;    indexOfFirstOrder,&#10;    indexOfLastOrder,&#10;  );&#10;  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);&#10;&#10;  const getOrderSummary = () =&gt; {&#10;    const summary = {&#10;      total: orders.length,&#10;      pending: orders.filter((o) =&gt; o.status === &quot;pending&quot;).length,&#10;      confirmed: orders.filter((o) =&gt; o.status === &quot;confirmed&quot;).length,&#10;      shipped: orders.filter((o) =&gt; o.status === &quot;shipped&quot;).length,&#10;      delivered: orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length,&#10;      cancelled: orders.filter((o) =&gt; o.status === &quot;cancelled&quot;).length,&#10;    };&#10;    return summary;&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;            Loading your enhanced orders dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const orderSummary = getOrderSummary();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Notification System */}&#10;      &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-2&quot;&gt;&#10;        {notifications.map((notification) =&gt; (&#10;          &lt;div&#10;            key={notification.id}&#10;            className={`px-6 py-4 rounded-lg shadow-lg text-white transform transition-all duration-500 ${&#10;              notification.type === &quot;success&quot;&#10;                ? &quot;bg-green-600&quot;&#10;                : notification.type === &quot;error&quot;&#10;                  ? &quot;bg-red-600&quot;&#10;                  : notification.type === &quot;warning&quot;&#10;                    ? &quot;bg-yellow-600&quot;&#10;                    : &quot;bg-blue-600&quot;&#10;            }`}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i&#10;                className={`fas ${&#10;                  notification.type === &quot;success&quot;&#10;                    ? &quot;fa-check-circle&quot;&#10;                    : notification.type === &quot;error&quot;&#10;                      ? &quot;fa-exclamation-circle&quot;&#10;                      : notification.type === &quot;warning&quot;&#10;                        ? &quot;fa-exclamation-triangle&quot;&#10;                        : &quot;fa-info-circle&quot;&#10;                } mr-2`}&#10;              &gt;&lt;/i&gt;&#10;              {notification.message}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Export Modal */}&#10;      {showExportModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md w-full mx-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Export Orders&#10;            &lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;              {selectedOrders.length &gt; 0&#10;                ? `Export ${selectedOrders.length} selected orders`&#10;                : `Export all ${filteredOrders.length} filtered orders`}&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;csv&quot;)}&#10;                className=&quot;flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-csv mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as CSV&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders(&quot;json&quot;)}&#10;                className=&quot;flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-code mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as JSON&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowExportModal(false)}&#10;              className=&quot;w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg font-medium transition&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        {/* Enhanced Breadcrumb with Real-time Indicators */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-cog mr-1&quot;&gt;&lt;/i&gt;Manage&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-gray-900 dark:text-white font-medium&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-1&quot;&gt;&lt;/i&gt;Advanced Order&#10;                  Management&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Real-time Status Indicator */}&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div&#10;                className={`w-3 h-3 rounded-full ${autoRefresh ? &quot;bg-green-500 animate-pulse&quot; : &quot;bg-gray-400&quot;}`}&#10;              &gt;&lt;/div&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                {autoRefresh ? &quot;Live&quot; : &quot;Static&quot;}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Page Header with Quick Actions */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-blue-600 p-4 rounded-2xl&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Advanced Order Management&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                  Comprehensive order tracking and analytics dashboard&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4 mt-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                    Last updated: {new Date().toLocaleTimeString()}&#10;                  &lt;/span&gt;&#10;                  {autoRefresh &amp;&amp; (&#10;                    &lt;span className=&quot;bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                      Auto-refresh enabled&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6 lg:mt-0 flex flex-wrap gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setAutoRefresh(!autoRefresh)}&#10;                className={`inline-flex items-center px-4 py-3 rounded-lg font-medium transition ${&#10;                  autoRefresh&#10;                    ? &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                    : &quot;bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas ${autoRefresh ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                &gt;&lt;/i&gt;&#10;                {autoRefresh ? &quot;Pause&quot; : &quot;Auto&quot;} Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; setShowExportModal(true)}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;                Export&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={handleRefresh}&#10;                disabled={refreshing}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;animate-spin&quot; : &quot;&quot;}`}&#10;                &gt;&lt;/i&gt;&#10;                Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;inline-flex items-center px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Back to Manage&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Order Summary Cards with Animations */}&#10;          &lt;div className=&quot;grid grid-cols-2 md:grid-cols-6 gap-4 mb-8&quot;&gt;&#10;            {Object.entries(orderSummary).map(([key, value], index) =&gt; {&#10;              const config = {&#10;                total: {&#10;                  icon: &quot;fa-shopping-cart&quot;,&#10;                  color: &quot;gray&quot;,&#10;                  label: &quot;Total&quot;,&#10;                },&#10;                pending: {&#10;                  icon: &quot;fa-clock&quot;,&#10;                  color: &quot;yellow&quot;,&#10;                  label: &quot;Pending&quot;,&#10;                },&#10;                confirmed: {&#10;                  icon: &quot;fa-check&quot;,&#10;                  color: &quot;blue&quot;,&#10;                  label: &quot;Confirmed&quot;,&#10;                },&#10;                shipped: {&#10;                  icon: &quot;fa-truck&quot;,&#10;                  color: &quot;purple&quot;,&#10;                  label: &quot;Shipped&quot;,&#10;                },&#10;                delivered: {&#10;                  icon: &quot;fa-check-circle&quot;,&#10;                  color: &quot;green&quot;,&#10;                  label: &quot;Delivered&quot;,&#10;                },&#10;                cancelled: {&#10;                  icon: &quot;fa-times-circle&quot;,&#10;                  color: &quot;red&quot;,&#10;                  label: &quot;Cancelled&quot;,&#10;                },&#10;              }[key];&#10;&#10;              return (&#10;                &lt;div&#10;                  key={key}&#10;                  className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 transform hover:scale-105 transition-transform duration-200 cursor-pointer&quot;&#10;                  onClick={() =&gt;&#10;                    setStatusFilter(&#10;                      key === &quot;total&quot;&#10;                        ? &quot;All Orders&quot;&#10;                        : config.label.toLowerCase(),&#10;                    )&#10;                  }&#10;                  style={{ animationDelay: `${index * 100}ms` }}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div&#10;                      className={`p-2 bg-${config.color}-100 dark:bg-${config.color}-900 rounded-lg`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${config.icon} text-${config.color}-600 dark:text-${config.color}-300`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;ml-3&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {config.label}&#10;                      &lt;/p&gt;&#10;                      &lt;p&#10;                        className={`text-2xl font-bold text-${config.color}-600 dark:text-${config.color}-400`}&#10;                      &gt;&#10;                        {value}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Filters and Controls */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6&quot;&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4 lg:mb-0&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Advanced Filters &amp; Controls&#10;              &lt;/h3&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex space-x-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#10;                {[&quot;detailed&quot;, &quot;compact&quot;].map((mode) =&gt; (&#10;                  &lt;button&#10;                    key={mode}&#10;                    onClick={() =&gt; setViewMode(mode)}&#10;                    className={`px-4 py-2 rounded-md text-sm font-medium transition ${&#10;                      viewMode === mode&#10;                        ? &quot;bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow&quot;&#10;                        : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white&quot;&#10;                    }`}&#10;                  &gt;&#10;                    &lt;i&#10;                      className={`fas ${&#10;                        mode === &quot;detailed&quot;&#10;                          ? &quot;fa-list&quot;&#10;                          : mode === &quot;compact&quot;&#10;                            ? &quot;fa-th-list&quot;&#10;                            : &quot;&quot;&#10;                      } mr-1`}&#10;                    &gt;&lt;/i&gt;&#10;                    {mode.charAt(0).toUpperCase() + mode.slice(1)}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4&quot;&gt;&#10;              {/* Search */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Search Orders&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search by customer, email, or ID...&quot;&#10;                    value={searchTerm}&#10;                    onChange={handleSearchChange}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                  &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Status Filter */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Status Filter&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={statusFilter}&#10;                  onChange={handleStatusChange}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;All Orders&quot;&gt;All Orders&lt;/option&gt;&#10;                  &lt;option value=&quot;pending&quot;&gt;Pending&lt;/option&gt;&#10;                  &lt;option value=&quot;confirmed&quot;&gt;Confirmed&lt;/option&gt;&#10;                  &lt;option value=&quot;shipped&quot;&gt;Shipped&lt;/option&gt;&#10;                  &lt;option value=&quot;delivered&quot;&gt;Delivered&lt;/option&gt;&#10;                  &lt;option value=&quot;cancelled&quot;&gt;Cancelled&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Sort By */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Sort By&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={sortBy}&#10;                  onChange={(e) =&gt; setSortBy(e.target.value)}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                  &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                  &lt;option value=&quot;highest-value&quot;&gt;Highest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;lowest-value&quot;&gt;Lowest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;customer-name&quot;&gt;Customer Name&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Date Range */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date From&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.start}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, start: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date To&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.end}&#10;                  onChange={(e) =&gt;&#10;                    setDateRange((prev) =&gt; ({ ...prev, end: e.target.value }))&#10;                  }&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Clear Filters */}&#10;              &lt;div className=&quot;flex items-end&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Bulk Operations */}&#10;            {selectedOrders.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center&quot;&gt;&#10;                  &lt;div className=&quot;mb-3 sm:mb-0&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                      {selectedOrders.length} order(s) selected&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                      Choose a bulk action to apply to selected orders&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;confirmed&quot;)}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Confirm All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate(&quot;shipped&quot;)}&#10;                      className=&quot;bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;                      Ship All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setSelectedOrders([])}&#10;                      className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                      Clear Selection&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Orders List - Enhanced with different view modes */}&#10;          {currentOrders.length === 0 ? (&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-12 text-center&quot;&gt;&#10;              &lt;div className=&quot;max-w-md mx-auto&quot;&gt;&#10;                &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                  No orders found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                  {statusFilter === &quot;All Orders&quot;&#10;                    ? &quot;You haven't received any orders yet, or no orders match your current filters.&quot;&#10;                    : `No ${statusFilter.toLowerCase()} orders found matching your criteria.`}&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: &quot;&quot;, end: &quot;&quot; });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  Clear All Filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className={`space-y-${viewMode === &quot;compact&quot; ? &quot;3&quot; : &quot;6&quot;}`}&gt;&#10;              {/* Select All Checkbox */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;label className=&quot;flex items-center&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={selectedOrders.length === currentOrders.length}&#10;                    onChange={(e) =&gt; {&#10;                      if (e.target.checked) {&#10;                        setSelectedOrders(&#10;                          currentOrders.map((order) =&gt; order._id),&#10;                        );&#10;                      } else {&#10;                        setSelectedOrders([]);&#10;                      }&#10;                    }}&#10;                    className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                  /&gt;&#10;                  &lt;span className=&quot;ml-2 text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Select all visible orders ({currentOrders.length})&#10;                  &lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders */}&#10;              {currentOrders.map((order) =&gt; (&#10;                &lt;div&#10;                  key={order._id}&#10;                  className={`bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden transform hover:scale-[1.01] transition-all duration-200 ${&#10;                    selectedOrders.includes(order._id)&#10;                      ? &quot;ring-2 ring-green-500&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div className={`p-${viewMode === &quot;compact&quot; ? &quot;4&quot; : &quot;6&quot;}`}&gt;&#10;                    {/* Order Header with Checkbox */}&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedOrders.includes(order._id)}&#10;                          onChange={(e) =&gt; {&#10;                            if (e.target.checked) {&#10;                              setSelectedOrders((prev) =&gt; [...prev, order._id]);&#10;                            } else {&#10;                              setSelectedOrders((prev) =&gt;&#10;                                prev.filter((id) =&gt; id !== order._id),&#10;                              );&#10;                            }&#10;                          }}&#10;                          className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                        /&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3&#10;                            className={`${viewMode === &quot;compact&quot; ? &quot;text-base&quot; : &quot;text-lg&quot;} font-semibold text-gray-900 dark:text-white`}&#10;                          &gt;&#10;                            Order #&#10;                            {order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;}&#10;                          &lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Placed on {formatDate(order.createdAt)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        {getStatusBadge(order.status)}&#10;                        &lt;span className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice(&#10;                            order.farmerSubtotal || order.total || 0,&#10;                          )}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Information */}&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Customer Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Name:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerName || order.userName || &quot;Customer&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Email:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerEmail ||&#10;                              order.userEmail ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Phone:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerPhone ||&#10;                              order.userPhone ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Delivery Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Address:&lt;/span&gt;{&quot; &quot;}&#10;                            {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress&#10;                              ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`&#10;                                  .replace(/^,\s*/, &quot;&quot;)&#10;                                  .replace(/,\s*$/, &quot;&quot;) || &quot;Not provided&quot;&#10;                              : order.deliveryAddress || &quot;Not provided&quot;}&#10;                          &lt;/p&gt;&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.name &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Recipient:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.name}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.phone &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Contact:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.phone}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.instructions &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  Instructions:&#10;                                &lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.instructions}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Payment Method:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.paymentMethod || &quot;Cash on Delivery&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Order Items */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-6 mb-6&quot;&gt;&#10;                      &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                        Order Items ({order.items?.length || 0})&#10;                      &lt;/h4&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {order.items?.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;flex items-center justify-between py-3 px-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                              &lt;img&#10;                                src={&#10;                                  item.image ||&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                                }&#10;                                alt={item.name || item.productName}&#10;                                className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                              /&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.name || item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Quantity: {item.quantity} {item.unit || &quot;kg&quot;}&#10;                                &lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Unit Price: {formatPrice(item.price)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                              &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                {formatPrice(item.price * item.quantity)}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Action Buttons */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4&quot;&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                        {getOrderActions(order)}&#10;                        &lt;Link&#10;                          href={`/farmer-orders/${order._id}`}&#10;                          className=&quot;bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                          View Details&#10;                        &lt;/Link&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pagination */}&#10;          {totalPages &gt; 1 &amp;&amp; (&#10;            &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#10;              &lt;nav aria-label=&quot;Pagination&quot;&gt;&#10;                &lt;ul className=&quot;inline-flex items-center -space-x-px text-gray-600 dark:text-gray-300&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                      }&#10;                      disabled={currentPage === 1}&#10;                      className=&quot;block px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                  {[...Array(totalPages)].map((_, index) =&gt; (&#10;                    &lt;li key={index}&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(index + 1)}&#10;                        className={`px-3 py-2 leading-tight border ${&#10;                          currentPage === index + 1&#10;                            ? &quot;text-white bg-green-600 border-green-600 hover:bg-green-700&quot;&#10;                            : &quot;text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {index + 1}&#10;                      &lt;/button&gt;&#10;                    &lt;/li&gt;&#10;                  ))}&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.min(prev + 1, totalPages))&#10;                      }&#10;                      disabled={currentPage === totalPages}&#10;                      className=&quot;block px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ul&gt;&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/manage/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/manage/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { apiService } from &quot;@/lib/api-service&quot;;&#10;&#10;// Component imports&#10;import DashboardHeader from &quot;@/components/dashboard/DashboardHeader&quot;;&#10;import NavigationTabs from &quot;@/components/dashboard/NavigationTabs&quot;;&#10;import DashboardTab from &quot;@/components/dashboard/tabs/DashboardTab&quot;;&#10;import ProductsTab from &quot;@/components/dashboard/tabs/ProductsTab&quot;;&#10;import OrdersTab from &quot;@/components/dashboard/tabs/OrdersTab&quot;;&#10;import AnalyticsTab from &quot;@/components/dashboard/tabs/AnalyticsTab&quot;;&#10;import SettingsTab from &quot;@/components/dashboard/tabs/SettingsTab&quot;;&#10;&#10;// Constants&#10;const TABS = {&#10;  DASHBOARD: &quot;dashboard&quot;,&#10;  PRODUCTS: &quot;products&quot;,&#10;  ORDERS: &quot;orders&quot;,&#10;  ANALYTICS: &quot;analytics&quot;,&#10;  SETTINGS: &quot;settings&quot;,&#10;};&#10;&#10;const PRODUCT_STATUS = {&#10;  ACTIVE: &quot;active&quot;,&#10;  INACTIVE: &quot;inactive&quot;,&#10;  OUT_OF_STOCK: &quot;out-of-stock&quot;,&#10;  LOW_STOCK: &quot;low-stock&quot;,&#10;};&#10;&#10;const ORDER_STATUS = {&#10;  PENDING: &quot;pending&quot;,&#10;  CONFIRMED: &quot;confirmed&quot;,&#10;  DELIVERED: &quot;delivered&quot;,&#10;  CANCELLED: &quot;cancelled&quot;,&#10;  RETURNED: &quot;returned&quot;,&#10;};&#10;&#10;const DEFAULT_PAGINATION = {&#10;  page: 1,&#10;  limit: 12,&#10;};&#10;&#10;export default function FarmerDashboard() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Core state&#10;  const [products, setProducts] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [analytics, setAnalytics] = useState({});&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;&#10;  // UI state&#10;  const [activeTab, setActiveTab] = useState(TABS.DASHBOARD);&#10;  const [refreshing, setRefreshing] = useState(false);&#10;  const [actionLoading, setActionLoading] = useState({});&#10;&#10;  // Filter and search state&#10;  const [filters, setFilters] = useState({&#10;    search: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    sort: &quot;&quot;,&#10;  });&#10;&#10;  // Pagination state&#10;  const [pagination, setPagination] = useState(DEFAULT_PAGINATION);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;);&#10;&#10;  // User identification helper&#10;  const getUserIdentifiers = useCallback(() =&gt; {&#10;    if (!session?.user) return {};&#10;&#10;    const user = session.user;&#10;    return {&#10;      userId: user.userId || user.id || user._id,&#10;      userEmail: user.email,&#10;    };&#10;  }, [session?.user]);&#10;&#10;  // Fetch products with caching&#10;  const fetchProducts = useCallback(&#10;    async (forceRefresh = false) =&gt; {&#10;      if (!session?.user) return;&#10;&#10;      try {&#10;        const { userId, userEmail } = getUserIdentifiers();&#10;&#10;        if (!userId &amp;&amp; !userEmail) {&#10;          throw new Error(&quot;No user identification found&quot;);&#10;        }&#10;&#10;        // Use cached API service&#10;        const data = await apiService.getProducts(&#10;          {&#10;            limit: 1000,&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;          },&#10;          { forceRefresh },&#10;        );&#10;&#10;        const products = data.products || [];&#10;&#10;        // Filter farmer's products on client side as fallback&#10;        const farmerProducts = products.filter((product) =&gt; {&#10;          return (&#10;            product.farmerId === userId ||&#10;            product.farmerId === String(userId) ||&#10;            product.farmerEmail === userEmail ||&#10;            product.farmer?.email === userEmail ||&#10;            product.farmer?.id === userId&#10;          );&#10;        });&#10;&#10;        setProducts(farmerProducts);&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching products:&quot;, error);&#10;        setError(&quot;Failed to load products. Please try again.&quot;);&#10;      }&#10;    },&#10;    [session?.user, getUserIdentifiers],&#10;  );&#10;&#10;  // Fetch orders with caching&#10;  const fetchOrders = useCallback(&#10;    async (forceRefresh = false) =&gt; {&#10;      if (!session?.user) return;&#10;&#10;      try {&#10;        const { userId, userEmail } = getUserIdentifiers();&#10;&#10;        const params = {&#10;          farmerId: userId,&#10;          farmerEmail: userEmail,&#10;          limit: 1000,&#10;        };&#10;&#10;        // Use cached API service for orders&#10;        const data = await apiService.getOrders(params, { forceRefresh });&#10;        setOrders(data.orders || []);&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;        setError(&quot;Failed to load orders. Please try again.&quot;);&#10;      }&#10;    },&#10;    [session?.user, getUserIdentifiers],&#10;  );&#10;&#10;  // Initialize dashboard data with caching&#10;  const initializeDashboard = useCallback(&#10;    async (forceRefresh = false) =&gt; {&#10;      if (!session?.user) return;&#10;&#10;      // Only show loading for initial load or force refresh&#10;      if (forceRefresh || products.length === 0) {&#10;        setLoading(true);&#10;      }&#10;      setError(null);&#10;&#10;      try {&#10;        await Promise.all([&#10;          fetchProducts(forceRefresh),&#10;          fetchOrders(forceRefresh),&#10;        ]);&#10;      } catch (err) {&#10;        console.error(&quot;Dashboard initialization error:&quot;, err);&#10;        setError(&#10;          &quot;Failed to load dashboard data. Please try refreshing the page.&quot;,&#10;        );&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    },&#10;    [fetchProducts, fetchOrders, products.length, session?.user],&#10;  );&#10;&#10;  // Authentication and authorization&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;loading&quot;) return;&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      if (userType !== &quot;farmer&quot;) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;      initializeDashboard();&#10;    }&#10;  }, [session, status, router, initializeDashboard]);&#10;&#10;  // Handle tab changes without refetching data&#10;  const handleTabChange = useCallback((newTab) =&gt; {&#10;    setActiveTab(newTab);&#10;    // Data is already cached, no need to refetch&#10;  }, []);&#10;&#10;  // Refresh data manually&#10;  const handleRefresh = useCallback(async () =&gt; {&#10;    setRefreshing(true);&#10;    await initializeDashboard(true); // Force refresh&#10;    setRefreshing(false);&#10;  }, [initializeDashboard]);&#10;&#10;  // Calculate analytics with memoization&#10;  const calculatedAnalytics = useMemo(() =&gt; {&#10;    try {&#10;      // Filter valid orders (exclude cancelled/returned for revenue)&#10;      const validOrders = orders.filter(&#10;        (order) =&gt;&#10;          order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;          order.status !== ORDER_STATUS.RETURNED,&#10;      );&#10;&#10;      const totalProducts = products.length;&#10;      const activeProducts = products.filter(&#10;        (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== PRODUCT_STATUS.INACTIVE,&#10;      ).length;&#10;&#10;      const totalOrders = orders.length;&#10;      const pendingOrders = orders.filter(&#10;        (o) =&gt; o.status === ORDER_STATUS.PENDING,&#10;      ).length;&#10;&#10;      // Calculate revenue from valid orders only&#10;      const totalRevenue = validOrders.reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;      // This month's orders (valid only)&#10;      const now = new Date();&#10;      const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt);&#10;        return (&#10;          orderDate.getMonth() === now.getMonth() &amp;&amp;&#10;          orderDate.getFullYear() === now.getFullYear()&#10;        );&#10;      });&#10;&#10;      const averageOrderValue =&#10;        validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;      return {&#10;        totalProducts,&#10;        activeProducts,&#10;        totalOrders,&#10;        pendingOrders,&#10;        totalRevenue,&#10;        thisMonthOrders: thisMonthValidOrders.length,&#10;        averageOrderValue,&#10;        lowStockProducts: products.filter((p) =&gt; p.stock &lt;= 10).length,&#10;        recentOrders: orders.slice(0, 5),&#10;      };&#10;    } catch (error) {&#10;      console.error(&quot;Error calculating analytics:&quot;, error);&#10;      return {&#10;        totalProducts: 0,&#10;        activeProducts: 0,&#10;        totalOrders: 0,&#10;        pendingOrders: 0,&#10;        totalRevenue: 0,&#10;        thisMonthOrders: 0,&#10;        averageOrderValue: 0,&#10;        lowStockProducts: 0,&#10;        recentOrders: [],&#10;      };&#10;    }&#10;  }, [products, orders]);&#10;&#10;  // Update analytics when calculated values change&#10;  useEffect(() =&gt; {&#10;    setAnalytics(calculatedAnalytics);&#10;  }, [calculatedAnalytics]);&#10;&#10;  // Filter and sort products with better performance&#10;  const filteredAndSortedProducts = useMemo(() =&gt; {&#10;    try {&#10;      let filtered = [...products];&#10;&#10;      // Apply search filter&#10;      if (filters.search) {&#10;        const searchRegex = new RegExp(filters.search.trim(), &quot;i&quot;);&#10;        filtered = filtered.filter(&#10;          (product) =&gt;&#10;            searchRegex.test(product.name) ||&#10;            searchRegex.test(product.description || &quot;&quot;) ||&#10;            searchRegex.test(product.category || &quot;&quot;),&#10;        );&#10;      }&#10;&#10;      // Apply category filter&#10;      if (filters.category) {&#10;        filtered = filtered.filter(&#10;          (product) =&gt;&#10;            product.category?.toLowerCase() === filters.category.toLowerCase(),&#10;        );&#10;      }&#10;&#10;      // Apply status filter&#10;      if (filters.status) {&#10;        switch (filters.status) {&#10;          case PRODUCT_STATUS.ACTIVE:&#10;            filtered = filtered.filter(&#10;              (product) =&gt;&#10;                product.stock &gt; 0 &amp;&amp; product.status !== PRODUCT_STATUS.INACTIVE,&#10;            );&#10;            break;&#10;          case PRODUCT_STATUS.INACTIVE:&#10;            filtered = filtered.filter(&#10;              (product) =&gt; product.status === PRODUCT_STATUS.INACTIVE,&#10;            );&#10;            break;&#10;          case PRODUCT_STATUS.OUT_OF_STOCK:&#10;            filtered = filtered.filter((product) =&gt; product.stock === 0);&#10;            break;&#10;          case PRODUCT_STATUS.LOW_STOCK:&#10;            filtered = filtered.filter(&#10;              (product) =&gt; product.stock &gt; 0 &amp;&amp; product.stock &lt;= 5,&#10;            );&#10;            break;&#10;        }&#10;      }&#10;&#10;      // Apply sorting&#10;      if (filters.sort) {&#10;        const [key, order] = filters.sort.split(&quot;-&quot;);&#10;        filtered.sort((a, b) =&gt; {&#10;          let valueA, valueB;&#10;&#10;          switch (key) {&#10;            case &quot;price&quot;:&#10;              valueA = a.price || 0;&#10;              valueB = b.price || 0;&#10;              break;&#10;            case &quot;name&quot;:&#10;              valueA = a.name || &quot;&quot;;&#10;              valueB = b.name || &quot;&quot;;&#10;              return order === &quot;asc&quot;&#10;                ? valueA.localeCompare(valueB)&#10;                : valueB.localeCompare(valueA);&#10;            case &quot;stock&quot;:&#10;              valueA = a.stock || 0;&#10;              valueB = b.stock || 0;&#10;              break;&#10;            case &quot;date&quot;:&#10;              valueA = new Date(a.createdAt || 0);&#10;              valueB = new Date(b.createdAt || 0);&#10;              break;&#10;            default:&#10;              return 0;&#10;          }&#10;&#10;          return order === &quot;asc&quot; ? valueA - valueB : valueB - valueA;&#10;        });&#10;      }&#10;&#10;      return filtered;&#10;    } catch (error) {&#10;      console.error(&quot;Error filtering products:&quot;, error);&#10;      return products;&#10;    }&#10;  }, [products, filters]);&#10;&#10;  // Reset pagination when filters change&#10;  useEffect(() =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, page: 1 }));&#10;  }, [filters]);&#10;&#10;  // Paginated products&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    const startIndex = (pagination.page - 1) * pagination.limit;&#10;    const endIndex = startIndex + pagination.limit;&#10;    return filteredAndSortedProducts.slice(startIndex, endIndex);&#10;  }, [filteredAndSortedProducts, pagination]);&#10;&#10;  // Total pages calculation&#10;  const totalPages = Math.ceil(&#10;    filteredAndSortedProducts.length / pagination.limit,&#10;  );&#10;&#10;  // Product management functions&#10;  const handleStatusToggle = useCallback(async (productId, currentStatus) =&gt; {&#10;    const newStatus =&#10;      currentStatus === PRODUCT_STATUS.ACTIVE&#10;        ? PRODUCT_STATUS.INACTIVE&#10;        : PRODUCT_STATUS.ACTIVE;&#10;    const actionText =&#10;      newStatus === PRODUCT_STATUS.ACTIVE ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;status&quot; }));&#10;&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;      }&#10;&#10;      const result = await response.json();&#10;&#10;      if (!result.success) {&#10;        throw new Error(result.error || `Failed to ${actionText} product`);&#10;      }&#10;&#10;      // Update local state&#10;      setProducts((prev) =&gt;&#10;        prev.map((product) =&gt;&#10;          product._id === productId&#10;            ? { ...product, status: newStatus }&#10;            : product,&#10;        ),&#10;      );&#10;&#10;      // Show success message&#10;      const successMsg =&#10;        newStatus === PRODUCT_STATUS.ACTIVE&#10;          ? &quot;Product activated successfully!&quot;&#10;          : &quot;Product deactivated successfully!&quot;;&#10;&#10;      // Consider using a toast notification instead of alert&#10;      alert(successMsg);&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product status:&quot;, error);&#10;      alert(`Failed to ${actionText} product: ${error.message}`);&#10;    } finally {&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;    }&#10;  }, []);&#10;&#10;  const handleDeleteProduct = useCallback(async (productId) =&gt; {&#10;    const confirmMessage =&#10;      &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;      &quot;This action cannot be undone and will remove:\n&quot; +&#10;      &quot;• The product listing\n&quot; +&#10;      &quot;• All associated data\n&quot; +&#10;      &quot;• Product from any pending orders&quot;;&#10;&#10;    if (!confirm(confirmMessage)) {&#10;      return;&#10;    }&#10;&#10;    setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;delete&quot; }));&#10;&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\n&quot; +&#10;              &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;              &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;              &quot;You can temporarily deactivate the product instead by clicking the pause button.&quot;,&#10;          );&#10;          return;&#10;        } else if (response.status === 404) {&#10;          alert(&quot;❌ Product not found. It may have already been deleted.&quot;);&#10;          return;&#10;        } else {&#10;          throw new Error(errorData.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;&#10;      const result = await response.json();&#10;&#10;      if (!result.success) {&#10;        throw new Error(result.error || &quot;Failed to delete product&quot;);&#10;      }&#10;&#10;      // Remove from local state&#10;      setProducts((prev) =&gt;&#10;        prev.filter((product) =&gt; product._id !== productId),&#10;      );&#10;&#10;      alert(&quot;Product deleted successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(`❌ Failed to delete product: ${error.message}`);&#10;    } finally {&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;    }&#10;  }, []);&#10;&#10;  // Update filters&#10;  const updateFilters = useCallback((newFilters) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, ...newFilters }));&#10;  }, []);&#10;&#10;  // Update pagination&#10;  const updatePagination = useCallback((newPagination) =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, ...newPagination }));&#10;  }, []);&#10;&#10;  // Utility functions&#10;  const formatPrice = useCallback((price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-US&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;USD&quot;,&#10;      minimumFractionDigits: 2,&#10;      maximumFractionDigits: 2,&#10;    }).format(price || 0);&#10;  }, []);&#10;&#10;  const formatDate = useCallback((dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;    });&#10;  }, []);&#10;&#10;  const getProductStatusBadge = useCallback((product) =&gt; {&#10;    if (product.status === PRODUCT_STATUS.INACTIVE) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-pause mr-1&quot;&gt;&lt;/i&gt;&#10;          Inactive&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock === 0) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;          Out of Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock &lt;= 5) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-circle mr-1&quot;&gt;&lt;/i&gt;&#10;          Low Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    return (&#10;      &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&gt;&#10;        &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;        Active&#10;      &lt;/span&gt;&#10;    );&#10;  }, []);&#10;&#10;  // Component props&#10;  const dashboardProps = {&#10;    session,&#10;    products,&#10;    orders,&#10;    analytics,&#10;    handleRefresh,&#10;    refreshing,&#10;    formatPrice,&#10;    formatDate,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const productProps = {&#10;    products: products,&#10;    paginatedProducts: paginatedProducts,&#10;    filteredProducts: filteredAndSortedProducts,&#10;    totalProducts: products.length,&#10;    filters,&#10;    updateFilters,&#10;    pagination: { ...pagination, totalPages },&#10;    updatePagination,&#10;    viewMode,&#10;    setViewMode,&#10;    handleStatusToggle,&#10;    handleDeleteProduct,&#10;    actionLoading,&#10;    getProductStatusBadge,&#10;    handleRefresh,&#10;    refreshing,&#10;    formatPrice,&#10;    formatDate,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const orderProps = {&#10;    orders,&#10;    handleRefresh,&#10;    refreshing,&#10;    formatPrice,&#10;    formatDate,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const analyticsProps = {&#10;    analytics,&#10;    products,&#10;    orders,&#10;    formatPrice,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const settingsProps = {&#10;    session,&#10;    handleRefresh,&#10;    refreshing,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  // Loading state&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Error state&#10;  if (error &amp;&amp; !products.length &amp;&amp; !orders.length) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;          &lt;div className=&quot;text-red-500 text-6xl mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Dashboard Error&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;{error}&lt;/p&gt;&#10;          &lt;button&#10;            onClick={handleRefresh}&#10;            disabled={refreshing}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition disabled:opacity-50&quot;&#10;          &gt;&#10;            {refreshing ? (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                Retrying...&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-redo mr-2&quot;&gt;&lt;/i&gt;&#10;                Try Again&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Dashboard Header */}&#10;        &lt;DashboardHeader {...dashboardProps} /&gt;&#10;&#10;        {/* Error Alert */}&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4&quot;&gt;&#10;            &lt;div className=&quot;bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-exclamation-triangle text-red-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-red-700 dark:text-red-300&quot;&gt;{error}&lt;/span&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setError(null)}&#10;                  className=&quot;ml-auto text-red-500 hover:text-red-700&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Navigation Tabs */}&#10;        &lt;NavigationTabs activeTab={activeTab} setActiveTab={setActiveTab} /&gt;&#10;&#10;        {/* Tab Content */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {activeTab === TABS.DASHBOARD &amp;&amp; &lt;DashboardTab {...dashboardProps} /&gt;}&#10;          {activeTab === TABS.PRODUCTS &amp;&amp; &lt;ProductsTab {...productProps} /&gt;}&#10;          {activeTab === TABS.ORDERS &amp;&amp; &lt;OrdersTab {...orderProps} /&gt;}&#10;          {activeTab === TABS.ANALYTICS &amp;&amp; &lt;AnalyticsTab {...analyticsProps} /&gt;}&#10;          {activeTab === TABS.SETTINGS &amp;&amp; &lt;SettingsTab {...settingsProps} /&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { apiService } from &quot;@/lib/api-service&quot;;&#10;&#10;// Component imports&#10;import DashboardHeader from &quot;@/components/dashboard/DashboardHeader&quot;;&#10;import NavigationTabs from &quot;@/components/dashboard/NavigationTabs&quot;;&#10;import DashboardTab from &quot;@/components/dashboard/tabs/DashboardTab&quot;;&#10;import ProductsTab from &quot;@/components/dashboard/tabs/ProductsTab&quot;;&#10;import OrdersTab from &quot;@/components/dashboard/tabs/OrdersTab&quot;;&#10;import AnalyticsTab from &quot;@/components/dashboard/tabs/AnalyticsTab&quot;;&#10;import SettingsTab from &quot;@/components/dashboard/tabs/SettingsTab&quot;;&#10;&#10;// Constants&#10;const TABS = {&#10;  DASHBOARD: &quot;dashboard&quot;,&#10;  PRODUCTS: &quot;products&quot;,&#10;  ORDERS: &quot;orders&quot;,&#10;  ANALYTICS: &quot;analytics&quot;,&#10;  SETTINGS: &quot;settings&quot;,&#10;};&#10;&#10;const PRODUCT_STATUS = {&#10;  ACTIVE: &quot;active&quot;,&#10;  INACTIVE: &quot;inactive&quot;,&#10;  OUT_OF_STOCK: &quot;out-of-stock&quot;,&#10;  LOW_STOCK: &quot;low-stock&quot;,&#10;};&#10;&#10;const ORDER_STATUS = {&#10;  PENDING: &quot;pending&quot;,&#10;  CONFIRMED: &quot;confirmed&quot;,&#10;  DELIVERED: &quot;delivered&quot;,&#10;  CANCELLED: &quot;cancelled&quot;,&#10;  RETURNED: &quot;returned&quot;,&#10;};&#10;&#10;const DEFAULT_PAGINATION = {&#10;  page: 1,&#10;  limit: 12,&#10;};&#10;&#10;export default function FarmerDashboard() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Core state&#10;  const [products, setProducts] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [analytics, setAnalytics] = useState({});&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;&#10;  // UI state&#10;  const [activeTab, setActiveTab] = useState(TABS.DASHBOARD);&#10;  const [refreshing, setRefreshing] = useState(false);&#10;  const [actionLoading, setActionLoading] = useState({});&#10;&#10;  // Filter and search state&#10;  const [filters, setFilters] = useState({&#10;    search: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    sort: &quot;&quot;,&#10;  });&#10;&#10;  // Pagination state&#10;  const [pagination, setPagination] = useState(DEFAULT_PAGINATION);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;);&#10;&#10;  // User identification helper&#10;  const getUserIdentifiers = useCallback(() =&gt; {&#10;    if (!session?.user) return {};&#10;&#10;    const user = session.user;&#10;    return {&#10;      userId: user.userId || user.id || user._id,&#10;      userEmail: user.email,&#10;    };&#10;  }, [session?.user]);&#10;&#10;  // Fetch products with caching&#10;  const fetchProducts = useCallback(&#10;    async (forceRefresh = false) =&gt; {&#10;      if (!session?.user) return;&#10;&#10;      try {&#10;        const { userId, userEmail } = getUserIdentifiers();&#10;&#10;        if (!userId &amp;&amp; !userEmail) {&#10;          throw new Error(&quot;No user identification found&quot;);&#10;        }&#10;&#10;        // Use cached API service&#10;        const data = await apiService.getProducts(&#10;          {&#10;            limit: 1000,&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;          },&#10;          { forceRefresh },&#10;        );&#10;&#10;        const products = data.products || [];&#10;&#10;        // Filter farmer's products on client side as fallback&#10;        const farmerProducts = products.filter((product) =&gt; {&#10;          return (&#10;            product.farmerId === userId ||&#10;            product.farmerId === String(userId) ||&#10;            product.farmerEmail === userEmail ||&#10;            product.farmer?.email === userEmail ||&#10;            product.farmer?.id === userId&#10;          );&#10;        });&#10;&#10;        setProducts(farmerProducts);&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching products:&quot;, error);&#10;        setError(&quot;Failed to load products. Please try again.&quot;);&#10;      }&#10;    },&#10;    [session?.user, getUserIdentifiers],&#10;  );&#10;&#10;  // Fetch orders with caching&#10;  const fetchOrders = useCallback(&#10;    async (forceRefresh = false) =&gt; {&#10;      if (!session?.user) return;&#10;&#10;      try {&#10;        const { userId, userEmail } = getUserIdentifiers();&#10;&#10;        const params = {&#10;          farmerId: userId,&#10;          farmerEmail: userEmail,&#10;          limit: 1000,&#10;        };&#10;&#10;        // Use cached API service for orders&#10;        const data = await apiService.getOrders(params, { forceRefresh });&#10;        setOrders(data.orders || []);&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching orders:&quot;, error);&#10;        setError(&quot;Failed to load orders. Please try again.&quot;);&#10;      }&#10;    },&#10;    [session?.user, getUserIdentifiers],&#10;  );&#10;&#10;  // Initialize dashboard data with caching and progressive loading&#10;  const initializeDashboard = useCallback(&#10;    async (forceRefresh = false) =&gt; {&#10;      if (!session?.user) return;&#10;&#10;      const { userId, userEmail } = getUserIdentifiers();&#10;      if (!userId &amp;&amp; !userEmail) return;&#10;&#10;      // Only show loading for initial load or force refresh&#10;      if (forceRefresh || products.length === 0) {&#10;        setLoading(true);&#10;      }&#10;      setError(null);&#10;&#10;      try {&#10;        // Use the optimized dashboard data method&#10;        const dashboardData = await apiService.getDashboardData(&#10;          userId, &#10;          userEmail, &#10;          { forceRefresh }&#10;        );&#10;&#10;        setProducts(dashboardData.products);&#10;        setOrders(dashboardData.orders);&#10;&#10;        console.log(`Dashboard loaded: ${dashboardData.meta.productsCount} products, ${dashboardData.meta.ordersCount} orders (cached: ${dashboardData.meta.fromCache})`);&#10;      } catch (err) {&#10;        console.error(&quot;Dashboard initialization error:&quot;, err);&#10;        setError(&#10;          &quot;Failed to load dashboard data. Please try refreshing the page.&quot;,&#10;        );&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    },&#10;    [getUserIdentifiers, products.length, session?.user],&#10;  );&#10;&#10;  // Authentication and authorization&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;loading&quot;) return;&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      if (userType !== &quot;farmer&quot;) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;      initializeDashboard();&#10;    }&#10;  }, [session, status, router, initializeDashboard]);&#10;&#10;  // Handle tab changes without refetching data&#10;  const handleTabChange = useCallback((newTab) =&gt; {&#10;    setActiveTab(newTab);&#10;    // Data is already cached, no need to refetch&#10;  }, []);&#10;&#10;  // Refresh data manually&#10;  const handleRefresh = useCallback(async () =&gt; {&#10;    setRefreshing(true);&#10;    await initializeDashboard(true); // Force refresh&#10;    setRefreshing(false);&#10;  }, [initializeDashboard]);&#10;&#10;  // Calculate analytics with memoization&#10;  const calculatedAnalytics = useMemo(() =&gt; {&#10;    try {&#10;      // Filter valid orders (exclude cancelled/returned for revenue)&#10;      const validOrders = orders.filter(&#10;        (order) =&gt;&#10;          order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;          order.status !== ORDER_STATUS.RETURNED,&#10;      );&#10;&#10;      const totalProducts = products.length;&#10;      const activeProducts = products.filter(&#10;        (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== PRODUCT_STATUS.INACTIVE,&#10;      ).length;&#10;&#10;      const totalOrders = orders.length;&#10;      const pendingOrders = orders.filter(&#10;        (o) =&gt; o.status === ORDER_STATUS.PENDING,&#10;      ).length;&#10;&#10;      // Calculate revenue from valid orders only&#10;      const totalRevenue = validOrders.reduce(&#10;        (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;        0,&#10;      );&#10;&#10;      // This month's orders (valid only)&#10;      const now = new Date();&#10;      const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;        const orderDate = new Date(order.createdAt);&#10;        return (&#10;          orderDate.getMonth() === now.getMonth() &amp;&amp;&#10;          orderDate.getFullYear() === now.getFullYear()&#10;        );&#10;      });&#10;&#10;      const averageOrderValue =&#10;        validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;      return {&#10;        totalProducts,&#10;        activeProducts,&#10;        totalOrders,&#10;        pendingOrders,&#10;        totalRevenue,&#10;        thisMonthOrders: thisMonthValidOrders.length,&#10;        averageOrderValue,&#10;        lowStockProducts: products.filter((p) =&gt; p.stock &lt;= 10).length,&#10;        recentOrders: orders.slice(0, 5),&#10;      };&#10;    } catch (error) {&#10;      console.error(&quot;Error calculating analytics:&quot;, error);&#10;      return {&#10;        totalProducts: 0,&#10;        activeProducts: 0,&#10;        totalOrders: 0,&#10;        pendingOrders: 0,&#10;        totalRevenue: 0,&#10;        thisMonthOrders: 0,&#10;        averageOrderValue: 0,&#10;        lowStockProducts: 0,&#10;        recentOrders: [],&#10;      };&#10;    }&#10;  }, [products, orders]);&#10;&#10;  // Update analytics when calculated values change&#10;  useEffect(() =&gt; {&#10;    setAnalytics(calculatedAnalytics);&#10;  }, [calculatedAnalytics]);&#10;&#10;  // Filter and sort products with better performance&#10;  const filteredAndSortedProducts = useMemo(() =&gt; {&#10;    try {&#10;      let filtered = [...products];&#10;&#10;      // Apply search filter&#10;      if (filters.search) {&#10;        const searchRegex = new RegExp(filters.search.trim(), &quot;i&quot;);&#10;        filtered = filtered.filter(&#10;          (product) =&gt;&#10;            searchRegex.test(product.name) ||&#10;            searchRegex.test(product.description || &quot;&quot;) ||&#10;            searchRegex.test(product.category || &quot;&quot;),&#10;        );&#10;      }&#10;&#10;      // Apply category filter&#10;      if (filters.category) {&#10;        filtered = filtered.filter(&#10;          (product) =&gt;&#10;            product.category?.toLowerCase() === filters.category.toLowerCase(),&#10;        );&#10;      }&#10;&#10;      // Apply status filter&#10;      if (filters.status) {&#10;        switch (filters.status) {&#10;          case PRODUCT_STATUS.ACTIVE:&#10;            filtered = filtered.filter(&#10;              (product) =&gt;&#10;                product.stock &gt; 0 &amp;&amp; product.status !== PRODUCT_STATUS.INACTIVE,&#10;            );&#10;            break;&#10;          case PRODUCT_STATUS.INACTIVE:&#10;            filtered = filtered.filter(&#10;              (product) =&gt; product.status === PRODUCT_STATUS.INACTIVE,&#10;            );&#10;            break;&#10;          case PRODUCT_STATUS.OUT_OF_STOCK:&#10;            filtered = filtered.filter((product) =&gt; product.stock === 0);&#10;            break;&#10;          case PRODUCT_STATUS.LOW_STOCK:&#10;            filtered = filtered.filter(&#10;              (product) =&gt; product.stock &gt; 0 &amp;&amp; product.stock &lt;= 5,&#10;            );&#10;            break;&#10;        }&#10;      }&#10;&#10;      // Apply sorting&#10;      if (filters.sort) {&#10;        const [key, order] = filters.sort.split(&quot;-&quot;);&#10;        filtered.sort((a, b) =&gt; {&#10;          let valueA, valueB;&#10;&#10;          switch (key) {&#10;            case &quot;price&quot;:&#10;              valueA = a.price || 0;&#10;              valueB = b.price || 0;&#10;              break;&#10;            case &quot;name&quot;:&#10;              valueA = a.name || &quot;&quot;;&#10;              valueB = b.name || &quot;&quot;;&#10;              return order === &quot;asc&quot;&#10;                ? valueA.localeCompare(valueB)&#10;                : valueB.localeCompare(valueA);&#10;            case &quot;stock&quot;:&#10;              valueA = a.stock || 0;&#10;              valueB = b.stock || 0;&#10;              break;&#10;            case &quot;date&quot;:&#10;              valueA = new Date(a.createdAt || 0);&#10;              valueB = new Date(b.createdAt || 0);&#10;              break;&#10;            default:&#10;              return 0;&#10;          }&#10;&#10;          return order === &quot;asc&quot; ? valueA - valueB : valueB - valueA;&#10;        });&#10;      }&#10;&#10;      return filtered;&#10;    } catch (error) {&#10;      console.error(&quot;Error filtering products:&quot;, error);&#10;      return products;&#10;    }&#10;  }, [products, filters]);&#10;&#10;  // Reset pagination when filters change&#10;  useEffect(() =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, page: 1 }));&#10;  }, [filters]);&#10;&#10;  // Paginated products&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    const startIndex = (pagination.page - 1) * pagination.limit;&#10;    const endIndex = startIndex + pagination.limit;&#10;    return filteredAndSortedProducts.slice(startIndex, endIndex);&#10;  }, [filteredAndSortedProducts, pagination]);&#10;&#10;  // Total pages calculation&#10;  const totalPages = Math.ceil(&#10;    filteredAndSortedProducts.length / pagination.limit,&#10;  );&#10;&#10;  // Product management functions&#10;  const handleStatusToggle = useCallback(async (productId, currentStatus) =&gt; {&#10;    const newStatus =&#10;      currentStatus === PRODUCT_STATUS.ACTIVE&#10;        ? PRODUCT_STATUS.INACTIVE&#10;        : PRODUCT_STATUS.ACTIVE;&#10;    const actionText =&#10;      newStatus === PRODUCT_STATUS.ACTIVE ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;status&quot; }));&#10;&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;      }&#10;&#10;      const result = await response.json();&#10;&#10;      if (!result.success) {&#10;        throw new Error(result.error || `Failed to ${actionText} product`);&#10;      }&#10;&#10;      // Update local state&#10;      setProducts((prev) =&gt;&#10;        prev.map((product) =&gt;&#10;          product._id === productId&#10;            ? { ...product, status: newStatus }&#10;            : product,&#10;        ),&#10;      );&#10;&#10;      // Show success message&#10;      const successMsg =&#10;        newStatus === PRODUCT_STATUS.ACTIVE&#10;          ? &quot;Product activated successfully!&quot;&#10;          : &quot;Product deactivated successfully!&quot;;&#10;&#10;      // Consider using a toast notification instead of alert&#10;      alert(successMsg);&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product status:&quot;, error);&#10;      alert(`Failed to ${actionText} product: ${error.message}`);&#10;    } finally {&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;    }&#10;  }, []);&#10;&#10;  const handleDeleteProduct = useCallback(async (productId) =&gt; {&#10;    const confirmMessage =&#10;      &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;      &quot;This action cannot be undone and will remove:\n&quot; +&#10;      &quot;• The product listing\n&quot; +&#10;      &quot;• All associated data\n&quot; +&#10;      &quot;• Product from any pending orders&quot;;&#10;&#10;    if (!confirm(confirmMessage)) {&#10;      return;&#10;    }&#10;&#10;    setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;delete&quot; }));&#10;&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\n&quot; +&#10;              &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;              &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;              &quot;You can temporarily deactivate the product instead by clicking the pause button.&quot;,&#10;          );&#10;          return;&#10;        } else if (response.status === 404) {&#10;          alert(&quot;❌ Product not found. It may have already been deleted.&quot;);&#10;          return;&#10;        } else {&#10;          throw new Error(errorData.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;&#10;      const result = await response.json();&#10;&#10;      if (!result.success) {&#10;        throw new Error(result.error || &quot;Failed to delete product&quot;);&#10;      }&#10;&#10;      // Remove from local state&#10;      setProducts((prev) =&gt;&#10;        prev.filter((product) =&gt; product._id !== productId),&#10;      );&#10;&#10;      alert(&quot;Product deleted successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(`❌ Failed to delete product: ${error.message}`);&#10;    } finally {&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;    }&#10;  }, []);&#10;&#10;  // Update filters&#10;  const updateFilters = useCallback((newFilters) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, ...newFilters }));&#10;  }, []);&#10;&#10;  // Update pagination&#10;  const updatePagination = useCallback((newPagination) =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, ...newPagination }));&#10;  }, []);&#10;&#10;  // Utility functions&#10;  const formatPrice = useCallback((price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-US&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;USD&quot;,&#10;      minimumFractionDigits: 2,&#10;      maximumFractionDigits: 2,&#10;    }).format(price || 0);&#10;  }, []);&#10;&#10;  const formatDate = useCallback((dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;    });&#10;  }, []);&#10;&#10;  const getProductStatusBadge = useCallback((product) =&gt; {&#10;    if (product.status === PRODUCT_STATUS.INACTIVE) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-pause mr-1&quot;&gt;&lt;/i&gt;&#10;          Inactive&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock === 0) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;          Out of Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock &lt;= 5) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-circle mr-1&quot;&gt;&lt;/i&gt;&#10;          Low Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    return (&#10;      &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&gt;&#10;        &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;        Active&#10;      &lt;/span&gt;&#10;    );&#10;  }, []);&#10;&#10;  // Component props&#10;  const dashboardProps = {&#10;    session,&#10;    products,&#10;    orders,&#10;    analytics,&#10;    handleRefresh,&#10;    refreshing,&#10;    formatPrice,&#10;    formatDate,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const productProps = {&#10;    products: products,&#10;    paginatedProducts: paginatedProducts,&#10;    filteredProducts: filteredAndSortedProducts,&#10;    totalProducts: products.length,&#10;    filters,&#10;    updateFilters,&#10;    pagination: { ...pagination, totalPages },&#10;    updatePagination,&#10;    viewMode,&#10;    setViewMode,&#10;    handleStatusToggle,&#10;    handleDeleteProduct,&#10;    actionLoading,&#10;    getProductStatusBadge,&#10;    handleRefresh,&#10;    refreshing,&#10;    formatPrice,&#10;    formatDate,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const orderProps = {&#10;    orders,&#10;    handleRefresh,&#10;    refreshing,&#10;    formatPrice,&#10;    formatDate,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const analyticsProps = {&#10;    analytics,&#10;    products,&#10;    orders,&#10;    formatPrice,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  const settingsProps = {&#10;    session,&#10;    handleRefresh,&#10;    refreshing,&#10;    loading,&#10;    error,&#10;  };&#10;&#10;  // Loading state&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Error state&#10;  if (error &amp;&amp; !products.length &amp;&amp; !orders.length) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;          &lt;div className=&quot;text-red-500 text-6xl mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Dashboard Error&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;{error}&lt;/p&gt;&#10;          &lt;button&#10;            onClick={handleRefresh}&#10;            disabled={refreshing}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition disabled:opacity-50&quot;&#10;          &gt;&#10;            {refreshing ? (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                Retrying...&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-redo mr-2&quot;&gt;&lt;/i&gt;&#10;                Try Again&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Dashboard Header */}&#10;        &lt;DashboardHeader {...dashboardProps} /&gt;&#10;&#10;        {/* Error Alert */}&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4&quot;&gt;&#10;            &lt;div className=&quot;bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-exclamation-triangle text-red-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-red-700 dark:text-red-300&quot;&gt;{error}&lt;/span&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setError(null)}&#10;                  className=&quot;ml-auto text-red-500 hover:text-red-700&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Navigation Tabs */}&#10;        &lt;NavigationTabs activeTab={activeTab} setActiveTab={setActiveTab} /&gt;&#10;&#10;        {/* Tab Content */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {activeTab === TABS.DASHBOARD &amp;&amp; &lt;DashboardTab {...dashboardProps} /&gt;}&#10;          {activeTab === TABS.PRODUCTS &amp;&amp; &lt;ProductsTab {...productProps} /&gt;}&#10;          {activeTab === TABS.ORDERS &amp;&amp; &lt;OrdersTab {...orderProps} /&gt;}&#10;          {activeTab === TABS.ANALYTICS &amp;&amp; &lt;AnalyticsTab {...analyticsProps} /&gt;}&#10;          {activeTab === TABS.SETTINGS &amp;&amp; &lt;SettingsTab {...settingsProps} /&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/products/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/products/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;import { apiService } from &quot;@/lib/api-service&quot;;&#10;&#10;// Move constants outside component to prevent recreations&#10;const CATEGORY_OPTIONS = [&#10;  &quot;All Categories&quot;,&#10;  &quot;Vegetables&quot;,&#10;  &quot;Fruits&quot;,&#10;  &quot;Grains&quot;,&#10;  &quot;Dairy&quot;,&#10;  &quot;Honey&quot;,&#10;  &quot;Herbs&quot;,&#10;];&#10;&#10;const PRICE_RANGE_OPTIONS = [&#10;  { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;  { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;  { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;  { label: &quot;৳200 - ৳500&quot;, min: 201, max: 500 },&#10;  { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;];&#10;&#10;const TAG_OPTIONS = [&#10;  &quot;Organic&quot;,&#10;  &quot;Fresh&quot;,&#10;  &quot;Local&quot;,&#10;  &quot;Premium&quot;,&#10;  &quot;Seasonal&quot;,&#10;  &quot;Limited Stock&quot;,&#10;];&#10;&#10;const ITEMS_PER_PAGE = 12;&#10;const DEFAULT_PRICE_RANGE = [0, 10000];&#10;&#10;export default function Products() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;&#10;  // Core data states&#10;  const [allProducts, setAllProducts] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;  const [availableFarmers, setAvailableFarmers] = useState([]);&#10;&#10;  // Filter states - Initialize from URL params&#10;  const [filters, setFilters] = useState(() =&gt; ({&#10;    searchTerm: searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;    selectedCategory: searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;    selectedPriceRanges: searchParams.get(&quot;priceRanges&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedRatings: searchParams.get(&quot;ratings&quot;)?.split(&quot;,&quot;).map(Number) || [],&#10;    selectedFarmers: searchParams.get(&quot;farmers&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedTags: searchParams.get(&quot;tags&quot;)?.split(&quot;,&quot;) || [],&#10;    priceRangeSlider: [&#10;      Number(searchParams.get(&quot;minPrice&quot;)) || 0,&#10;      Number(searchParams.get(&quot;maxPrice&quot;)) || 10000,&#10;    ],&#10;    sortBy: searchParams.get(&quot;sort&quot;) || &quot;newest&quot;,&#10;  }));&#10;&#10;  const [currentPage, setCurrentPage] = useState(&#10;    Number(searchParams.get(&quot;page&quot;)) || 1,&#10;  );&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;&#10;  // Memoized filtered and sorted products&#10;  const filteredProducts = useMemo(() =&gt; {&#10;    let filtered = [...allProducts];&#10;&#10;    // Apply price range checkboxes&#10;    if (filters.selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedPriceRanges.some((range) =&gt; {&#10;          const option = PRICE_RANGE_OPTIONS.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return (&#10;        price &gt;= filters.priceRangeSlider[0] &amp;&amp;&#10;        price &lt;= filters.priceRangeSlider[1]&#10;      );&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (filters.selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return filters.selectedRatings.some(&#10;          (rating) =&gt; productRating &gt;= rating,&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (filters.selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return filters.selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (filters.selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return (&#10;                product.isOrganic === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;))&#10;              );&#10;            case &quot;Fresh&quot;:&#10;              return (&#10;                product.isFresh === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;))&#10;              );&#10;            case &quot;Local&quot;:&#10;              return true;&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (filters.sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseFloat(b.averageRating) || 0) -&#10;            (parseFloat(a.averageRating) || 0),&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0),&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [allProducts, filters]);&#10;&#10;  // Memoized pagination data&#10;  const paginationData = useMemo(() =&gt; {&#10;    const totalProducts = filteredProducts.length;&#10;    const totalPages = Math.ceil(totalProducts / ITEMS_PER_PAGE);&#10;    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;&#10;    const endIndex = startIndex + ITEMS_PER_PAGE;&#10;    const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;    return {&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage,&#10;        totalPages,&#10;        totalProducts,&#10;        hasNextPage: currentPage &lt; totalPages,&#10;        hasPrevPage: currentPage &gt; 1,&#10;      },&#10;    };&#10;  }, [filteredProducts, currentPage]);&#10;&#10;  // ONLY CHANGE: Use optimized API service for faster MongoDB Atlas performance&#10;  const fetchProducts = useCallback(async () =&gt; {&#10;    setLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      // Use the new optimized API service with caching&#10;      const params = {&#10;        limit: 1000, // Fetch more products for client-side filtering&#10;      };&#10;&#10;      // Add search/category filters for server-side optimization&#10;      if (filters.searchTerm) params.search = filters.searchTerm;&#10;      if (filters.selectedCategory !== &quot;All Categories&quot;) {&#10;        params.category = filters.selectedCategory;&#10;      }&#10;&#10;      const data = await apiService.getProducts(params);&#10;      setAllProducts(data.products || []);&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;      setError(&quot;Failed to load products. Please try again.&quot;);&#10;      setAllProducts([]);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [filters.searchTerm, filters.selectedCategory]);&#10;&#10;  // ONLY CHANGE: Use optimized API service for farmers&#10;  const fetchAvailableFarmers = useCallback(async () =&gt; {&#10;    try {&#10;      const data = await apiService.getProducts({ limit: 1000 });&#10;      const uniqueFarmers = [&#10;        ...new Set(&#10;          data.products&#10;            .map((p) =&gt; p.farmer?.name || p.farmerName)&#10;            .filter(Boolean),&#10;        ),&#10;      ].sort();&#10;      setAvailableFarmers(uniqueFarmers);&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching farmers:&quot;, error);&#10;      setAvailableFarmers([]);&#10;    }&#10;  }, []);&#10;&#10;  // Initial data fetch&#10;  useEffect(() =&gt; {&#10;    fetchProducts();&#10;    fetchAvailableFarmers();&#10;  }, [fetchProducts, fetchAvailableFarmers]);&#10;&#10;  // Update URL when filters change (with debouncing)&#10;  const updateURL = useCallback(&#10;    debounce(() =&gt; {&#10;      const params = new URLSearchParams();&#10;&#10;      // Only add non-default parameters to keep URLs clean&#10;      if (filters.searchTerm) params.set(&quot;search&quot;, filters.searchTerm);&#10;      if (filters.selectedCategory !== &quot;All Categories&quot;)&#10;        params.set(&quot;category&quot;, filters.selectedCategory);&#10;      if (filters.selectedPriceRanges.length &gt; 0)&#10;        params.set(&quot;priceRanges&quot;, filters.selectedPriceRanges.join(&quot;,&quot;));&#10;      if (filters.selectedRatings.length &gt; 0)&#10;        params.set(&quot;ratings&quot;, filters.selectedRatings.join(&quot;,&quot;));&#10;      if (filters.selectedFarmers.length &gt; 0)&#10;        params.set(&quot;farmers&quot;, filters.selectedFarmers.join(&quot;,&quot;));&#10;      if (filters.selectedTags.length &gt; 0)&#10;        params.set(&quot;tags&quot;, filters.selectedTags.join(&quot;,&quot;));&#10;      if (filters.priceRangeSlider[0] &gt; 0)&#10;        params.set(&quot;minPrice&quot;, filters.priceRangeSlider[0]);&#10;      if (filters.priceRangeSlider[1] &lt; 10000)&#10;        params.set(&quot;maxPrice&quot;, filters.priceRangeSlider[1]);&#10;      if (filters.sortBy !== &quot;newest&quot;) params.set(&quot;sort&quot;, filters.sortBy);&#10;      if (currentPage &gt; 1) params.set(&quot;page&quot;, currentPage);&#10;&#10;      const newURL = params.toString() ? `?${params.toString()}` : &quot;&quot;;&#10;      router.push(`/products${newURL}`, { scroll: false });&#10;    }, 300),&#10;    [filters, currentPage, router],&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    updateURL();&#10;  }, [updateURL]);&#10;&#10;  // Handle filter changes&#10;  const handleFilterChange = useCallback((filterType, value) =&gt; {&#10;    setFilters((prev) =&gt; {&#10;      const newFilters = { ...prev };&#10;&#10;      switch (filterType) {&#10;        case &quot;searchTerm&quot;:&#10;          newFilters.searchTerm = value;&#10;          break;&#10;        case &quot;category&quot;:&#10;          newFilters.selectedCategory = value;&#10;          break;&#10;        case &quot;priceRange&quot;:&#10;          if (newFilters.selectedPriceRanges.includes(value)) {&#10;            newFilters.selectedPriceRanges =&#10;              newFilters.selectedPriceRanges.filter((range) =&gt; range !== value);&#10;          } else {&#10;            newFilters.selectedPriceRanges = [&#10;              ...newFilters.selectedPriceRanges,&#10;              value,&#10;            ];&#10;          }&#10;          break;&#10;        case &quot;rating&quot;:&#10;          if (newFilters.selectedRatings.includes(value)) {&#10;            newFilters.selectedRatings = newFilters.selectedRatings.filter(&#10;              (rating) =&gt; rating !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedRatings = [...newFilters.selectedRatings, value];&#10;          }&#10;          break;&#10;        case &quot;farmer&quot;:&#10;          if (newFilters.selectedFarmers.includes(value)) {&#10;            newFilters.selectedFarmers = newFilters.selectedFarmers.filter(&#10;              (farmer) =&gt; farmer !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedFarmers = [...newFilters.selectedFarmers, value];&#10;          }&#10;          break;&#10;        case &quot;tag&quot;:&#10;          if (newFilters.selectedTags.includes(value)) {&#10;            newFilters.selectedTags = newFilters.selectedTags.filter(&#10;              (tag) =&gt; tag !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedTags = [...newFilters.selectedTags, value];&#10;          }&#10;          break;&#10;        case &quot;priceSlider&quot;:&#10;          newFilters.priceRangeSlider = value;&#10;          break;&#10;        case &quot;sortBy&quot;:&#10;          newFilters.sortBy = value;&#10;          break;&#10;      }&#10;&#10;      return newFilters;&#10;    });&#10;&#10;    // Reset to first page when filters change&#10;    if (filterType !== &quot;sortBy&quot;) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, []);&#10;&#10;  // Clear all filters&#10;  const clearAllFilters = useCallback(() =&gt; {&#10;    setFilters({&#10;      searchTerm: &quot;&quot;,&#10;      selectedCategory: &quot;All Categories&quot;,&#10;      selectedPriceRanges: [],&#10;      selectedRatings: [],&#10;      selectedFarmers: [],&#10;      selectedTags: [],&#10;      priceRangeSlider: [0, 10000],&#10;      sortBy: &quot;newest&quot;,&#10;    });&#10;    setCurrentPage(1);&#10;  }, []);&#10;&#10;  // Handle page changes&#10;  const handlePageChange = useCallback((page) =&gt; {&#10;    setCurrentPage(page);&#10;    window.scrollTo({ top: 0, behavior: &quot;smooth&quot; });&#10;  }, []);&#10;&#10;  // Refresh data&#10;  const refreshData = useCallback(() =&gt; {&#10;    fetchProducts();&#10;  }, [fetchProducts]);&#10;&#10;  // Handle browser back/forward navigation&#10;  useEffect(() =&gt; {&#10;    const handlePopState = () =&gt; {&#10;      fetchProducts();&#10;    };&#10;&#10;    window.addEventListener(&quot;popstate&quot;, handlePopState);&#10;    return () =&gt; window.removeEventListener(&quot;popstate&quot;, handlePopState);&#10;  }, [fetchProducts]);&#10;&#10;  // Memoized pagination component&#10;  const PaginationComponent = useMemo(() =&gt; {&#10;    if (paginationData.pagination.totalPages &lt;= 1) return null;&#10;&#10;    return (&#10;      &lt;div className=&quot;flex justify-center items-center space-x-2 mt-8&quot;&gt;&#10;        &lt;button&#10;          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;          disabled={!paginationData.pagination.hasPrevPage}&#10;          className=&quot;px-4 py-2 border rounded-lg disabled:opacity-50 disabled:cursor-not-allowed&#10;                     hover:bg-gray-50 transition-colors duration-200&quot;&#10;        &gt;&#10;          Previous&#10;        &lt;/button&gt;&#10;&#10;        &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;          {Array.from(&#10;            { length: Math.min(5, paginationData.pagination.totalPages) },&#10;            (_, i) =&gt; {&#10;              const page = Math.max(1, currentPage - 2) + i;&#10;              if&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;import { apiService } from &quot;@/lib/api-service&quot;;&#10;&#10;// Move constants outside component to prevent recreations&#10;const CATEGORY_OPTIONS = [&#10;  &quot;All Categories&quot;,&#10;  &quot;Vegetables&quot;,&#10;  &quot;Fruits&quot;,&#10;  &quot;Grains&quot;,&#10;  &quot;Dairy&quot;,&#10;  &quot;Honey&quot;,&#10;  &quot;Herbs&quot;,&#10;];&#10;&#10;const PRICE_RANGE_OPTIONS = [&#10;  { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;  { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;  { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;  { label: &quot;৳200 - ৳500&quot;, min: 201, max: 500 },&#10;  { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;];&#10;&#10;const TAG_OPTIONS = [&#10;  &quot;Organic&quot;,&#10;  &quot;Fresh&quot;,&#10;  &quot;Local&quot;,&#10;  &quot;Premium&quot;,&#10;  &quot;Seasonal&quot;,&#10;  &quot;Limited Stock&quot;,&#10;];&#10;&#10;const ITEMS_PER_PAGE = 12;&#10;&#10;export default function Products() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;&#10;  // Core data states&#10;  const [allProducts, setAllProducts] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;  const [availableFarmers, setAvailableFarmers] = useState([]);&#10;&#10;  // Filter states - Initialize from URL params&#10;  const [filters, setFilters] = useState(() =&gt; ({&#10;    searchTerm: searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;    selectedCategory: searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;    selectedPriceRanges: searchParams.get(&quot;priceRanges&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedRatings: searchParams.get(&quot;ratings&quot;)?.split(&quot;,&quot;).map(Number) || [],&#10;    selectedFarmers: searchParams.get(&quot;farmers&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedTags: searchParams.get(&quot;tags&quot;)?.split(&quot;,&quot;) || [],&#10;    priceRangeSlider: [&#10;      Number(searchParams.get(&quot;minPrice&quot;)) || 0,&#10;      Number(searchParams.get(&quot;maxPrice&quot;)) || 10000,&#10;    ],&#10;    sortBy: searchParams.get(&quot;sort&quot;) || &quot;newest&quot;,&#10;  }));&#10;&#10;  const [currentPage, setCurrentPage] = useState(&#10;    Number(searchParams.get(&quot;page&quot;)) || 1,&#10;  );&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;&#10;  // Memoized filtered and sorted products&#10;  const filteredProducts = useMemo(() =&gt; {&#10;    let filtered = [...allProducts];&#10;&#10;    // Apply price range checkboxes&#10;    if (filters.selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedPriceRanges.some((range) =&gt; {&#10;          const option = PRICE_RANGE_OPTIONS.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return (&#10;        price &gt;= filters.priceRangeSlider[0] &amp;&amp;&#10;        price &lt;= filters.priceRangeSlider[1]&#10;      );&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (filters.selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return filters.selectedRatings.some(&#10;          (rating) =&gt; productRating &gt;= rating,&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (filters.selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return filters.selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (filters.selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return (&#10;                product.isOrganic === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;))&#10;              );&#10;            case &quot;Fresh&quot;:&#10;              return (&#10;                product.isFresh === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;))&#10;              );&#10;            case &quot;Local&quot;:&#10;              return true;&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (filters.sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseFloat(b.averageRating) || 0) -&#10;            (parseFloat(a.averageRating) || 0),&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0),&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [allProducts, filters]);&#10;&#10;  // Memoized pagination data&#10;  const paginationData = useMemo(() =&gt; {&#10;    const totalProducts = filteredProducts.length;&#10;    const totalPages = Math.ceil(totalProducts / ITEMS_PER_PAGE);&#10;    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;&#10;    const endIndex = startIndex + ITEMS_PER_PAGE;&#10;    const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;    return {&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage,&#10;        totalPages,&#10;        totalProducts,&#10;        hasNextPage: currentPage &lt; totalPages,&#10;        hasPrevPage: currentPage &gt; 1,&#10;      },&#10;    };&#10;  }, [filteredProducts, currentPage]);&#10;&#10;  // Use optimized API service with caching&#10;  const fetchProducts = useCallback(async () =&gt; {&#10;    setLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      const params = {&#10;        limit: 1000, // Fetch more products for client-side filtering&#10;      };&#10;&#10;      // Add search/category filters for server-side optimization&#10;      if (filters.searchTerm) params.search = filters.searchTerm;&#10;      if (filters.selectedCategory !== &quot;All Categories&quot;) {&#10;        params.category = filters.selectedCategory;&#10;      }&#10;&#10;      const data = await apiService.getProducts(params);&#10;      setAllProducts(data.products || []);&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;      setError(&quot;Failed to load products. Please try again.&quot;);&#10;      setAllProducts([]);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [filters.searchTerm, filters.selectedCategory]);&#10;&#10;  // Fetch available farmers using cached API&#10;  const fetchAvailableFarmers = useCallback(async () =&gt; {&#10;    try {&#10;      const data = await apiService.getProducts({ limit: 1000 });&#10;      const uniqueFarmers = [&#10;        ...new Set(&#10;          data.products&#10;            .map((p) =&gt; p.farmer?.name || p.farmerName)&#10;            .filter(Boolean),&#10;        ),&#10;      ].sort();&#10;      setAvailableFarmers(uniqueFarmers);&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching farmers:&quot;, error);&#10;      setAvailableFarmers([]);&#10;    }&#10;  }, []);&#10;&#10;  // Initial data fetch&#10;  useEffect(() =&gt; {&#10;    fetchProducts();&#10;    fetchAvailableFarmers();&#10;  }, [fetchProducts, fetchAvailableFarmers]);&#10;&#10;  // Update URL when filters change (with debouncing)&#10;  const updateURL = useCallback(&#10;    debounce(() =&gt; {&#10;      const params = new URLSearchParams();&#10;&#10;      // Only add non-default parameters to keep URLs clean&#10;      if (filters.searchTerm) params.set(&quot;search&quot;, filters.searchTerm);&#10;      if (filters.selectedCategory !== &quot;All Categories&quot;)&#10;        params.set(&quot;category&quot;, filters.selectedCategory);&#10;      if (filters.selectedPriceRanges.length &gt; 0)&#10;        params.set(&quot;priceRanges&quot;, filters.selectedPriceRanges.join(&quot;,&quot;));&#10;      if (filters.selectedRatings.length &gt; 0)&#10;        params.set(&quot;ratings&quot;, filters.selectedRatings.join(&quot;,&quot;));&#10;      if (filters.selectedFarmers.length &gt; 0)&#10;        params.set(&quot;farmers&quot;, filters.selectedFarmers.join(&quot;,&quot;));&#10;      if (filters.selectedTags.length &gt; 0)&#10;        params.set(&quot;tags&quot;, filters.selectedTags.join(&quot;,&quot;));&#10;      if (filters.priceRangeSlider[0] &gt; 0)&#10;        params.set(&quot;minPrice&quot;, filters.priceRangeSlider[0]);&#10;      if (filters.priceRangeSlider[1] &lt; 10000)&#10;        params.set(&quot;maxPrice&quot;, filters.priceRangeSlider[1]);&#10;      if (filters.sortBy !== &quot;newest&quot;) params.set(&quot;sort&quot;, filters.sortBy);&#10;      if (currentPage &gt; 1) params.set(&quot;page&quot;, currentPage);&#10;&#10;      const newURL = params.toString() ? `?${params.toString()}` : &quot;&quot;;&#10;      router.push(`/products${newURL}`, { scroll: false });&#10;    }, 300),&#10;    [filters, currentPage, router],&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    updateURL();&#10;  }, [updateURL]);&#10;&#10;  // Handle filter changes&#10;  const handleFilterChange = useCallback((filterType, value) =&gt; {&#10;    setFilters((prev) =&gt; {&#10;      const newFilters = { ...prev };&#10;&#10;      switch (filterType) {&#10;        case &quot;searchTerm&quot;:&#10;          newFilters.searchTerm = value;&#10;          break;&#10;        case &quot;category&quot;:&#10;          newFilters.selectedCategory = value;&#10;          break;&#10;        case &quot;priceRange&quot;:&#10;          if (newFilters.selectedPriceRanges.includes(value)) {&#10;            newFilters.selectedPriceRanges =&#10;              newFilters.selectedPriceRanges.filter((range) =&gt; range !== value);&#10;          } else {&#10;            newFilters.selectedPriceRanges = [&#10;              ...newFilters.selectedPriceRanges,&#10;              value,&#10;            ];&#10;          }&#10;          break;&#10;        case &quot;rating&quot;:&#10;          if (newFilters.selectedRatings.includes(value)) {&#10;            newFilters.selectedRatings = newFilters.selectedRatings.filter(&#10;              (rating) =&gt; rating !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedRatings = [...newFilters.selectedRatings, value];&#10;          }&#10;          break;&#10;        case &quot;farmer&quot;:&#10;          if (newFilters.selectedFarmers.includes(value)) {&#10;            newFilters.selectedFarmers = newFilters.selectedFarmers.filter(&#10;              (farmer) =&gt; farmer !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedFarmers = [...newFilters.selectedFarmers, value];&#10;          }&#10;          break;&#10;        case &quot;tag&quot;:&#10;          if (newFilters.selectedTags.includes(value)) {&#10;            newFilters.selectedTags = newFilters.selectedTags.filter(&#10;              (tag) =&gt; tag !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedTags = [...newFilters.selectedTags, value];&#10;          }&#10;          break;&#10;        case &quot;priceSlider&quot;:&#10;          newFilters.priceRangeSlider = value;&#10;          break;&#10;        case &quot;sortBy&quot;:&#10;          newFilters.sortBy = value;&#10;          break;&#10;      }&#10;&#10;      return newFilters;&#10;    });&#10;&#10;    // Reset to first page when filters change&#10;    if (filterType !== &quot;sortBy&quot;) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, []);&#10;&#10;  // Clear all filters&#10;  const clearAllFilters = useCallback(() =&gt; {&#10;    setFilters({&#10;      searchTerm: &quot;&quot;,&#10;      selectedCategory: &quot;All Categories&quot;,&#10;      selectedPriceRanges: [],&#10;      selectedRatings: [],&#10;      selectedFarmers: [],&#10;      selectedTags: [],&#10;      priceRangeSlider: [0, 10000],&#10;      sortBy: &quot;newest&quot;,&#10;    });&#10;    setCurrentPage(1);&#10;  }, []);&#10;&#10;  // Handle page changes&#10;  const handlePageChange = useCallback((page) =&gt; {&#10;    setCurrentPage(page);&#10;    window.scrollTo({ top: 0, behavior: &quot;smooth&quot; });&#10;  }, []);&#10;&#10;  // Refresh data&#10;  const refreshData = useCallback(() =&gt; {&#10;    fetchProducts();&#10;  }, [fetchProducts]);&#10;&#10;  // Get active filter count&#10;  const getActiveFilterCount = () =&gt; {&#10;    let count = 0;&#10;    if (filters.selectedCategory !== &quot;All Categories&quot;) count++;&#10;    if (filters.selectedPriceRanges.length &gt; 0) count++;&#10;    if (filters.selectedRatings.length &gt; 0) count++;&#10;    if (filters.selectedFarmers.length &gt; 0) count++;&#10;    if (filters.selectedTags.length &gt; 0) count++;&#10;    if (filters.priceRangeSlider[0] !== 0 || filters.priceRangeSlider[1] !== 10000) count++;&#10;    return count;&#10;  };&#10;&#10;  // Pagination Component&#10;  const PaginationComponent = useMemo(() =&gt; {&#10;    if (paginationData.pagination.totalPages &lt;= 1) return null;&#10;&#10;    return (&#10;      &lt;div className=&quot;flex justify-center items-center space-x-2 mt-8&quot;&gt;&#10;        &lt;button&#10;          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;          disabled={!paginationData.pagination.hasPrevPage}&#10;          className=&quot;px-4 py-2 border rounded-lg disabled:opacity-50 disabled:cursor-not-allowed&#10;                     hover:bg-gray-50 transition-colors duration-200&quot;&#10;        &gt;&#10;          Previous&#10;        &lt;/button&gt;&#10;&#10;        &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;          {Array.from(&#10;            { length: Math.min(5, paginationData.pagination.totalPages) },&#10;            (_, i) =&gt; {&#10;              const page = Math.max(1, currentPage - 2) + i;&#10;              if (page &gt; paginationData.pagination.totalPages) return null;&#10;&#10;              return (&#10;                &lt;button&#10;                  key={page}&#10;                  onClick={() =&gt; handlePageChange(page)}&#10;                  className={`px-3 py-2 rounded-lg transition-colors duration-200 ${&#10;                    page === currentPage&#10;                      ? &quot;bg-green-600 text-white&quot;&#10;                      : &quot;border hover:bg-gray-50&quot;&#10;                  }`}&#10;                &gt;&#10;                  {page}&#10;                &lt;/button&gt;&#10;              );&#10;            },&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;button&#10;          onClick={() =&gt; handlePageChange(currentPage + 1)}&#10;          disabled={!paginationData.pagination.hasNextPage}&#10;          className=&quot;px-4 py-2 border rounded-lg disabled:opacity-50 disabled:cursor-not-allowed&#10;                     hover:bg-gray-50 transition-colors duration-200&quot;&#10;        &gt;&#10;          Next&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }, [paginationData.pagination, currentPage, handlePageChange]);&#10;&#10;  if (loading &amp;&amp; allProducts.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto&quot;&gt;&lt;/div&gt;&#10;            &lt;p className=&quot;mt-4 text-gray-600&quot;&gt;Loading fresh products...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;text-red-600 text-lg mb-4&quot;&gt;{error}&lt;/div&gt;&#10;            &lt;button&#10;              onClick={refreshData}&#10;              className=&quot;px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors&quot;&#10;            &gt;&#10;              Try Again&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Products Header */}&#10;        &lt;div className=&quot;bg-primary-600 text-white py-12&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;Fresh Products&lt;/h1&gt;&#10;            &lt;p className=&quot;text-xl text-primary-100&quot;&gt;&#10;              Discover fresh, locally-sourced produce from our trusted farmers&#10;            &lt;/p&gt;&#10;&#10;            {/* Search Results Info */}&#10;            {(filters.searchTerm || filters.selectedCategory !== &quot;All Categories&quot;) &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between flex-wrap gap-2&quot;&gt;&#10;                  &lt;div&gt;&#10;                    {filters.searchTerm &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Search results for:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          &quot;{filters.searchTerm}&quot;&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    {filters.selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Category:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          {filters.selectedCategory}&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    &lt;p className=&quot;text-sm text-primary-200&quot;&gt;&#10;                      {paginationData.pagination.totalProducts} products found&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Search Bar in Results */}&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      className=&quot;px-4 py-2 rounded-lg text-gray-900 focus:outline-none&quot;&#10;                      value={filters.searchTerm}&#10;                      onChange={(e) =&gt; handleFilterChange(&quot;searchTerm&quot;, e.target.value)}&#10;                      onKeyPress={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; fetchProducts()}&#10;                    /&gt;&#10;                    &lt;button&#10;                      onClick={fetchProducts}&#10;                      className=&quot;px-4 py-2 bg-primary-500 hover:bg-primary-400 rounded-lg transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filters and Products */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowMobileFilters(!showMobileFilters)}&#10;              className=&quot;w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-between&quot;&#10;            &gt;&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Filters&#10;                {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                    {getActiveFilterCount()}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/span&gt;&#10;              &lt;i&#10;                className={`fas fa-chevron-${showMobileFilters ? &quot;up&quot; : &quot;down&quot;}`}&#10;              &gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Summary */}&#10;          {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Active Filters ({getActiveFilterCount()})&#10;                &lt;/h4&gt;&#10;                &lt;button&#10;                  onClick={clearAllFilters}&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400&quot;&#10;                &gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {filters.selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200&quot;&gt;&#10;                    Category: {filters.selectedCategory}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;category&quot;, &quot;All Categories&quot;)}&#10;                      className=&quot;ml-2 text-primary-600 hover:text-primary-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;                {filters.selectedPriceRanges.map((range) =&gt; (&#10;                  &lt;span&#10;                    key={range}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;                  &gt;&#10;                    {range}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;priceRange&quot;, range)}&#10;                      className=&quot;ml-2 text-green-600 hover:text-green-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedRatings.map((rating) =&gt; (&#10;                  &lt;span&#10;                    key={rating}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  &gt;&#10;                    {rating}+ Stars&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;rating&quot;, rating)}&#10;                      className=&quot;ml-2 text-yellow-600 hover:text-yellow-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedFarmers.map((farmer) =&gt; (&#10;                  &lt;span&#10;                    key={farmer}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&#10;                  &gt;&#10;                    {farmer}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;farmer&quot;, farmer)}&#10;                      className=&quot;ml-2 text-blue-600 hover:text-blue-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedTags.map((tag) =&gt; (&#10;                  &lt;span&#10;                    key={tag}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;&#10;                  &gt;&#10;                    {tag}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;tag&quot;, tag)}&#10;                      className=&quot;ml-2 text-purple-600 hover:text-purple-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {(filters.priceRangeSlider[0] !== 0 ||&#10;                  filters.priceRangeSlider[1] !== 10000) &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;                    ৳{filters.priceRangeSlider[0]} - ৳{filters.priceRangeSlider[1]}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;priceSlider&quot;, [0, 10000])}&#10;                      className=&quot;ml-2 text-orange-600 hover:text-orange-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar */}&#10;            &lt;div&#10;              className={`lg:col-span-1 ${showMobileFilters ? &quot;block&quot; : &quot;hidden lg:block&quot;}`}&#10;            &gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sticky top-24&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Filters&#10;                  &lt;/h3&gt;&#10;                  {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                      {getActiveFilterCount()}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-th-large mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Category&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                    {CATEGORY_OPTIONS.map((category) =&gt; (&#10;                      &lt;label&#10;                        key={category}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;radio&quot;&#10;                          name=&quot;category&quot;&#10;                          checked={filters.selectedCategory === category}&#10;                          onChange={() =&gt; handleFilterChange(&quot;category&quot;, category)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {category}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Price Range (৳)&#10;                  &lt;/h4&gt;&#10;&#10;                  {/* Custom Price Range Slider */}&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={filters.priceRangeSlider[0]}&#10;                        onChange={(e) =&gt;&#10;                          handleFilterChange(&quot;priceSlider&quot;, [&#10;                            +e.target.value,&#10;                            filters.priceRangeSlider[1],&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={filters.priceRangeSlider[1]}&#10;                        onChange={(e) =&gt;&#10;                          handleFilterChange(&quot;priceSlider&quot;, [&#10;                            filters.priceRangeSlider[0],&#10;                            +e.target.value,&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;relative h-2 bg-gray-200 rounded-lg&quot;&gt;&#10;                        &lt;div&#10;                          className=&quot;absolute h-2 bg-primary-600 rounded-lg&quot;&#10;                          style={{&#10;                            left: `${(filters.priceRangeSlider[0] / 10000) * 100}%`,&#10;                            width: `${((filters.priceRangeSlider[1] - filters.priceRangeSlider[0]) / 10000) * 100}%`,&#10;                          }}&#10;                        &gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                      &lt;span&gt;৳{filters.priceRangeSlider[0]}&lt;/span&gt;&#10;                      &lt;span&gt;৳{filters.priceRangeSlider[1]}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {PRICE_RANGE_OPTIONS.map((option) =&gt; (&#10;                      &lt;label&#10;                        key={option.label}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedPriceRanges.includes(option.label)}&#10;                          onChange={() =&gt; handleFilterChange(&quot;priceRange&quot;, option.label)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {option.label}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Rating Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-star mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Rating&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {[5, 4, 3, 2, 1].map((rating) =&gt; (&#10;                      &lt;label&#10;                        key={rating}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedRatings.includes(rating)}&#10;                          onChange={() =&gt; handleFilterChange(&quot;rating&quot;, rating)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 flex items-center&quot;&gt;&#10;                          {[...Array(rating)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className=&quot;fas fa-star text-yellow-400 text-xs mr-1&quot;&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          {rating &lt; 5 &amp;&amp; &lt;span className=&quot;ml-1&quot;&gt;&amp; Up&lt;/span&gt;}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farmer Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-user mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                    {availableFarmers.length &gt; 0 ? (&#10;                      availableFarmers.map((farmer) =&gt; (&#10;                        &lt;label&#10;                          key={farmer}&#10;                          className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                        &gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            checked={filters.selectedFarmers.includes(farmer)}&#10;                            onChange={() =&gt; handleFilterChange(&quot;farmer&quot;, farmer)}&#10;                            className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                          /&gt;&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 truncate&quot;&gt;&#10;                            {farmer}&#10;                          &lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))&#10;                    ) : (&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 p-2&quot;&gt;&#10;                        Loading farmers...&#10;                      &lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tag Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-tags mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Tags&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {TAG_OPTIONS.map((tag) =&gt; (&#10;                      &lt;label&#10;                        key={tag}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedTags.includes(tag)}&#10;                          onChange={() =&gt; handleFilterChange(&quot;tag&quot;, tag)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {tag}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-4&quot;&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    disabled={getActiveFilterCount() === 0}&#10;                    className=&quot;w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-lg font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                    Clear All Filters&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    {paginationData.pagination.totalProducts} products&#10;                  &lt;/span&gt;&#10;                  {loading &amp;&amp; (&#10;                    &lt;div className=&quot;flex items-center text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span className=&quot;text-sm&quot;&gt;Loading...&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;label className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Sort by:&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.sortBy}&#10;                    onChange={(e) =&gt; handleFilterChange(&quot;sortBy&quot;, e.target.value)}&#10;                    className=&quot;border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                    &lt;option value=&quot;price-low&quot;&gt;Price: Low to High&lt;/option&gt;&#10;                    &lt;option value=&quot;price-high&quot;&gt;Price: High to Low&lt;/option&gt;&#10;                    &lt;option value=&quot;rating&quot;&gt;Highest Rated&lt;/option&gt;&#10;                    &lt;option value=&quot;popular&quot;&gt;Most Popular&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid */}&#10;              {loading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(9)].map((_, index) =&gt; (&#10;                    &lt;div&#10;                      key={index}&#10;                      className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden animate-pulse&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-full h-48 bg-gray-300 dark:bg-gray-600&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;p-6&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded mb-3 w-3/4&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded mb-4 w-1/2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : paginationData.products.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {paginationData.products.map((product) =&gt; (&#10;                      &lt;ProductCard key={product._id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {PaginationComponent}&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No products found&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                    Try adjusting your search criteria or browse all products&#10;                  &lt;/p&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                  &gt;&#10;                    Browse All Products&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/api-service.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/api-service.js" />
              <option name="originalContent" value="import globalCache, { sessionCache } from &quot;./cache&quot;;&#10;&#10;// Request deduplication to prevent multiple identical API calls&#10;const ongoingRequests = new Map();&#10;&#10;// Optimized API service with caching and request deduplication&#10;export class ApiService {&#10;  constructor() {&#10;    this.baseURL = &quot;/api&quot;;&#10;  }&#10;&#10;  // Generic fetch with caching and deduplication&#10;  async fetchWithCache(endpoint, params = {}, options = {}) {&#10;    const {&#10;      ttl = 5 * 60 * 1000, // 5 minutes default&#10;      useSessionCache = true,&#10;      skipCache = false,&#10;      ...fetchOptions&#10;    } = options;&#10;&#10;    // Generate cache key&#10;    const cacheKey = globalCache.generateKey(endpoint, params);&#10;    const sessionKey = sessionCache.generateKey(endpoint, params);&#10;&#10;    // Return cached data if available and not skipping cache&#10;    if (!skipCache) {&#10;      // Try memory cache first (fastest)&#10;      const memoryData = globalCache.get(cacheKey);&#10;      if (memoryData) {&#10;        return memoryData;&#10;      }&#10;&#10;      // Try session cache (survives page reloads)&#10;      if (useSessionCache) {&#10;        const sessionData = sessionCache.get(sessionKey);&#10;        if (sessionData) {&#10;          // Also store in memory cache for faster subsequent access&#10;          globalCache.set(cacheKey, sessionData, ttl);&#10;          return sessionData;&#10;        }&#10;      }&#10;    }&#10;&#10;    // Check if same request is already ongoing&#10;    const requestKey = `${endpoint}_${JSON.stringify(params)}`;&#10;    if (ongoingRequests.has(requestKey)) {&#10;      return ongoingRequests.get(requestKey);&#10;    }&#10;&#10;    // Build URL with params&#10;    const url = new URL(endpoint, window.location.origin);&#10;    Object.entries(params).forEach(([key, value]) =&gt; {&#10;      if (value !== null &amp;&amp; value !== undefined &amp;&amp; value !== &quot;&quot;) {&#10;        url.searchParams.append(key, value);&#10;      }&#10;    });&#10;&#10;    // Create the promise and store it to prevent duplicate requests&#10;    const requestPromise = fetch(url.toString(), {&#10;      method: &quot;GET&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        ...fetchOptions.headers,&#10;      },&#10;      ...fetchOptions,&#10;    })&#10;      .then(async (response) =&gt; {&#10;        if (!response.ok) {&#10;          throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;        return response.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        // Cache the successful response&#10;        if (!skipCache) {&#10;          globalCache.set(cacheKey, data, ttl);&#10;          if (useSessionCache) {&#10;            sessionCache.set(sessionKey, data, ttl);&#10;          }&#10;        }&#10;        return data;&#10;      })&#10;      .catch((error) =&gt; {&#10;        console.error(`API Error for ${endpoint}:`, error);&#10;        throw error;&#10;      })&#10;      .finally(() =&gt; {&#10;        // Remove from ongoing requests&#10;        ongoingRequests.delete(requestKey);&#10;      });&#10;&#10;    // Store the ongoing request&#10;    ongoingRequests.set(requestKey, requestPromise);&#10;&#10;    return requestPromise;&#10;  }&#10;&#10;  // Products API methods&#10;  async getProducts(params = {}) {&#10;    return this.fetchWithCache(&quot;/api/products&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for products&#10;      useSessionCache: true,&#10;    });&#10;  }&#10;&#10;  async getProduct(id) {&#10;    return this.fetchWithCache(&#10;      `/api/products/${id}`,&#10;      {},&#10;      {&#10;        ttl: 10 * 60 * 1000, // 10 minutes for individual products&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Categories API&#10;  async getCategories() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/categories&quot;,&#10;      {},&#10;      {&#10;        ttl: 30 * 60 * 1000, // 30 minutes for categories (rarely change)&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Farmers API&#10;  async getFarmers() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/farmers&quot;,&#10;      {},&#10;      {&#10;        ttl: 15 * 60 * 1000, // 15 minutes for farmers&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Orders API&#10;  async getOrders(params = {}) {&#10;    return this.fetchWithCache(&quot;/api/orders&quot;, params, {&#10;      ttl: 2 * 60 * 1000, // 2 minutes for orders (more dynamic)&#10;      useSessionCache: false, // Don't cache orders in session (sensitive data)&#10;    });&#10;  }&#10;&#10;  // Refresh specific cache entries&#10;  refreshProductsCache(params = {}) {&#10;    const cacheKey = globalCache.generateKey(&quot;/api/products&quot;, params);&#10;    const sessionKey = sessionCache.generateKey(&quot;/api/products&quot;, params);&#10;    globalCache.delete(cacheKey);&#10;    sessionCache.delete(sessionKey);&#10;  }&#10;&#10;  // Clear all cache&#10;  clearCache() {&#10;    globalCache.clear();&#10;    sessionCache.cleanup();&#10;  }&#10;&#10;  // Preload data for better performance&#10;  async preloadProducts(commonParams = []) {&#10;    const preloadPromises = commonParams.map((params) =&gt;&#10;      this.getProducts(params).catch((err) =&gt;&#10;        console.warn(&quot;Preload failed:&quot;, err),&#10;      ),&#10;    );&#10;    return Promise.allSettled(preloadPromises);&#10;  }&#10;}&#10;&#10;// Global API service instance&#10;export const apiService = new ApiService();&#10;&#10;// Hook for React components&#10;export function useApiService() {&#10;  return apiService;&#10;}&#10;" />
              <option name="updatedContent" value="import globalCache, { sessionCache } from &quot;./cache&quot;;&#10;&#10;// Request deduplication to prevent multiple identical API calls&#10;const ongoingRequests = new Map();&#10;&#10;// Optimized API service with caching and request deduplication&#10;export class ApiService {&#10;  constructor() {&#10;    this.baseURL = &quot;/api&quot;;&#10;  }&#10;&#10;  // Generic fetch with caching and deduplication&#10;  async fetchWithCache(endpoint, params = {}, options = {}) {&#10;    const {&#10;      ttl = 5 * 60 * 1000, // 5 minutes default&#10;      useSessionCache = true,&#10;      skipCache = false,&#10;      ...fetchOptions&#10;    } = options;&#10;&#10;    // Generate cache key&#10;    const cacheKey = globalCache.generateKey(endpoint, params);&#10;    const sessionKey = sessionCache.generateKey(endpoint, params);&#10;&#10;    // Return cached data if available and not skipping cache&#10;    if (!skipCache) {&#10;      // Try memory cache first (fastest)&#10;      const memoryData = globalCache.get(cacheKey);&#10;      if (memoryData) {&#10;        return memoryData;&#10;      }&#10;&#10;      // Try session cache (survives page reloads)&#10;      if (useSessionCache) {&#10;        const sessionData = sessionCache.get(sessionKey);&#10;        if (sessionData) {&#10;          // Also store in memory cache for faster subsequent access&#10;          globalCache.set(cacheKey, sessionData, ttl);&#10;          return sessionData;&#10;        }&#10;      }&#10;    }&#10;&#10;    // Check if same request is already ongoing&#10;    const requestKey = `${endpoint}_${JSON.stringify(params)}`;&#10;    if (ongoingRequests.has(requestKey)) {&#10;      return ongoingRequests.get(requestKey);&#10;    }&#10;&#10;    // Build URL with params&#10;    const url = new URL(endpoint, window.location.origin);&#10;    Object.entries(params).forEach(([key, value]) =&gt; {&#10;      if (value !== null &amp;&amp; value !== undefined &amp;&amp; value !== &quot;&quot;) {&#10;        url.searchParams.append(key, value);&#10;      }&#10;    });&#10;&#10;    // Create the promise and store it to prevent duplicate requests&#10;    const requestPromise = fetch(url.toString(), {&#10;      method: &quot;GET&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        ...fetchOptions.headers,&#10;      },&#10;      ...fetchOptions,&#10;    })&#10;      .then(async (response) =&gt; {&#10;        if (!response.ok) {&#10;          throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;        return response.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        // Cache the successful response&#10;        if (!skipCache) {&#10;          globalCache.set(cacheKey, data, ttl);&#10;          if (useSessionCache) {&#10;            sessionCache.set(sessionKey, data, ttl);&#10;          }&#10;        }&#10;        return data;&#10;      })&#10;      .catch((error) =&gt; {&#10;        console.error(`API Error for ${endpoint}:`, error);&#10;        throw error;&#10;      })&#10;      .finally(() =&gt; {&#10;        // Remove from ongoing requests&#10;        ongoingRequests.delete(requestKey);&#10;      });&#10;&#10;    // Store the ongoing request&#10;    ongoingRequests.set(requestKey, requestPromise);&#10;&#10;    return requestPromise;&#10;  }&#10;&#10;  // Products API methods&#10;  async getProducts(params = {}) {&#10;    return this.fetchWithCache(&quot;/api/products&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for products&#10;      useSessionCache: true,&#10;    });&#10;  }&#10;&#10;  async getProduct(id) {&#10;    return this.fetchWithCache(&#10;      `/api/products/${id}`,&#10;      {},&#10;      {&#10;        ttl: 10 * 60 * 1000, // 10 minutes for individual products&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Categories API&#10;  async getCategories() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/categories&quot;,&#10;      {},&#10;      {&#10;        ttl: 30 * 60 * 1000, // 30 minutes for categories (rarely change)&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Farmers API&#10;  async getFarmers() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/farmers&quot;,&#10;      {},&#10;      {&#10;        ttl: 15 * 60 * 1000, // 15 minutes for farmers&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Orders API methods&#10;  async getOrders(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/orders&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for orders (more dynamic data)&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async getOrderById(orderId, options = {}) {&#10;    return this.fetchWithCache(`/api/orders/${orderId}`, {}, options);&#10;  }&#10;&#10;  async updateOrder(orderId, updateData) {&#10;    const response = await fetch(`/api/orders`, {&#10;      method: &quot;PATCH&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ orderId, ...updateData }),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to update order: ${response.status}`);&#10;    }&#10;&#10;    // Clear orders cache when updating&#10;    this.clearOrdersCache();&#10;    return response.json();&#10;  }&#10;&#10;  // Cache management for orders&#10;  clearOrdersCache() {&#10;    // Clear all order-related cache entries&#10;    const orderKeys = globalCache.getStats().keys.filter(key =&gt; &#10;      key.includes('/api/orders')&#10;    );&#10;    orderKeys.forEach(key =&gt; globalCache.delete(key));&#10;    &#10;    // Clear session cache&#10;    if (typeof window !== 'undefined') {&#10;      sessionCache.cleanup();&#10;    }&#10;  }&#10;&#10;  // Optimized method for dashboard data - fetch both products and orders efficiently&#10;  async getDashboardData(userId, userEmail, options = {}) {&#10;    const { forceRefresh = false } = options;&#10;    &#10;    try {&#10;      // Fetch products and orders in parallel with optimized parameters&#10;      const [productsData, ordersData] = await Promise.all([&#10;        this.getProducts({&#10;          limit: 200, // Reduced limit for dashboard&#10;          farmerId: userId,&#10;          farmerEmail: userEmail,&#10;        }, { skipCache: forceRefresh }),&#10;        &#10;        this.getOrders({&#10;          limit: 100, // Reduced limit for dashboard&#10;          farmerId: userId,&#10;          farmerEmail: userEmail,&#10;        }, { skipCache: forceRefresh })&#10;      ]);&#10;&#10;      return {&#10;        products: productsData.products || [],&#10;        orders: ordersData.orders || [],&#10;        meta: {&#10;          productsCount: productsData.products?.length || 0,&#10;          ordersCount: ordersData.orders?.length || 0,&#10;          fromCache: !forceRefresh&#10;        }&#10;      };&#10;    } catch (error) {&#10;      console.error('Dashboard data fetch error:', error);&#10;      throw error;&#10;    }&#10;  }&#10;}&#10;&#10;// Global API service instance&#10;export const apiService = new ApiService();&#10;&#10;// Hook for React components&#10;export function useApiService() {&#10;  return apiService;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/cache.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/cache.js" />
              <option name="originalContent" value="// Cache utility for client-side data caching&#10;class CacheManager {&#10;  constructor() {&#10;    this.cache = new Map();&#10;    this.timestamps = new Map();&#10;    this.defaultTTL = 5 * 60 * 1000; // 5 minutes default TTL&#10;  }&#10;&#10;  // Generate cache key from parameters&#10;  generateKey(baseKey, params = {}) {&#10;    const sortedParams = Object.keys(params)&#10;      .sort()&#10;      .reduce((result, key) =&gt; {&#10;        result[key] = params[key];&#10;        return result;&#10;      }, {});&#10;    return `${baseKey}_${JSON.stringify(sortedParams)}`;&#10;  }&#10;&#10;  // Set cache entry with TTL&#10;  set(key, data, ttl = this.defaultTTL) {&#10;    this.cache.set(key, data);&#10;    this.timestamps.set(key, Date.now() + ttl);&#10;&#10;    // Clean up expired entries periodically&#10;    this.cleanup();&#10;  }&#10;&#10;  // Get cache entry if not expired&#10;  get(key) {&#10;    const timestamp = this.timestamps.get(key);&#10;    if (!timestamp || Date.now() &gt; timestamp) {&#10;      this.cache.delete(key);&#10;      this.timestamps.delete(key);&#10;      return null;&#10;    }&#10;    return this.cache.get(key);&#10;  }&#10;&#10;  // Check if cache has valid entry&#10;  has(key) {&#10;    const timestamp = this.timestamps.get(key);&#10;    if (!timestamp || Date.now() &gt; timestamp) {&#10;      this.cache.delete(key);&#10;      this.timestamps.delete(key);&#10;      return false;&#10;    }&#10;    return this.cache.has(key);&#10;  }&#10;&#10;  // Clear specific entry&#10;  delete(key) {&#10;    this.cache.delete(key);&#10;    this.timestamps.delete(key);&#10;  }&#10;&#10;  // Clear all cache&#10;  clear() {&#10;    this.cache.clear();&#10;    this.timestamps.clear();&#10;  }&#10;&#10;  // Clean up expired entries&#10;  cleanup() {&#10;    const now = Date.now();&#10;    for (const [key, timestamp] of this.timestamps.entries()) {&#10;      if (now &gt; timestamp) {&#10;        this.cache.delete(key);&#10;        this.timestamps.delete(key);&#10;      }&#10;    }&#10;  }&#10;&#10;  // Get cache stats&#10;  getStats() {&#10;    return {&#10;      size: this.cache.size,&#10;      keys: Array.from(this.cache.keys()),&#10;    };&#10;  }&#10;}&#10;&#10;// Global cache instance&#10;const globalCache = new CacheManager();&#10;&#10;export default globalCache;&#10;&#10;// Session storage cache for persistence across page reloads&#10;export class SessionCache {&#10;  constructor(prefix = &quot;farmfresh_&quot;) {&#10;    this.prefix = prefix;&#10;  }&#10;&#10;  generateKey(baseKey, params = {}) {&#10;    const sortedParams = Object.keys(params)&#10;      .sort()&#10;      .reduce((result, key) =&gt; {&#10;        result[key] = params[key];&#10;        return result;&#10;      }, {});&#10;    return `${this.prefix}${baseKey}_${JSON.stringify(sortedParams)}`;&#10;  }&#10;&#10;  set(key, data, ttl = 5 * 60 * 1000) {&#10;    if (typeof window === &quot;undefined&quot;) return;&#10;&#10;    const item = {&#10;      data,&#10;      timestamp: Date.now() + ttl,&#10;    };&#10;&#10;    try {&#10;      sessionStorage.setItem(key, JSON.stringify(item));&#10;    } catch (e) {&#10;      console.warn(&quot;SessionStorage full, clearing old entries&quot;);&#10;      this.cleanup();&#10;      try {&#10;        sessionStorage.setItem(key, JSON.stringify(item));&#10;      } catch (e) {&#10;        console.error(&quot;Failed to store in sessionStorage:&quot;, e);&#10;      }&#10;    }&#10;  }&#10;&#10;  get(key) {&#10;    if (typeof window === &quot;undefined&quot;) return null;&#10;&#10;    try {&#10;      const item = sessionStorage.getItem(key);&#10;      if (!item) return null;&#10;&#10;      const parsed = JSON.parse(item);&#10;      if (Date.now() &gt; parsed.timestamp) {&#10;        sessionStorage.removeItem(key);&#10;        return null;&#10;      }&#10;&#10;      return parsed.data;&#10;    } catch (e) {&#10;      sessionStorage.removeItem(key);&#10;      return null;&#10;    }&#10;  }&#10;&#10;  has(key) {&#10;    return this.get(key) !== null;&#10;  }&#10;&#10;  delete(key) {&#10;    if (typeof window === &quot;undefined&quot;) return;&#10;    sessionStorage.removeItem(key);&#10;  }&#10;&#10;  cleanup() {&#10;    if (typeof window === &quot;undefined&quot;) return;&#10;&#10;    const keysToRemove = [];&#10;    for (let i = 0; i &lt; sessionStorage.length; i++) {&#10;      const key = sessionStorage.key(i);&#10;      if (key &amp;&amp; key.startsWith(this.prefix)) {&#10;        try {&#10;          const item = JSON.parse(sessionStorage.getItem(key));&#10;          if (Date.now() &gt; item.timestamp) {&#10;            keysToRemove.push(key);&#10;          }&#10;        } catch (e) {&#10;          keysToRemove.push(key);&#10;        }&#10;      }&#10;    }&#10;&#10;    keysToRemove.forEach((key) =&gt; sessionStorage.removeItem(key));&#10;  }&#10;}&#10;&#10;export const sessionCache = new SessionCache();&#10;" />
              <option name="updatedContent" value="// Cache utility for client-side data caching&#10;class CacheManager {&#10;  constructor() {&#10;    this.cache = new Map();&#10;    this.timestamps = new Map();&#10;    this.defaultTTL = 5 * 60 * 1000; // 5 minutes default TTL&#10;  }&#10;&#10;  // Generate cache key from parameters&#10;  generateKey(baseKey, params = {}) {&#10;    const sortedParams = Object.keys(params)&#10;      .sort()&#10;      .reduce((result, key) =&gt; {&#10;        result[key] = params[key];&#10;        return result;&#10;      }, {});&#10;    return `${baseKey}_${JSON.stringify(sortedParams)}`;&#10;  }&#10;&#10;  // Set cache entry with TTL&#10;  set(key, data, ttl = this.defaultTTL) {&#10;    this.cache.set(key, data);&#10;    this.timestamps.set(key, Date.now() + ttl);&#10;&#10;    // Clean up expired entries periodically&#10;    this.cleanup();&#10;  }&#10;&#10;  // Get cache entry if not expired&#10;  get(key) {&#10;    const timestamp = this.timestamps.get(key);&#10;    if (!timestamp || Date.now() &gt; timestamp) {&#10;      this.cache.delete(key);&#10;      this.timestamps.delete(key);&#10;      return null;&#10;    }&#10;    return this.cache.get(key);&#10;  }&#10;&#10;  // Check if cache has valid entry&#10;  has(key) {&#10;    const timestamp = this.timestamps.get(key);&#10;    if (!timestamp || Date.now() &gt; timestamp) {&#10;      this.cache.delete(key);&#10;      this.timestamps.delete(key);&#10;      return false;&#10;    }&#10;    return this.cache.has(key);&#10;  }&#10;&#10;  // Clear specific entry&#10;  delete(key) {&#10;    this.cache.delete(key);&#10;    this.timestamps.delete(key);&#10;  }&#10;&#10;  // Clear all cache&#10;  clear() {&#10;    this.cache.clear();&#10;    this.timestamps.clear();&#10;  }&#10;&#10;  // Clean up expired entries&#10;  cleanup() {&#10;    const now = Date.now();&#10;    for (const [key, timestamp] of this.timestamps.entries()) {&#10;      if (now &gt; timestamp) {&#10;        this.cache.delete(key);&#10;        this.timestamps.delete(key);&#10;      }&#10;    }&#10;  }&#10;&#10;  // Get cache stats&#10;  getStats() {&#10;    return {&#10;      size: this.cache.size,&#10;      keys: Array.from(this.cache.keys()),&#10;    };&#10;  }&#10;}&#10;&#10;// Global cache instance&#10;const globalCache = new CacheManager();&#10;&#10;export default globalCache;&#10;&#10;// Session storage cache for persistence across page reloads&#10;export class SessionCache {&#10;  constructor(prefix = &quot;farmfresh_&quot;) {&#10;    this.prefix = prefix;&#10;    this.memoryCache = new Map(); // In-memory cache for large items&#10;  }&#10;&#10;  generateKey(baseKey, params = {}) {&#10;    const sortedParams = Object.keys(params)&#10;      .sort()&#10;      .reduce((result, key) =&gt; {&#10;        result[key] = params[key];&#10;        return result;&#10;      }, {});&#10;    return `${this.prefix}${baseKey}_${JSON.stringify(sortedParams)}`;&#10;  }&#10;&#10;  set(key, data, ttl = 5 * 60 * 1000) {&#10;    if (typeof window === &quot;undefined&quot;) return;&#10;&#10;    const item = {&#10;      data,&#10;      timestamp: Date.now() + ttl,&#10;    };&#10;&#10;    // Check data size and use appropriate storage strategy&#10;    const serializedItem = JSON.stringify(item);&#10;    const sizeInMB = new Blob([serializedItem]).size / (1024 * 1024);&#10;&#10;    try {&#10;      // If data is too large (&gt;2MB), use memory cache only&#10;      if (sizeInMB &gt; 2) {&#10;        console.warn(`Data too large for sessionStorage (${sizeInMB.toFixed(2)}MB), using memory cache`);&#10;        this.memoryCache.set(key, item);&#10;        return;&#10;      }&#10;&#10;      sessionStorage.setItem(key, serializedItem);&#10;    } catch (e) {&#10;      if (e.name === 'QuotaExceededError') {&#10;        console.warn(&quot;SessionStorage quota exceeded, using memory cache and clearing old entries&quot;);&#10;        // Clear old entries&#10;        this.cleanup();&#10;        &#10;        // Store in memory cache instead&#10;        this.memoryCache.set(key, item);&#10;        &#10;        // Try to store smaller items in sessionStorage after cleanup&#10;        try {&#10;          if (sizeInMB &lt; 1) {&#10;            sessionStorage.setItem(key, serializedItem);&#10;          }&#10;        } catch (e2) {&#10;          console.warn(&quot;Still cannot store in sessionStorage after cleanup&quot;);&#10;        }&#10;      } else {&#10;        console.error(&quot;Failed to store in sessionStorage:&quot;, e);&#10;      }&#10;    }&#10;  }&#10;&#10;  get(key) {&#10;    if (typeof window === &quot;undefined&quot;) return null;&#10;&#10;    // Check memory cache first&#10;    if (this.memoryCache.has(key)) {&#10;      const item = this.memoryCache.get(key);&#10;      if (item.timestamp &gt; Date.now()) {&#10;        return item.data;&#10;      } else {&#10;        this.memoryCache.delete(key);&#10;      }&#10;    }&#10;&#10;    // Then check sessionStorage&#10;    try {&#10;      const item = sessionStorage.getItem(key);&#10;      if (!item) return null;&#10;&#10;      const parsed = JSON.parse(item);&#10;      if (parsed.timestamp &gt; Date.now()) {&#10;        return parsed.data;&#10;      } else {&#10;        sessionStorage.removeItem(key);&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      console.error(&quot;Failed to retrieve from sessionStorage:&quot;, e);&#10;      sessionStorage.removeItem(key);&#10;      return null;&#10;    }&#10;  }&#10;&#10;  has(key) {&#10;    return this.get(key) !== null;&#10;  }&#10;&#10;  delete(key) {&#10;    if (typeof window === &quot;undefined&quot;) return;&#10;    sessionStorage.removeItem(key);&#10;  }&#10;&#10;  cleanup() {&#10;    if (typeof window === &quot;undefined&quot;) return;&#10;&#10;    const keysToRemove = [];&#10;    for (let i = 0; i &lt; sessionStorage.length; i++) {&#10;      const key = sessionStorage.key(i);&#10;      if (key &amp;&amp; key.startsWith(this.prefix)) {&#10;        try {&#10;          const item = JSON.parse(sessionStorage.getItem(key));&#10;          if (Date.now() &gt; item.timestamp) {&#10;            keysToRemove.push(key);&#10;          }&#10;        } catch (e) {&#10;          keysToRemove.push(key);&#10;        }&#10;      }&#10;    }&#10;&#10;    keysToRemove.forEach((key) =&gt; sessionStorage.removeItem(key));&#10;  }&#10;}&#10;&#10;export const sessionCache = new SessionCache();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js" />
              <option name="updatedContent" value="// MongoDB Atlas Performance Optimization Script&#10;// Run this script to create optimized indexes for better Atlas performance&#10;&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function createAtlasOptimizedIndexes() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log(&quot; Starting MongoDB Atlas index optimization...&quot;);&#10;&#10;    // Products Collection - Optimized for products page performance&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    console.log(&quot; Optimizing products collection indexes...&quot;);&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, category: 1, featured: 1, createdAt: -1 },&#10;      { name: &quot;products_main_query_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, featured: 1, averageRating: -1 },&#10;      { name: &quot;products_featured_rating_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, price: 1 },&#10;      { name: &quot;products_price_filter_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, purchaseCount: -1 },&#10;      { name: &quot;products_popularity_idx&quot;, background: true }&#10;    );&#10;&#10;    // Orders Collection - Optimized for farmer dashboard and orders pages&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    console.log(&quot; Optimizing orders collection indexes...&quot;);&#10;    &#10;    // Critical farmer query indexes&#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_orders_main_idx&quot;, background: true }&#10;    );&#10;    &#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_email_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Customer order indexes&#10;    await ordersCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;customer_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Status filtering&#10;    await ordersCollection.createIndex(&#10;      { status: 1, createdAt: -1 },&#10;      { name: &quot;status_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Reviews Collection - For faster review loading&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    console.log(&quot;⭐ Optimizing reviews collection indexes...&quot;);&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { productId: 1, createdAt: -1 },&#10;      { name: &quot;product_reviews_idx&quot;, background: true }&#10;    );&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_product_review_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    // Favorites Collection - For user favorites&#10;    const favoritesCollection = db.collection(&quot;favorites&quot;);&#10;    console.log(&quot;❤️ Optimizing favorites collection indexes...&quot;);&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_favorites_idx&quot;, background: true, unique: true }&#10;    );&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;user_favorites_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Carts Collection - For cart operations&#10;    const cartsCollection = db.collection(&quot;carts&quot;);&#10;    console.log(&quot; Optimizing carts collection indexes...&quot;);&#10;    &#10;    await cartsCollection.createIndex(&#10;      { userId: 1 },&#10;      { name: &quot;user_cart_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    console.log(&quot;✅ Atlas optimization complete!&quot;);&#10;    console.log(&quot; Performance improvements applied for:&quot;);&#10;    console.log(&quot;   • Products page - faster filtering and sorting&quot;);&#10;    console.log(&quot;   • Farmer dashboard - optimized order queries&quot;);&#10;    console.log(&quot;   • Farmer orders page - improved farmer-specific queries&quot;);&#10;    console.log(&quot;   • Reviews and favorites - faster user interactions&quot;);&#10;    &#10;    return true;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error optimizing indexes:&quot;, error);&#10;    return false;&#10;  }&#10;}&#10;&#10;// Atlas-specific query optimization hints&#10;async function optimizeAtlasQueries() {&#10;  console.log(&quot; Applying Atlas-specific optimizations...&quot;);&#10;  &#10;  const client = await clientPromise;&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;  &#10;  // Enable collection-level read preferences for better performance&#10;  const collections = ['products', 'orders', 'reviews', 'favorites', 'carts'];&#10;  &#10;  for (const collectionName of collections) {&#10;    const collection = db.collection(collectionName);&#10;    &#10;    // Set read preference to secondary for read-heavy operations&#10;    collection.readPreference = 'secondaryPreferred';&#10;    &#10;    console.log(` Optimized read preference for ${collectionName}`);&#10;  }&#10;  &#10;  console.log(&quot;✅ Query optimizations applied!&quot;);&#10;}&#10;&#10;// Main execution function&#10;async function main() {&#10;  console.log(&quot; MongoDB Atlas Performance Optimization&quot;);&#10;  console.log(&quot;=========================================&quot;);&#10;  &#10;  const indexSuccess = await createAtlasOptimizedIndexes();&#10;  &#10;  if (indexSuccess) {&#10;    await optimizeAtlasQueries();&#10;    console.log(&quot; Your FarmFresh app is now optimized for Atlas!&quot;);&#10;    console.log(&quot; Expected performance improvements:&quot;);&#10;    console.log(&quot;   • Products page: 60-80% faster&quot;);&#10;    console.log(&quot;   • Farmer dashboard: 70-90% faster&quot;); &#10;    console.log(&quot;   • Order queries: 50-70% faster&quot;);&#10;  } else {&#10;    console.log(&quot;❌ Optimization failed. Check your MongoDB connection.&quot;);&#10;  }&#10;}&#10;&#10;// Run if called directly&#10;if (import.meta.url === `file://${process.argv[1]}`) {&#10;  main().catch(console.error);&#10;}&#10;&#10;export { createAtlasOptimizedIndexes, optimizeAtlasQueries };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/[id]/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/[id]/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // First, let's check what products actually exist&#10;    const allProductsCheck = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    let targetProduct = null;&#10;&#10;    // Try multiple approaches to find the product&#10;&#10;    // 1. Try exact string match&#10;    targetProduct = await db.collection(&quot;products&quot;).findOne({ _id: id });&#10;&#10;    // 2. If not found and ID looks like ObjectId, try ObjectId&#10;    if (!targetProduct &amp;&amp; ObjectId.isValid(id)) {&#10;      targetProduct = await db&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(id) });&#10;    }&#10;&#10;    // 3. Try farmerId field match (in case it's stored there)&#10;    if (!targetProduct) {&#10;      targetProduct = await db.collection(&quot;products&quot;).findOne({ farmerId: id });&#10;&#10;      // If we found a product by farmerId, this means we're looking for farmer details, not product details&#10;      if (targetProduct) {&#10;        // Since this is a farmer ID, let's find all products by this farmer and return farmer info&#10;        const farmerProducts = await db&#10;          .collection(&quot;products&quot;)&#10;          .find({ farmerId: id })&#10;          .toArray();&#10;&#10;        // Get farmer info from the first product or create default&#10;        const farmerInfo = targetProduct.farmer || {&#10;          name: &quot;Local Farmer&quot;,&#10;          location: &quot;Bangladesh&quot;,&#10;          bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;          experience: 5,&#10;          id: id,&#10;        };&#10;&#10;        // Return farmer details with their products&#10;        return NextResponse.json({&#10;          isFarmerDetails: true,&#10;          farmer: farmerInfo,&#10;          farmerProducts: farmerProducts.map((p) =&gt; ({&#10;            ...p,&#10;            images: (() =&gt; {&#10;              const imageArray = [];&#10;              if (p.image) imageArray.push(p.image);&#10;              if (p.images &amp;&amp; Array.isArray(p.images))&#10;                imageArray.push(...p.images);&#10;              return [&#10;                ...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim())),&#10;              ];&#10;            })(),&#10;          })),&#10;          totalProducts: farmerProducts.length,&#10;          farmerId: id,&#10;        });&#10;      }&#10;    }&#10;&#10;    // 4. Try searching in nested structures (legacy support)&#10;    if (!targetProduct) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;&#10;      for (const doc of productDocuments) {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          const found = doc.products.find(&#10;            (product) =&gt;&#10;              product._id === id ||&#10;              product._id?.toString() === id ||&#10;              product.farmerId === id ||&#10;              (ObjectId.isValid(id) &amp;&amp;&#10;                product._id?.toString() === new ObjectId(id).toString()),&#10;          );&#10;          if (found) {&#10;            targetProduct = found;&#10;            break;&#10;          }&#10;        }&#10;      }&#10;    }&#10;&#10;    // 5. Last resort: search by any field that might contain this ID&#10;    if (!targetProduct) {&#10;      const regexSearch = await db.collection(&quot;products&quot;).findOne({&#10;        $or: [&#10;          { _id: { $regex: id, $options: &quot;i&quot; } },&#10;          { farmerId: { $regex: id, $options: &quot;i&quot; } },&#10;          { &quot;farmer.id&quot;: id },&#10;          { &quot;farmer._id&quot;: id },&#10;        ],&#10;      });&#10;      targetProduct = regexSearch;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        {&#10;          error: &quot;Product not found&quot;,&#10;          searchedId: id,&#10;          totalProductsInDb: allProductsCheck.length,&#10;          availableIds: allProductsCheck.slice(0, 10).map((p) =&gt; p._id),&#10;        },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Get all products for finding related products&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If products are in nested structure, extract them&#10;    if (allProducts.length &gt; 0 &amp;&amp; allProducts[0].products) {&#10;      let extractedProducts = [];&#10;      allProducts.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          extractedProducts = extractedProducts.concat(doc.products);&#10;        }&#10;      });&#10;      allProducts = extractedProducts;&#10;    }&#10;&#10;    // Add default values for missing fields&#10;    const product = {&#10;      ...targetProduct,&#10;      // Combine both image sources - single image field and images array&#10;      images: (() =&gt; {&#10;        const imageArray = [];&#10;&#10;        // Add single image if it exists&#10;        if (targetProduct.image) {&#10;          imageArray.push(targetProduct.image);&#10;        }&#10;&#10;        // Add images array if it exists&#10;        if (targetProduct.images &amp;&amp; Array.isArray(targetProduct.images)) {&#10;          imageArray.push(...targetProduct.images);&#10;        }&#10;&#10;        // Remove duplicates and empty values&#10;        return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;      })(),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch real performance metrics from orders collection&#10;    const performanceMetrics = await calculateProductPerformance(db, id);&#10;&#10;    // Add performance metrics to the product&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products (same category, exclude current product)&#10;    let relatedProducts = allProducts&#10;      .filter(&#10;        (p) =&gt;&#10;          p.category === enhancedProduct.category &amp;&amp;&#10;          p._id !== enhancedProduct._id,&#10;      )&#10;      .slice(0, 4)&#10;      .map((p) =&gt; ({&#10;        ...p,&#10;        // Fix related products images too - combine both sources&#10;        images: (() =&gt; {&#10;          const imageArray = [];&#10;&#10;          // Add single image if it exists&#10;          if (p.image) {&#10;            imageArray.push(p.image);&#10;          }&#10;&#10;          // Add images array if it exists&#10;          if (p.images &amp;&amp; Array.isArray(p.images)) {&#10;            imageArray.push(...p.images);&#10;          }&#10;&#10;          // Remove duplicates and empty values&#10;          return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;        })(),&#10;        farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;        stock: p.stock || 50,&#10;        isOrganic: p.isOrganic || false,&#10;        isFresh: p.isFresh || true,&#10;      }));&#10;&#10;    // Calculate real ratings for related products too&#10;    relatedProducts = enhanceProductsWithRatings(relatedProducts);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date().toISOString();&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // First, let's check what products actually exist&#10;    const allProductsCheck = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    let targetProduct = null;&#10;&#10;    // Try multiple approaches to find the product&#10;&#10;    // 1. Try exact string match&#10;    targetProduct = await db.collection(&quot;products&quot;).findOne({ _id: id });&#10;&#10;    // 2. If not found and ID looks like ObjectId, try ObjectId&#10;    if (!targetProduct &amp;&amp; ObjectId.isValid(id)) {&#10;      targetProduct = await db&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(id) });&#10;    }&#10;&#10;    // 3. Try farmerId field match (in case it's stored there)&#10;    if (!targetProduct) {&#10;      targetProduct = await db.collection(&quot;products&quot;).findOne({ farmerId: id });&#10;&#10;      // If we found a product by farmerId, this means we're looking for farmer details, not product details&#10;      if (targetProduct) {&#10;        // Since this is a farmer ID, let's find all products by this farmer and return farmer info&#10;        const farmerProducts = await db&#10;          .collection(&quot;products&quot;)&#10;          .find({ farmerId: id })&#10;          .toArray();&#10;&#10;        // Get farmer info from the first product or create default&#10;        const farmerInfo = targetProduct.farmer || {&#10;          name: &quot;Local Farmer&quot;,&#10;          location: &quot;Bangladesh&quot;,&#10;          bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;          experience: 5,&#10;          id: id,&#10;        };&#10;&#10;        // Return farmer details with their products&#10;        return NextResponse.json({&#10;          isFarmerDetails: true,&#10;          farmer: farmerInfo,&#10;          farmerProducts: farmerProducts.map((p) =&gt; ({&#10;            ...p,&#10;            images: (() =&gt; {&#10;              const imageArray = [];&#10;              if (p.image) imageArray.push(p.image);&#10;              if (p.images &amp;&amp; Array.isArray(p.images))&#10;                imageArray.push(...p.images);&#10;              return [&#10;                ...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim())),&#10;              ];&#10;            })(),&#10;          })),&#10;          totalProducts: farmerProducts.length,&#10;          farmerId: id,&#10;        });&#10;      }&#10;    }&#10;&#10;    // 4. Try searching in nested structures (legacy support)&#10;    if (!targetProduct) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;&#10;      for (const doc of productDocuments) {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          const found = doc.products.find(&#10;            (product) =&gt;&#10;              product._id === id ||&#10;              product._id?.toString() === id ||&#10;              product.farmerId === id ||&#10;              (ObjectId.isValid(id) &amp;&amp;&#10;                product._id?.toString() === new ObjectId(id).toString()),&#10;          );&#10;          if (found) {&#10;            targetProduct = found;&#10;            break;&#10;          }&#10;        }&#10;      }&#10;    }&#10;&#10;    // 5. Last resort: search by any field that might contain this ID&#10;    if (!targetProduct) {&#10;      const regexSearch = await db.collection(&quot;products&quot;).findOne({&#10;        $or: [&#10;          { _id: { $regex: id, $options: &quot;i&quot; } },&#10;          { farmerId: { $regex: id, $options: &quot;i&quot; } },&#10;          { &quot;farmer.id&quot;: id },&#10;          { &quot;farmer._id&quot;: id },&#10;        ],&#10;      });&#10;      targetProduct = regexSearch;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        {&#10;          error: &quot;Product not found&quot;,&#10;          searchedId: id,&#10;          totalProductsInDb: allProductsCheck.length,&#10;          availableIds: allProductsCheck.slice(0, 10).map((p) =&gt; p._id),&#10;        },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Get all products for finding related products&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If products are in nested structure, extract them&#10;    if (allProducts.length &gt; 0 &amp;&amp; allProducts[0].products) {&#10;      let extractedProducts = [];&#10;      allProducts.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          extractedProducts = extractedProducts.concat(doc.products);&#10;        }&#10;      });&#10;      allProducts = extractedProducts;&#10;    }&#10;&#10;    // Add default values for missing fields&#10;    const product = {&#10;      ...targetProduct,&#10;      // Combine both image sources - single image field and images array&#10;      images: (() =&gt; {&#10;        const imageArray = [];&#10;&#10;        // Add single image if it exists&#10;        if (targetProduct.image) {&#10;          imageArray.push(targetProduct.image);&#10;        }&#10;&#10;        // Add images array if it exists&#10;        if (targetProduct.images &amp;&amp; Array.isArray(targetProduct.images)) {&#10;          imageArray.push(...targetProduct.images);&#10;        }&#10;&#10;        // Remove duplicates and empty values&#10;        return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;      })(),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch real performance metrics from orders collection&#10;    const performanceMetrics = await calculateProductPerformance(db, id);&#10;&#10;    // Add performance metrics to the product&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products (same category, exclude current product)&#10;    let relatedProducts = allProducts&#10;      .filter(&#10;        (p) =&gt;&#10;          p.category === enhancedProduct.category &amp;&amp;&#10;          p._id !== enhancedProduct._id,&#10;      )&#10;      .slice(0, 4)&#10;      .map((p) =&gt; ({&#10;        ...p,&#10;        // Fix related products images too - combine both sources&#10;        images: (() =&gt; {&#10;          const imageArray = [];&#10;&#10;          // Add single image if it exists&#10;          if (p.image) {&#10;            imageArray.push(p.image);&#10;          }&#10;&#10;          // Add images array if it exists&#10;          if (p.images &amp;&amp; Array.isArray(p.images)) {&#10;            imageArray.push(...p.images);&#10;          }&#10;&#10;          // Remove duplicates and empty values&#10;          return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;        })(),&#10;        farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;        stock: p.stock || 50,&#10;        isOrganic: p.isOrganic || false,&#10;        isFresh: p.isFresh || true,&#10;      }));&#10;&#10;    // Calculate real ratings for related products too&#10;    relatedProducts = await enhanceProductsWithRatings(relatedProducts, db);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date().toISOString();&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : null;&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Try to get products directly from the collection first&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If no direct products found, try the nested structure&#10;    if (allProducts.length === 0) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;      productDocuments.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          allProducts = allProducts.concat(doc.products);&#10;        }&#10;      });&#10;    }&#10;&#10;    // Apply search filter&#10;    if (search) {&#10;      const searchRegex = new RegExp(search, &quot;i&quot;);&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description) ||&#10;          searchRegex.test(product.category),&#10;      );&#10;    }&#10;&#10;    // Apply category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt; product.category === category,&#10;      );&#10;    }&#10;&#10;    // Apply featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      allProducts = allProducts.filter((product) =&gt; product.featured);&#10;    }&#10;&#10;    // Sort products based on sortBy parameter&#10;    if (sortBy) {&#10;      switch (sortBy) {&#10;        case &quot;purchases&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.purchaseCount || 0) - (a.purchaseCount || 0),&#10;          );&#10;          break;&#10;        case &quot;newest&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;          break;&#10;        case &quot;price-low&quot;:&#10;          allProducts.sort((a, b) =&gt; (a.price || 0) - (b.price || 0));&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          allProducts.sort((a, b) =&gt; (b.price || 0) - (a.price || 0));&#10;          break;&#10;        case &quot;rating&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.averageRating || 0) - (a.averageRating || 0),&#10;          );&#10;          break;&#10;        default:&#10;          // Default to newest&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;      }&#10;    }&#10;&#10;    // Enhance products with ratings&#10;    console.log(`Enhancing ${allProducts.length} products with ratings...`);&#10;    allProducts = await enhanceProductsWithRatings(allProducts, db);&#10;&#10;    // Debug: Log a sample of enhanced products&#10;    console.log(&quot;Sample enhanced products:&quot;);&#10;    allProducts.slice(0, 3).forEach((p) =&gt; {&#10;      console.log(&#10;        `- ${p.name}: ${p.averageRating} rating, ${p.reviewCount} reviews (ID: ${p._id})`,&#10;      );&#10;    });&#10;&#10;    // Apply pagination&#10;    const itemsPerPage = 12;&#10;    const startIndex = (page - 1) * itemsPerPage;&#10;    const endIndex = limit&#10;      ? Math.min(startIndex + (limit || itemsPerPage), allProducts.length)&#10;      : startIndex + itemsPerPage;&#10;&#10;    const paginatedProducts = limit&#10;      ? allProducts.slice(0, limit)&#10;      : allProducts.slice(startIndex, endIndex);&#10;&#10;    const totalPages = Math.ceil(allProducts.length / itemsPerPage);&#10;&#10;    return NextResponse.json({&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage: page,&#10;        totalPages,&#10;        totalProducts: allProducts.length,&#10;        hasNext: endIndex &lt; allProducts.length,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch products&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const productData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Add timestamps and default values&#10;    const newProduct = {&#10;      ...productData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      purchaseCount: 0,&#10;      featured: false,&#10;      status: &quot;active&quot;,&#10;      stock: productData.stock || 0,&#10;      averageRating: 0,&#10;      totalRatings: 0,&#10;    };&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne(newProduct);&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;      product: newProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : null;&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Try to get products directly from the collection first&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If no direct products found, try the nested structure&#10;    if (allProducts.length === 0) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;      productDocuments.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          allProducts = allProducts.concat(doc.products);&#10;        }&#10;      });&#10;    }&#10;&#10;    // Apply search filter&#10;    if (search) {&#10;      const searchRegex = new RegExp(search, &quot;i&quot;);&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description) ||&#10;          searchRegex.test(product.category),&#10;      );&#10;    }&#10;&#10;    // Apply category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt; product.category === category,&#10;      );&#10;    }&#10;&#10;    // Apply featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      allProducts = allProducts.filter((product) =&gt; product.featured);&#10;    }&#10;&#10;    // Sort products based on sortBy parameter&#10;    if (sortBy) {&#10;      switch (sortBy) {&#10;        case &quot;purchases&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.purchaseCount || 0) - (a.purchaseCount || 0),&#10;          );&#10;          break;&#10;        case &quot;newest&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;          break;&#10;        case &quot;price-low&quot;:&#10;          allProducts.sort((a, b) =&gt; (a.price || 0) - (b.price || 0));&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          allProducts.sort((a, b) =&gt; (b.price || 0) - (a.price || 0));&#10;          break;&#10;        case &quot;rating&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.averageRating || 0) - (a.averageRating || 0),&#10;          );&#10;          break;&#10;        default:&#10;          // Default to newest&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;      }&#10;    }&#10;&#10;    // Enhance products with ratings&#10;    allProducts = await enhanceProductsWithRatings(allProducts, db);&#10;&#10;    // Apply pagination&#10;    const itemsPerPage = 12;&#10;    const startIndex = (page - 1) * itemsPerPage;&#10;    const endIndex = limit&#10;      ? Math.min(startIndex + (limit || itemsPerPage), allProducts.length)&#10;      : startIndex + itemsPerPage;&#10;&#10;    const paginatedProducts = limit&#10;      ? allProducts.slice(0, limit)&#10;      : allProducts.slice(startIndex, endIndex);&#10;&#10;    const totalPages = Math.ceil(allProducts.length / itemsPerPage);&#10;&#10;    return NextResponse.json({&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage: page,&#10;        totalPages,&#10;        totalProducts: allProducts.length,&#10;        hasNext: endIndex &lt; allProducts.length,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch products&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const productData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Add timestamps and default values&#10;    const newProduct = {&#10;      ...productData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      purchaseCount: 0,&#10;      featured: false,&#10;      status: &quot;active&quot;,&#10;      stock: productData.stock || 0,&#10;      averageRating: 0,&#10;      totalRatings: 0,&#10;    };&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne(newProduct);&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;      product: newProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/details/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/details/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#10;import useReviews from &quot;@/hooks/useReviews&quot;;&#10;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#10;  const { data: session } = useSession();&#10;  const { addToCart } = useCart();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;&#10;  // Custom hooks&#10;  const {&#10;    product,&#10;    farmer,&#10;    farmerProducts,&#10;    responseType,&#10;    relatedProducts,&#10;    loading,&#10;    fetchProductDetails,&#10;  } = useProductData(productId);&#10;&#10;  const { reviews, hasMoreReviews, fetchReviews, reviewsPage } = useReviews(&#10;    productId,&#10;    responseType,&#10;    session?.user?.id, // Pass userId to prioritize user's review&#10;  );&#10;  const isOwner = useOwnership(product, session, viewMode);&#10;&#10;  // State management&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isFavorite, setIsFavorite] = useState(false);&#10;&#10;  // Review form state&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState({ rating: 5, comment: &quot;&quot; });&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;&#10;  // Review edit/delete state&#10;  const [editingReview, setEditingReview] = useState(null);&#10;  const [isUpdatingReview, setIsUpdatingReview] = useState(false);&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#10;&#10;  // Purchase verification state&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#10;&#10;  // Farmer-specific states&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;&#10;  // Effects&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      fetchProductDetails();&#10;    }&#10;  }, [productId]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      const interval = setInterval(() =&gt; {&#10;        fetchProductDetails();&#10;      }, 30000);&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  // Check if product is favorited when productId changes&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      setIsFavorite(isProductFavorited(productId));&#10;    }&#10;  }, [productId, isProductFavorited]);&#10;&#10;  // Check if user has purchased this product&#10;  useEffect(() =&gt; {&#10;    if (session?.user?.id &amp;&amp; productId) {&#10;      checkUserPurchase();&#10;    }&#10;  }, [session?.user?.id, productId]);&#10;&#10;  const checkUserPurchase = async () =&gt; {&#10;    if (!session?.user?.id) return;&#10;&#10;    setCheckingPurchase(true);&#10;    try {&#10;      const response = await fetch(&#10;        `/api/orders?userId=${session.user.id}&amp;productId=${productId}`,&#10;      );&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        // Check if user has any order with this product that's confirmed/delivered/pending&#10;        const hasPurchased = data.orders?.some(&#10;          (order) =&gt;&#10;            order.items?.some((item) =&gt; item.productId === productId) &amp;&amp;&#10;            [&quot;delivered&quot;, &quot;confirmed&quot;, &quot;pending&quot;].includes(order.status),&#10;        );&#10;        setHasPurchasedProduct(hasPurchased);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error checking purchase history:&quot;, error);&#10;      setHasPurchasedProduct(false);&#10;    } finally {&#10;      setCheckingPurchase(false);&#10;    }&#10;  };&#10;&#10;  // API calls&#10;  const fetchRecentOrders = async () =&gt; {&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  };&#10;&#10;  // Event handlers&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const item = {&#10;        productId: productId,&#10;        id: productId, // Add id field for cart context&#10;        name: product.name,&#10;        price: product.price,&#10;        quantity: quantity,&#10;        stock: product.stock, // Include stock information&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;      };&#10;&#10;      await addToCart(item, quantity);&#10;      alert(&quot;Product added to cart successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      // Show user-friendly error message for stock issues&#10;      if (&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#10;        error.message.includes(&quot;available in stock&quot;)&#10;      ) {&#10;        alert(error.message);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleBuyNow = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Create a product object that matches the CartContext expectations&#10;      const productForCart = {&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmer: {&#10;          id: product.farmerId,&#10;          _id: product.farmerId,&#10;          email: product.farmer?.email,&#10;          name:&#10;            product.farmer?.name ||&#10;            product.farmer?.farmName ||&#10;            &quot;Unknown Farmer&quot;,&#10;        },&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;        stock: product.stock || 0,&#10;      };&#10;&#10;      // Use CartContext's addToCart function&#10;      await addToCart(productForCart, quantity);&#10;&#10;      // Immediately redirect to payment - let the payment page handle the cart state&#10;      // The payment page should wait for cart loading to complete before checking if empty&#10;      router.push(&quot;/payment&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    try {&#10;      if (isFavorite) {&#10;        // Remove from favorites&#10;        const success = await removeFromFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(false);&#10;          alert(&quot;Product removed from favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to remove from favorites. Please try again.&quot;);&#10;        }&#10;      } else {&#10;        // Add to favorites&#10;        const success = await addToFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(true);&#10;          alert(&quot;Product added to favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to add to favorites. Please try again.&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;    }&#10;  };&#10;&#10;  const handleSubmitReview = async (e) =&gt; {&#10;    e.preventDefault();&#10;    if (!session) {&#10;      alert(&quot;Please login to submit a review&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsSubmittingReview(true);&#10;    try {&#10;      // Include userId in the review submission&#10;      const reviewData = {&#10;        ...reviewForm,&#10;        userId:&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.userId ||&#10;          session.user.email,&#10;      };&#10;&#10;      const response = await fetch(`/api/products/${productId}/reviews`, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(reviewData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setShowReviewForm(false);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review submitted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to submit review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error submitting review:&quot;, error);&#10;      alert(&quot;Failed to submit review&quot;);&#10;    } finally {&#10;      setIsSubmittingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleUpdateReview = async () =&gt; {&#10;    if (!editingReview) return;&#10;&#10;    setIsUpdatingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          rating: reviewForm.rating,&#10;          comment: reviewForm.comment,&#10;          userId:&#10;            session.user.userId ||&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.email,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setEditingReview(null);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        setShowReviewForm(false);&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review updated successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating review:&quot;, error);&#10;      alert(&quot;Failed to update review&quot;);&#10;    } finally {&#10;      setIsUpdatingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteReview = async (reviewId) =&gt; {&#10;    if (!confirm(&quot;Are you sure you want to delete this review?&quot;)) {&#10;      return;&#10;    }&#10;&#10;    setIsDeletingReview(true);&#10;    try {&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;      const response = await fetch(&#10;        `/api/reviews/${reviewId}?userId=${encodeURIComponent(userId)}`,&#10;        {&#10;          method: &quot;DELETE&quot;,&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review deleted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to delete review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting review:&quot;, error);&#10;      alert(&quot;Failed to delete review&quot;);&#10;    } finally {&#10;      setIsDeletingReview(false);&#10;    }&#10;  };&#10;&#10;  const loadMoreReviews = () =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  };&#10;&#10;  const handleUpdateProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;      alert(&quot;Please enter a value to update&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleToggleStatus = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const newStatus = product.status === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product. Please try again.`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (&#10;      !confirm(&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\nThis action cannot be undone and will remove:\n• The product listing\n• All associated data\n• Product from any pending orders&quot;,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        window.location.href = &quot;/manage&quot;;&#10;      } else {&#10;        const error = await response.json();&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\nThis product has pending orders and cannot be deleted.\nPlease wait for all orders to be completed or cancelled before deleting this product.\n\nYou can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          alert(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(&quot;Failed to delete product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleAddImages = () =&gt; {&#10;    router.push(`/create?edit=${productId}`);&#10;  };&#10;&#10;  // Helper function to get all images&#10;  const getAllImages = () =&gt; {&#10;    const allImages = [];&#10;    if (product?.image) {&#10;      allImages.push(product.image);&#10;    }&#10;    if (product?.images &amp;&amp; product.images.length &gt; 0) {&#10;      allImages.push(...product.images);&#10;    }&#10;    return allImages;&#10;  };&#10;&#10;  // Calculate rating distribution from reviews&#10;  const calculateRatingDistribution = () =&gt; {&#10;    if (!reviews || reviews.length === 0) {&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    }&#10;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;&#10;    reviews.forEach((review) =&gt; {&#10;      const rating = Math.floor(review.rating); // Round down to nearest integer&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;        distribution[rating]++;&#10;      }&#10;    });&#10;&#10;    return distribution;&#10;  };&#10;&#10;  const getRatingPercentage = (rating, distribution) =&gt; {&#10;    const totalReviews = reviews?.length || 0;&#10;    if (totalReviews === 0) return 0;&#10;    return (distribution[rating] / totalReviews) * 100;&#10;  };&#10;&#10;  // Render components based on state&#10;  if (loading) {&#10;    return &lt;Loading /&gt;;&#10;  }&#10;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#10;    return (&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#10;    );&#10;  }&#10;&#10;  if (!product &amp;&amp; !farmer) {&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#10;  }&#10;&#10;  // Main product details render&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Farmer Dashboard View */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage]}&#10;                              alt={product.name}&#10;                              width={400}&#10;                              height={225}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-primary-500&quot;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} ${index + 1}`}&#10;                                    width={80}&#10;                                    height={80}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                  /&gt;&#10;                                &lt;/button&gt;&#10;                              ))}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            No images uploaded&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Price&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            ${product.price?.toFixed(2)} per{&quot; &quot;}&#10;                            {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Stock&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Description&#10;                        &lt;/span&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                          {product.description || &quot;No description provided.&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Features&#10;                          &lt;/span&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder=&quot;New stock amount&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !stockUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            step=&quot;0.01&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder=&quot;New price&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !priceUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          $&#10;                          {(&#10;                            product.performanceMetrics?.totalRevenue || 0&#10;                          ).toFixed(2)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {(product.averageRating || 0).toFixed(1)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          &lt;StarRating&#10;                            rating={product.averageRating || 0}&#10;                            size=&quot;sm&quot;&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.reviewCount || product.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            $&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              2,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot;Your product is performing well!&quot;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-orange-600 hover:bg-orange-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {product.status === &quot;active&quot;&#10;                          ? &quot;Deactivate&quot;&#10;                          : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        Delete Product&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    const allImages = getAllImages();&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farmer&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;StarRating&#10;                      rating={product.averageRating || 0}&#10;                      showValue={true}&#10;                    /&gt;&#10;                    &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      ({product.reviewCount || product.totalReviews || 0}{&quot; &quot;}&#10;                      reviews)&#10;                    &lt;/span&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab(&quot;reviews&quot;)}&#10;                      className=&quot;text-primary-600 dark:text-primary-400 hover:underline&quot;&#10;                    &gt;&#10;                      Write a review&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ${product.price?.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.farmer?.email ||&#10;                            &quot;Contact information not available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {[&#10;                      &quot;description&quot;,&#10;                      &quot;nutrition&quot;,&#10;                      &quot;storage&quot;,&#10;                      &quot;reviews&quot;,&#10;                      &quot;farmer&quot;,&#10;                    ].map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#10;                            Key Features&#10;                          &lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.nutritionalInformation}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.storageInstructions}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-blue-900 dark:text-blue-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#10;                              Temperature&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                              Store in a cool, dry place away from direct&#10;                              sunlight&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-green-900 dark:text-green-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#10;                              Humidity&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-green-700 dark:text-green-300&quot;&gt;&#10;                              Keep in low humidity environment to prevent&#10;                              spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews (&#10;                          {product.reviewCount || product.totalReviews || 0})&#10;                        &lt;/h2&gt;&#10;                        {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Write Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {session &amp;&amp;&#10;                          !hasPurchasedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 italic&quot;&gt;&#10;                              You need to purchase this product to write a&#10;                              review&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        {checkingPurchase &amp;&amp; (&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                            Checking purchase history...&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          {/* Overall Rating Section */}&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                              {(() =&gt; {&#10;                                // Calculate actual average rating from reviews if available&#10;                                const actualReviewCount = reviews?.length || 0;&#10;                                let displayRating = product.averageRating || 0;&#10;&#10;                                // If we have reviews but no product rating, calculate from reviews&#10;                                if (&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#10;                                  (!product.averageRating ||&#10;                                    product.averageRating === 0)&#10;                                ) {&#10;                                  const totalRating = reviews.reduce(&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  displayRating =&#10;                                    totalRating / actualReviewCount;&#10;                                }&#10;&#10;                                return (&#10;                                  &lt;&gt;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#10;                                      {displayRating.toFixed(1)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;StarRating&#10;                                      rating={displayRating}&#10;                                      size=&quot;lg&quot;&#10;                                    /&gt;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#10;                                      Based on{&quot; &quot;}&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#10;                                        {actualReviewCount}&#10;                                      &lt;/span&gt;{&quot; &quot;}&#10;                                      {actualReviewCount === 1&#10;                                        ? &quot;review&quot;&#10;                                        : &quot;reviews&quot;}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/&gt;&#10;                                );&#10;                              })()}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Review Quality Indicator */}&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                                  {(reviews?.length || 0) &gt; 0&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#10;                                    : &quot;No reviews yet&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Rating Distribution */}&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                              Rating Breakdown&#10;                            &lt;/h4&gt;&#10;                            {(() =&gt; {&#10;                              const ratingDistribution =&#10;                                calculateRatingDistribution();&#10;                              const totalReviews = reviews?.length || 0;&#10;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#10;                                const count = ratingDistribution[rating];&#10;                                const percentage =&#10;                                  totalReviews &gt; 0&#10;                                    ? (count / totalReviews) * 100&#10;                                    : 0;&#10;&#10;                                return (&#10;                                  &lt;div&#10;                                    key={rating}&#10;                                    className=&quot;flex items-center space-x-3&quot;&#10;                                  &gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#10;                                    &lt;/span&gt;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                                      &lt;div&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#10;                                        style={{ width: `${percentage}%` }}&#10;                                      &gt;&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#10;                                      {count}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#10;                                      {percentage.toFixed(0)}%&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                );&#10;                              });&#10;                            })()}&#10;&#10;                            {/* Total Reviews Summary */}&#10;                            &lt;div className=&quot;mt-4 pt-3 border-t border-gray-200 dark:border-gray-600&quot;&gt;&#10;                              &lt;div className=&quot;text-center text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {(reviews?.length || 0) === 0 &amp;&amp;&#10;                                    &quot;Be the first to review this product!&quot;}&#10;                                  {(reviews?.length || 0) === 1 &amp;&amp;&#10;                                    &quot;1 customer has reviewed this product&quot;}&#10;                                  {(reviews?.length || 0) &gt; 1 &amp;&amp;&#10;                                    `${reviews.length} customers have reviewed this product`}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Form Modal */}&#10;                      {showReviewForm &amp;&amp; (&#10;                        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 w-full max-w-md&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                Write a Review&#10;                              &lt;/h3&gt;&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(false)}&#10;                                className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                              &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;form&#10;                              onSubmit={&#10;                                editingReview&#10;                                  ? (e) =&gt; {&#10;                                      e.preventDefault();&#10;                                      handleUpdateReview();&#10;                                    }&#10;                                  : handleSubmitReview&#10;                              }&#10;                              className=&quot;space-y-4&quot;&#10;                            &gt;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Rating&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                  {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                    &lt;button&#10;                                      key={star}&#10;                                      type=&quot;button&quot;&#10;                                      onClick={() =&gt;&#10;                                        setReviewForm({&#10;                                          ...reviewForm,&#10;                                          rating: star,&#10;                                        })&#10;                                      }&#10;                                      className={`text-2xl ${&#10;                                        star &lt;= reviewForm.rating&#10;                                          ? &quot;text-yellow-400&quot;&#10;                                          : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      ★&#10;                                    &lt;/button&gt;&#10;                                  ))}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Comment&#10;                                &lt;/label&gt;&#10;                                &lt;textarea&#10;                                  value={reviewForm.comment}&#10;                                  onChange={(e) =&gt;&#10;                                    setReviewForm({&#10;                                      ...reviewForm,&#10;                                      comment: e.target.value,&#10;                                    })&#10;                                  }&#10;                                  rows={4}&#10;                                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                                  placeholder=&quot;Share your experience with this product...&quot;&#10;                                  required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                                &lt;button&#10;                                  type=&quot;button&quot;&#10;                                  onClick={() =&gt; {&#10;                                    setShowReviewForm(false);&#10;                                    setEditingReview(null);&#10;                                    setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;                                  }}&#10;                                  className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                                &gt;&#10;                                  Cancel&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  type=&quot;submit&quot;&#10;                                  disabled={&#10;                                    editingReview&#10;                                      ? isUpdatingReview&#10;                                      : isSubmittingReview&#10;                                  }&#10;                                  className=&quot;flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50&quot;&#10;                                &gt;&#10;                                  {editingReview&#10;                                    ? isUpdatingReview&#10;                                      ? &quot;Updating...&quot;&#10;                                      : &quot;Update Review&quot;&#10;                                    : isSubmittingReview&#10;                                      ? &quot;Submitting...&quot;&#10;                                      : &quot;Submit Review&quot;}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/form&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#10;                          reviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={review._id}&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#10;                                          .charAt(0)&#10;                                          .toUpperCase()}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#10;                                        Verified Buyer&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                          &lt;span&#10;                                            key={star}&#10;                                            className={`text-lg transition-all duration-200 ${&#10;                                              star &lt;= review.rating&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&#10;                                            ★&#10;                                          &lt;/span&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                                        {review.rating}/5&#10;                                      &lt;/span&gt;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt || review.date,&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#10;                                          year: &quot;numeric&quot;,&#10;                                          month: &quot;short&quot;,&#10;                                          day: &quot;numeric&quot;,&#10;                                        })}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#10;                                  {/* Debug information */}&#10;                                  {console.log(&quot;DEBUG Review comparison:&quot;, {&#10;                                    sessionUserId: session?.user?.userId,&#10;                                    reviewUserId: review.userId,&#10;                                    areEqual:&#10;                                      session?.user?.userId === review.userId,&#10;                                    sessionUser: session?.user,&#10;                                  })}&#10;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#10;                                  {session?.user?.userId === review.userId ? (&#10;                                    &lt;&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt; {&#10;                                          setEditingReview(review);&#10;                                          setReviewForm({&#10;                                            rating: review.rating,&#10;                                            comment: review.comment,&#10;                                          });&#10;                                          setShowReviewForm(true);&#10;                                        }}&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Edit Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt;&#10;                                          handleDeleteReview(review._id)&#10;                                        }&#10;                                        disabled={isDeletingReview}&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Delete Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  ) : (&#10;                                    &lt;&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &quot;{review.comment}&quot;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                              {product.farmer?.farmName ||&#10;                                product.farmer?.name ||&#10;                                &quot;Farm Name&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              {product.farmer?.email ||&#10;                                &quot;Farmer contact not available&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.location &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            {product.farmer?.phone &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                              {product.farmer?.description ||&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                View All Products from this Farmer&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Related Products Section - Enhanced */}&#10;                  {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                      {/* Section Header */}&#10;                      &lt;div className=&quot;text-center mb-10&quot;&gt;&#10;                        &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Related Products&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#10;                          Discover similar high-quality products from our&#10;                          trusted farmers. Each item is carefully selected to&#10;                          meet our quality standards.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#10;                          &lt;span&gt;•&lt;/span&gt;&#10;                          &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;Fast delivery available&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Product Grid */}&#10;                      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#10;                        {relatedProducts.map((relatedProduct, index) =&gt; (&#10;                          &lt;div&#10;                            key={relatedProduct._id}&#10;                            className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#10;                            style={{ animationDelay: `${index * 100}ms` }}&#10;                          &gt;&#10;                            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#10;                              {/* Product Image */}&#10;                              &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#10;                                &lt;Image&#10;                                  src={&#10;                                    relatedProduct.image ||&#10;                                    relatedProduct.images?.[0] ||&#10;                                    &quot;/placeholder-image.jpg&quot;&#10;                                  }&#10;                                  alt={relatedProduct.name}&#10;                                  width={300}&#10;                                  height={300}&#10;                                  className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#10;                                /&gt;&#10;&#10;                                {/* Product Badges */}&#10;                                &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#10;                                  {relatedProduct.isOrganic &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Organic&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                  {relatedProduct.isFresh &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Fresh&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Quick Actions Overlay */}&#10;                                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#10;                                  &lt;Link&#10;                                    href={`/details?id=${relatedProduct._id}`}&#10;                                    className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#10;                                  &gt;&#10;                                    View Details&#10;                                  &lt;/Link&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Product Info */}&#10;                              &lt;div className=&quot;p-6&quot;&gt;&#10;                                &lt;div className=&quot;mb-3&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#10;                                    {relatedProduct.name}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#10;                                    by{&quot; &quot;}&#10;                                    {relatedProduct.farmer?.name ||&#10;                                      relatedProduct.farmer?.farmName ||&#10;                                      &quot;Unknown Farmer&quot;}&#10;                                  &lt;/p&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Rating */}&#10;                                &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#10;                                  &lt;StarRating&#10;                                    rating={relatedProduct.averageRating || 0}&#10;                                    size=&quot;sm&quot;&#10;                                  /&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    (&#10;                                    {relatedProduct.reviewCount ||&#10;                                      relatedProduct.totalReviews ||&#10;                                      0}&#10;                                    )&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Price and Stock */}&#10;                                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                                      ${(relatedProduct.price || 0).toFixed(2)}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      /{relatedProduct.unit || &quot;kg&quot;}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div&#10;                                      className={`text-xs font-medium ${&#10;                                        (relatedProduct.stock || 0) &gt; 0&#10;                                          ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                          : &quot;text-red-600 dark:text-red-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      {(relatedProduct.stock || 0) &gt; 0&#10;                                        ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#10;                                        : &quot;Out of stock&quot;}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Action Button */}&#10;                                &lt;Link&#10;                                  href={`/details?id=${relatedProduct._id}`}&#10;                                  className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                                  View Product&#10;                                &lt;/Link&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Browse More Section */}&#10;                      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Looking for more products?&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href=&quot;/products&quot;&#10;                            className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;                            Browse All Products&#10;                            &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#10;import useReviews from &quot;@/hooks/useReviews&quot;;&#10;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#10;  const { data: session } = useSession();&#10;  const { addToCart } = useCart();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;&#10;  // Custom hooks&#10;  const {&#10;    product,&#10;    farmer,&#10;    farmerProducts,&#10;    responseType,&#10;    relatedProducts,&#10;    loading,&#10;    fetchProductDetails,&#10;  } = useProductData(productId);&#10;&#10;  const { reviews, hasMoreReviews, fetchReviews, reviewsPage } = useReviews(&#10;    productId,&#10;    responseType,&#10;    session?.user?.id, // Pass userId to prioritize user's review&#10;  );&#10;  const isOwner = useOwnership(product, session, viewMode);&#10;&#10;  // State management&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isFavorite, setIsFavorite] = useState(false);&#10;&#10;  // Review form state&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState({ rating: 5, comment: &quot;&quot; });&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;&#10;  // Review edit/delete state&#10;  const [editingReview, setEditingReview] = useState(null);&#10;  const [isUpdatingReview, setIsUpdatingReview] = useState(false);&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#10;&#10;  // Purchase verification state&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#10;&#10;  // Farmer-specific states&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;&#10;  // Effects&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      fetchProductDetails();&#10;    }&#10;  }, [productId]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      const interval = setInterval(() =&gt; {&#10;        fetchProductDetails();&#10;      }, 30000);&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  // Check if product is favorited when productId changes&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      setIsFavorite(isProductFavorited(productId));&#10;    }&#10;  }, [productId, isProductFavorited]);&#10;&#10;  // Check if user has purchased this product&#10;  useEffect(() =&gt; {&#10;    if (session?.user?.id &amp;&amp; productId) {&#10;      checkUserPurchase();&#10;    }&#10;  }, [session?.user?.id, productId]);&#10;&#10;  const checkUserPurchase = async () =&gt; {&#10;    if (!session?.user?.id) return;&#10;&#10;    setCheckingPurchase(true);&#10;    try {&#10;      const response = await fetch(&#10;        `/api/orders?userId=${session.user.id}&amp;productId=${productId}`,&#10;      );&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        // Check if user has any order with this product that's confirmed/delivered/pending&#10;        const hasPurchased = data.orders?.some(&#10;          (order) =&gt;&#10;            order.items?.some((item) =&gt; item.productId === productId) &amp;&amp;&#10;            [&quot;delivered&quot;, &quot;confirmed&quot;, &quot;pending&quot;].includes(order.status),&#10;        );&#10;        setHasPurchasedProduct(hasPurchased);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error checking purchase history:&quot;, error);&#10;      setHasPurchasedProduct(false);&#10;    } finally {&#10;      setCheckingPurchase(false);&#10;    }&#10;  };&#10;&#10;  // API calls&#10;  const fetchRecentOrders = async () =&gt; {&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  };&#10;&#10;  // Event handlers&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const item = {&#10;        productId: productId,&#10;        id: productId, // Add id field for cart context&#10;        name: product.name,&#10;        price: product.price,&#10;        quantity: quantity,&#10;        stock: product.stock, // Include stock information&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;      };&#10;&#10;      await addToCart(item, quantity);&#10;      alert(&quot;Product added to cart successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      // Show user-friendly error message for stock issues&#10;      if (&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#10;        error.message.includes(&quot;available in stock&quot;)&#10;      ) {&#10;        alert(error.message);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleBuyNow = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Create a product object that matches the CartContext expectations&#10;      const productForCart = {&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmer: {&#10;          id: product.farmerId,&#10;          _id: product.farmerId,&#10;          email: product.farmer?.email,&#10;          name:&#10;            product.farmer?.name ||&#10;            product.farmer?.farmName ||&#10;            &quot;Unknown Farmer&quot;,&#10;        },&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;        stock: product.stock || 0,&#10;      };&#10;&#10;      // Use CartContext's addToCart function&#10;      await addToCart(productForCart, quantity);&#10;&#10;      // Immediately redirect to payment - let the payment page handle the cart state&#10;      // The payment page should wait for cart loading to complete before checking if empty&#10;      router.push(&quot;/payment&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    try {&#10;      if (isFavorite) {&#10;        // Remove from favorites&#10;        const success = await removeFromFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(false);&#10;          alert(&quot;Product removed from favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to remove from favorites. Please try again.&quot;);&#10;        }&#10;      } else {&#10;        // Add to favorites&#10;        const success = await addToFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(true);&#10;          alert(&quot;Product added to favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to add to favorites. Please try again.&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;    }&#10;  };&#10;&#10;  const handleSubmitReview = async (e) =&gt; {&#10;    e.preventDefault();&#10;    if (!session) {&#10;      alert(&quot;Please login to submit a review&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsSubmittingReview(true);&#10;    try {&#10;      // Include userId in the review submission&#10;      const reviewData = {&#10;        ...reviewForm,&#10;        userId:&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.userId ||&#10;          session.user.email,&#10;      };&#10;&#10;      const response = await fetch(`/api/products/${productId}/reviews`, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(reviewData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setShowReviewForm(false);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review submitted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to submit review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error submitting review:&quot;, error);&#10;      alert(&quot;Failed to submit review&quot;);&#10;    } finally {&#10;      setIsSubmittingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleUpdateReview = async () =&gt; {&#10;    if (!editingReview) return;&#10;&#10;    setIsUpdatingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          rating: reviewForm.rating,&#10;          comment: reviewForm.comment,&#10;          userId:&#10;            session.user.userId ||&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.email,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setEditingReview(null);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        setShowReviewForm(false);&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review updated successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating review:&quot;, error);&#10;      alert(&quot;Failed to update review&quot;);&#10;    } finally {&#10;      setIsUpdatingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteReview = async (reviewId) =&gt; {&#10;    if (!confirm(&quot;Are you sure you want to delete this review?&quot;)) {&#10;      return;&#10;    }&#10;&#10;    setIsDeletingReview(true);&#10;    try {&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;      const response = await fetch(&#10;        `/api/reviews/${reviewId}?userId=${encodeURIComponent(userId)}`,&#10;        {&#10;          method: &quot;DELETE&quot;,&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review deleted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to delete review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting review:&quot;, error);&#10;      alert(&quot;Failed to delete review&quot;);&#10;    } finally {&#10;      setIsDeletingReview(false);&#10;    }&#10;  };&#10;&#10;  const loadMoreReviews = () =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  };&#10;&#10;  const handleUpdateProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;      alert(&quot;Please enter a value to update&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleToggleStatus = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const newStatus = product.status === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product. Please try again.`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (&#10;      !confirm(&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\nThis action cannot be undone and will remove:\n• The product listing\n• All associated data\n• Product from any pending orders&quot;,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        window.location.href = &quot;/manage&quot;;&#10;      } else {&#10;        const error = await response.json();&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\nThis product has pending orders and cannot be deleted.\nPlease wait for all orders to be completed or cancelled before deleting this product.\n\nYou can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          alert(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(&quot;Failed to delete product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleAddImages = () =&gt; {&#10;    router.push(`/create?edit=${productId}`);&#10;  };&#10;&#10;  // Helper function to get all images&#10;  const getAllImages = () =&gt; {&#10;    const allImages = [];&#10;    if (product?.image) {&#10;      allImages.push(product.image);&#10;    }&#10;    if (product?.images &amp;&amp; product.images.length &gt; 0) {&#10;      allImages.push(...product.images);&#10;    }&#10;    return allImages;&#10;  };&#10;&#10;  // Calculate rating distribution from reviews&#10;  const calculateRatingDistribution = () =&gt; {&#10;    if (!reviews || reviews.length === 0) {&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    }&#10;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;&#10;    reviews.forEach((review) =&gt; {&#10;      const rating = Math.floor(review.rating); // Round down to nearest integer&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;        distribution[rating]++;&#10;      }&#10;    });&#10;&#10;    return distribution;&#10;  };&#10;&#10;  const getRatingPercentage = (rating, distribution) =&gt; {&#10;    const totalReviews = reviews?.length || 0;&#10;    if (totalReviews === 0) return 0;&#10;    return (distribution[rating] / totalReviews) * 100;&#10;  };&#10;&#10;  // Render components based on state&#10;  if (loading) {&#10;    return &lt;Loading /&gt;;&#10;  }&#10;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#10;    return (&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#10;    );&#10;  }&#10;&#10;  if (!product &amp;&amp; !farmer) {&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#10;  }&#10;&#10;  // Main product details render&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Farmer Dashboard View */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage]}&#10;                              alt={product.name}&#10;                              width={400}&#10;                              height={225}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-primary-500&quot;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} ${index + 1}`}&#10;                                    width={80}&#10;                                    height={80}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                  /&gt;&#10;                                &lt;/button&gt;&#10;                              ))}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            No images uploaded&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Price&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            ${product.price?.toFixed(2)} per{&quot; &quot;}&#10;                            {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Stock&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Description&#10;                        &lt;/span&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                          {product.description || &quot;No description provided.&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Features&#10;                          &lt;/span&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder=&quot;New stock amount&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !stockUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            step=&quot;0.01&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder=&quot;New price&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !priceUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          $&#10;                          {(&#10;                            product.performanceMetrics?.totalRevenue || 0&#10;                          ).toFixed(2)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {(product.averageRating || 0).toFixed(1)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          &lt;StarRating&#10;                            rating={product.averageRating || 0}&#10;                            size=&quot;sm&quot;&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.reviewCount || product.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            $&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              2,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot;Your product is performing well!&quot;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-orange-600 hover:bg-orange-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {product.status === &quot;active&quot;&#10;                          ? &quot;Deactivate&quot;&#10;                          : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        Delete Product&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    const allImages = getAllImages();&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farmer&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    {(() =&gt; {&#10;                      // Calculate actual average rating and count from reviews if available&#10;                      const actualReviewCount = reviews?.length || 0;&#10;                      let displayRating = product.averageRating || 0;&#10;&#10;                      // If we have reviews but no product rating, calculate from reviews&#10;                      if (&#10;                        actualReviewCount &gt; 0 &amp;&amp;&#10;                        (!product.averageRating || product.averageRating === 0)&#10;                      ) {&#10;                        const totalRating = reviews.reduce(&#10;                          (sum, review) =&gt; sum + (review.rating || 0),&#10;                          0,&#10;                        );&#10;                        displayRating = totalRating / actualReviewCount;&#10;                      }&#10;&#10;                      return (&#10;                        &lt;&gt;&#10;                          &lt;StarRating&#10;                            rating={displayRating}&#10;                            showValue={true}&#10;                          /&gt;&#10;                          &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ({actualReviewCount} reviews)&#10;                          &lt;/span&gt;&#10;                        &lt;/&gt;&#10;                      );&#10;                    })()}&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab(&quot;reviews&quot;)}&#10;                      className=&quot;text-primary-600 dark:text-primary-400 hover:underline&quot;&#10;                    &gt;&#10;                      Write a review&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ${product.price?.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.farmer?.email ||&#10;                            &quot;Contact information not available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {[&#10;                      &quot;description&quot;,&#10;                      &quot;nutrition&quot;,&#10;                      &quot;storage&quot;,&#10;                      &quot;reviews&quot;,&#10;                      &quot;farmer&quot;,&#10;                    ].map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#10;                            Key Features&#10;                          &lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.nutritionalInformation}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.storageInstructions}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-blue-900 dark:text-blue-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#10;                              Temperature&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                              Store in a cool, dry place away from direct&#10;                              sunlight&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-green-900 dark:text-green-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#10;                              Humidity&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-green-700 dark:text-green-300&quot;&gt;&#10;                              Keep in low humidity environment to prevent&#10;                              spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews (&#10;                          {product.reviewCount || product.totalReviews || 0})&#10;                        &lt;/h2&gt;&#10;                        {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Write Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {session &amp;&amp;&#10;                          !hasPurchasedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 italic&quot;&gt;&#10;                              You need to purchase this product to write a&#10;                              review&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        {checkingPurchase &amp;&amp; (&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                            Checking purchase history...&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          {/* Overall Rating Section */}&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                              {(() =&gt; {&#10;                                // Calculate actual average rating from reviews if available&#10;                                const actualReviewCount = reviews?.length || 0;&#10;                                let displayRating = product.averageRating || 0;&#10;&#10;                                // If we have reviews but no product rating, calculate from reviews&#10;                                if (&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#10;                                  (!product.averageRating ||&#10;                                    product.averageRating === 0)&#10;                                ) {&#10;                                  const totalRating = reviews.reduce(&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  displayRating =&#10;                                    totalRating / actualReviewCount;&#10;                                }&#10;&#10;                                return (&#10;                                  &lt;&gt;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#10;                                      {displayRating.toFixed(1)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;StarRating&#10;                                      rating={displayRating}&#10;                                      size=&quot;lg&quot;&#10;                                    /&gt;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#10;                                      Based on{&quot; &quot;}&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#10;                                        {actualReviewCount}&#10;                                      &lt;/span&gt;{&quot; &quot;}&#10;                                      {actualReviewCount === 1&#10;                                        ? &quot;review&quot;&#10;                                        : &quot;reviews&quot;}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/&gt;&#10;                                );&#10;                              })()}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Review Quality Indicator */}&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                                  {(reviews?.length || 0) &gt; 0&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#10;                                    : &quot;No reviews yet&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Rating Distribution */}&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                              Rating Breakdown&#10;                            &lt;/h4&gt;&#10;                            {(() =&gt; {&#10;                              const ratingDistribution =&#10;                                calculateRatingDistribution();&#10;                              const totalReviews = reviews?.length || 0;&#10;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#10;                                const count = ratingDistribution[rating];&#10;                                const percentage =&#10;                                  totalReviews &gt; 0&#10;                                    ? (count / totalReviews) * 100&#10;                                    : 0;&#10;&#10;                                return (&#10;                                  &lt;div&#10;                                    key={rating}&#10;                                    className=&quot;flex items-center space-x-3&quot;&#10;                                  &gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#10;                                    &lt;/span&gt;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                                      &lt;div&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#10;                                        style={{ width: `${percentage}%` }}&#10;                                      &gt;&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#10;                                      {count}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#10;                                      {percentage.toFixed(0)}%&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                );&#10;                              });&#10;                            })()}&#10;&#10;                            {/* Total Reviews Summary */}&#10;                            &lt;div className=&quot;mt-4 pt-3 border-t border-gray-200 dark:border-gray-600&quot;&gt;&#10;                              &lt;div className=&quot;text-center text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {(reviews?.length || 0) === 0 &amp;&amp;&#10;                                    &quot;Be the first to review this product!&quot;}&#10;                                  {(reviews?.length || 0) === 1 &amp;&amp;&#10;                                    &quot;1 customer has reviewed this product&quot;}&#10;                                  {(reviews?.length || 0) &gt; 1 &amp;&amp;&#10;                                    `${reviews.length} customers have reviewed this product`}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Form Modal */}&#10;                      {showReviewForm &amp;&amp; (&#10;                        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 w-full max-w-md&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                Write a Review&#10;                              &lt;/h3&gt;&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(false)}&#10;                                className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                              &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;form&#10;                              onSubmit={&#10;                                editingReview&#10;                                  ? (e) =&gt; {&#10;                                      e.preventDefault();&#10;                                      handleUpdateReview();&#10;                                    }&#10;                                  : handleSubmitReview&#10;                              }&#10;                              className=&quot;space-y-4&quot;&#10;                            &gt;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Rating&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                  {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                    &lt;button&#10;                                      key={star}&#10;                                      type=&quot;button&quot;&#10;                                      onClick={() =&gt;&#10;                                        setReviewForm({&#10;                                          ...reviewForm,&#10;                                          rating: star,&#10;                                        })&#10;                                      }&#10;                                      className={`text-2xl ${&#10;                                        star &lt;= reviewForm.rating&#10;                                          ? &quot;text-yellow-400&quot;&#10;                                          : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      ★&#10;                                    &lt;/button&gt;&#10;                                  ))}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Comment&#10;                                &lt;/label&gt;&#10;                                &lt;textarea&#10;                                  value={reviewForm.comment}&#10;                                  onChange={(e) =&gt;&#10;                                    setReviewForm({&#10;                                      ...reviewForm,&#10;                                      comment: e.target.value,&#10;                                    })&#10;                                  }&#10;                                  rows={4}&#10;                                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                                  placeholder=&quot;Share your experience with this product...&quot;&#10;                                  required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                                &lt;button&#10;                                  type=&quot;button&quot;&#10;                                  onClick={() =&gt; {&#10;                                    setShowReviewForm(false);&#10;                                    setEditingReview(null);&#10;                                    setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;                                  }}&#10;                                  className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                                &gt;&#10;                                  Cancel&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  type=&quot;submit&quot;&#10;                                  disabled={&#10;                                    editingReview&#10;                                      ? isUpdatingReview&#10;                                      : isSubmittingReview&#10;                                  }&#10;                                  className=&quot;flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50&quot;&#10;                                &gt;&#10;                                  {editingReview&#10;                                    ? isUpdatingReview&#10;                                      ? &quot;Updating...&quot;&#10;                                      : &quot;Update Review&quot;&#10;                                    : isSubmittingReview&#10;                                      ? &quot;Submitting...&quot;&#10;                                      : &quot;Submit Review&quot;}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/form&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#10;                          reviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={review._id}&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#10;                                          .charAt(0)&#10;                                          .toUpperCase()}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#10;                                        Verified Buyer&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                          &lt;span&#10;                                            key={star}&#10;                                            className={`text-lg transition-all duration-200 ${&#10;                                              star &lt;= review.rating&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&#10;                                            ★&#10;                                          &lt;/span&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                                        {review.rating}/5&#10;                                      &lt;/span&gt;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt || review.date,&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#10;                                          year: &quot;numeric&quot;,&#10;                                          month: &quot;short&quot;,&#10;                                          day: &quot;numeric&quot;,&#10;                                        })}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#10;                                  {/* Debug information */}&#10;                                  {console.log(&quot;DEBUG Review comparison:&quot;, {&#10;                                    sessionUserId: session?.user?.userId,&#10;                                    reviewUserId: review.userId,&#10;                                    areEqual:&#10;                                      session?.user?.userId === review.userId,&#10;                                    sessionUser: session?.user,&#10;                                  })}&#10;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#10;                                  {session?.user?.userId === review.userId ? (&#10;                                    &lt;&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt; {&#10;                                          setEditingReview(review);&#10;                                          setReviewForm({&#10;                                            rating: review.rating,&#10;                                            comment: review.comment,&#10;                                          });&#10;                                          setShowReviewForm(true);&#10;                                        }}&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Edit Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt;&#10;                                          handleDeleteReview(review._id)&#10;                                        }&#10;                                        disabled={isDeletingReview}&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Delete Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  ) : (&#10;                                    &lt;&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &quot;{review.comment}&quot;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                              {product.farmer?.farmName ||&#10;                                product.farmer?.name ||&#10;                                &quot;Farm Name&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              {product.farmer?.email ||&#10;                                &quot;Farmer contact not available&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.location &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            {product.farmer?.phone &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                              {product.farmer?.description ||&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                View All Products from this Farmer&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Related Products Section - Enhanced */}&#10;                  {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                      {/* Section Header */}&#10;                      &lt;div className=&quot;text-center mb-10&quot;&gt;&#10;                        &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Related Products&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#10;                          Discover similar high-quality products from our&#10;                          trusted farmers. Each item is carefully selected to&#10;                          meet our quality standards.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#10;                          &lt;span&gt;•&lt;/span&gt;&#10;                          &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;Fast delivery available&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Product Grid */}&#10;                      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#10;                        {relatedProducts.map((relatedProduct, index) =&gt; (&#10;                          &lt;div&#10;                            key={relatedProduct._id}&#10;                            className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#10;                            style={{ animationDelay: `${index * 100}ms` }}&#10;                          &gt;&#10;                            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#10;                              {/* Product Image */}&#10;                              &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#10;                                &lt;Image&#10;                                  src={&#10;                                    relatedProduct.image ||&#10;                                    relatedProduct.images?.[0] ||&#10;                                    &quot;/placeholder-image.jpg&quot;&#10;                                  }&#10;                                  alt={relatedProduct.name}&#10;                                  width={300}&#10;                                  height={300}&#10;                                  className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#10;                                /&gt;&#10;&#10;                                {/* Product Badges */}&#10;                                &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#10;                                  {relatedProduct.isOrganic &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Organic&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                  {relatedProduct.isFresh &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Fresh&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Quick Actions Overlay */}&#10;                                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#10;                                  &lt;Link&#10;                                    href={`/details?id=${relatedProduct._id}`}&#10;                                    className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#10;                                  &gt;&#10;                                    View Details&#10;                                  &lt;/Link&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Product Info */}&#10;                              &lt;div className=&quot;p-6&quot;&gt;&#10;                                &lt;div className=&quot;mb-3&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#10;                                    {relatedProduct.name}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#10;                                    by{&quot; &quot;}&#10;                                    {relatedProduct.farmer?.name ||&#10;                                      relatedProduct.farmer?.farmName ||&#10;                                      &quot;Unknown Farmer&quot;}&#10;                                  &lt;/p&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Rating */}&#10;                                &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#10;                                  &lt;StarRating&#10;                                    rating={relatedProduct.averageRating || 0}&#10;                                    size=&quot;sm&quot;&#10;                                  /&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    (&#10;                                    {relatedProduct.reviewCount ||&#10;                                      relatedProduct.totalReviews ||&#10;                                      0}&#10;                                    )&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Price and Stock */}&#10;                                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                                      ${(relatedProduct.price || 0).toFixed(2)}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      /{relatedProduct.unit || &quot;kg&quot;}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div&#10;                                      className={`text-xs font-medium ${&#10;                                        (relatedProduct.stock || 0) &gt; 0&#10;                                          ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                          : &quot;text-red-600 dark:text-red-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      {(relatedProduct.stock || 0) &gt; 0&#10;                                        ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#10;                                        : &quot;Out of stock&quot;}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Action Button */}&#10;                                &lt;Link&#10;                                  href={`/details?id=${relatedProduct._id}`}&#10;                                  className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                                  View Product&#10;                                &lt;/Link&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Browse More Section */}&#10;                      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Looking for more products?&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href=&quot;/products&quot;&#10;                            className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;                            Browse All Products&#10;                            &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ProductCard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ProductCard.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.reviewCount || product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/reviewUtils.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/reviewUtils.js" />
              <option name="originalContent" value="/**&#10; * Calculate average rating and review count from reviews array&#10; * @param {Array} reviews - Array of review objects with rating property&#10; * @returns {Object} - Object containing averageRating and reviewCount&#10; */&#10;export function calculateRatingStats(reviews) {&#10;  if (!reviews || !Array.isArray(reviews) || reviews.length === 0) {&#10;    return {&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;    };&#10;  }&#10;&#10;  const totalRating = reviews.reduce((sum, review) =&gt; {&#10;    const rating = Number(review.rating);&#10;    return sum + (isNaN(rating) ? 0 : rating);&#10;  }, 0);&#10;&#10;  const averageRating = Math.round((totalRating / reviews.length) * 10) / 10;&#10;&#10;  return {&#10;    averageRating: averageRating,&#10;    reviewCount: reviews.length,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance product data with calculated rating statistics&#10; * @param {Object} product - Product object&#10; * @returns {Object} - Enhanced product object with calculated ratings&#10; */&#10;export function enhanceProductWithRatings(product) {&#10;  const { averageRating, reviewCount } = calculateRatingStats(product.reviews);&#10;&#10;  return {&#10;    ...product,&#10;    averageRating,&#10;    reviewCount: reviewCount,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance multiple products with calculated rating statistics from database&#10; * @param {Array} products - Array of product objects&#10; * @param {Object} db - MongoDB database instance&#10; * @returns {Array} - Array of enhanced product objects&#10; */&#10;export async function enhanceProductsWithRatings(products, db) {&#10;  if (!Array.isArray(products) || products.length === 0) {&#10;    return [];&#10;  }&#10;&#10;  try {&#10;    // Get all reviews from the database first (simpler approach)&#10;    const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;&#10;    // Group reviews by product ID&#10;    const reviewsByProduct = {};&#10;    allReviews.forEach((review) =&gt; {&#10;      const productId = review.productId;&#10;      if (!reviewsByProduct[productId]) {&#10;        reviewsByProduct[productId] = [];&#10;      }&#10;      reviewsByProduct[productId].push(review);&#10;    });&#10;&#10;    // Enhance each product with its review data&#10;    const enhancedProducts = products.map((product) =&gt; {&#10;      const productId = product._id.toString();&#10;      const productReviews = reviewsByProduct[productId] || [];&#10;      const { averageRating, reviewCount } =&#10;        calculateRatingStats(productReviews);&#10;&#10;      return {&#10;        ...product,&#10;        averageRating,&#10;        reviewCount,&#10;        totalRatings: reviewCount, // Add totalRatings for compatibility with existing code&#10;        reviews: productReviews, // Include reviews if needed&#10;      };&#10;    });&#10;&#10;    return enhancedProducts;&#10;  } catch (error) {&#10;    console.error(&quot;Error enhancing products with ratings:&quot;, error);&#10;    // Return products with default rating values if enhancement fails&#10;    return products.map((product) =&gt; ({&#10;      ...product,&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;      totalRatings: 0,&#10;    }));&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * Calculate average rating and review count from reviews array&#10; * @param {Array} reviews - Array of review objects with rating property&#10; * @returns {Object} - Object containing averageRating and reviewCount&#10; */&#10;export function calculateRatingStats(reviews) {&#10;  if (!reviews || !Array.isArray(reviews) || reviews.length === 0) {&#10;    return {&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;    };&#10;  }&#10;&#10;  const totalRating = reviews.reduce((sum, review) =&gt; {&#10;    const rating = Number(review.rating);&#10;    return sum + (isNaN(rating) ? 0 : rating);&#10;  }, 0);&#10;&#10;  const averageRating = Math.round((totalRating / reviews.length) * 10) / 10;&#10;&#10;  return {&#10;    averageRating: averageRating,&#10;    reviewCount: reviews.length,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance product data with calculated rating statistics&#10; * @param {Object} product - Product object&#10; * @returns {Object} - Enhanced product object with calculated ratings&#10; */&#10;export function enhanceProductWithRatings(product) {&#10;  const { averageRating, reviewCount } = calculateRatingStats(product.reviews);&#10;&#10;  return {&#10;    ...product,&#10;    averageRating,&#10;    reviewCount: reviewCount,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance multiple products with calculated rating statistics from database&#10; * @param {Array} products - Array of product objects&#10; * @param {Object} db - MongoDB database instance&#10; * @returns {Array} - Array of enhanced product objects&#10; */&#10;export async function enhanceProductsWithRatings(products, db) {&#10;  if (!Array.isArray(products) || products.length === 0) {&#10;    return [];&#10;  }&#10;&#10;  try {&#10;    // Get all reviews from the separate reviews collection&#10;    const separateReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;&#10;    // Group separate reviews by product ID&#10;    const reviewsByProduct = {};&#10;    separateReviews.forEach((review) =&gt; {&#10;      const productId = review.productId;&#10;      if (!reviewsByProduct[productId]) {&#10;        reviewsByProduct[productId] = [];&#10;      }&#10;      reviewsByProduct[productId].push(review);&#10;    });&#10;&#10;    // Enhance each product with its review data&#10;    const enhancedProducts = products.map((product) =&gt; {&#10;      const productId = product._id.toString();&#10;&#10;      // Check for reviews in two places:&#10;      // 1. Reviews stored inside the product document (old products)&#10;      // 2. Reviews in the separate reviews collection (new products)&#10;      let productReviews = [];&#10;&#10;      // First, check if reviews are stored in the product document itself&#10;      if (product.reviews &amp;&amp; Array.isArray(product.reviews)) {&#10;        productReviews = product.reviews;&#10;      }&#10;      // Second, check the separate reviews collection&#10;      else if (reviewsByProduct[productId]) {&#10;        productReviews = reviewsByProduct[productId];&#10;      }&#10;&#10;      const { averageRating, reviewCount } = calculateRatingStats(productReviews);&#10;&#10;      return {&#10;        ...product,&#10;        averageRating,&#10;        reviewCount,&#10;        totalRatings: reviewCount, // Add totalRatings for compatibility with existing code&#10;        reviews: productReviews, // Include reviews if needed&#10;      };&#10;    });&#10;&#10;    return enhancedProducts;&#10;  } catch (error) {&#10;    console.error(&quot;Error enhancing products with ratings:&quot;, error);&#10;    // Return products with default rating values if enhancement fails&#10;    return products.map((product) =&gt; ({&#10;      ...product,&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;      totalRatings: 0,&#10;    }));&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>