<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/farmers/migrate/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/farmers/migrate/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    let migratedCount = 0;&#10;    let skippedCount = 0;&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;        migratedCount++;&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;        skippedCount++;&#10;      }&#10;    }&#10;&#10;    // Get final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Farmer migration completed&quot;,&#10;      results: {&#10;        farmersFound: farmerUsers.length,&#10;        migrated: migratedCount,&#10;        skipped: skippedCount,&#10;        totalFarmersInCollection: totalFarmers&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;Migration error:&quot;, error);&#10;    return NextResponse.json(&#10;      { &#10;        success: false, &#10;        error: &quot;Failed to migrate farmers&quot;,&#10;        message: error.message &#10;      },&#10;      { status: 500 }&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/orders/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/orders/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let indexesInitialized = false;&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeOrderIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (indexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await ordersCollection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Core user queries&#10;      {&#10;        key: { userId: 1, createdAt: -1 },&#10;        name: &quot;userId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries - optimized for Atlas&#10;      {&#10;        key: { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerId_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerEmail_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Alternative farmer fields&#10;      {&#10;        key: { farmerIds: 1, createdAt: -1 },&#10;        name: &quot;farmerIds_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { farmerEmails: 1, createdAt: -1 },&#10;        name: &quot;farmerEmails_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Product queries&#10;      {&#10;        key: { &quot;items.productId&quot;: 1, createdAt: -1 },&#10;        name: &quot;items_productId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Status and date queries&#10;      {&#10;        key: { status: 1, createdAt: -1 },&#10;        name: &quot;status_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // General date sorting&#10;      {&#10;        key: { createdAt: -1 },&#10;        name: &quot;createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await ordersCollection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    // Products collection indexes for order operations&#10;    const productIndexes = await productsCollection.listIndexes().toArray();&#10;    const productIndexNames = productIndexes.map((index) =&gt; index.name);&#10;&#10;    if (!productIndexNames.includes(&quot;stock_status_idx&quot;)) {&#10;      await productsCollection.createIndex(&#10;        { stock: 1, status: 1 },&#10;        { name: &quot;stock_status_idx&quot;, background: true },&#10;      );&#10;    }&#10;&#10;    indexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized order indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Order index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedOrdersCollection = null;&#10;&#10;// Response cache for identical requests (3 minutes for orders - shorter than products)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 3 * 60 * 1000;&#10;&#10;// Export cache clearing function for use by individual order updates&#10;export function clearOrdersCache() {&#10;  responseCache.clear();&#10;  console.log(&quot;Orders cache cleared&quot;);&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clean up expired entries&#10;  if (responseCache.size &gt; 50) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      return NextResponse.json(cachedResponse);&#10;    }&#10;&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const productId = searchParams.get(&quot;productId&quot;); // Add productId parameter&#10;    const status = searchParams.get(&quot;status&quot;);&#10;    const limit = parseInt(searchParams.get(&quot;limit&quot;)) || 50;&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Reuse database connection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedOrdersCollection = cachedDb.collection(&quot;orders&quot;);&#10;    }&#10;&#10;    // Initialize indexes&#10;    await initializeOrderIndexes(cachedDb);&#10;&#10;    // Build optimized query&#10;    const query = {};&#10;&#10;    if (userId) {&#10;      query.userId = userId;&#10;    }&#10;&#10;    if (status) {&#10;      query.status = status;&#10;    }&#10;&#10;    // Add productId filtering - only show orders containing this specific product&#10;    if (productId) {&#10;      query[&quot;items.productId&quot;] = productId;&#10;    }&#10;&#10;    // Optimized farmer filtering for better Atlas performance&#10;    if (farmerId || farmerEmail) {&#10;      const farmerConditions = [];&#10;&#10;      if (farmerId) {&#10;        farmerConditions.push(&#10;          { &quot;items.farmerId&quot;: farmerId },&#10;          { &quot;items.farmer.id&quot;: farmerId },&#10;          { &quot;items.farmer._id&quot;: farmerId },&#10;          { farmerIds: farmerId },&#10;        );&#10;      }&#10;&#10;      if (farmerEmail) {&#10;        farmerConditions.push(&#10;          { &quot;items.farmerEmail&quot;: farmerEmail },&#10;          { &quot;items.farmer.email&quot;: farmerEmail },&#10;          { farmerEmails: farmerEmail },&#10;        );&#10;      }&#10;&#10;      query.$or = farmerConditions;&#10;    }&#10;&#10;    // Optimized projection - reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      userId: 1,&#10;      customerName: 1,&#10;      customerEmail: 1,&#10;      customerPhone: 1,&#10;      customerInfo: 1,&#10;      status: 1,&#10;      total: 1,&#10;      .aggregate(stockValidationPipeline)&#10;      .toArray();&#10;    // Create lookup map for faster validation&#10;    const productMap = new Map(products.map((p) =&gt; [p._id.toString(), p]));&#10;&#10;    // Validate stock availability&#10;    const stockUpdates = [];&#10;    for (const item of orderData.items) {&#10;      const product = productMap.get(item.productId);&#10;&#10;      if (!product) {&#10;        throw new Error(`Product ${item.name} not found`);&#10;      }&#10;&#10;      if (product.stock &lt; item.quantity) {&#10;        throw new Error(&#10;          `Insufficient stock for ${item.name}. Available: ${product.stock}, Requested: ${item.quantity}`,&#10;        );&#10;      }&#10;&#10;      stockUpdates.push({&#10;        updateOne: {&#10;          filter: { _id: new ObjectId(item.productId) },&#10;          update: {&#10;            $inc: { stock: -item.quantity },&#10;            $set: { updatedAt: new Date() },&#10;          },&#10;        },&#10;      });&#10;    }&#10;&#10;    // Perform bulk stock updates for better performance&#10;    if (stockUpdates.length &gt; 0) {&#10;      await db.collection(&quot;products&quot;).bulkWrite(stockUpdates);&#10;    }&#10;&#10;    // Enrich order items with product data including images&#10;    const enrichedItems = orderData.items.map((item) =&gt; {&#10;      const product = productMap.get(item.productId);&#10;      return {&#10;        ...item,&#10;        // Add product images to order item&#10;        image: product?.image || item.image,&#10;        productImage: product?.image || product?.images?.[0],&#10;        images: product?.images || [],&#10;        // Store current product name in case it changes later&#10;        productName: item.productName || item.name || product?.name,&#10;        // Store farmer info&#10;        farmerName: item.farmerName || product?.farmer?.name || &quot;Local Farmer&quot;,&#10;        farmerEmail: item.farmerEmail || product?.farmer?.email,&#10;        farmerId: item.farmerId || product?.farmer?.id || product?.farmerId,&#10;      };&#10;    });&#10;&#10;    // Enrich order data with customer information&#10;    let customerInfo = {};&#10;    if (orderData.userId) {&#10;      try {&#10;        const user = await db.collection(&quot;users&quot;).findOne({&#10;          $or: [&#10;            { _id: new ObjectId(orderData.userId) },&#10;            { _id: orderData.userId },&#10;            { email: orderData.userId },&#10;          ],&#10;        });&#10;&#10;        if (user) {&#10;          customerInfo = {&#10;            customerName:&#10;              user.name || user.username || user.email || &quot;Customer&quot;,&#10;            customerEmail: user.email,&#10;            customerPhone: user.phone,&#10;            customerInfo: {&#10;              name: user.name || user.username || &quot;Customer&quot;,&#10;              email: user.email,&#10;              phone: user.phone,&#10;            },&#10;          };&#10;        }&#10;      } catch (error) {&#10;        console.log(&quot;Could not fetch user details:&quot;, error.message);&#10;      }&#10;    }&#10;&#10;    // Add timestamps and customer info to order&#10;    const newOrder = {&#10;      ...orderData,&#10;      ...customerInfo,&#10;      items: enrichedItems, // Use enriched items&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    };&#10;&#10;    // Create the order&#10;    const result = await db.collection(&quot;orders&quot;).insertOne(newOrder);&#10;&#10;    // Clear cache after creating new order to ensure fresh data&#10;    responseCache.clear();&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order created successfully&quot;,&#10;      orderId: result.insertedId,&#10;      order: { ...newOrder, _id: result.insertedId },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Create order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function PATCH(request) {&#10;  try {&#10;    const { orderId, ...updateData } = await request.json();&#10;&#10;    if (!orderId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Order ID is required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get the current order to check status changes (without transactions)&#10;    const currentOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    if (!currentOrder) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Check if order status is being changed to cancelled/returned&#10;    const isBeingCancelled =&#10;      updateData.status &amp;&amp;&#10;      (updateData.status === &quot;cancelled&quot; || updateData.status === &quot;returned&quot;) &amp;&amp;&#10;      currentOrder.status !== &quot;cancelled&quot; &amp;&amp;&#10;      currentOrder.status !== &quot;returned&quot;;&#10;&#10;    // If order is being cancelled, restore stock&#10;    if (isBeingCancelled &amp;&amp; currentOrder.items) {&#10;      console.log(&#10;        `Order ${orderId} is being cancelled/returned, restoring stock...`,&#10;      );&#10;&#10;      for (const item of currentOrder.items) {&#10;        const productId = item.productId;&#10;        const orderQuantity = item.quantity;&#10;&#10;        // Get current product&#10;        const product = await db&#10;          .collection(&quot;products&quot;)&#10;          .findOne({ _id: new ObjectId(productId) });&#10;&#10;        if (product) {&#10;          // Restore product stock&#10;          const newStock = product.stock + orderQuantity;&#10;          await db.collection(&quot;products&quot;).updateOne(&#10;            { _id: new ObjectId(productId) },&#10;            {&#10;              $set: {&#10;                stock: newStock,&#10;                updatedAt: new Date(),&#10;              },&#10;            },&#10;          );&#10;        } else {&#10;          console.warn(`Product ${productId} not found when restoring stock`);&#10;        }&#10;      }&#10;    }&#10;&#10;    // Update the order&#10;    const result = await db.collection(&quot;orders&quot;).updateOne(&#10;      { _id: new ObjectId(orderId) },&#10;      {&#10;        $set: {&#10;          ...updateData,&#10;          updatedAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Get the updated order&#10;    const updatedOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order updated successfully&quot;,&#10;      order: updatedOrder,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Update order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let indexesInitialized = false;&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeOrderIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (indexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await ordersCollection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Core user queries&#10;      {&#10;        key: { userId: 1, createdAt: -1 },&#10;        name: &quot;userId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries - optimized for Atlas&#10;      {&#10;        key: { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerId_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;        name: &quot;items_farmerEmail_status_date_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Alternative farmer fields&#10;      {&#10;        key: { farmerIds: 1, createdAt: -1 },&#10;        name: &quot;farmerIds_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      {&#10;        key: { farmerEmails: 1, createdAt: -1 },&#10;        name: &quot;farmerEmails_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Product queries&#10;      {&#10;        key: { &quot;items.productId&quot;: 1, createdAt: -1 },&#10;        name: &quot;items_productId_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Status and date queries&#10;      {&#10;        key: { status: 1, createdAt: -1 },&#10;        name: &quot;status_createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // General date sorting&#10;      {&#10;        key: { createdAt: -1 },&#10;        name: &quot;createdAt_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await ordersCollection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    // Products collection indexes for order operations&#10;    const productIndexes = await productsCollection.listIndexes().toArray();&#10;    const productIndexNames = productIndexes.map((index) =&gt; index.name);&#10;&#10;    if (!productIndexNames.includes(&quot;stock_status_idx&quot;)) {&#10;      await productsCollection.createIndex(&#10;        { stock: 1, status: 1 },&#10;        { name: &quot;stock_status_idx&quot;, background: true },&#10;      );&#10;    }&#10;&#10;    indexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized order indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Order index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedOrdersCollection = null;&#10;&#10;// Response cache for identical requests (3 minutes for orders - shorter than products)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 3 * 60 * 1000;&#10;&#10;// Export cache clearing function for use by individual order updates&#10;export function clearOrdersCache() {&#10;  responseCache.clear();&#10;  console.log(&quot;Orders cache cleared&quot;);&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clean up expired entries&#10;  if (responseCache.size &gt; 50) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      return NextResponse.json(cachedResponse);&#10;    }&#10;&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const productId = searchParams.get(&quot;productId&quot;); // Add productId parameter&#10;    const status = searchParams.get(&quot;status&quot;);&#10;    const limit = parseInt(searchParams.get(&quot;limit&quot;)) || 50;&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Reuse database connection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedOrdersCollection = cachedDb.collection(&quot;orders&quot;);&#10;    }&#10;&#10;    // Initialize indexes&#10;    await initializeOrderIndexes(cachedDb);&#10;&#10;    // Build optimized query&#10;    const query = {};&#10;&#10;    if (userId) {&#10;      query.userId = userId;&#10;    }&#10;&#10;    if (status) {&#10;      query.status = status;&#10;    }&#10;&#10;    // Add productId filtering - only show orders containing this specific product&#10;    if (productId) {&#10;      query[&quot;items.productId&quot;] = productId;&#10;    }&#10;&#10;    // Optimized farmer filtering for better Atlas performance&#10;    if (farmerId || farmerEmail) {&#10;      const farmerConditions = [];&#10;&#10;      if (farmerId) {&#10;        farmerConditions.push(&#10;          { &quot;items.farmerId&quot;: farmerId },&#10;          { &quot;items.farmer.id&quot;: farmerId },&#10;          { &quot;items.farmer._id&quot;: farmerId },&#10;          { farmerIds: farmerId },&#10;        );&#10;      }&#10;&#10;      if (farmerEmail) {&#10;        farmerConditions.push(&#10;          { &quot;items.farmerEmail&quot;: farmerEmail },&#10;          { &quot;items.farmer.email&quot;: farmerEmail },&#10;          { farmerEmails: farmerEmail },&#10;        );&#10;      }&#10;&#10;      query.$or = farmerConditions;&#10;    }&#10;&#10;    // Optimized projection - reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      userId: 1,&#10;      customerName: 1,&#10;      customerEmail: 1,&#10;      customerPhone: 1,&#10;      customerInfo: 1,&#10;      status: 1,&#10;      total: 1,&#10;      subtotal: 1,&#10;      deliveryFee: 1,&#10;      serviceFee: 1,&#10;      farmerSubtotal: 1,&#10;      shippingAddress: 1,&#10;      deliveryAddress: 1, // Add delivery address&#10;      paymentMethod: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      // Include essential item fields including images&#10;      &quot;items._id&quot;: 1,&#10;      &quot;items.productId&quot;: 1,&#10;      &quot;items.name&quot;: 1,&#10;      &quot;items.productName&quot;: 1,&#10;      &quot;items.price&quot;: 1,&#10;      &quot;items.quantity&quot;: 1,&#10;      &quot;items.subtotal&quot;: 1,&#10;      &quot;items.farmerId&quot;: 1,&#10;      &quot;items.farmerEmail&quot;: 1,&#10;      &quot;items.farmerName&quot;: 1,&#10;      &quot;items.farmer&quot;: 1,&#10;      &quot;items.image&quot;: 1, // Include item image&#10;      &quot;items.productImage&quot;: 1, // Include product image&#10;      &quot;items.images&quot;: 1, // Include images array&#10;    };&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: { createdAt: -1 } },&#10;    ];&#10;&#10;    // Add pagination&#10;    if (limit &lt; 1000) {&#10;      pipeline.push({ $skip: (page - 1) * limit }, { $limit: limit });&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [orders, totalCount] = await Promise.all([&#10;      cachedOrdersCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedOrdersCollection.countDocuments(query)&#10;        : Promise.resolve(orders.length),&#10;    ]);&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas orders query executed in ${queryTime}ms for ${orders.length} orders`,&#10;    );&#10;&#10;    // Build response&#10;    const response = {&#10;      orders,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: totalCount,&#10;        totalPages: Math.ceil(totalCount / limit),&#10;        hasNext: page * limit &lt; totalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        queryTime,&#10;        cached: false,&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, response);&#10;&#10;    return NextResponse.json(response);&#10;  } catch (error) {&#10;    console.error(&quot;Orders API Error:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch orders&quot;,&#10;        details: error.message,&#10;        orders: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 50,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const orderData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for optimal performance&#10;    await initializeOrderIndexes(db);&#10;&#10;    // Optimize stock validation using aggregation pipeline&#10;    const productIds = orderData.items.map(&#10;      (item) =&gt; new ObjectId(item.productId),&#10;    );&#10;&#10;    const stockValidationPipeline = [&#10;      { $match: { _id: { $in: productIds } } },&#10;      {&#10;        $project: {&#10;          _id: 1,&#10;          stock: 1,&#10;          name: 1,&#10;          image: 1, // Include main product image&#10;          images: 1, // Include product images array&#10;          price: 1, // Include current price&#10;          farmer: 1, // Include farmer info&#10;        },&#10;      },&#10;    ];&#10;&#10;    const products = await db&#10;      .collection(&quot;products&quot;)&#10;      .aggregate(stockValidationPipeline)&#10;      .toArray();&#10;&#10;    // Create lookup map for faster validation&#10;    const productMap = new Map(products.map((p) =&gt; [p._id.toString(), p]));&#10;&#10;    // Validate stock availability&#10;    const stockUpdates = [];&#10;    for (const item of orderData.items) {&#10;      const product = productMap.get(item.productId);&#10;&#10;      if (!product) {&#10;        throw new Error(`Product ${item.name} not found`);&#10;      }&#10;&#10;      if (product.stock &lt; item.quantity) {&#10;        throw new Error(&#10;          `Insufficient stock for ${item.name}. Available: ${product.stock}, Requested: ${item.quantity}`,&#10;        );&#10;      }&#10;&#10;      stockUpdates.push({&#10;        updateOne: {&#10;          filter: { _id: new ObjectId(item.productId) },&#10;          update: {&#10;            $inc: { stock: -item.quantity },&#10;            $set: { updatedAt: new Date() },&#10;          },&#10;        },&#10;      });&#10;    }&#10;&#10;    // Perform bulk stock updates for better performance&#10;    if (stockUpdates.length &gt; 0) {&#10;      await db.collection(&quot;products&quot;).bulkWrite(stockUpdates);&#10;    }&#10;&#10;    // Enrich order items with product data including images&#10;    const enrichedItems = orderData.items.map((item) =&gt; {&#10;      const product = productMap.get(item.productId);&#10;      return {&#10;        ...item,&#10;        // Add product images to order item&#10;        image: product?.image || item.image,&#10;        productImage: product?.image || product?.images?.[0],&#10;        images: product?.images || [],&#10;        // Store current product name in case it changes later&#10;        productName: item.productName || item.name || product?.name,&#10;        // Store farmer info&#10;        farmerName: item.farmerName || product?.farmer?.name || &quot;Local Farmer&quot;,&#10;        farmerEmail: item.farmerEmail || product?.farmer?.email,&#10;        farmerId: item.farmerId || product?.farmer?.id || product?.farmerId,&#10;      };&#10;    });&#10;&#10;    // Enrich order data with customer information&#10;    let customerInfo = {};&#10;    if (orderData.userId) {&#10;      try {&#10;        const user = await db.collection(&quot;users&quot;).findOne({&#10;          $or: [&#10;            { _id: new ObjectId(orderData.userId) },&#10;            { _id: orderData.userId },&#10;            { email: orderData.userId },&#10;          ],&#10;        });&#10;&#10;        if (user) {&#10;          customerInfo = {&#10;            customerName:&#10;              user.name || user.username || user.email || &quot;Customer&quot;,&#10;            customerEmail: user.email,&#10;            customerPhone: user.phone,&#10;            customerInfo: {&#10;              name: user.name || user.username || &quot;Customer&quot;,&#10;              email: user.email,&#10;              phone: user.phone,&#10;            },&#10;          };&#10;        }&#10;      } catch (error) {&#10;        console.log(&quot;Could not fetch user details:&quot;, error.message);&#10;      }&#10;    }&#10;&#10;    // Add timestamps and customer info to order&#10;    const newOrder = {&#10;      ...orderData,&#10;      ...customerInfo,&#10;      items: enrichedItems, // Use enriched items&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;    };&#10;&#10;    // Create the order&#10;    const result = await db.collection(&quot;orders&quot;).insertOne(newOrder);&#10;&#10;    // Clear cache after creating new order to ensure fresh data&#10;    responseCache.clear();&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order created successfully&quot;,&#10;      orderId: result.insertedId,&#10;      order: { ...newOrder, _id: result.insertedId },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Create order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function PATCH(request) {&#10;  try {&#10;    const { orderId, ...updateData } = await request.json();&#10;&#10;    if (!orderId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Order ID is required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get the current order to check status changes (without transactions)&#10;    const currentOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    if (!currentOrder) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Check if order status is being changed to cancelled/returned&#10;    const isBeingCancelled =&#10;      updateData.status &amp;&amp;&#10;      (updateData.status === &quot;cancelled&quot; || updateData.status === &quot;returned&quot;) &amp;&amp;&#10;      currentOrder.status !== &quot;cancelled&quot; &amp;&amp;&#10;      currentOrder.status !== &quot;returned&quot;;&#10;&#10;    // If order is being cancelled, restore stock&#10;    if (isBeingCancelled &amp;&amp; currentOrder.items) {&#10;      console.log(&#10;        `Order ${orderId} is being cancelled/returned, restoring stock...`,&#10;      );&#10;&#10;      for (const item of currentOrder.items) {&#10;        const productId = item.productId;&#10;        const orderQuantity = item.quantity;&#10;&#10;        // Get current product&#10;        const product = await db&#10;          .collection(&quot;products&quot;)&#10;          .findOne({ _id: new ObjectId(productId) });&#10;&#10;        if (product) {&#10;          // Restore product stock&#10;          const newStock = product.stock + orderQuantity;&#10;          await db.collection(&quot;products&quot;).updateOne(&#10;            { _id: new ObjectId(productId) },&#10;            {&#10;              $set: {&#10;                stock: newStock,&#10;                updatedAt: new Date(),&#10;              },&#10;            },&#10;          );&#10;        } else {&#10;          console.warn(`Product ${productId} not found when restoring stock`);&#10;        }&#10;      }&#10;    }&#10;&#10;    // Update the order&#10;    const result = await db.collection(&quot;orders&quot;).updateOne(&#10;      { _id: new ObjectId(orderId) },&#10;      {&#10;        $set: {&#10;          ...updateData,&#10;          updatedAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Order not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Get the updated order&#10;    const updatedOrder = await db&#10;      .collection(&quot;orders&quot;)&#10;      .findOne({ _id: new ObjectId(orderId) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Order updated successfully&quot;,&#10;      order: updatedOrder,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Update order error:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update order&quot;, details: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/[id]/can-review/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/[id]/can-review/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = params; // product ID&#10;    const { searchParams } = new URL(request.url);&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;&#10;    console.log(&quot; Can-review API called:&quot;, { productId: id, userId });&#10;&#10;    if (!userId) {&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;User not authenticated&quot; },&#10;        { status: 401 },&#10;      );&#10;    }&#10;&#10;    if (!id) {&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;Product ID required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;&#10;    // Build query to check if user has purchased and received this product&#10;    const userIdConditions = [{ userId: userId }]; // Direct string match&#10;&#10;    // Only add ObjectId condition if userId is a valid ObjectId format&#10;    if (ObjectId.isValid(userId)) {&#10;      userIdConditions.push({ userId: new ObjectId(userId) });&#10;    }&#10;&#10;    // Build product ID conditions&#10;    const productIdConditions = [id];&#10;    if (ObjectId.isValid(id)) {&#10;      productIdConditions.push(new ObjectId(id));&#10;    }&#10;&#10;    console.log(&quot; Checking purchase history:&quot;, {&#10;      userIdConditions,&#10;      productIdConditions,&#10;      userId,&#10;      productId: id,&#10;    });&#10;&#10;    // Check if user has a delivered order with this product&#10;    const purchaseQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          &quot;items.productId&quot;: { $in: productIdConditions },&#10;        },&#10;        {&#10;          status: &quot;delivered&quot;, // Only delivered orders are eligible for reviews&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&quot; Purchase query:&quot;, JSON.stringify(purchaseQuery, null, 2));&#10;&#10;    const purchaseCheck = await ordersCollection.findOne(purchaseQuery);&#10;&#10;    console.log(&#10;      &quot; Purchase check result:&quot;,&#10;      purchaseCheck ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;&#10;    if (!purchaseCheck) {&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason:&#10;          &quot;You must purchase and receive this product before writing a review&quot;,&#10;        hasPurchased: false,&#10;      });&#10;    }&#10;&#10;    // Check if user has already reviewed this product&#10;    const existingReviewQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          productId: { $in: productIdConditions },&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&#10;      &quot; Checking existing review query:&quot;,&#10;      JSON.stringify(existingReviewQuery, null, 2),&#10;    );&#10;&#10;    const existingReview = await reviewsCollection.findOne(existingReviewQuery);&#10;&#10;    console.log(&#10;      &quot; Existing review check:&quot;,&#10;      existingReview ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;&#10;    if (existingReview) {&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason: &quot;You have already reviewed this product&quot;,&#10;        hasPurchased: true,&#10;        hasReviewed: true,&#10;        existingReview: {&#10;          id: existingReview._id,&#10;          rating: existingReview.rating,&#10;          comment: existingReview.comment,&#10;          createdAt: existingReview.createdAt,&#10;        },&#10;      });&#10;    }&#10;&#10;    // User has purchased and received the product, and hasn't reviewed it yet&#10;    console.log(&quot;✅ User can review this product&quot;);&#10;&#10;    return NextResponse.json({&#10;      canReview: true,&#10;      reason: &quot;You can write a review for this product&quot;,&#10;      hasPurchased: true,&#10;      hasReviewed: false,&#10;      orderDetails: {&#10;        orderId: purchaseCheck._id,&#10;        orderDate: purchaseCheck.createdAt,&#10;        deliveredDate: purchaseCheck.updatedAt,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error in can-review API:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        canReview: false,&#10;        reason: &quot;Server error while checking review eligibility&quot;,&#10;        error:&#10;          process.env.NODE_ENV === &quot;development&quot; ? error.message : undefined,&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = params; // product ID&#10;    const { searchParams } = new URL(request.url);&#10;    const userId = searchParams.get(&quot;userId&quot;);&#10;&#10;    console.log(&quot; Can-review API called:&quot;, { productId: id, userId });&#10;    console.log(&quot; Full request details:&quot;, {&#10;      url: request.url,&#10;      searchParams: Array.from(searchParams.entries()),&#10;      headers: Object.fromEntries(request.headers.entries()),&#10;    });&#10;&#10;    if (!userId) {&#10;      console.log(&quot;❌ No userId provided&quot;);&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;User not authenticated&quot; },&#10;        { status: 401 },&#10;      );&#10;    }&#10;&#10;    if (!id) {&#10;      console.log(&quot;❌ No product ID provided&quot;);&#10;      return NextResponse.json(&#10;        { canReview: false, reason: &quot;Product ID required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;&#10;    console.log(&quot; Database connection established&quot;);&#10;&#10;    // Build query to check if user has purchased and received this product&#10;    const userIdConditions = [{ userId: userId }]; // Direct string match&#10;&#10;    // Only add ObjectId condition if userId is a valid ObjectId format&#10;    if (ObjectId.isValid(userId)) {&#10;      userIdConditions.push({ userId: new ObjectId(userId) });&#10;    }&#10;&#10;    // Build product ID conditions&#10;    const productIdConditions = [id];&#10;    if (ObjectId.isValid(id)) {&#10;      productIdConditions.push(new ObjectId(id));&#10;    }&#10;&#10;    console.log(&quot; Checking purchase history:&quot;, {&#10;      userIdConditions,&#10;      productIdConditions,&#10;      userId,&#10;      productId: id,&#10;    });&#10;&#10;    // Check if user has a delivered order with this product&#10;    const purchaseQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          &quot;items.productId&quot;: { $in: productIdConditions },&#10;        },&#10;        {&#10;          status: &quot;delivered&quot;, // Only delivered orders are eligible for reviews&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&quot; Purchase query:&quot;, JSON.stringify(purchaseQuery, null, 2));&#10;&#10;    const purchaseCheck = await ordersCollection.findOne(purchaseQuery);&#10;&#10;    console.log(&#10;      &quot; Purchase check result:&quot;,&#10;      purchaseCheck ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;    &#10;    if (purchaseCheck) {&#10;      console.log(&quot; Found matching order:&quot;, {&#10;        orderId: purchaseCheck._id,&#10;        userId: purchaseCheck.userId,&#10;        status: purchaseCheck.status,&#10;        items: purchaseCheck.items?.map(item =&gt; ({&#10;          productId: item.productId,&#10;          name: item.name,&#10;        })),&#10;        createdAt: purchaseCheck.createdAt,&#10;        updatedAt: purchaseCheck.updatedAt,&#10;      });&#10;    }&#10;&#10;    if (!purchaseCheck) {&#10;      console.log(&quot;❌ No delivered order found for this user-product combination&quot;);&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason:&#10;          &quot;You must purchase and receive this product before writing a review&quot;,&#10;        hasPurchased: false,&#10;        debug: {&#10;          query: purchaseQuery,&#10;          userIdConditions,&#10;          productIdConditions,&#10;        },&#10;      });&#10;    }&#10;&#10;    // Check if user has already reviewed this product&#10;    const existingReviewQuery = {&#10;      $and: [&#10;        {&#10;          $or: userIdConditions,&#10;        },&#10;        {&#10;          productId: { $in: productIdConditions },&#10;        },&#10;      ],&#10;    };&#10;&#10;    console.log(&#10;      &quot; Checking existing review query:&quot;,&#10;      JSON.stringify(existingReviewQuery, null, 2),&#10;    );&#10;&#10;    const existingReview = await reviewsCollection.findOne(existingReviewQuery);&#10;&#10;    console.log(&#10;      &quot; Existing review check:&quot;,&#10;      existingReview ? &quot;FOUND&quot; : &quot;NOT FOUND&quot;,&#10;    );&#10;&#10;    if (existingReview) {&#10;      return NextResponse.json({&#10;        canReview: false,&#10;        reason: &quot;You have already reviewed this product&quot;,&#10;        hasPurchased: true,&#10;        hasReviewed: true,&#10;        existingReview: {&#10;          id: existingReview._id,&#10;          rating: existingReview.rating,&#10;          comment: existingReview.comment,&#10;          createdAt: existingReview.createdAt,&#10;        },&#10;      });&#10;    }&#10;&#10;    // User has purchased and received the product, and hasn't reviewed it yet&#10;    console.log(&quot;✅ User can review this product&quot;);&#10;&#10;    return NextResponse.json({&#10;      canReview: true,&#10;      reason: &quot;You can write a review for this product&quot;,&#10;      hasPurchased: true,&#10;      hasReviewed: false,&#10;      orderDetails: {&#10;        orderId: purchaseCheck._id,&#10;        orderDate: purchaseCheck.createdAt,&#10;        deliveredDate: purchaseCheck.updatedAt,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error in can-review API:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        canReview: false,&#10;        reason: &quot;Server error while checking review eligibility&quot;,&#10;        error:&#10;          process.env.NODE_ENV === &quot;development&quot; ? error.message : undefined,&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let productIndexesInitialized = false;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedCollection = null;&#10;&#10;// Response cache for identical requests (5 minutes)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 5 * 60 * 1000;&#10;&#10;// Export the response cache for access by bulk-update route&#10;export { responseCache };&#10;&#10;&#10;  try {&#10;    const collection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await collection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Simplified Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Primary query index - most common pattern&#10;      {&#10;        key: { status: 1, category: 1, createdAt: -1 },&#10;        name: &quot;primary_query_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Search index&#10;      {&#10;        key: { name: &quot;text&quot;, description: &quot;text&quot;, category: &quot;text&quot; },&#10;        name: &quot;products_text_search_idx&quot;,&#10;        options: {&#10;          background: true,&#10;          weights: { name: 10, category: 5, description: 1 },&#10;        },&#10;      },&#10;      // Price and rating filters&#10;      {&#10;        key: { status: 1, price: 1, averageRating: -1 },&#10;        name: &quot;price_rating_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries&#10;      {&#10;        key: { &quot;farmer._id&quot;: 1, status: 1 },&#10;        name: &quot;farmer_status_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await collection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    productIndexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized product indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Product index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clear cache if it gets too large to prevent memory issues&#10;  if (responseCache.size &gt; 50) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      const response = NextResponse.json(cachedResponse);&#10;      // Add cache headers to indicate this is cached data&#10;      response.headers.set(&quot;X-Cache&quot;, &quot;HIT&quot;);&#10;      response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;      return response;&#10;    }&#10;&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : 12; // Default to 12 for pagination&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Simplified filtering parameters&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minPrice&quot;))&#10;      : null;&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;maxPrice&quot;))&#10;      : null;&#10;    const minRating = searchParams.get(&quot;minRating&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minRating&quot;))&#10;      : null;&#10;&#10;    // Reuse database connection and collection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedCollection = cachedDb.collection(&quot;products&quot;);&#10;    }&#10;&#10;    // Initialize indexes only once&#10;    await initializeProductIndexes(cachedDb);&#10;&#10;    // Build optimized query for Atlas&#10;    const query = { status: { $ne: &quot;deleted&quot; } };&#10;&#10;    // Check if this is a dashboard context request&#10;    const isDashboardContext = searchParams.get(&quot;dashboard&quot;) === &quot;true&quot;;&#10;&#10;    // For public access (non-farmer requests), exclude inactive products&#10;    // Only farmers should see their inactive products in their dashboard&#10;    if (!farmerId &amp;&amp; !farmerEmail &amp;&amp; !isDashboardContext) {&#10;      // This is a public request - exclude inactive products&#10;      query.status = { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] };&#10;    }&#10;&#10;    // Add search filter using text index for better performance&#10;    if (search) {&#10;      query.$text = { $search: search };&#10;    }&#10;&#10;    // Add category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      query.category = { $regex: new RegExp(category, &quot;i&quot;) };&#10;    }&#10;&#10;    // Add featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      query.featured = true;&#10;    }&#10;&#10;    // Add farmer filters for dashboard&#10;    if (farmerId || farmerEmail) {&#10;      query.$or = [];&#10;      if (farmerId) {&#10;        // First, try to get farmer info to match by name for hardcoded farmers&#10;        let farmerName = null;&#10;        let farmerFarmName = null;&#10;&#10;        try {&#10;          // Try to get farmer data to extract name for name-based matching&#10;          const farmersCollection = cachedDb.collection(&quot;farmers&quot;);&#10;          let farmer = null;&#10;&#10;          // Check if it's an ObjectId&#10;          if (farmerId.match(/^[0-9a-fA-F]{24}$/)) {&#10;            farmer = await farmersCollection.findOne({&#10;              _id: new ObjectId(farmerId),&#10;            });&#10;          } else {&#10;            // Check in farmers array for hardcoded farmers&#10;            const farmersDoc = await farmersCollection.findOne({&#10;              &quot;farmers._id&quot;: farmerId,&#10;            });&#10;            if (farmersDoc &amp;&amp; farmersDoc.farmers) {&#10;              farmer = farmersDoc.farmers.find((f) =&gt; f._id === farmerId);&#10;            }&#10;          }&#10;&#10;          if (farmer) {&#10;            farmerName = farmer.name;&#10;            farmerFarmName = farmer.farmName;&#10;          }&#10;        } catch (error) {&#10;          console.log(&quot;Could not fetch farmer for name-based matching:&quot;, error);&#10;        }&#10;&#10;        query.$or.push(&#10;          { farmerId: farmerId },&#10;          { farmerId: { $eq: farmerId } },&#10;          { &quot;farmer.id&quot;: farmerId },&#10;          { &quot;farmer._id&quot;: farmerId },&#10;        );&#10;&#10;        // Add name-based matching for hardcoded farmers&#10;        if (farmerName) {&#10;          query.$or.push(&#10;            { &quot;farmer.name&quot;: farmerName },&#10;            { &quot;farmer.name&quot;: { $regex: new RegExp(`^${farmerName}$`, &quot;i&quot;) } },&#10;          );&#10;        }&#10;        if (farmerFarmName) {&#10;          query.$or.push(&#10;            { &quot;farmer.farmName&quot;: farmerFarmName },&#10;            {&#10;              &quot;farmer.farmName&quot;: {&#10;                $regex: new RegExp(`^${farmerFarmName}$`, &quot;i&quot;),&#10;              },&#10;            },&#10;          );&#10;        }&#10;      }&#10;      if (farmerEmail) {&#10;        query.$or.push(&#10;          { farmerEmail: farmerEmail },&#10;          { &quot;farmer.email&quot;: farmerEmail },&#10;        );&#10;      }&#10;    }&#10;&#10;    // Add price range filter&#10;    if (minPrice !== null || maxPrice !== null) {&#10;      query.price = {};&#10;      if (minPrice !== null) query.price.$gte = minPrice;&#10;      if (maxPrice !== null) query.price.$lte = maxPrice;&#10;    }&#10;&#10;    // Add rating filter&#10;    if (minRating !== null) {&#10;      query.averageRating = { $gte: minRating };&#10;    }&#10;&#10;    // Optimized projection - only select needed fields to reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      name: 1,&#10;      description: 1,&#10;      price: 1,&#10;      stock: 1,&#10;      images: 1,&#10;      category: 1,&#10;      averageRating: 1,&#10;      totalReviews: 1,&#10;      reviews: 1, // Include reviews array for rating calculation&#10;      featured: 1,&#10;      status: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      farmer: 1,&#10;      farmerId: 1,&#10;      farmerEmail: 1,&#10;      farmerName: 1,&#10;      tags: 1,&#10;      isOrganic: 1,&#10;      isFresh: 1,&#10;      purchaseCount: 1,&#10;      unit: 1, // Add unit field for product cards&#10;      // Exclude heavy fields like detailed descriptions, etc.&#10;    };&#10;&#10;    // Build sort options for better Atlas performance&#10;    let sortOptions = {};&#10;    if (search) {&#10;      // Text search score for relevance&#10;      sortOptions = { score: { $meta: &quot;textScore&quot; }, createdAt: -1 };&#10;    } else {&#10;      switch (sortBy) {&#10;        case &quot;price-low&quot;:&#10;          sortOptions = { price: 1 };&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          sortOptions = { price: -1 };&#10;          break;&#10;        case &quot;rating&quot;:&#10;          sortOptions = { averageRating: -1, totalReviews: -1 };&#10;          break;&#10;        case &quot;popular&quot;:&#10;          sortOptions = { purchaseCount: -1, averageRating: -1 };&#10;          break;&#10;        case &quot;oldest&quot;:&#10;          sortOptions = { createdAt: 1 };&#10;          break;&#10;        case &quot;newest&quot;:&#10;        default:&#10;          sortOptions = { createdAt: -1 };&#10;          break;&#10;      }&#10;    }&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: sortOptions },&#10;    ];&#10;&#10;    // Add pagination only if needed&#10;    if (limit &lt; 1000) {&#10;      pipeline.push({ $skip: (page - 1) * limit }, { $limit: limit });&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [products, totalCount] = await Promise.all([&#10;      cachedCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedCollection.countDocuments(query)&#10;        : Promise.resolve(0), // We'll calculate this after products are resolved&#10;    ]);&#10;&#10;    // Calculate actual total count for large datasets&#10;    const actualTotalCount = limit &lt; 1000 ? totalCount : products.length;&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas query executed in ${queryTime}ms for ${products.length} products`,&#10;    );&#10;&#10;    // Enhance with ratings and review counts from the products collection&#10;    const enhancedProducts = await enhanceProductsWithRatings(&#10;      products,&#10;      cachedDb,&#10;    );&#10;&#10;    // Prepare response data&#10;    const responseData = {&#10;      products: enhancedProducts,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: actualTotalCount,&#10;        totalPages: Math.ceil(actualTotalCount / limit),&#10;        hasNext: page * limit &lt; actualTotalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        query: {&#10;          search,&#10;          category,&#10;          featured,&#10;          sortBy,&#10;          minPrice,&#10;          maxPrice,&#10;          minRating,&#10;        },&#10;        performance: {&#10;          queryTime,&#10;          cached: false,&#10;        },&#10;        timestamp: new Date().toISOString(), // Add timestamp for debugging&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, responseData);&#10;&#10;    const response = NextResponse.json(responseData);&#10;&#10;    // Add cache headers&#10;    response.headers.set(&quot;X-Cache&quot;, &quot;MISS&quot;);&#10;    response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;    response.headers.set(&quot;X-Generated-At&quot;, new Date().toISOString());&#10;&#10;    return response;&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch products&quot;,&#10;        message: error.message,&#10;        products: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 12,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;        timestamp: new Date().toISOString(),&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const body = await request.json();&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for the first POST operation&#10;    await initializeProductIndexes(db);&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne({&#10;      ...body,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      status: &quot;active&quot;,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      reviewCount: 0,&#10;      purchaseCount: 0,&#10;    });&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot;, message: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;// Track if indexes have been initialized to avoid repeated calls&#10;let productIndexesInitialized = false;&#10;// Cache for database connection and collections&#10;let cachedDb = null;&#10;let cachedCollection = null;&#10;&#10;// Response cache for identical requests (5 minutes)&#10;const responseCache = new Map();&#10;const CACHE_TTL = 5 * 60 * 1000;&#10;&#10;// Export the response cache for access by bulk-update route&#10;export { responseCache };&#10;&#10;// Function to clear cache when reviews are updated&#10;export function clearProductsCache() {&#10;  responseCache.clear();&#10;  console.log(&quot;Products cache cleared due to review update&quot;);&#10;}&#10;&#10;// Initialize indexes optimized for MongoDB Atlas performance&#10;async function initializeProductIndexes(db) {&#10;  // Only initialize once per application lifecycle&#10;  if (productIndexesInitialized) {&#10;    return;&#10;  }&#10;&#10;  try {&#10;    const collection = db.collection(&quot;products&quot;);&#10;&#10;    // Check if indexes already exist before creating them&#10;    const existingIndexes = await collection.listIndexes().toArray();&#10;    const indexNames = existingIndexes.map((index) =&gt; index.name);&#10;&#10;    // Simplified Atlas-optimized compound indexes for better performance&#10;    const indexesToCreate = [&#10;      // Primary query index - most common pattern&#10;      {&#10;        key: { status: 1, category: 1, createdAt: -1 },&#10;        name: &quot;primary_query_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Search index&#10;      {&#10;        key: { name: &quot;text&quot;, description: &quot;text&quot;, category: &quot;text&quot; },&#10;        name: &quot;products_text_search_idx&quot;,&#10;        options: {&#10;          background: true,&#10;          weights: { name: 10, category: 5, description: 1 },&#10;        },&#10;      },&#10;      // Price and rating filters&#10;      {&#10;        key: { status: 1, price: 1, averageRating: -1 },&#10;        name: &quot;price_rating_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;      // Farmer queries&#10;      {&#10;        key: { &quot;farmer._id&quot;: 1, status: 1 },&#10;        name: &quot;farmer_status_idx&quot;,&#10;        options: { background: true },&#10;      },&#10;    ];&#10;&#10;    for (const indexSpec of indexesToCreate) {&#10;      if (!indexNames.includes(indexSpec.name)) {&#10;        await collection.createIndex(indexSpec.key, {&#10;          name: indexSpec.name,&#10;          ...indexSpec.options,&#10;        });&#10;      }&#10;    }&#10;&#10;    productIndexesInitialized = true;&#10;    console.log(&quot;Atlas-optimized product indexes initialized successfully&quot;);&#10;  } catch (error) {&#10;    console.log(&quot;Product index initialization note:&quot;, error.message);&#10;  }&#10;}&#10;&#10;// Generate cache key for request&#10;function generateCacheKey(searchParams) {&#10;  const params = {};&#10;  searchParams.forEach((value, key) =&gt; {&#10;    params[key] = value;&#10;  });&#10;  return JSON.stringify(params);&#10;}&#10;&#10;// Get cached response if available and not expired&#10;function getCachedResponse(cacheKey) {&#10;  const cached = responseCache.get(cacheKey);&#10;  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; CACHE_TTL) {&#10;    return cached.data;&#10;  }&#10;  responseCache.delete(cacheKey);&#10;  return null;&#10;}&#10;&#10;// Set response in cache&#10;function setCachedResponse(cacheKey, data) {&#10;  responseCache.set(cacheKey, {&#10;    data,&#10;    timestamp: Date.now(),&#10;  });&#10;&#10;  // Clear cache if it gets too large to prevent memory issues&#10;  if (responseCache.size &gt; 50) {&#10;    const now = Date.now();&#10;    for (const [key, value] of responseCache.entries()) {&#10;      if (now - value.timestamp &gt;= CACHE_TTL) {&#10;        responseCache.delete(key);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;&#10;    // Check cache first&#10;    const cacheKey = generateCacheKey(searchParams);&#10;    const cachedResponse = getCachedResponse(cacheKey);&#10;    if (cachedResponse) {&#10;      const response = NextResponse.json(cachedResponse);&#10;      // Add cache headers to indicate this is cached data&#10;      response.headers.set(&quot;X-Cache&quot;, &quot;HIT&quot;);&#10;      response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;      return response;&#10;    }&#10;&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const farmerId = searchParams.get(&quot;farmerId&quot;);&#10;    const farmerEmail = searchParams.get(&quot;farmerEmail&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : 12; // Default to 12 for pagination&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    // Simplified filtering parameters&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minPrice&quot;))&#10;      : null;&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;)&#10;      ? parseFloat(searchParams.get(&quot;maxPrice&quot;))&#10;      : null;&#10;    const minRating = searchParams.get(&quot;minRating&quot;)&#10;      ? parseFloat(searchParams.get(&quot;minRating&quot;))&#10;      : null;&#10;&#10;    // Reuse database connection and collection&#10;    if (!cachedDb) {&#10;      const client = await clientPromise;&#10;      cachedDb = client.db(&quot;farmfresh&quot;);&#10;      cachedCollection = cachedDb.collection(&quot;products&quot;);&#10;    }&#10;&#10;    // Initialize indexes only once&#10;    await initializeProductIndexes(cachedDb);&#10;&#10;    // Build optimized query for Atlas&#10;    const query = { status: { $ne: &quot;deleted&quot; } };&#10;&#10;    // Check if this is a dashboard context request&#10;    const isDashboardContext = searchParams.get(&quot;dashboard&quot;) === &quot;true&quot;;&#10;&#10;    // For public access (non-farmer requests), exclude inactive products&#10;    // Only farmers should see their inactive products in their dashboard&#10;    if (!farmerId &amp;&amp; !farmerEmail &amp;&amp; !isDashboardContext) {&#10;      // This is a public request - exclude inactive products&#10;      query.status = { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] };&#10;    }&#10;&#10;    // Add search filter using text index for better performance&#10;    if (search) {&#10;      query.$text = { $search: search };&#10;    }&#10;&#10;    // Add category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      query.category = { $regex: new RegExp(category, &quot;i&quot;) };&#10;    }&#10;&#10;    // Add featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      query.featured = true;&#10;    }&#10;&#10;    // Add farmer filters for dashboard&#10;    if (farmerId || farmerEmail) {&#10;      query.$or = [];&#10;      if (farmerId) {&#10;        // First, try to get farmer info to match by name for hardcoded farmers&#10;        let farmerName = null;&#10;        let farmerFarmName = null;&#10;&#10;        try {&#10;          // Try to get farmer data to extract name for name-based matching&#10;          const farmersCollection = cachedDb.collection(&quot;farmers&quot;);&#10;          let farmer = null;&#10;&#10;          // Check if it's an ObjectId&#10;          if (farmerId.match(/^[0-9a-fA-F]{24}$/)) {&#10;            farmer = await farmersCollection.findOne({&#10;              _id: new ObjectId(farmerId),&#10;            });&#10;          } else {&#10;            // Check in farmers array for hardcoded farmers&#10;            const farmersDoc = await farmersCollection.findOne({&#10;              &quot;farmers._id&quot;: farmerId,&#10;            });&#10;            if (farmersDoc &amp;&amp; farmersDoc.farmers) {&#10;              farmer = farmersDoc.farmers.find((f) =&gt; f._id === farmerId);&#10;            }&#10;          }&#10;&#10;          if (farmer) {&#10;            farmerName = farmer.name;&#10;            farmerFarmName = farmer.farmName;&#10;          }&#10;        } catch (error) {&#10;          console.log(&quot;Could not fetch farmer for name-based matching:&quot;, error);&#10;        }&#10;&#10;        query.$or.push(&#10;          { farmerId: farmerId },&#10;          { farmerId: { $eq: farmerId } },&#10;          { &quot;farmer.id&quot;: farmerId },&#10;          { &quot;farmer._id&quot;: farmerId },&#10;        );&#10;&#10;        // Add name-based matching for hardcoded farmers&#10;        if (farmerName) {&#10;          query.$or.push(&#10;            { &quot;farmer.name&quot;: farmerName },&#10;            { &quot;farmer.name&quot;: { $regex: new RegExp(`^${farmerName}$`, &quot;i&quot;) } },&#10;          );&#10;        }&#10;        if (farmerFarmName) {&#10;          query.$or.push(&#10;            { &quot;farmer.farmName&quot;: farmerFarmName },&#10;            {&#10;              &quot;farmer.farmName&quot;: {&#10;                $regex: new RegExp(`^${farmerFarmName}$`, &quot;i&quot;),&#10;              },&#10;            },&#10;          );&#10;        }&#10;      }&#10;      if (farmerEmail) {&#10;        query.$or.push(&#10;          { farmerEmail: farmerEmail },&#10;          { &quot;farmer.email&quot;: farmerEmail },&#10;        );&#10;      }&#10;    }&#10;&#10;    // Add price range filter&#10;    if (minPrice !== null || maxPrice !== null) {&#10;      query.price = {};&#10;      if (minPrice !== null) query.price.$gte = minPrice;&#10;      if (maxPrice !== null) query.price.$lte = maxPrice;&#10;    }&#10;&#10;    // Add rating filter&#10;    if (minRating !== null) {&#10;      query.averageRating = { $gte: minRating };&#10;    }&#10;&#10;    // Optimized projection - only select needed fields to reduce data transfer&#10;    const projection = {&#10;      _id: 1,&#10;      name: 1,&#10;      description: 1,&#10;      price: 1,&#10;      stock: 1,&#10;      images: 1,&#10;      category: 1,&#10;      averageRating: 1,&#10;      totalReviews: 1,&#10;      reviews: 1, // Include reviews array for rating calculation&#10;      featured: 1,&#10;      status: 1,&#10;      createdAt: 1,&#10;      updatedAt: 1,&#10;      farmer: 1,&#10;      farmerId: 1,&#10;      farmerEmail: 1,&#10;      farmerName: 1,&#10;      tags: 1,&#10;      isOrganic: 1,&#10;      isFresh: 1,&#10;      purchaseCount: 1,&#10;      unit: 1, // Add unit field for product cards&#10;      // Exclude heavy fields like detailed descriptions, etc.&#10;    };&#10;&#10;    // Build sort options for better Atlas performance&#10;    let sortOptions = {};&#10;    if (search) {&#10;      // Text search score for relevance&#10;      sortOptions = { score: { $meta: &quot;textScore&quot; }, createdAt: -1 };&#10;    } else {&#10;      switch (sortBy) {&#10;        case &quot;price-low&quot;:&#10;          sortOptions = { price: 1 };&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          sortOptions = { price: -1 };&#10;          break;&#10;        case &quot;rating&quot;:&#10;          sortOptions = { averageRating: -1, totalReviews: -1 };&#10;          break;&#10;        case &quot;popular&quot;:&#10;          sortOptions = { purchaseCount: -1, averageRating: -1 };&#10;          break;&#10;        case &quot;oldest&quot;:&#10;          sortOptions = { createdAt: 1 };&#10;          break;&#10;        case &quot;newest&quot;:&#10;        default:&#10;          sortOptions = { createdAt: -1 };&#10;          break;&#10;      }&#10;    }&#10;&#10;    // Use aggregation pipeline for better Atlas performance&#10;    const pipeline = [&#10;      { $match: query },&#10;      { $project: projection },&#10;      { $sort: sortOptions },&#10;    ];&#10;&#10;    // Add pagination only if needed&#10;    if (limit &lt; 1000) {&#10;      pipeline.push({ $skip: (page - 1) * limit }, { $limit: limit });&#10;    }&#10;&#10;    // Execute optimized query&#10;    const startTime = Date.now();&#10;    const [products, totalCount] = await Promise.all([&#10;      cachedCollection.aggregate(pipeline).toArray(),&#10;      // Only count if we need pagination&#10;      limit &lt; 1000&#10;        ? cachedCollection.countDocuments(query)&#10;        : Promise.resolve(0), // We'll calculate this after products are resolved&#10;    ]);&#10;&#10;    // Calculate actual total count for large datasets&#10;    const actualTotalCount = limit &lt; 1000 ? totalCount : products.length;&#10;&#10;    const queryTime = Date.now() - startTime;&#10;    console.log(&#10;      `Atlas query executed in ${queryTime}ms for ${products.length} products`,&#10;    );&#10;&#10;    // Enhance with ratings and review counts from the products collection&#10;    const enhancedProducts = await enhanceProductsWithRatings(&#10;      products,&#10;      cachedDb,&#10;    );&#10;&#10;    // Prepare response data&#10;    const responseData = {&#10;      products: enhancedProducts,&#10;      pagination: {&#10;        page,&#10;        limit,&#10;        total: actualTotalCount,&#10;        totalPages: Math.ceil(actualTotalCount / limit),&#10;        hasNext: page * limit &lt; actualTotalCount,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;      meta: {&#10;        query: {&#10;          search,&#10;          category,&#10;          featured,&#10;          sortBy,&#10;          minPrice,&#10;          maxPrice,&#10;          minRating,&#10;        },&#10;        performance: {&#10;          queryTime,&#10;          cached: false,&#10;        },&#10;        timestamp: new Date().toISOString(), // Add timestamp for debugging&#10;      },&#10;    };&#10;&#10;    // Cache the response&#10;    setCachedResponse(cacheKey, responseData);&#10;&#10;    const response = NextResponse.json(responseData);&#10;&#10;    // Add cache headers&#10;    response.headers.set(&quot;X-Cache&quot;, &quot;MISS&quot;);&#10;    response.headers.set(&quot;Cache-Control&quot;, &quot;public, max-age=300&quot;); // 5 minutes&#10;    response.headers.set(&quot;X-Generated-At&quot;, new Date().toISOString());&#10;&#10;    return response;&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      {&#10;        error: &quot;Failed to fetch products&quot;,&#10;        message: error.message,&#10;        products: [],&#10;        pagination: {&#10;          page: 1,&#10;          limit: 12,&#10;          total: 0,&#10;          totalPages: 0,&#10;          hasNext: false,&#10;          hasPrev: false,&#10;        },&#10;        timestamp: new Date().toISOString(),&#10;      },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const body = await request.json();&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Initialize indexes for the first POST operation&#10;    await initializeProductIndexes(db);&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne({&#10;      ...body,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      status: &quot;active&quot;,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      reviewCount: 0,&#10;      purchaseCount: 0,&#10;    });&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot;, message: error.message },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/details/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/details/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#10;import EnhancedReviewModal from &quot;@/components/EnhancedReviewModal&quot;;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#10;import useReviews from &quot;@/hooks/useReviews&quot;;&#10;import { useProductReviewUpdates } from &quot;@/hooks/useReviewUpdates&quot;;&#10;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#10;&#10;// Move constants outside component to prevent recreations&#10;const TAB_OPTIONS = [&#10;  &quot;description&quot;,&#10;  &quot;nutrition&quot;,&#10;  &quot;storage&quot;,&#10;  &quot;reviews&quot;,&#10;  &quot;farmer&quot;,&#10;];&#10;const DEFAULT_REVIEW_FORM = { rating: 5, comment: &quot;&quot; };&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#10;  const { data: session, status: sessionStatus } = useSession();&#10;&#10;  // Add session loading debug&#10;  console.log(&quot; SESSION LOADING STATUS:&quot;, {&#10;    sessionStatus: sessionStatus,&#10;    sessionData: session,&#10;    hasSession: !!session,&#10;    hasUser: !!session?.user,&#10;    hasUserId: !!session?.user?.id,&#10;    userId: session?.user?.id,&#10;  });&#10;&#10;  const { addToCart } = useCart();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;&#10;  // Custom hooks&#10;  const {&#10;    product,&#10;    farmer,&#10;    farmerProducts,&#10;    responseType,&#10;    relatedProducts,&#10;    loading,&#10;    fetchProductDetails,&#10;  } = useProductData(productId);&#10;&#10;  const { reviews, hasMoreReviews, fetchReviews, reviewsPage } = useReviews(&#10;    productId,&#10;    responseType,&#10;    session?.user?.id,&#10;  );&#10;  const isOwner = useOwnership(product, session, viewMode);&#10;&#10;  // Core UI states&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;&#10;  // Loading states&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;  const [isUpdatingReview, setIsUpdatingReview] = useState(false);&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#10;&#10;  // Form states&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState(DEFAULT_REVIEW_FORM);&#10;  const [editingReview, setEditingReview] = useState(null);&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;&#10;  // Data states&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;&#10;  // Memoized favorite status&#10;  const isFavorite = useMemo(() =&gt; {&#10;    return productId ? isProductFavorited(productId) : false;&#10;  }, [productId, isProductFavorited]);&#10;&#10;  // Memoized image data&#10;  const imageData = useMemo(() =&gt; {&#10;    if (!product) return { allImages: [], hasMultipleImages: false };&#10;&#10;    const allImages = [];&#10;    if (product.image) allImages.push(product.image);&#10;    if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;      allImages.push(...product.images);&#10;    }&#10;&#10;    return {&#10;      allImages: [...new Set(allImages)], // Remove duplicates&#10;      hasMultipleImages: allImages.length &gt; 1,&#10;    };&#10;  }, [product]);&#10;&#10;  // Memoized rating distribution&#10;  const ratingDistribution = useMemo(() =&gt; {&#10;    if (!reviews || reviews.length === 0) {&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    }&#10;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    reviews.forEach((review) =&gt; {&#10;      const rating = Math.floor(review.rating);&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;        distribution[rating]++;&#10;      }&#10;    });&#10;&#10;    return distribution;&#10;  }, [reviews]);&#10;&#10;  // Optimized API calls with caching&#10;  const checkUserPurchase = useCallback(async () =&gt; {&#10;    console.log(&quot; FUNCTION ENTRY: checkUserPurchase() CALLED! &quot;);&#10;&#10;    // Get userId from either property&#10;    const userId = session?.user?.id || session?.user?.userId;&#10;&#10;    console.log(&quot; checkUserPurchase function called!&quot;, {&#10;      hasSession: !!session?.user,&#10;      hasProductId: !!productId,&#10;      sessionUserId: session?.user?.id,&#10;      sessionUserIdProp: session?.user?.userId,&#10;      actualUserId: userId,&#10;      productId: productId,&#10;      fullSession: session,&#10;    });&#10;&#10;    if (!userId || !productId) {&#10;      console.log(&quot;❌ Early return - missing session or productId&quot;, {&#10;        userId: userId,&#10;        productId: productId,&#10;      });&#10;      return;&#10;    }&#10;&#10;    console.log(&quot; Checking review eligibility for:&quot;, {&#10;      userId: userId,&#10;      productId: productId,&#10;      userEmail: session.user.email,&#10;    });&#10;&#10;    setCheckingPurchase(true);&#10;    try {&#10;      // Use the new can-review endpoint to check if user can review this product&#10;      const apiUrl = `/api/products/${productId}/can-review?userId=${userId}`;&#10;      console.log(&quot; Making API call to:&quot;, apiUrl);&#10;&#10;      const response = await fetch(apiUrl, {&#10;        headers: {&#10;          &quot;Cache-Control&quot;: &quot;no-cache&quot;, // Disable cache for debugging&#10;        },&#10;      });&#10;&#10;      console.log(&quot; Can-review API response:&quot;, {&#10;        status: response.status,&#10;        ok: response.ok,&#10;        statusText: response.statusText,&#10;        url: apiUrl,&#10;      });&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        console.log(&quot;✅ Can-review API data:&quot;, data);&#10;        console.log(&quot; Setting hasPurchasedProduct to:&quot;, data.canReview);&#10;&#10;        // Only allow reviews if user has delivered orders for this product and hasn't reviewed yet&#10;        setHasPurchasedProduct(data.canReview);&#10;&#10;        console.log(&quot; Review eligibility summary:&quot;, {&#10;          canReview: data.canReview,&#10;          reason: data.reason,&#10;          hasPurchased: data.hasPurchased,&#10;          hasReviewed: data.hasReviewed,&#10;          existingReview: data.existingReview,&#10;          orderDetails: data.orderDetails,&#10;        });&#10;      } else {&#10;        const errorData = await response.text();&#10;        console.log(&quot;❌ Can-review API failed:&quot;, {&#10;          status: response.status,&#10;          statusText: response.statusText,&#10;          errorData: errorData,&#10;        });&#10;        setHasPurchasedProduct(false);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;❌ Can-review API error:&quot;, error);&#10;      setHasPurchasedProduct(false);&#10;    } finally {&#10;      setCheckingPurchase(false);&#10;      console.log(&#10;        &quot; checkUserPurchase completed, hasPurchasedProduct state:&quot;,&#10;        hasPurchasedProduct,&#10;      );&#10;    }&#10;  }, [&#10;    session?.user?.id,&#10;    session?.user?.userId,&#10;    productId,&#10;    hasPurchasedProduct,&#10;  ]);&#10;&#10;  const fetchRecentOrders = useCallback(async () =&gt; {&#10;    if (!productId) return;&#10;&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;        {&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;public, max-age=300&quot;,&#10;          },&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  }, [productId]);&#10;&#10;  // Optimized event handlers&#10;  const handleAddToCart = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!product) return;&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const item = {&#10;        productId: productId,&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        quantity: quantity,&#10;        stock: product.stock,&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;      };&#10;&#10;      await addToCart(item, quantity);&#10;      // Consider using a toast notification instead of alert&#10;      alert(&quot;Product added to cart successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      const errorMessage =&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#10;        error.message.includes(&quot;available in stock&quot;)&#10;          ? error.message&#10;          : &quot;Failed to add product to cart. Please try again.&quot;;&#10;      alert(errorMessage);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    product,&#10;    productId,&#10;    quantity,&#10;    imageData.allImages,&#10;    addToCart,&#10;    router,&#10;  ]);&#10;&#10;  const handleBuyNow = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!product) return;&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const productForCart = {&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmer: {&#10;          id: product.farmerId,&#10;          _id: product.farmerId,&#10;          email: product.farmer?.email,&#10;          name:&#10;            product.farmer?.name ||&#10;            product.farmer?.farmName ||&#10;            &quot;Unknown Farmer&quot;,&#10;        },&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;        stock: product.stock || 0,&#10;      };&#10;&#10;      await addToCart(productForCart, quantity);&#10;      router.push(&quot;/payment&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    product,&#10;    productId,&#10;    quantity,&#10;    imageData.allImages,&#10;    addToCart,&#10;    router,&#10;  ]);&#10;&#10;  const handleFavoriteToggle = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!productId) return;&#10;&#10;    try {&#10;      const success = isFavorite&#10;        ? await removeFromFavorites(productId)&#10;        : await addToFavorites(productId);&#10;&#10;      if (success) {&#10;        const message = isFavorite&#10;          ? &quot;Product removed from favorites!&quot;&#10;          : &quot;Product added to favorites!&quot;;&#10;        alert(message);&#10;      } else {&#10;        alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    productId,&#10;    isFavorite,&#10;    addToFavorites,&#10;    removeFromFavorites,&#10;    router,&#10;  ]);&#10;&#10;  const handleSubmitReview = useCallback(&#10;    async (e) =&gt; {&#10;      e.preventDefault();&#10;      if (!session) {&#10;        alert(&quot;Please login to submit a review&quot;);&#10;        return;&#10;      }&#10;&#10;      setIsSubmittingReview(true);&#10;      try {&#10;        const reviewData = {&#10;          ...reviewForm,&#10;          userId:&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.userId ||&#10;            session.user.email,&#10;        };&#10;&#10;        const response = await fetch(`/api/products/${productId}/reviews`, {&#10;          method: &quot;POST&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify(reviewData),&#10;        });&#10;&#10;        if (response.ok) {&#10;          setShowReviewForm(false);&#10;          setReviewForm(DEFAULT_REVIEW_FORM);&#10;          fetchReviews();&#10;          fetchProductDetails();&#10;          alert(&quot;Review submitted successfully!&quot;);&#10;        } else {&#10;          const error = await response.json();&#10;          alert(error.error || &quot;Failed to submit review&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error submitting review:&quot;, error);&#10;        alert(&quot;Failed to submit review&quot;);&#10;      } finally {&#10;        setIsSubmittingReview(false);&#10;      }&#10;    },&#10;    [session, reviewForm, productId, fetchReviews, fetchProductDetails],&#10;  );&#10;&#10;  // Enhanced review submission handler for the new modal&#10;  const handleEnhancedReviewSubmit = useCallback(&#10;    async (reviewData) =&gt; {&#10;      setIsSubmittingReview(true);&#10;      try {&#10;        let response;&#10;&#10;        if (editingReview) {&#10;          // Update existing review&#10;          response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;            method: &quot;PUT&quot;,&#10;            headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;            body: JSON.stringify({&#10;              rating: reviewData.rating,&#10;              comment: reviewData.comment,&#10;              title: reviewData.title,&#10;              pros: reviewData.pros,&#10;              cons: reviewData.cons,&#10;              wouldRecommend: reviewData.wouldRecommend,&#10;              isAnonymous: reviewData.isAnonymous,&#10;              tags: reviewData.tags,&#10;              userId: reviewData.userId,&#10;            }),&#10;          });&#10;        } else {&#10;          // Create new review&#10;          response = await fetch(`/api/products/${productId}/reviews`, {&#10;            method: &quot;POST&quot;,&#10;            headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;            body: JSON.stringify(reviewData),&#10;          });&#10;        }&#10;&#10;        if (response.ok) {&#10;          setShowReviewForm(false);&#10;          setEditingReview(null);&#10;          setReviewForm(DEFAULT_REVIEW_FORM);&#10;          fetchReviews();&#10;          fetchProductDetails();&#10;          alert(&#10;            editingReview&#10;              ? &quot;Review updated successfully!&quot;&#10;              : &quot;Review submitted successfully!&quot;,&#10;          );&#10;        } else {&#10;          const error = await response.json();&#10;          alert(&#10;            error.error ||&#10;              `Failed to ${editingReview ? &quot;update&quot; : &quot;submit&quot;} review`,&#10;          );&#10;        }&#10;      } catch (error) {&#10;        console.error(&#10;          `Error ${editingReview ? &quot;updating&quot; : &quot;submitting&quot;} review:`,&#10;          error,&#10;        );&#10;        alert(`Failed to ${editingReview ? &quot;update&quot; : &quot;submit&quot;} review`);&#10;      } finally {&#10;        setIsSubmittingReview(false);&#10;      }&#10;    },&#10;    [productId, fetchReviews, fetchProductDetails, editingReview],&#10;  );&#10;&#10;  const handleUpdateReview = useCallback(async () =&gt; {&#10;    if (!editingReview) return;&#10;&#10;    setIsUpdatingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          rating: reviewForm.rating,&#10;          comment: reviewForm.comment,&#10;          userId:&#10;            session.user.userId ||&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.email,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setEditingReview(null);&#10;        setReviewForm(DEFAULT_REVIEW_FORM);&#10;        setShowReviewForm(false);&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review updated successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating review:&quot;, error);&#10;      alert(&quot;Failed to update review&quot;);&#10;    } finally {&#10;      setIsUpdatingReview(false);&#10;    }&#10;  }, [editingReview, reviewForm, session, fetchReviews, fetchProductDetails]);&#10;&#10;  const handleDeleteReview = useCallback(&#10;    async (reviewId) =&gt; {&#10;      if (!confirm(&quot;Are you sure you want to delete this review?&quot;)) {&#10;        return;&#10;      }&#10;&#10;      setIsDeletingReview(true);&#10;      try {&#10;        const userId =&#10;          session.user.userId ||&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.email;&#10;        const response = await fetch(&#10;          `/api/reviews/${reviewId}?userId=${encodeURIComponent(userId)}`,&#10;          { method: &quot;DELETE&quot; },&#10;        );&#10;&#10;        if (response.ok) {&#10;          fetchReviews();&#10;          fetchProductDetails();&#10;          alert(&quot;Review deleted successfully!&quot;);&#10;        } else {&#10;          const error = await response.json();&#10;          alert(error.error || &quot;Failed to delete review&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error deleting review:&quot;, error);&#10;        alert(&quot;Failed to delete review&quot;);&#10;      } finally {&#10;        setIsDeletingReview(false);&#10;      }&#10;    },&#10;    [session, fetchReviews, fetchProductDetails],&#10;  );&#10;&#10;  const loadMoreReviews = useCallback(() =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  }, [fetchReviews, reviewsPage]);&#10;&#10;  // Farmer-specific handlers&#10;  const handleUpdateProduct = useCallback(async () =&gt; {&#10;    if (!isOwner || (!stockUpdate &amp;&amp; !priceUpdate)) {&#10;      if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;        alert(&quot;Please enter a value to update&quot;);&#10;      }&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, stockUpdate, priceUpdate, productId, fetchProductDetails]);&#10;&#10;  // Handle adding images to product&#10;  const handleAddImages = useCallback(() =&gt; {&#10;    // Create a file input element&#10;    const input = document.createElement(&quot;input&quot;);&#10;    input.type = &quot;file&quot;;&#10;    input.accept = &quot;image/*&quot;;&#10;    input.multiple = true;&#10;&#10;    input.onchange = async (event) =&gt; {&#10;      const files = event.target.files;&#10;      if (!files || files.length === 0) return;&#10;&#10;      // Validate file types and sizes&#10;      const validFiles = Array.from(files).filter((file) =&gt; {&#10;        const isValidType = file.type.startsWith(&quot;image/&quot;);&#10;        const isValidSize = file.size &lt;= 5 * 1024 * 1024; // 5MB limit&#10;&#10;        if (!isValidType) {&#10;          alert(`${file.name} is not a valid image file.`);&#10;          return false;&#10;        }&#10;        if (!isValidSize) {&#10;          alert(`${file.name} is too large. Maximum size is 5MB.`);&#10;          return false;&#10;        }&#10;        return true;&#10;      });&#10;&#10;      if (validFiles.length === 0) return;&#10;&#10;      try {&#10;        // Create FormData for file upload&#10;        const formData = new FormData();&#10;        validFiles.forEach((file) =&gt; {&#10;          formData.append(&quot;images&quot;, file);&#10;        });&#10;        formData.append(&quot;productId&quot;, productId);&#10;&#10;        // Show loading state&#10;        alert(&quot;Uploading images...&quot;);&#10;&#10;        // Upload images to your API endpoint&#10;        const response = await fetch(`/api/products/${productId}/images`, {&#10;          method: &quot;POST&quot;,&#10;          body: formData,&#10;        });&#10;&#10;        if (response.ok) {&#10;          const result = await response.json();&#10;          alert(`Successfully uploaded ${validFiles.length} image(s)!`);&#10;&#10;          // Refresh product details to show new images&#10;          fetchProductDetails();&#10;        } else {&#10;          const error = await response.json();&#10;          throw new Error(error.error || &quot;Failed to upload images&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error uploading images:&quot;, error);&#10;        alert(`Failed to upload images: ${error.message}`);&#10;      }&#10;    };&#10;&#10;    // Trigger file selection&#10;    input.click();&#10;  }, [productId, fetchProductDetails]);&#10;&#10;  // Handle toggling product status (activate/deactivate)&#10;  const handleToggleStatus = useCallback(async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const currentStatus = product?.status || &quot;active&quot;;&#10;    const newStatus = currentStatus === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        throw new Error(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product: ${error.message}`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, product?.status, productId, fetchProductDetails]);&#10;&#10;  // Handle deleting product&#10;  const handleDeleteProduct = useCallback(async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const confirmMessage =&#10;      &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;      &quot;This action cannot be undone and will remove:\n&quot; +&#10;      &quot;• The product listing\n&quot; +&#10;      &quot;• All associated data\n&quot; +&#10;      &quot;• Product images\n&quot; +&#10;      &quot;• Product from any pending orders&quot;;&#10;&#10;    if (!confirm(confirmMessage)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        // Redirect to manage page&#10;        router.push(&quot;/manage&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\n&quot; +&#10;              &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;              &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;              &quot;You can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          throw new Error(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(`Failed to delete product: ${error.message}`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, productId, fetchProductDetails, router]);&#10;&#10;  // Listen for review updates and refresh product data&#10;  useProductReviewUpdates(&#10;    productId,&#10;    useCallback(() =&gt; {&#10;      console.log(&quot;Details page: Review update detected via event system&quot;);&#10;      // Refresh both reviews and product details to get updated stats&#10;      fetchReviews();&#10;      fetchProductDetails();&#10;    }, [fetchReviews, fetchProductDetails]),&#10;  );&#10;&#10;  // Effects with proper dependencies&#10;  useEffect(() =&gt; {&#10;    console.log(&quot; PRODUCT DETAILS useEffect triggered!&quot;, {&#10;      productId: productId,&#10;      hasProductId: !!productId,&#10;    });&#10;    if (productId) {&#10;      fetchProductDetails();&#10;    }&#10;  }, [productId, fetchProductDetails]);&#10;&#10;  useEffect(() =&gt; {&#10;    let interval;&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      interval = setInterval(fetchProductDetails, 30000);&#10;    }&#10;    return () =&gt; {&#10;      if (interval) clearInterval(interval);&#10;    };&#10;  }, [productId, isOwner, viewMode, fetchProductDetails]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode, fetchRecentOrders]);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot; SESSION CHECK useEffect triggered!&quot;, {&#10;      hasSession: !!session,&#10;      hasUserId: !!session?.user?.id,&#10;      hasUserIdProp: !!session?.user?.userId, // Check both properties&#10;      sessionUserId: session?.user?.id,&#10;      sessionUserIdProp: session?.user?.userId,&#10;      productId: productId,&#10;      hasProductId: !!productId,&#10;      sessionData: session,&#10;    });&#10;&#10;    // Check both session.user.id and session.user.userId&#10;    const userId = session?.user?.id || session?.user?.userId;&#10;&#10;    if (userId &amp;&amp; productId) {&#10;      console.log(&quot;✅ Calling checkUserPurchase with userId:&quot;, userId);&#10;      checkUserPurchase();&#10;    } else {&#10;      console.log(&quot;❌ NOT calling checkUserPurchase because:&quot;, {&#10;        noSession: !userId,&#10;        noProductId: !productId,&#10;        availableUserId: userId,&#10;      });&#10;    }&#10;  }, [session?.user?.id, session?.user?.userId, productId, checkUserPurchase]);&#10;&#10;  // Check if user has purchased this product&#10;  useEffect(() =&gt; {&#10;    if (session?.user?.id &amp;&amp; productId) {&#10;      checkUserPurchase();&#10;    }&#10;  }, [session?.user?.id, productId]);&#10;&#10;  // Render components based on state&#10;  if (loading) {&#10;    return &lt;Loading /&gt;;&#10;  }&#10;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#10;    return (&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#10;    );&#10;  }&#10;&#10;  if (!product &amp;&amp; !farmer) {&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#10;  }&#10;&#10;  // Main product details render&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Farmer Dashboard View */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      const allImages = imageData.allImages;&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage]}&#10;                              alt={product.name}&#10;                              width={400}&#10;                              height={225}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-primary-500&quot;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} ${index + 1}`}&#10;                                    width={80}&#10;                                    height={80}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                  /&gt;&#10;                                &lt;/button&gt;&#10;                              ))}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            No images uploaded&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Price&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            ${product.price?.toFixed(2)} per{&quot; &quot;}&#10;                            {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Stock&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Description&#10;                        &lt;/span&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                          {product.description || &quot;No description provided.&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Features&#10;                          &lt;/span&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder=&quot;New stock amount&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !stockUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            step=&quot;0.01&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder=&quot;New price&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !priceUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          $&#10;                          {(&#10;                            product.performanceMetrics?.totalRevenue || 0&#10;                          ).toFixed(2)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {(product.averageRating || 0).toFixed(1)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          &lt;StarRating&#10;                            rating={product.averageRating || 0}&#10;                            size=&quot;sm&quot;&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.reviewCount || product.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            $&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              2,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot;Your product is performing well!&quot;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-orange-600 hover:bg-orange-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {product.status === &quot;active&quot;&#10;                          ? &quot;Deactivate&quot;&#10;                          : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        Delete Product&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      const allImages = imageData.allImages;&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    const allImages = imageData.allImages;&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farmer&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    {(() =&gt; {&#10;                      // Calculate actual average rating and count from reviews if available&#10;                      const actualReviewCount = reviews?.length || 0;&#10;                      let displayRating = product.averageRating || 0;&#10;&#10;                      // If we have reviews but no product rating, calculate from reviews&#10;                      if (&#10;                        actualReviewCount &gt; 0 &amp;&amp;&#10;                        (!product.averageRating || product.averageRating === 0)&#10;                      ) {&#10;                        const totalRating = reviews.reduce(&#10;                          (sum, review) =&gt; sum + (review.rating || 0),&#10;                          0,&#10;                        );&#10;                        displayRating = totalRating / actualReviewCount;&#10;                      }&#10;&#10;                      return (&#10;                        &lt;&gt;&#10;                          &lt;StarRating rating={displayRating} showValue={true} /&gt;&#10;                          &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ({actualReviewCount} reviews)&#10;                          &lt;/span&gt;&#10;                        &lt;/&gt;&#10;                      );&#10;                    })()}&#10;                    {/* Show review button only for users who have purchased and received the product */}&#10;                    {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                      &lt;button&#10;                        onClick={() =&gt; setShowReviewForm(true)}&#10;                        className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                        Write Review&#10;                      &lt;/button&gt;&#10;                    )}&#10;                    {session &amp;&amp; !hasPurchasedProduct &amp;&amp; !checkingPurchase &amp;&amp; (&#10;                      &lt;div className=&quot;text-center&quot;&gt;&#10;                        &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm italic mb-4&quot;&gt;&#10;                          You need to purchase and receive this product to write&#10;                          the first review&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                          Purchase required for reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    {checkingPurchase &amp;&amp; (&#10;                      &lt;div className=&quot;text-center&quot;&gt;&#10;                        &lt;div className=&quot;inline-flex items-center text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                          Checking purchase history...&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ${product.price?.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.farmer?.email ||&#10;                            &quot;Contact information not available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {TAB_OPTIONS.map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#10;                            Key Features&#10;                          &lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.nutritionalInformation}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.storageInstructions}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-blue-900 dark:text-blue-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#10;                              Temperature&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                              Store in a cool, dry place away from direct&#10;                              sunlight&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-green-900 dark:text-green-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#10;                              Humidity&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-green-700 dark:text-green-300&quot;&gt;&#10;                              Keep in low humidity environment to prevent&#10;                              spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews (&#10;                          {product.reviewCount || product.totalReviews || 0})&#10;                        &lt;/h2&gt;&#10;                        {/* Show review button only for users who have purchased and received the product */}&#10;                        {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Write Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {session &amp;&amp;&#10;                          !hasPurchasedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                              &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm italic mb-4&quot;&gt;&#10;                                You need to purchase and receive this product to&#10;                                write the first review&#10;                              &lt;/p&gt;&#10;                              &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                                Purchase required for reviews&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        {checkingPurchase &amp;&amp; (&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;inline-flex items-center text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                              Checking purchase history...&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          {/* Overall Rating Section */}&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                              {(() =&gt; {&#10;                                // Calculate actual average rating from reviews if available&#10;                                const actualReviewCount = reviews?.length || 0;&#10;                                let displayRating = product.averageRating || 0;&#10;&#10;                                // If we have reviews but no product rating, calculate from reviews&#10;                                if (&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#10;                                  (!product.averageRating ||&#10;                                    product.averageRating === 0)&#10;                                ) {&#10;                                  const totalRating = reviews.reduce(&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  displayRating =&#10;                                    totalRating / actualReviewCount;&#10;                                }&#10;&#10;                                return (&#10;                                  &lt;&gt;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#10;                                      {displayRating.toFixed(1)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;StarRating&#10;                                      rating={displayRating}&#10;                                      size=&quot;lg&quot;&#10;                                    /&gt;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#10;                                      Based on{&quot; &quot;}&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#10;                                        {actualReviewCount}&#10;                                      &lt;/span&gt;{&quot; &quot;}&#10;                                      {actualReviewCount === 1&#10;                                        ? &quot;review&quot;&#10;                                        : &quot;reviews&quot;}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/&gt;&#10;                                );&#10;                              })()}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Review Quality Indicator */}&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                                  {(reviews?.length || 0) &gt; 0&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#10;                                    : &quot;No reviews yet&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Rating Distribution */}&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                              Rating Breakdown&#10;                            &lt;/h4&gt;&#10;                            {(() =&gt; {&#10;                              // Use the existing memoized ratingDistribution instead of undefined function&#10;                              const totalReviews = reviews?.length || 0;&#10;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#10;                                const count = ratingDistribution[rating];&#10;                                const percentage =&#10;                                  totalReviews &gt; 0&#10;                                    ? (count / totalReviews) * 100&#10;                                    : 0;&#10;&#10;                                return (&#10;                                  &lt;div&#10;                                    key={rating}&#10;                                    className=&quot;flex items-center space-x-3&quot;&#10;                                  &gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#10;                                    &lt;/span&gt;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                                      &lt;div&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#10;                                        style={{ width: `${percentage}%` }}&#10;                                      &gt;&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#10;                                      {count}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#10;                                      {percentage.toFixed(0)}%&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                );&#10;                              });&#10;                            })()}&#10;&#10;                            {/* Total Reviews Summary */}&#10;                            &lt;div className=&quot;mt-4 pt-3 border-t border-gray-200 dark:border-gray-600&quot;&gt;&#10;                              &lt;div className=&quot;text-center text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {(reviews?.length || 0) === 0 &amp;&amp;&#10;                                    &quot;Be the first to review this product!&quot;}&#10;                                  {(reviews?.length || 0) === 1 &amp;&amp;&#10;                                    &quot;1 customer has reviewed this product&quot;}&#10;                                  {(reviews?.length || 0) &gt; 1 &amp;&amp;&#10;                                    `${reviews.length} customers have reviewed this product`}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Review Modal */}&#10;                      &lt;EnhancedReviewModal&#10;                        isOpen={showReviewForm}&#10;                        onClose={() =&gt; {&#10;                          setShowReviewForm(false);&#10;                          setEditingReview(null);&#10;                          setReviewForm(DEFAULT_REVIEW_FORM);&#10;                        }}&#10;                        product={product}&#10;                        user={session?.user}&#10;                        existingReview={editingReview}&#10;                        onSubmit={handleEnhancedReviewSubmit}&#10;                        isSubmitting={isSubmittingReview}&#10;                      /&gt;&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#10;                          reviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={`${review._id}-${review.userId}-${index}`}&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#10;                                          .charAt(0)&#10;                                          .toUpperCase()}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#10;                                        Verified Buyer&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                          &lt;span&#10;                                            key={star}&#10;                                            className={`text-lg transition-all duration-200 ${&#10;                                              star &lt;= review.rating&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&#10;                                            ★&#10;                                          &lt;/span&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                                        {review.rating}/5&#10;                                      &lt;/span&gt;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt || review.date,&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#10;                                          year: &quot;numeric&quot;,&#10;                                          month: &quot;short&quot;,&#10;                                          day: &quot;numeric&quot;,&#10;                                        })}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#10;                                  {/* Debug information */}&#10;                                  {console.log(&quot;DEBUG Review comparison:&quot;, {&#10;                                    sessionUserId: session?.user?.userId,&#10;                                    reviewUserId: review.userId,&#10;                                    areEqual:&#10;                                      session?.user?.userId === review.userId,&#10;                                    sessionUser: session?.user,&#10;                                  })}&#10;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#10;                                  {session?.user?.userId === review.userId ? (&#10;                                    &lt;&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt; {&#10;                                          setEditingReview(review);&#10;                                          setReviewForm({&#10;                                            rating: review.rating,&#10;                                            comment: review.comment,&#10;                                          });&#10;                                          setShowReviewForm(true);&#10;                                        }}&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Edit Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt;&#10;                                          handleDeleteReview(review._id)&#10;                                        }&#10;                                        disabled={isDeletingReview}&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Delete Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  ) : (&#10;                                    &lt;&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &quot;{review.comment}&quot;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                              {product.farmer?.farmName ||&#10;                                product.farmer?.name ||&#10;                                &quot;Farm Name&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              {product.farmer?.email ||&#10;                                &quot;Farmer contact not available&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.location &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            {product.farmer?.phone &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                              {product.farmer?.description ||&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                View All Products from this Farmer&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Related Products Section - Enhanced */}&#10;                  {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                      {/* Section Header */}&#10;                      &lt;div className=&quot;text-center mb-10&quot;&gt;&#10;                        &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Related Products&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#10;                          Discover similar high-quality products from our&#10;                          trusted farmers. Each item is carefully selected to&#10;                          meet our quality standards.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#10;                          &lt;span&gt;•&lt;/span&gt;&#10;                          &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;Fast delivery available&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Product Grid */}&#10;                      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#10;                        {relatedProducts.map((relatedProduct, index) =&gt; (&#10;                          &lt;div&#10;                            key={relatedProduct._id}&#10;                            className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#10;                            style={{ animationDelay: `${index * 100}ms` }}&#10;                          &gt;&#10;                            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#10;                              {/* Product Image */}&#10;                              &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#10;                                &lt;Image&#10;                                  src={&#10;                                    relatedProduct.image ||&#10;                                    relatedProduct.images?.[0] ||&#10;                                    &quot;/placeholder-image.jpg&quot;&#10;                                  }&#10;                                  alt={relatedProduct.name}&#10;                                  width={300}&#10;                                  height={300}&#10;                                  className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#10;                                /&gt;&#10;&#10;                                {/* Product Badges */}&#10;                                &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#10;                                  {relatedProduct.isOrganic &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Organic&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                  {relatedProduct.isFresh &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Fresh&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Quick Actions Overlay */}&#10;                                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#10;                                  &lt;Link&#10;                                    href={`/details?id=${relatedProduct._id}`}&#10;                                    className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#10;                                  &gt;&#10;                                    View Details&#10;                                  &lt;/Link&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Product Info */}&#10;                              &lt;div className=&quot;p-6&quot;&gt;&#10;                                &lt;div className=&quot;mb-3&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#10;                                    {relatedProduct.name}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#10;                                    by{&quot; &quot;}&#10;                                    {relatedProduct.farmer?.name ||&#10;                                      relatedProduct.farmer?.farmName ||&#10;                                      &quot;Unknown Farmer&quot;}&#10;                                  &lt;/p&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Rating */}&#10;                                &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#10;                                  &lt;StarRating&#10;                                    rating={relatedProduct.averageRating || 0}&#10;                                    size=&quot;sm&quot;&#10;                                  /&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    (&#10;                                    {relatedProduct.reviewCount ||&#10;                                      relatedProduct.totalReviews ||&#10;                                      0}&#10;                                    )&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Price and Stock */}&#10;                                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                                      ${(relatedProduct.price || 0).toFixed(2)}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      /{relatedProduct.unit || &quot;kg&quot;}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div&#10;                                      className={`text-xs font-medium ${&#10;                                        (relatedProduct.stock || 0) &gt; 0&#10;                                          ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                          : &quot;text-red-600 dark:text-red-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      {(relatedProduct.stock || 0) &gt; 0&#10;                                        ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#10;                                        : &quot;Out of stock&quot;}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Action Button */}&#10;                                &lt;Link&#10;                                  href={`/details?id=${relatedProduct._id}`}&#10;                                  className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                                  View Product&#10;                                &lt;/Link&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Browse More Section */}&#10;                      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Looking for more products?&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href=&quot;/products&quot;&#10;                            className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;                            Browse All Products&#10;                            &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#10;import EnhancedReviewModal from &quot;@/components/EnhancedReviewModal&quot;;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#10;import useReviews from &quot;@/hooks/useReviews&quot;;&#10;import { useProductReviewUpdates } from &quot;@/hooks/useReviewUpdates&quot;;&#10;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#10;&#10;// Move constants outside component to prevent recreations&#10;const TAB_OPTIONS = [&#10;  &quot;description&quot;,&#10;  &quot;nutrition&quot;,&#10;  &quot;storage&quot;,&#10;  &quot;reviews&quot;,&#10;  &quot;farmer&quot;,&#10;];&#10;const DEFAULT_REVIEW_FORM = { rating: 5, comment: &quot;&quot; };&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#10;  const { data: session, status: sessionStatus } = useSession();&#10;&#10;  // Add session loading debug&#10;  console.log(&quot; SESSION LOADING STATUS:&quot;, {&#10;    sessionStatus: sessionStatus,&#10;    sessionData: session,&#10;    hasSession: !!session,&#10;    hasUser: !!session?.user,&#10;    hasUserId: !!session?.user?.id,&#10;    userId: session?.user?.id,&#10;  });&#10;&#10;  const { addToCart } = useCart();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;&#10;  // Custom hooks&#10;  const {&#10;    product,&#10;    farmer,&#10;    farmerProducts,&#10;    responseType,&#10;    relatedProducts,&#10;    loading,&#10;    fetchProductDetails,&#10;  } = useProductData(productId);&#10;&#10;  const { reviews, hasMoreReviews, fetchReviews, reviewsPage } = useReviews(&#10;    productId,&#10;    responseType,&#10;    session?.user?.id,&#10;  );&#10;  const isOwner = useOwnership(product, session, viewMode);&#10;&#10;  // Core UI states&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;&#10;  // Loading states&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;  const [isUpdatingReview, setIsUpdatingReview] = useState(false);&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#10;&#10;  // Form states&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState(DEFAULT_REVIEW_FORM);&#10;  const [editingReview, setEditingReview] = useState(null);&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;&#10;  // Data states&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;&#10;  // Memoized favorite status&#10;  const isFavorite = useMemo(() =&gt; {&#10;    return productId ? isProductFavorited(productId) : false;&#10;  }, [productId, isProductFavorited]);&#10;&#10;  // Memoized image data&#10;  const imageData = useMemo(() =&gt; {&#10;    if (!product) return { allImages: [], hasMultipleImages: false };&#10;&#10;    const allImages = [];&#10;    if (product.image) allImages.push(product.image);&#10;    if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;      allImages.push(...product.images);&#10;    }&#10;&#10;    return {&#10;      allImages: [...new Set(allImages)], // Remove duplicates&#10;      hasMultipleImages: allImages.length &gt; 1,&#10;    };&#10;  }, [product]);&#10;&#10;  // Memoized rating distribution&#10;  const ratingDistribution = useMemo(() =&gt; {&#10;    if (!reviews || reviews.length === 0) {&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    }&#10;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    reviews.forEach((review) =&gt; {&#10;      const rating = Math.floor(review.rating);&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;        distribution[rating]++;&#10;      }&#10;    });&#10;&#10;    return distribution;&#10;  }, [reviews]);&#10;&#10;  // Optimized API calls with caching&#10;  const checkUserPurchase = useCallback(async () =&gt; {&#10;    console.log(&quot; FUNCTION ENTRY: checkUserPurchase() CALLED! &quot;);&#10;&#10;    // Get userId from either property&#10;    const userId = session?.user?.id || session?.user?.userId;&#10;&#10;    console.log(&quot; checkUserPurchase function called!&quot;, {&#10;      hasSession: !!session?.user,&#10;      hasProductId: !!productId,&#10;      sessionUserId: session?.user?.id,&#10;      sessionUserIdProp: session?.user?.userId,&#10;      actualUserId: userId,&#10;      productId: productId,&#10;      fullSession: session,&#10;    });&#10;&#10;    if (!userId || !productId) {&#10;      console.log(&quot;❌ Early return - missing session or productId&quot;, {&#10;        userId: userId,&#10;        productId: productId,&#10;      });&#10;      return;&#10;    }&#10;&#10;    console.log(&quot; Checking review eligibility for:&quot;, {&#10;      userId: userId,&#10;      productId: productId,&#10;      userEmail: session.user.email,&#10;    });&#10;&#10;    setCheckingPurchase(true);&#10;    try {&#10;      // Use the new can-review endpoint to check if user can review this product&#10;      const apiUrl = `/api/products/${productId}/can-review?userId=${userId}`;&#10;      console.log(&quot; Making API call to:&quot;, apiUrl);&#10;&#10;      const response = await fetch(apiUrl, {&#10;        headers: {&#10;          &quot;Cache-Control&quot;: &quot;no-cache&quot;, // Disable cache for debugging&#10;        },&#10;      });&#10;&#10;      console.log(&quot; Can-review API response:&quot;, {&#10;        status: response.status,&#10;        ok: response.ok,&#10;        statusText: response.statusText,&#10;        url: apiUrl,&#10;      });&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        console.log(&quot;✅ Can-review API data:&quot;, data);&#10;        console.log(&quot; Setting hasPurchasedProduct to:&quot;, data.canReview);&#10;&#10;        // Only allow reviews if user has delivered orders for this product and hasn't reviewed yet&#10;        setHasPurchasedProduct(data.canReview);&#10;&#10;        console.log(&quot; Review eligibility summary:&quot;, {&#10;          canReview: data.canReview,&#10;          reason: data.reason,&#10;          hasPurchased: data.hasPurchased,&#10;          hasReviewed: data.hasReviewed,&#10;          existingReview: data.existingReview,&#10;          orderDetails: data.orderDetails,&#10;        });&#10;      } else {&#10;        const errorData = await response.text();&#10;        console.log(&quot;❌ Can-review API failed:&quot;, {&#10;          status: response.status,&#10;          statusText: response.statusText,&#10;          errorData: errorData,&#10;        });&#10;        setHasPurchasedProduct(false);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;❌ Can-review API error:&quot;, error);&#10;      setHasPurchasedProduct(false);&#10;    } finally {&#10;      setCheckingPurchase(false);&#10;      console.log(&#10;        &quot; checkUserPurchase completed, hasPurchasedProduct state:&quot;,&#10;        hasPurchasedProduct,&#10;      );&#10;    }&#10;  }, [&#10;    session?.user?.id,&#10;    session?.user?.userId,&#10;    productId,&#10;    hasPurchasedProduct,&#10;  ]);&#10;&#10;  const fetchRecentOrders = useCallback(async () =&gt; {&#10;    if (!productId) return;&#10;&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;        {&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;public, max-age=300&quot;,&#10;          },&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  }, [productId]);&#10;&#10;  // Optimized event handlers&#10;  const handleAddToCart = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!product) return;&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const item = {&#10;        productId: productId,&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        quantity: quantity,&#10;        stock: product.stock,&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;      };&#10;&#10;      await addToCart(item, quantity);&#10;      // Consider using a toast notification instead of alert&#10;      alert(&quot;Product added to cart successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      const errorMessage =&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#10;        error.message.includes(&quot;available in stock&quot;)&#10;          ? error.message&#10;          : &quot;Failed to add product to cart. Please try again.&quot;;&#10;      alert(errorMessage);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    product,&#10;    productId,&#10;    quantity,&#10;    imageData.allImages,&#10;    addToCart,&#10;    router,&#10;  ]);&#10;&#10;  const handleBuyNow = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!product) return;&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const productForCart = {&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmer: {&#10;          id: product.farmerId,&#10;          _id: product.farmerId,&#10;          email: product.farmer?.email,&#10;          name:&#10;            product.farmer?.name ||&#10;            product.farmer?.farmName ||&#10;            &quot;Unknown Farmer&quot;,&#10;        },&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;        stock: product.stock || 0,&#10;      };&#10;&#10;      await addToCart(productForCart, quantity);&#10;      router.push(&quot;/payment&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    product,&#10;    productId,&#10;    quantity,&#10;    imageData.allImages,&#10;    addToCart,&#10;    router,&#10;  ]);&#10;&#10;  const handleFavoriteToggle = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!productId) return;&#10;&#10;    try {&#10;      const success = isFavorite&#10;        ? await removeFromFavorites(productId)&#10;        : await addToFavorites(productId);&#10;&#10;      if (success) {&#10;        const message = isFavorite&#10;          ? &quot;Product removed from favorites!&quot;&#10;          : &quot;Product added to favorites!&quot;;&#10;        alert(message);&#10;      } else {&#10;        alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    productId,&#10;    isFavorite,&#10;    addToFavorites,&#10;    removeFromFavorites,&#10;    router,&#10;  ]);&#10;&#10;  const handleSubmitReview = useCallback(&#10;    async (e) =&gt; {&#10;      e.preventDefault();&#10;      if (!session) {&#10;        alert(&quot;Please login to submit a review&quot;);&#10;        return;&#10;      }&#10;&#10;      setIsSubmittingReview(true);&#10;      try {&#10;        const reviewData = {&#10;          ...reviewForm,&#10;          userId:&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.userId ||&#10;            session.user.email,&#10;        };&#10;&#10;        const response = await fetch(`/api/products/${productId}/reviews`, {&#10;          method: &quot;POST&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify(reviewData),&#10;        });&#10;&#10;        if (response.ok) {&#10;          setShowReviewForm(false);&#10;          setReviewForm(DEFAULT_REVIEW_FORM);&#10;          fetchReviews();&#10;          fetchProductDetails();&#10;          alert(&quot;Review submitted successfully!&quot;);&#10;        } else {&#10;          const error = await response.json();&#10;          alert(error.error || &quot;Failed to submit review&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error submitting review:&quot;, error);&#10;        alert(&quot;Failed to submit review&quot;);&#10;      } finally {&#10;        setIsSubmittingReview(false);&#10;      }&#10;    },&#10;    [session, reviewForm, productId, fetchReviews, fetchProductDetails],&#10;  );&#10;&#10;  // Enhanced review submission handler for the new modal&#10;  const handleEnhancedReviewSubmit = useCallback(&#10;    async (reviewData) =&gt; {&#10;      setIsSubmittingReview(true);&#10;      try {&#10;        let response;&#10;&#10;        if (editingReview) {&#10;          // Update existing review&#10;          response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;            method: &quot;PUT&quot;,&#10;            headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;            body: JSON.stringify({&#10;              rating: reviewData.rating,&#10;              comment: reviewData.comment,&#10;              title: reviewData.title,&#10;              pros: reviewData.pros,&#10;              cons: reviewData.cons,&#10;              wouldRecommend: reviewData.wouldRecommend,&#10;              isAnonymous: reviewData.isAnonymous,&#10;              tags: reviewData.tags,&#10;              userId: reviewData.userId,&#10;            }),&#10;          });&#10;        } else {&#10;          // Create new review&#10;          response = await fetch(`/api/products/${productId}/reviews`, {&#10;            method: &quot;POST&quot;,&#10;            headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;            body: JSON.stringify(reviewData),&#10;          });&#10;        }&#10;&#10;        if (response.ok) {&#10;          setShowReviewForm(false);&#10;          setEditingReview(null);&#10;          setReviewForm(DEFAULT_REVIEW_FORM);&#10;          fetchReviews();&#10;          fetchProductDetails();&#10;          alert(&#10;            editingReview&#10;              ? &quot;Review updated successfully!&quot;&#10;              : &quot;Review submitted successfully!&quot;,&#10;          );&#10;        } else {&#10;          const error = await response.json();&#10;          alert(&#10;            error.error ||&#10;              `Failed to ${editingReview ? &quot;update&quot; : &quot;submit&quot;} review`,&#10;          );&#10;        }&#10;      } catch (error) {&#10;        console.error(&#10;          `Error ${editingReview ? &quot;updating&quot; : &quot;submitting&quot;} review:`,&#10;          error,&#10;        );&#10;        alert(`Failed to ${editingReview ? &quot;update&quot; : &quot;submit&quot;} review`);&#10;      } finally {&#10;        setIsSubmittingReview(false);&#10;      }&#10;    },&#10;    [productId, fetchReviews, fetchProductDetails, editingReview],&#10;  );&#10;&#10;  const handleUpdateReview = useCallback(async () =&gt; {&#10;    if (!editingReview) return;&#10;&#10;    setIsUpdatingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          rating: reviewForm.rating,&#10;          comment: reviewForm.comment,&#10;          userId:&#10;            session.user.userId ||&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.email,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setEditingReview(null);&#10;        setReviewForm(DEFAULT_REVIEW_FORM);&#10;        setShowReviewForm(false);&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review updated successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating review:&quot;, error);&#10;      alert(&quot;Failed to update review&quot;);&#10;    } finally {&#10;      setIsUpdatingReview(false);&#10;    }&#10;  }, [editingReview, reviewForm, session, fetchReviews, fetchProductDetails]);&#10;&#10;  const handleDeleteReview = useCallback(&#10;    async (reviewId) =&gt; {&#10;      if (!confirm(&quot;Are you sure you want to delete this review?&quot;)) {&#10;        return;&#10;      }&#10;&#10;      setIsDeletingReview(true);&#10;      try {&#10;        const userId =&#10;          session.user.userId ||&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.email;&#10;        const response = await fetch(&#10;          `/api/reviews/${reviewId}?userId=${encodeURIComponent(userId)}`,&#10;          { method: &quot;DELETE&quot; },&#10;        );&#10;&#10;        if (response.ok) {&#10;          fetchReviews();&#10;          fetchProductDetails();&#10;          alert(&quot;Review deleted successfully!&quot;);&#10;        } else {&#10;          const error = await response.json();&#10;          alert(error.error || &quot;Failed to delete review&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error deleting review:&quot;, error);&#10;        alert(&quot;Failed to delete review&quot;);&#10;      } finally {&#10;        setIsDeletingReview(false);&#10;      }&#10;    },&#10;    [session, fetchReviews, fetchProductDetails],&#10;  );&#10;&#10;  const loadMoreReviews = useCallback(() =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  }, [fetchReviews, reviewsPage]);&#10;&#10;  // Farmer-specific handlers&#10;  const handleUpdateProduct = useCallback(async () =&gt; {&#10;    if (!isOwner || (!stockUpdate &amp;&amp; !priceUpdate)) {&#10;      if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;        alert(&quot;Please enter a value to update&quot;);&#10;      }&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, stockUpdate, priceUpdate, productId, fetchProductDetails]);&#10;&#10;  // Handle adding images to product&#10;  const handleAddImages = useCallback(() =&gt; {&#10;    // Create a file input element&#10;    const input = document.createElement(&quot;input&quot;);&#10;    input.type = &quot;file&quot;;&#10;    input.accept = &quot;image/*&quot;;&#10;    input.multiple = true;&#10;&#10;    input.onchange = async (event) =&gt; {&#10;      const files = event.target.files;&#10;      if (!files || files.length === 0) return;&#10;&#10;      // Validate file types and sizes&#10;      const validFiles = Array.from(files).filter((file) =&gt; {&#10;        const isValidType = file.type.startsWith(&quot;image/&quot;);&#10;        const isValidSize = file.size &lt;= 5 * 1024 * 1024; // 5MB limit&#10;&#10;        if (!isValidType) {&#10;          alert(`${file.name} is not a valid image file.`);&#10;          return false;&#10;        }&#10;        if (!isValidSize) {&#10;          alert(`${file.name} is too large. Maximum size is 5MB.`);&#10;          return false;&#10;        }&#10;        return true;&#10;      });&#10;&#10;      if (validFiles.length === 0) return;&#10;&#10;      try {&#10;        // Create FormData for file upload&#10;        const formData = new FormData();&#10;        validFiles.forEach((file) =&gt; {&#10;          formData.append(&quot;images&quot;, file);&#10;        });&#10;        formData.append(&quot;productId&quot;, productId);&#10;&#10;        // Show loading state&#10;        alert(&quot;Uploading images...&quot;);&#10;&#10;        // Upload images to your API endpoint&#10;        const response = await fetch(`/api/products/${productId}/images`, {&#10;          method: &quot;POST&quot;,&#10;          body: formData,&#10;        });&#10;&#10;        if (response.ok) {&#10;          const result = await response.json();&#10;          alert(`Successfully uploaded ${validFiles.length} image(s)!`);&#10;&#10;          // Refresh product details to show new images&#10;          fetchProductDetails();&#10;        } else {&#10;          const error = await response.json();&#10;          throw new Error(error.error || &quot;Failed to upload images&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error uploading images:&quot;, error);&#10;        alert(`Failed to upload images: ${error.message}`);&#10;      }&#10;    };&#10;&#10;    // Trigger file selection&#10;    input.click();&#10;  }, [productId, fetchProductDetails]);&#10;&#10;  // Handle toggling product status (activate/deactivate)&#10;  const handleToggleStatus = useCallback(async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const currentStatus = product?.status || &quot;active&quot;;&#10;    const newStatus = currentStatus === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        throw new Error(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product: ${error.message}`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, product?.status, productId, fetchProductDetails]);&#10;&#10;  // Handle deleting product&#10;  const handleDeleteProduct = useCallback(async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const confirmMessage =&#10;      &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;      &quot;This action cannot be undone and will remove:\n&quot; +&#10;      &quot;• The product listing\n&quot; +&#10;      &quot;• All associated data\n&quot; +&#10;      &quot;• Product images\n&quot; +&#10;      &quot;• Product from any pending orders&quot;;&#10;&#10;    if (!confirm(confirmMessage)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        // Redirect to manage page&#10;        router.push(&quot;/manage&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\n&quot; +&#10;              &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;              &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;              &quot;You can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          throw new Error(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(`Failed to delete product: ${error.message}`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, productId, fetchProductDetails, router]);&#10;&#10;  // Listen for review updates and refresh product data&#10;  useProductReviewUpdates(&#10;    productId,&#10;    useCallback(() =&gt; {&#10;      console.log(&quot;Details page: Review update detected via event system&quot;);&#10;      // Refresh both reviews and product details to get updated stats&#10;      fetchReviews();&#10;      fetchProductDetails();&#10;    }, [fetchReviews, fetchProductDetails]),&#10;  );&#10;&#10;  // Effects with proper dependencies&#10;  useEffect(() =&gt; {&#10;    console.log(&quot; PRODUCT DETAILS useEffect triggered!&quot;, {&#10;      productId: productId,&#10;      hasProductId: !!productId,&#10;    });&#10;    if (productId) {&#10;      fetchProductDetails();&#10;    }&#10;  }, [productId, fetchProductDetails]);&#10;&#10;  useEffect(() =&gt; {&#10;    let interval;&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      interval = setInterval(fetchProductDetails, 30000);&#10;    }&#10;    return () =&gt; {&#10;      if (interval) clearInterval(interval);&#10;    };&#10;  }, [productId, isOwner, viewMode, fetchProductDetails]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode, fetchRecentOrders]);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot; SESSION CHECK useEffect triggered!&quot;, {&#10;      hasSession: !!session,&#10;      hasUserId: !!session?.user?.id,&#10;      hasUserIdProp: !!session?.user?.userId, // Check both properties&#10;      sessionUserId: session?.user?.id,&#10;      sessionUserIdProp: session?.user?.userId,&#10;      productId: productId,&#10;      hasProductId: !!productId,&#10;      sessionData: session,&#10;    });&#10;&#10;    // Check both session.user.id and session.user.userId&#10;    const userId = session?.user?.id || session?.user?.userId;&#10;&#10;    if (userId &amp;&amp; productId) {&#10;      console.log(&quot;✅ Calling checkUserPurchase with userId:&quot;, userId);&#10;      checkUserPurchase();&#10;    } else {&#10;      console.log(&quot;❌ NOT calling checkUserPurchase because:&quot;, {&#10;        noSession: !userId,&#10;        noProductId: !productId,&#10;        availableUserId: userId,&#10;      });&#10;    }&#10;  }, [session?.user?.id, session?.user?.userId, productId, checkUserPurchase]);&#10;&#10;  // Check if user has purchased this product&#10;  useEffect(() =&gt; {&#10;    if (session?.user?.id &amp;&amp; productId) {&#10;      checkUserPurchase();&#10;    }&#10;  }, [session?.user?.id, productId]);&#10;&#10;  // Render components based on state&#10;  if (loading) {&#10;    return &lt;Loading /&gt;;&#10;  }&#10;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#10;    return (&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#10;    );&#10;  }&#10;&#10;  if (!product &amp;&amp; !farmer) {&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#10;  }&#10;&#10;  // Main product details render&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Farmer Dashboard View */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      const allImages = imageData.allImages;&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage]}&#10;                              alt={product.name}&#10;                              width={400}&#10;                              height={225}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-primary-500&quot;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} ${index + 1}`}&#10;                                    width={80}&#10;                                    height={80}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                  /&gt;&#10;                                &lt;/button&gt;&#10;                              ))}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            No images uploaded&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Price&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            ${product.price?.toFixed(2)} per{&quot; &quot;}&#10;                            {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Stock&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Description&#10;                        &lt;/span&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                          {product.description || &quot;No description provided.&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Features&#10;                          &lt;/span&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder=&quot;New stock amount&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !stockUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            step=&quot;0.01&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder=&quot;New price&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !priceUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          $&#10;                          {(&#10;                            product.performanceMetrics?.totalRevenue || 0&#10;                          ).toFixed(2)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {(product.averageRating || 0).toFixed(1)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          &lt;StarRating&#10;                            rating={product.averageRating || 0}&#10;                            size=&quot;sm&quot;&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.reviewCount || product.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            $&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              2,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot;Your product is performing well!&quot;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-orange-600 hover:bg-orange-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {product.status === &quot;active&quot;&#10;                          ? &quot;Deactivate&quot;&#10;                          : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        Delete Product&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      const allImages = imageData.allImages;&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    const allImages = imageData.allImages;&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farmer&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    {(() =&gt; {&#10;                      // Calculate actual average rating and count from reviews if available&#10;                      const actualReviewCount = reviews?.length || 0;&#10;                      let displayRating = product.averageRating || 0;&#10;&#10;                      // If we have reviews but no product rating, calculate from reviews&#10;                      if (&#10;                        actualReviewCount &gt; 0 &amp;&amp;&#10;                        (!product.averageRating || product.averageRating === 0)&#10;                      ) {&#10;                        const totalRating = reviews.reduce(&#10;                          (sum, review) =&gt; sum + (review.rating || 0),&#10;                          0,&#10;                        );&#10;                        displayRating = totalRating / actualReviewCount;&#10;                      }&#10;&#10;                      return (&#10;                        &lt;&gt;&#10;                          &lt;StarRating rating={displayRating} showValue={true} /&gt;&#10;                          &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ({actualReviewCount} reviews)&#10;                          &lt;/span&gt;&#10;                        &lt;/&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ${product.price?.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.farmer?.email ||&#10;                            &quot;Contact information not available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {TAB_OPTIONS.map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#10;                            Key Features&#10;                          &lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.nutritionalInformation}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.storageInstructions}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-blue-900 dark:text-blue-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#10;                              Temperature&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                              Store in a cool, dry place away from direct&#10;                              sunlight&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-green-900 dark:text-green-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#10;                              Humidity&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-green-700 dark:text-green-300&quot;&gt;&#10;                              Keep in low humidity environment to prevent&#10;                              spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews (&#10;                          {product.reviewCount || product.totalReviews || 0})&#10;                        &lt;/h2&gt;&#10;                        {/* Show review button only for users who have purchased and received the product */}&#10;                        {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Write Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {session &amp;&amp;&#10;                          !hasPurchasedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                              &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm italic mb-4&quot;&gt;&#10;                                You need to purchase and receive this product to&#10;                                write the first review&#10;                              &lt;/p&gt;&#10;                              &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                                Purchase required for reviews&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        {checkingPurchase &amp;&amp; (&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;inline-flex items-center text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                              Checking purchase history...&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          {/* Overall Rating Section */}&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                              {(() =&gt; {&#10;                                // Calculate actual average rating from reviews if available&#10;                                const actualReviewCount = reviews?.length || 0;&#10;                                let displayRating = product.averageRating || 0;&#10;&#10;                                // If we have reviews but no product rating, calculate from reviews&#10;                                if (&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#10;                                  (!product.averageRating ||&#10;                                    product.averageRating === 0)&#10;                                ) {&#10;                                  const totalRating = reviews.reduce(&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  displayRating =&#10;                                    totalRating / actualReviewCount;&#10;                                }&#10;&#10;                                return (&#10;                                  &lt;&gt;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#10;                                      {displayRating.toFixed(1)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;StarRating&#10;                                      rating={displayRating}&#10;                                      size=&quot;lg&quot;&#10;                                    /&gt;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#10;                                      Based on{&quot; &quot;}&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#10;                                        {actualReviewCount}&#10;                                      &lt;/span&gt;{&quot; &quot;}&#10;                                      {actualReviewCount === 1&#10;                                        ? &quot;review&quot;&#10;                                        : &quot;reviews&quot;}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/&gt;&#10;                                );&#10;                              })()}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Review Quality Indicator */}&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                                  {(reviews?.length || 0) &gt; 0&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#10;                                    : &quot;No reviews yet&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Rating Distribution */}&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                              Rating Breakdown&#10;                            &lt;/h4&gt;&#10;                            {(() =&gt; {&#10;                              // Use the existing memoized ratingDistribution instead of undefined function&#10;                              const totalReviews = reviews?.length || 0;&#10;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#10;                                const count = ratingDistribution[rating];&#10;                                const percentage =&#10;                                  totalReviews &gt; 0&#10;                                    ? (count / totalReviews) * 100&#10;                                    : 0;&#10;&#10;                                return (&#10;                                  &lt;div&#10;                                    key={rating}&#10;                                    className=&quot;flex items-center space-x-3&quot;&#10;                                  &gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#10;                                    &lt;/span&gt;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                                      &lt;div&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#10;                                        style={{ width: `${percentage}%` }}&#10;                                      &gt;&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#10;                                      {count}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#10;                                      {percentage.toFixed(0)}%&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                );&#10;                              });&#10;                            })()}&#10;&#10;                            {/* Total Reviews Summary */}&#10;                            &lt;div className=&quot;mt-4 pt-3 border-t border-gray-200 dark:border-gray-600&quot;&gt;&#10;                              &lt;div className=&quot;text-center text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {(reviews?.length || 0) === 0 &amp;&amp;&#10;                                    &quot;Be the first to review this product!&quot;}&#10;                                  {(reviews?.length || 0) === 1 &amp;&amp;&#10;                                    &quot;1 customer has reviewed this product&quot;}&#10;                                  {(reviews?.length || 0) &gt; 1 &amp;&amp;&#10;                                    `${reviews.length} customers have reviewed this product`}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Review Modal */}&#10;                      &lt;EnhancedReviewModal&#10;                        isOpen={showReviewForm}&#10;                        onClose={() =&gt; {&#10;                          setShowReviewForm(false);&#10;                          setEditingReview(null);&#10;                          setReviewForm(DEFAULT_REVIEW_FORM);&#10;                        }}&#10;                        product={product}&#10;                        user={session?.user}&#10;                        existingReview={editingReview}&#10;                        onSubmit={handleEnhancedReviewSubmit}&#10;                        isSubmitting={isSubmittingReview}&#10;                      /&gt;&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#10;                          reviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={`${review._id}-${review.userId}-${index}`}&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#10;                                          .charAt(0)&#10;                                          .toUpperCase()}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#10;                                        Verified Buyer&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                          &lt;span&#10;                                            key={star}&#10;                                            className={`text-lg transition-all duration-200 ${&#10;                                              star &lt;= review.rating&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&#10;                                            ★&#10;                                          &lt;/span&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                                        {review.rating}/5&#10;                                      &lt;/span&gt;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt || review.date,&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#10;                                          year: &quot;numeric&quot;,&#10;                                          month: &quot;short&quot;,&#10;                                          day: &quot;numeric&quot;,&#10;                                        })}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#10;                                  {/* Debug information */}&#10;                                  {console.log(&quot;DEBUG Review comparison:&quot;, {&#10;                                    sessionUserId: session?.user?.userId,&#10;                                    reviewUserId: review.userId,&#10;                                    areEqual:&#10;                                      session?.user?.userId === review.userId,&#10;                                    sessionUser: session?.user,&#10;                                  })}&#10;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#10;                                  {session?.user?.userId === review.userId ? (&#10;                                    &lt;&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt; {&#10;                                          setEditingReview(review);&#10;                                          setReviewForm({&#10;                                            rating: review.rating,&#10;                                            comment: review.comment,&#10;                                          });&#10;                                          setShowReviewForm(true);&#10;                                        }}&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Edit Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt;&#10;                                          handleDeleteReview(review._id)&#10;                                        }&#10;                                        disabled={isDeletingReview}&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Delete Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  ) : (&#10;                                    &lt;&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &quot;{review.comment}&quot;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                              {product.farmer?.farmName ||&#10;                                product.farmer?.name ||&#10;                                &quot;Farm Name&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              {product.farmer?.email ||&#10;                                &quot;Farmer contact not available&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.location &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            {product.farmer?.phone &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                              {product.farmer?.description ||&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                View All Products from this Farmer&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Related Products Section - Enhanced */}&#10;                  {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                      {/* Section Header */}&#10;                      &lt;div className=&quot;text-center mb-10&quot;&gt;&#10;                        &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Related Products&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#10;                          Discover similar high-quality products from our&#10;                          trusted farmers. Each item is carefully selected to&#10;                          meet our quality standards.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#10;                          &lt;span&gt;•&lt;/span&gt;&#10;                          &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;Fast delivery available&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Product Grid */}&#10;                      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#10;                        {relatedProducts.map((relatedProduct, index) =&gt; (&#10;                          &lt;div&#10;                            key={relatedProduct._id}&#10;                            className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#10;                            style={{ animationDelay: `${index * 100}ms` }}&#10;                          &gt;&#10;                            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#10;                              {/* Product Image */}&#10;                              &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#10;                                &lt;Image&#10;                                  src={&#10;                                    relatedProduct.image ||&#10;                                    relatedProduct.images?.[0] ||&#10;                                    &quot;/placeholder-image.jpg&quot;&#10;                                  }&#10;                                  alt={relatedProduct.name}&#10;                                  width={300}&#10;                                  height={300}&#10;                                  className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#10;                                /&gt;&#10;&#10;                                {/* Product Badges */}&#10;                                &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#10;                                  {relatedProduct.isOrganic &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Organic&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                  {relatedProduct.isFresh &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Fresh&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Quick Actions Overlay */}&#10;                                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#10;                                  &lt;Link&#10;                                    href={`/details?id=${relatedProduct._id}`}&#10;                                    className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#10;                                  &gt;&#10;                                    View Details&#10;                                  &lt;/Link&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Product Info */}&#10;                              &lt;div className=&quot;p-6&quot;&gt;&#10;                                &lt;div className=&quot;mb-3&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#10;                                    {relatedProduct.name}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#10;                                    by{&quot; &quot;}&#10;                                    {relatedProduct.farmer?.name ||&#10;                                      relatedProduct.farmer?.farmName ||&#10;                                      &quot;Unknown Farmer&quot;}&#10;                                  &lt;/p&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Rating */}&#10;                                &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#10;                                  &lt;StarRating&#10;                                    rating={relatedProduct.averageRating || 0}&#10;                                    size=&quot;sm&quot;&#10;                                  /&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    (&#10;                                    {relatedProduct.reviewCount ||&#10;                                      relatedProduct.totalReviews ||&#10;                                      0}&#10;                                    )&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Price and Stock */}&#10;                                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                                      ${(relatedProduct.price || 0).toFixed(2)}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      /{relatedProduct.unit || &quot;kg&quot;}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div&#10;                                      className={`text-xs font-medium ${&#10;                                        (relatedProduct.stock || 0) &gt; 0&#10;                                          ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                          : &quot;text-red-600 dark:text-red-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      {(relatedProduct.stock || 0) &gt; 0&#10;                                        ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#10;                                        : &quot;Out of stock&quot;}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Action Button */}&#10;                                &lt;Link&#10;                                  href={`/details?id=${relatedProduct._id}`}&#10;                                  className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                                  View Product&#10;                                &lt;/Link&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Browse More Section */}&#10;                      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Looking for more products?&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href=&quot;/products&quot;&#10;                            className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;                            Browse All Products&#10;                            &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/manage/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/manage/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { useDashboardData } from &quot;@/hooks/useDashboardData&quot;;&#10;&#10;// Component imports&#10;import DashboardHeader from &quot;@/components/dashboard/DashboardHeader&quot;;&#10;import NavigationTabs from &quot;@/components/dashboard/NavigationTabs&quot;;&#10;import DashboardTab from &quot;@/components/dashboard/tabs/DashboardTab&quot;;&#10;import ProductsTab from &quot;@/components/dashboard/tabs/ProductsTab&quot;;&#10;import OrdersTab from &quot;@/components/dashboard/tabs/OrdersTab&quot;;&#10;import AnalyticsTab from &quot;@/components/dashboard/tabs/AnalyticsTab&quot;;&#10;import SettingsTab from &quot;@/components/dashboard/tabs/SettingsTab&quot;;&#10;&#10;// Constants&#10;const TABS = {&#10;  DASHBOARD: &quot;dashboard&quot;,&#10;  PRODUCTS: &quot;products&quot;,&#10;  ORDERS: &quot;orders&quot;,&#10;  ANALYTICS: &quot;analytics&quot;,&#10;  SETTINGS: &quot;settings&quot;,&#10;};&#10;&#10;const PRODUCT_STATUS = {&#10;  ACTIVE: &quot;active&quot;,&#10;  INACTIVE: &quot;inactive&quot;,&#10;  OUT_OF_STOCK: &quot;out-of-stock&quot;,&#10;  LOW_STOCK: &quot;low-stock&quot;,&#10;};&#10;&#10;const ORDER_STATUS = {&#10;  PENDING: &quot;pending&quot;,&#10;  CONFIRMED: &quot;confirmed&quot;,&#10;  DELIVERED: &quot;delivered&quot;,&#10;  CANCELLED: &quot;cancelled&quot;,&#10;  RETURNED: &quot;returned&quot;,&#10;};&#10;&#10;const DEFAULT_PAGINATION = {&#10;  page: 1,&#10;  limit: 12,&#10;};&#10;&#10;export default function FarmerDashboard() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Use React Query hook for dashboard data&#10;  const {&#10;    products,&#10;    orders,&#10;    isLoading,&#10;    error,&#10;    isRefetching,&#10;    refetch: refetchDashboard,&#10;    refreshDashboard,&#10;    updateProductInCache,&#10;    updateBulkProductsInCache,&#10;  } = useDashboardData();&#10;&#10;  // UI state&#10;  const [activeTab, setActiveTab] = useState(TABS.DASHBOARD);&#10;  const [actionLoading, setActionLoading] = useState({});&#10;  const [autoRefresh, setAutoRefresh] = useState(true);&#10;&#10;  // Filter and search state&#10;  const [filters, setFilters] = useState({&#10;    search: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    sort: &quot;&quot;,&#10;  });&#10;&#10;  // Pagination state&#10;  const [pagination, setPagination] = useState(DEFAULT_PAGINATION);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;);&#10;&#10;  // Authentication and authorization check&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;loading&quot;) return;&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      const isFarmer =&#10;        userType === &quot;farmer&quot; ||&#10;        userType === &quot;Farmer&quot; ||&#10;        session.user.type === &quot;farmer&quot; ||&#10;        session.user.accountType === &quot;farmer&quot;;&#10;&#10;      if (!isFarmer) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;    }&#10;  }, [session?.user?.id, session?.user?.email, status, router]);&#10;&#10;  // Manual refresh handler&#10;  const handleRefresh = useCallback(async () =&gt; {&#10;    await refetchDashboard();&#10;  }, [refetchDashboard]);&#10;&#10;  // Auto-refresh functionality&#10;  useEffect(() =&gt; {&#10;    if (!autoRefresh) return;&#10;&#10;    const interval = setInterval(() =&gt; {&#10;      refreshDashboard();&#10;    }, 30000); // 30 seconds&#10;&#10;    return () =&gt; clearInterval(interval);&#10;  }, [autoRefresh, refreshDashboard]);&#10;&#10;  // Calculate analytics with memoization&#10;  const analytics = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt;&#10;        order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;        order.status !== ORDER_STATUS.RETURNED,&#10;    );&#10;&#10;    const totalProducts = products.length;&#10;    const activeProducts = products.filter(&#10;      (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== PRODUCT_STATUS.INACTIVE,&#10;    ).length;&#10;&#10;    const totalOrders = orders.length;&#10;    const pendingOrders = orders.filter(&#10;      (o) =&gt; o.status === ORDER_STATUS.PENDING,&#10;    ).length;&#10;&#10;    const totalRevenue = validOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    const now = new Date();&#10;    const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt);&#10;      return (&#10;        orderDate.getMonth() === now.getMonth() &amp;&amp;&#10;        orderDate.getFullYear() === now.getFullYear()&#10;      );&#10;    });&#10;&#10;    const averageOrderValue =&#10;      validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;    const recentOrders = orders.slice(0, 5).map((order) =&gt; ({&#10;      _id: order._id,&#10;      id: order.id,&#10;      customerName: order.customerName,&#10;      total: order.total || order.farmerSubtotal,&#10;      createdAt: order.createdAt,&#10;      status: order.status,&#10;      items: order.items?.length || 0,&#10;    }));&#10;&#10;    return {&#10;      totalProducts,&#10;      activeProducts,&#10;      totalOrders,&#10;      pendingOrders,&#10;      totalRevenue,&#10;      thisMonthOrders: thisMonthValidOrders.length,&#10;      averageOrderValue,&#10;      lowStockProducts: products.filter((p) =&gt; p.stock &lt;= 10).length,&#10;      recentOrders,&#10;    };&#10;  }, [products.length, orders.length]);&#10;&#10;  // Filter and sort products&#10;  const filteredAndSortedProducts = useMemo(() =&gt; {&#10;    let filtered = [...products];&#10;&#10;    if (filters.search) {&#10;      const searchRegex = new RegExp(filters.search.trim(), &quot;i&quot;);&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description || &quot;&quot;) ||&#10;          searchRegex.test(product.category || &quot;&quot;),&#10;      );&#10;    }&#10;&#10;    if (filters.category) {&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          product.category?.toLowerCase() === filters.category.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    if (filters.status) {&#10;      switch (filters.status) {&#10;        case PRODUCT_STATUS.ACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt;&#10;              product.stock &gt; 0 &amp;&amp; product.status !== PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.INACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.status === PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.OUT_OF_STOCK:&#10;          filtered = filtered.filter((product) =&gt; product.stock === 0);&#10;          break;&#10;        case PRODUCT_STATUS.LOW_STOCK:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.stock &gt; 0 &amp;&amp; product.stock &lt;= 5,&#10;          );&#10;          break;&#10;      }&#10;    }&#10;&#10;    if (filters.sort) {&#10;      const [key, order] = filters.sort.split(&quot;-&quot;);&#10;      filtered.sort((a, b) =&gt; {&#10;        let valueA, valueB;&#10;&#10;        switch (key) {&#10;          case &quot;price&quot;:&#10;            valueA = a.price || 0;&#10;            valueB = b.price || 0;&#10;            break;&#10;          case &quot;name&quot;:&#10;            valueA = a.name || &quot;&quot;;&#10;            valueB = b.name || &quot;&quot;;&#10;            return order === &quot;asc&quot;&#10;              ? valueA.localeCompare(valueB)&#10;              : valueB.localeCompare(valueA);&#10;          case &quot;stock&quot;:&#10;            valueA = a.stock || 0;&#10;            valueB = b.stock || 0;&#10;            break;&#10;          case &quot;date&quot;:&#10;            valueA = new Date(a.createdAt || 0);&#10;            valueB = new Date(b.createdAt || 0);&#10;            break;&#10;          default:&#10;            return 0;&#10;        }&#10;&#10;        return order === &quot;asc&quot; ? valueA - valueB : valueB - valueA;&#10;      });&#10;    }&#10;&#10;    return filtered;&#10;  }, [products, filters]);&#10;&#10;  // Reset pagination when filters change&#10;  useEffect(() =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, page: 1 }));&#10;  }, [filters]);&#10;&#10;  // Paginated products&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    const startIndex = (pagination.page - 1) * pagination.limit;&#10;    const endIndex = startIndex + pagination.limit;&#10;    return filteredAndSortedProducts.slice(startIndex, endIndex);&#10;  }, [filteredAndSortedProducts, pagination]);&#10;&#10;  // Total pages calculation&#10;  const totalPages = Math.ceil(&#10;    filteredAndSortedProducts.length / pagination.limit,&#10;  );&#10;&#10;  // Product management functions&#10;  const handleStatusToggle = useCallback(&#10;    async (productId, currentStatus) =&gt; {&#10;      console.log(&quot;handleStatusToggle called with:&quot;, {&#10;        productId,&#10;        currentStatus,&#10;        type: typeof currentStatus,&#10;      });&#10;&#10;      // Normalize the current status to lowercase for comparison&#10;      const normalizedCurrentStatus = currentStatus?.toLowerCase();&#10;      const normalizedActiveStatus = PRODUCT_STATUS.ACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;&#10;        const result = await response.json();&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;          body: JSON.stringify({ status: newStatus }),&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;        try {&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;    [updateProductInCache, refreshDashboard],&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;    [updateProductInCache, refreshDashboard],&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;        // The refreshDashboard() call above should update the UI properly&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          await refreshDashboard();&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          await refreshDashboard();&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;        try {&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;    [updateProductInCache, refreshDashboard],&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;      const normalizedInactiveStatus = PRODUCT_STATUS.INACTIVE.toLowerCase();&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;        try {&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;    [updateProductInCache, refreshDashboard],&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;      const newStatus =&#10;        normalizedCurrentStatus === normalizedActiveStatus&#10;          ? PRODUCT_STATUS.INACTIVE&#10;          : PRODUCT_STATUS.ACTIVE;&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          await refreshDashboard();&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;      console.log(&quot;Status toggle:&quot;, {&#10;        currentStatus,&#10;        normalizedCurrentStatus,&#10;        newStatus,&#10;        comparison: normalizedCurrentStatus === normalizedActiveStatus,&#10;      });&#10;&#10;      const actionText =&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          await refreshDashboard();&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;        newStatus === PRODUCT_STATUS.ACTIVE ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;    [updateProductInCache, refreshDashboard],&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;      if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;        return;&#10;      }&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;status&quot; }));&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;      try {&#10;        console.log(&quot;Sending status update:&quot;, { productId, status: newStatus });&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;PUT&quot;,&#10;          headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;    [updateProductInCache, refreshDashboard],&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        });&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;            Pragma: &quot;no-cache&quot;,&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;          },&#10;          body: JSON.stringify({ status: newStatus }),&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        const result = await response.json();&#10;        console.log(&quot;API response:&quot;, result);&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        console.log(&quot;Updating product in cache with:&quot;, {&#10;          productId,&#10;          newStatus,&#10;          updatedProduct: result.product,&#10;        });&#10;&#10;        // Update the specific product in cache BEFORE clearing all caches&#10;        try {&#10;          updateProductInCache(productId, {&#10;            ...result.product,&#10;            status: newStatus,&#10;            updatedAt: new Date().toISOString(),&#10;          });&#10;          console.log(&quot;Cache update completed&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Cache update failed:&quot;, error);&#10;        }&#10;&#10;        console.log(&quot;About to refresh dashboard...&quot;);&#10;    [updateProductInCache, refreshDashboard],&#10;        // Force a complete dashboard refresh to ensure analytics data is updated&#10;        try {&#10;          await refreshDashboard();&#10;          console.log(&quot;Dashboard refresh completed successfully&quot;);&#10;        } catch (error) {&#10;          console.error(&quot;Dashboard refresh failed:&quot;, error);&#10;          // If refresh fails, try a manual refetch&#10;          await refetchDashboard();&#10;          console.log(&quot;Manual refetch completed&quot;);&#10;        }&#10;&#10;        // Don't clear caches here - let React Query handle cache invalidation&#10;        // The refreshDashboard() call above should update the UI properly&#10;&#10;        // Dispatch custom event to notify products page of status change&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productStatusUpdated&quot;, {&#10;            detail: {&#10;              productId: productId,&#10;              newStatus: newStatus,&#10;              timestamp: Date.now(),&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productStatusUpdated&quot;,&#10;          JSON.stringify({&#10;            productId: productId,&#10;            newStatus: newStatus,&#10;            timestamp: Date.now(),&#10;          }),&#10;        );&#10;&#10;        const successMsg =&#10;          newStatus === PRODUCT_STATUS.ACTIVE&#10;            ? &quot;Product activated successfully!&quot;&#10;            : &quot;Product deactivated successfully!&quot;;&#10;&#10;        alert(successMsg);&#10;      } catch (error) {&#10;        console.error(&quot;Error updating product status:&quot;, error);&#10;        alert(`Failed to ${actionText} product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [updateProductInCache, refreshDashboard],&#10;  );&#10;&#10;  const handleDeleteProduct = useCallback(&#10;    async (productId) =&gt; {&#10;      const confirmMessage =&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;        &quot;This action cannot be undone and will remove:\n&quot; +&#10;        &quot;• The product listing\n&quot; +&#10;        &quot;• All associated data\n&quot; +&#10;        &quot;• Product from any pending orders&quot;;&#10;&#10;      if (!confirm(confirmMessage)) return;&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;delete&quot; }));&#10;&#10;      try {&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;DELETE&quot;,&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;&#10;          if (response.status === 409) {&#10;            alert(&#10;              &quot;❌ Cannot Delete Product\n\n&quot; +&#10;                &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;                &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;                &quot;You can temporarily deactivate the product instead by clicking the pause button.&quot;,&#10;            );&#10;            return;&#10;          } else if (response.status === 404) {&#10;            alert(&quot;❌ Product not found. It may have already been deleted.&quot;);&#10;            return;&#10;          } else {&#10;            throw new Error(errorData.error || &quot;Failed to delete product&quot;);&#10;          }&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || &quot;Failed to delete product&quot;);&#10;        }&#10;&#10;        await refetchDashboard();&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error deleting product:&quot;, error);&#10;        alert(`❌ Failed to delete product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [refetchDashboard],&#10;  );&#10;&#10;  // Update functions&#10;  const updateFilters = useCallback((newFilters) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, ...newFilters }));&#10;  }, []);&#10;&#10;  const updatePagination = useCallback((newPagination) =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, ...newPagination }));&#10;  }, []);&#10;&#10;  // Utility functions&#10;  const formatPrice = useCallback((price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-US&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;USD&quot;,&#10;      minimumFractionDigits: 2,&#10;      maximumFractionDigits: 2,&#10;    }).format(price || 0);&#10;  }, []);&#10;&#10;  const formatDate = useCallback((dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;    });&#10;  }, []);&#10;&#10;  const getProductStatusBadge = useCallback((product) =&gt; {&#10;    if (product.status === PRODUCT_STATUS.INACTIVE) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-pause mr-1&quot;&gt;&lt;/i&gt;&#10;          Inactive&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock === 0) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;          Out of Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock &lt;= 5) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-circle mr-1&quot;&gt;&lt;/i&gt;&#10;          Low Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    return (&#10;      &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&gt;&#10;        &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;        Active&#10;      &lt;/span&gt;&#10;    );&#10;  }, []);&#10;&#10;  // Component props&#10;  const commonProps = {&#10;    session,&#10;    products,&#10;    orders,&#10;    analytics,&#10;    handleRefresh,&#10;    refreshing: isRefetching,&#10;    formatPrice,&#10;    formatDate,&#10;    loading: isLoading,&#10;    error,&#10;    updateBulkProductsInCache,&#10;  };&#10;&#10;  const productProps = {&#10;    ...commonProps,&#10;    paginatedProducts,&#10;    filteredProducts: filteredAndSortedProducts,&#10;    totalProducts: products.length,&#10;    filters,&#10;    updateFilters,&#10;    pagination: { ...pagination, totalPages },&#10;    updatePagination,&#10;    viewMode,&#10;    setViewMode,&#10;    handleStatusToggle,&#10;    handleDeleteProduct,&#10;    actionLoading,&#10;    getProductStatusBadge,&#10;  };&#10;&#10;  // Loading state&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Error state&#10;  if (error &amp;&amp; !products.length &amp;&amp; !orders.length) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;          &lt;div className=&quot;text-red-500 text-6xl mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Dashboard Error&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;            {error.message}&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={handleRefresh}&#10;            disabled={isRefetching}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition disabled:opacity-50&quot;&#10;          &gt;&#10;            {isRefetching ? (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                Retrying...&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-redo mr-2&quot;&gt;&lt;/i&gt;&#10;                Try Again&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        &lt;DashboardHeader {...commonProps} /&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4&quot;&gt;&#10;            &lt;div className=&quot;bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-exclamation-triangle text-red-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-red-700 dark:text-red-300&quot;&gt;&#10;                  {error.message}&#10;                &lt;/span&gt;&#10;                &lt;button&#10;                  onClick={handleRefresh}&#10;                  className=&quot;ml-auto text-primary-600 hover:text-primary-800&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-redo&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;NavigationTabs activeTab={activeTab} setActiveTab={setActiveTab} /&gt;&#10;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {activeTab === TABS.DASHBOARD &amp;&amp; &lt;DashboardTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.PRODUCTS &amp;&amp; &lt;ProductsTab {...productProps} /&gt;}&#10;          {activeTab === TABS.ORDERS &amp;&amp; &lt;OrdersTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.ANALYTICS &amp;&amp; &lt;AnalyticsTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.SETTINGS &amp;&amp; &lt;SettingsTab {...commonProps} /&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { useDashboardData } from &quot;@/hooks/useDashboardData&quot;;&#10;&#10;// Component imports&#10;import DashboardHeader from &quot;@/components/dashboard/DashboardHeader&quot;;&#10;import NavigationTabs from &quot;@/components/dashboard/NavigationTabs&quot;;&#10;import DashboardTab from &quot;@/components/dashboard/tabs/DashboardTab&quot;;&#10;import ProductsTab from &quot;@/components/dashboard/tabs/ProductsTab&quot;;&#10;import OrdersTab from &quot;@/components/dashboard/tabs/OrdersTab&quot;;&#10;import AnalyticsTab from &quot;@/components/dashboard/tabs/AnalyticsTab&quot;;&#10;import SettingsTab from &quot;@/components/dashboard/tabs/SettingsTab&quot;;&#10;&#10;// Constants&#10;const TABS = {&#10;  DASHBOARD: &quot;dashboard&quot;,&#10;  PRODUCTS: &quot;products&quot;,&#10;  ORDERS: &quot;orders&quot;,&#10;  ANALYTICS: &quot;analytics&quot;,&#10;  SETTINGS: &quot;settings&quot;,&#10;};&#10;&#10;const PRODUCT_STATUS = {&#10;  ACTIVE: &quot;active&quot;,&#10;  INACTIVE: &quot;inactive&quot;,&#10;  OUT_OF_STOCK: &quot;out-of-stock&quot;,&#10;  LOW_STOCK: &quot;low-stock&quot;,&#10;};&#10;&#10;const ORDER_STATUS = {&#10;  PENDING: &quot;pending&quot;,&#10;  CONFIRMED: &quot;confirmed&quot;,&#10;  DELIVERED: &quot;delivered&quot;,&#10;  CANCELLED: &quot;cancelled&quot;,&#10;  RETURNED: &quot;returned&quot;,&#10;};&#10;&#10;const DEFAULT_PAGINATION = {&#10;  page: 1,&#10;  limit: 12,&#10;};&#10;&#10;export default function FarmerDashboard() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;&#10;  // Use React Query hook for dashboard data&#10;  const {&#10;    products,&#10;    orders,&#10;    isLoading,&#10;    error,&#10;    isRefetching,&#10;    refetch: refetchDashboard,&#10;    refreshDashboard,&#10;    updateProductInCache,&#10;    updateBulkProductsInCache,&#10;  } = useDashboardData();&#10;&#10;  // UI state&#10;  const [activeTab, setActiveTab] = useState(TABS.DASHBOARD);&#10;  const [actionLoading, setActionLoading] = useState({});&#10;  const [autoRefresh, setAutoRefresh] = useState(true);&#10;&#10;  // Filter and search state&#10;  const [filters, setFilters] = useState({&#10;    search: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    sort: &quot;&quot;,&#10;  });&#10;&#10;  // Pagination state&#10;  const [pagination, setPagination] = useState(DEFAULT_PAGINATION);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;);&#10;&#10;  // Authentication and authorization check&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;loading&quot;) return;&#10;&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      const isFarmer =&#10;        userType === &quot;farmer&quot; ||&#10;        userType === &quot;Farmer&quot; ||&#10;        session.user.type === &quot;farmer&quot; ||&#10;        session.user.accountType === &quot;farmer&quot;;&#10;&#10;      if (!isFarmer) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;    }&#10;  }, [session?.user?.id, session?.user?.email, status, router]);&#10;&#10;  // Manual refresh handler&#10;  const handleRefresh = useCallback(async () =&gt; {&#10;    await refetchDashboard();&#10;  }, [refetchDashboard]);&#10;&#10;  // Auto-refresh functionality&#10;  useEffect(() =&gt; {&#10;    if (!autoRefresh) return;&#10;&#10;    const interval = setInterval(() =&gt; {&#10;      refreshDashboard();&#10;    }, 30000); // 30 seconds&#10;&#10;    return () =&gt; clearInterval(interval);&#10;  }, [autoRefresh, refreshDashboard]);&#10;&#10;  // Calculate analytics with memoization&#10;  const analytics = useMemo(() =&gt; {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt;&#10;        order.status !== ORDER_STATUS.CANCELLED &amp;&amp;&#10;        order.status !== ORDER_STATUS.RETURNED,&#10;    );&#10;&#10;    const totalProducts = products.length;&#10;    const activeProducts = products.filter(&#10;      (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== PRODUCT_STATUS.INACTIVE,&#10;    ).length;&#10;&#10;    const totalOrders = orders.length;&#10;    const pendingOrders = orders.filter(&#10;      (o) =&gt; o.status === ORDER_STATUS.PENDING,&#10;    ).length;&#10;&#10;    const totalRevenue = validOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    const now = new Date();&#10;    const thisMonthValidOrders = validOrders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt);&#10;      return (&#10;        orderDate.getMonth() === now.getMonth() &amp;&amp;&#10;        orderDate.getFullYear() === now.getFullYear()&#10;      );&#10;    });&#10;&#10;    const averageOrderValue =&#10;      validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;    const recentOrders = orders.slice(0, 5).map((order) =&gt; ({&#10;      _id: order._id,&#10;      id: order.id,&#10;      customerName: order.customerName,&#10;      total: order.total || order.farmerSubtotal,&#10;      createdAt: order.createdAt,&#10;      status: order.status,&#10;      items: order.items?.length || 0,&#10;    }));&#10;&#10;    return {&#10;      totalProducts,&#10;      activeProducts,&#10;      totalOrders,&#10;      pendingOrders,&#10;      totalRevenue,&#10;      thisMonthOrders: thisMonthValidOrders.length,&#10;      averageOrderValue,&#10;      lowStockProducts: products.filter((p) =&gt; p.stock &lt;= 10).length,&#10;      recentOrders,&#10;    };&#10;  }, [products.length, orders.length]);&#10;&#10;  // Filter and sort products&#10;  const filteredAndSortedProducts = useMemo(() =&gt; {&#10;    let filtered = [...products];&#10;&#10;    if (filters.search) {&#10;      const searchRegex = new RegExp(filters.search.trim(), &quot;i&quot;);&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description || &quot;&quot;) ||&#10;          searchRegex.test(product.category || &quot;&quot;),&#10;      );&#10;    }&#10;&#10;    if (filters.category) {&#10;      filtered = filtered.filter(&#10;        (product) =&gt;&#10;          product.category?.toLowerCase() === filters.category.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    if (filters.status) {&#10;      switch (filters.status) {&#10;        case PRODUCT_STATUS.ACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt;&#10;              product.stock &gt; 0 &amp;&amp; product.status !== PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.INACTIVE:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.status === PRODUCT_STATUS.INACTIVE,&#10;          );&#10;          break;&#10;        case PRODUCT_STATUS.OUT_OF_STOCK:&#10;          filtered = filtered.filter((product) =&gt; product.stock === 0);&#10;          break;&#10;        case PRODUCT_STATUS.LOW_STOCK:&#10;          filtered = filtered.filter(&#10;            (product) =&gt; product.stock &gt; 0 &amp;&amp; product.stock &lt;= 5,&#10;          );&#10;          break;&#10;      }&#10;    }&#10;&#10;    if (filters.sort) {&#10;      const [key, order] = filters.sort.split(&quot;-&quot;);&#10;      filtered.sort((a, b) =&gt; {&#10;        let valueA, valueB;&#10;&#10;        switch (key) {&#10;          case &quot;price&quot;:&#10;            valueA = a.price || 0;&#10;            valueB = b.price || 0;&#10;            break;&#10;          case &quot;name&quot;:&#10;            valueA = a.name || &quot;&quot;;&#10;            valueB = b.name || &quot;&quot;;&#10;            return order === &quot;asc&quot;&#10;              ? valueA.localeCompare(valueB)&#10;              : valueB.localeCompare(valueA);&#10;          case &quot;stock&quot;:&#10;            valueA = a.stock || 0;&#10;            valueB = b.stock || 0;&#10;            break;&#10;          case &quot;date&quot;:&#10;            valueA = new Date(a.createdAt || 0);&#10;            valueB = new Date(b.createdAt || 0);&#10;            break;&#10;          default:&#10;            return 0;&#10;        }&#10;&#10;        return order === &quot;asc&quot; ? valueA - valueB : valueB - valueA;&#10;      });&#10;    }&#10;&#10;    return filtered;&#10;  }, [products, filters]);&#10;&#10;  // Reset pagination when filters change&#10;  useEffect(() =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, page: 1 }));&#10;  }, [filters]);&#10;&#10;  // Paginated products&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    const startIndex = (pagination.page - 1) * pagination.limit;&#10;    const endIndex = startIndex + pagination.limit;&#10;    return filteredAndSortedProducts.slice(startIndex, endIndex);&#10;  }, [filteredAndSortedProducts, pagination]);&#10;&#10;  // Total pages calculation&#10;  const totalPages = Math.ceil(&#10;    filteredAndSortedProducts.length / pagination.limit,&#10;  );&#10;&#10;  // Product management functions&#10;  const handleStatusToggle = useCallback(&#10;    async (productId, currentStatus) =&gt; {&#10;      console.log(&quot;handleStatusToggle called with:&quot;, {&#10;        productId,&#10;        currentStatus,&#10;        type: typeof currentStatus,&#10;      });&#10;&#10;      // Normalize the current status to lowercase for comparison&#10;      const normalizedCurrentStatus = currentStatus?.toLowerCase();&#10;      const normalizedActiveStatus = PRODUCT_STATUS.ACTIVE.toLowerCase();&#10;&#10;      const newStatus =&#10;        normalizedCurrentStatus === normalizedActiveStatus&#10;          ? PRODUCT_STATUS.INACTIVE&#10;          : PRODUCT_STATUS.ACTIVE;&#10;&#10;      console.log(&quot;Status toggle:&quot;, {&#10;        currentStatus,&#10;        normalizedCurrentStatus,&#10;        newStatus,&#10;        comparison: normalizedCurrentStatus === normalizedActiveStatus,&#10;      });&#10;&#10;      const actionText =&#10;        newStatus === PRODUCT_STATUS.ACTIVE ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;      if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;        return;&#10;      }&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;status&quot; }));&#10;&#10;      try {&#10;        console.log(&quot;Sending status update:&quot;, { productId, status: newStatus });&#10;&#10;        // Use the same API service pattern as bulk update for consistency&#10;        const { apiService } = await import(&quot;@/lib/api-service&quot;);&#10;        const result = await apiService.bulkUpdateProducts(&#10;          [productId], // Single product as array&#10;          { status: newStatus },&#10;        );&#10;&#10;        console.log(&quot;API response:&quot;, result);&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || `Failed to ${actionText} product`);&#10;        }&#10;&#10;        // Update the React Query cache using the same pattern as bulk update&#10;        if (updateBulkProductsInCache) {&#10;          updateBulkProductsInCache([productId], { status: newStatus });&#10;        }&#10;&#10;        // Dispatch custom event to notify products page of status change&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productStatusUpdated&quot;, {&#10;            detail: {&#10;              productId: productId,&#10;              newStatus: newStatus,&#10;              timestamp: Date.now(),&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productStatusUpdated&quot;,&#10;          JSON.stringify({&#10;            productId: productId,&#10;            newStatus: newStatus,&#10;            timestamp: Date.now(),&#10;          }),&#10;        );&#10;&#10;        const successMsg =&#10;          newStatus === PRODUCT_STATUS.ACTIVE&#10;            ? &quot;Product activated successfully!&quot;&#10;            : &quot;Product deactivated successfully!&quot;;&#10;&#10;        alert(successMsg);&#10;      } catch (error) {&#10;        console.error(&quot;Error updating product status:&quot;, error);&#10;        alert(`Failed to ${actionText} product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [updateBulkProductsInCache],&#10;  );&#10;&#10;  const handleDeleteProduct = useCallback(&#10;    async (productId) =&gt; {&#10;      const confirmMessage =&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;        &quot;This action cannot be undone and will remove:\n&quot; +&#10;        &quot;• The product listing\n&quot; +&#10;        &quot;• All associated data\n&quot; +&#10;        &quot;• Product from any pending orders&quot;;&#10;&#10;      if (!confirm(confirmMessage)) return;&#10;&#10;      setActionLoading((prev) =&gt; ({ ...prev, [productId]: &quot;delete&quot; }));&#10;&#10;      try {&#10;        const response = await fetch(`/api/products/${productId}`, {&#10;          method: &quot;DELETE&quot;,&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;&#10;          if (response.status === 409) {&#10;            alert(&#10;              &quot;❌ Cannot Delete Product\n\n&quot; +&#10;                &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;                &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;                &quot;You can temporarily deactivate the product instead by clicking the pause button.&quot;,&#10;            );&#10;            return;&#10;          } else if (response.status === 404) {&#10;            alert(&quot;❌ Product not found. It may have already been deleted.&quot;);&#10;            return;&#10;          } else {&#10;            throw new Error(errorData.error || &quot;Failed to delete product&quot;);&#10;          }&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (!result.success) {&#10;          throw new Error(result.error || &quot;Failed to delete product&quot;);&#10;        }&#10;&#10;        await refetchDashboard();&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error deleting product:&quot;, error);&#10;        alert(`❌ Failed to delete product: ${error.message}`);&#10;      } finally {&#10;        setActionLoading((prev) =&gt; ({ ...prev, [productId]: null }));&#10;      }&#10;    },&#10;    [refetchDashboard],&#10;  );&#10;&#10;  // Update functions&#10;  const updateFilters = useCallback((newFilters) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, ...newFilters }));&#10;  }, []);&#10;&#10;  const updatePagination = useCallback((newPagination) =&gt; {&#10;    setPagination((prev) =&gt; ({ ...prev, ...newPagination }));&#10;  }, []);&#10;&#10;  // Utility functions&#10;  const formatPrice = useCallback((price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-US&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;USD&quot;,&#10;      minimumFractionDigits: 2,&#10;      maximumFractionDigits: 2,&#10;    }).format(price || 0);&#10;  }, []);&#10;&#10;  const formatDate = useCallback((dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;    });&#10;  }, []);&#10;&#10;  const getProductStatusBadge = useCallback((product) =&gt; {&#10;    if (product.status === PRODUCT_STATUS.INACTIVE) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-pause mr-1&quot;&gt;&lt;/i&gt;&#10;          Inactive&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock === 0) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;          Out of Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    if (product.stock &lt;= 5) {&#10;      return (&#10;        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-circle mr-1&quot;&gt;&lt;/i&gt;&#10;          Low Stock&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;    return (&#10;      &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&gt;&#10;        &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;        Active&#10;      &lt;/span&gt;&#10;    );&#10;  }, []);&#10;&#10;  // Component props&#10;  const commonProps = {&#10;    session,&#10;    products,&#10;    orders,&#10;    analytics,&#10;    handleRefresh,&#10;    refreshing: isRefetching,&#10;    formatPrice,&#10;    formatDate,&#10;    loading: isLoading,&#10;    error,&#10;    updateBulkProductsInCache,&#10;  };&#10;&#10;  const productProps = {&#10;    ...commonProps,&#10;    paginatedProducts,&#10;    filteredProducts: filteredAndSortedProducts,&#10;    totalProducts: products.length,&#10;    filters,&#10;    updateFilters,&#10;    pagination: { ...pagination, totalPages },&#10;    updatePagination,&#10;    viewMode,&#10;    setViewMode,&#10;    handleStatusToggle,&#10;    handleDeleteProduct,&#10;    actionLoading,&#10;    getProductStatusBadge,&#10;  };&#10;&#10;  // Loading state&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Error state&#10;  if (error &amp;&amp; !products.length &amp;&amp; !orders.length) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center max-w-md mx-auto p-6&quot;&gt;&#10;          &lt;div className=&quot;text-red-500 text-6xl mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Dashboard Error&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;            {error.message}&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={handleRefresh}&#10;            disabled={isRefetching}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition disabled:opacity-50&quot;&#10;          &gt;&#10;            {isRefetching ? (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                Retrying...&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;i className=&quot;fas fa-redo mr-2&quot;&gt;&lt;/i&gt;&#10;                Try Again&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        &lt;DashboardHeader {...commonProps} /&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4&quot;&gt;&#10;            &lt;div className=&quot;bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-exclamation-triangle text-red-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-red-700 dark:text-red-300&quot;&gt;&#10;                  {error.message}&#10;                &lt;/span&gt;&#10;                &lt;button&#10;                  onClick={handleRefresh}&#10;                  className=&quot;ml-auto text-primary-600 hover:text-primary-800&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-redo&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;NavigationTabs activeTab={activeTab} setActiveTab={setActiveTab} /&gt;&#10;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {activeTab === TABS.DASHBOARD &amp;&amp; &lt;DashboardTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.PRODUCTS &amp;&amp; &lt;ProductsTab {...productProps} /&gt;}&#10;          {activeTab === TABS.ORDERS &amp;&amp; &lt;OrdersTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.ANALYTICS &amp;&amp; &lt;AnalyticsTab {...commonProps} /&gt;}&#10;          {activeTab === TABS.SETTINGS &amp;&amp; &lt;SettingsTab {...commonProps} /&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ProductCard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ProductCard.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.reviewCount || product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ReorderModal.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ReorderModal.js" />
              <option name="originalContent" value="import { useState, useEffect } from &quot;react&quot;;&#10;&#10;export default function ReorderModal({&#10;  isOpen,&#10;  onClose,&#10;  validationResult,&#10;  onProceedWithAvailable,&#10;  onProceedWithAll,&#10;  loading,&#10;}) {&#10;  const [showDetails, setShowDetails] = useState(false);&#10;  const [activeTab, setActiveTab] = useState(&quot;summary&quot;);&#10;  const [isVisible, setIsVisible] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isOpen) {&#10;      setIsVisible(true);&#10;    } else {&#10;      setIsVisible(false);&#10;    }&#10;  }, [isOpen]);&#10;&#10;  if (!isOpen || !validationResult) return null;&#10;&#10;  const { summary, validation, pricing, originalOrder } = validationResult;&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const getPriceChangeColor = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;text-red-500&quot;;&#10;    if (change &lt; 0) return &quot;text-emerald-500&quot;;&#10;    return &quot;text-gray-600&quot;;&#10;  };&#10;&#10;  const getPriceChangeIcon = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;fas fa-arrow-up&quot;;&#10;    if (change &lt; 0) return &quot;fas fa-arrow-down&quot;;&#10;    return &quot;fas fa-minus&quot;;&#10;  };&#10;&#10;  // Calculate total value of available stock&#10;  const calculateAvailableStockValue = () =&gt; {&#10;    return validation.availableItems.reduce((total, item) =&gt; {&#10;      return total + item.price * item.stock;&#10;    }, 0);&#10;  };&#10;&#10;  const getStatusColor = (type) =&gt; {&#10;    switch (type) {&#10;      case &quot;available&quot;:&#10;        return &quot;from-emerald-500 to-green-600&quot;;&#10;      case &quot;unavailable&quot;:&#10;        return &quot;from-red-500 to-rose-600&quot;;&#10;      case &quot;price-change&quot;:&#10;        return &quot;from-orange-500 to-amber-600&quot;;&#10;      case &quot;stock-issue&quot;:&#10;        return &quot;from-yellow-500 to-orange-500&quot;;&#10;      default:&#10;        return &quot;from-blue-500 to-indigo-600&quot;;&#10;    }&#10;  };&#10;&#10;  const tabs = [&#10;    { id: &quot;summary&quot;, label: &quot;Summary&quot;, icon: &quot;fas fa-chart-pie&quot; },&#10;    { id: &quot;items&quot;, label: &quot;Items&quot;, icon: &quot;fas fa-boxes&quot; },&#10;    { id: &quot;pricing&quot;, label: &quot;Pricing&quot;, icon: &quot;fas fa-calculator&quot; },&#10;  ];&#10;&#10;  return (&#10;    &lt;div&#10;      className={`fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 transition-all duration-300 ${isVisible ? &quot;opacity-100&quot; : &quot;opacity-0&quot;}`}&#10;    &gt;&#10;      &lt;div&#10;        className={`bg-white dark:bg-gray-900 rounded-3xl w-full max-w-5xl max-h-[95vh] overflow-hidden shadow-2xl border border-gray-200 dark:border-gray-700 transform transition-all duration-300 ${isVisible ? &quot;scale-100 translate-y-0&quot; : &quot;scale-95 translate-y-4&quot;}`}&#10;      &gt;&#10;        {/* Enhanced Header */}&#10;        &lt;div className=&quot;relative bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-700 text-white p-8&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-black/10&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;relative z-10&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-white/20 rounded-2xl backdrop-blur-sm&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-sync-alt text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold tracking-tight&quot;&gt;&#10;                      Reorder Validation&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-blue-100 text-lg&quot;&gt;&#10;                      Order from{&quot; &quot;}&#10;                      {new Date(originalOrder.orderDate).toLocaleDateString(&#10;                        &quot;en-US&quot;,&#10;                        {&#10;                          weekday: &quot;long&quot;,&#10;                          year: &quot;numeric&quot;,&#10;                          month: &quot;long&quot;,&#10;                          day: &quot;numeric&quot;,&#10;                        },&#10;                      )}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Quick Status Pills */}&#10;                &lt;div className=&quot;flex flex-wrap gap-2 mt-4&quot;&gt;&#10;                  {summary.reorderSuccess &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-emerald-500/20 text-emerald-100 rounded-full text-sm font-medium border border-emerald-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Reorder Available&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.priceChangesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-orange-500/20 text-orange-100 rounded-full text-sm font-medium border border-orange-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;                      Price Changes&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.stockIssuesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-yellow-500/20 text-yellow-100 rounded-full text-sm font-medium border border-yellow-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse mr-1&quot;&gt;&lt;/i&gt;&#10;                      Stock Issues&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;p-3 hover:bg-white/20 rounded-2xl transition-all duration-200 group&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-times text-xl group-hover:rotate-90 transition-transform duration-200&quot;&gt;&lt;/i&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Tab Navigation */}&#10;        &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;          &lt;div className=&quot;flex space-x-1 p-2&quot;&gt;&#10;            {tabs.map((tab) =&gt; (&#10;              &lt;button&#10;                key={tab.id}&#10;                onClick={() =&gt; setActiveTab(tab.id)}&#10;                className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${&#10;                  activeTab === tab.id&#10;                    ? &quot;bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-md border border-blue-200 dark:border-blue-800&quot;&#10;                    : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-white/50 dark:hover:bg-gray-700/50&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`${tab.icon} text-sm`}&gt;&lt;/i&gt;&#10;                &lt;span&gt;{tab.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Content */}&#10;        &lt;div className=&quot;p-8 overflow-y-auto max-h-[calc(95vh-280px)]&quot;&gt;&#10;          {/* Summary Tab */}&#10;          {activeTab === &quot;summary&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-8&quot;&gt;&#10;              {/* Enhanced Summary Cards */}&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-emerald-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        {summary.availableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-emerald-600 dark:text-emerald-400 text-sm&quot;&gt;&#10;                      Ready for reorder&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/30 dark:to-rose-900/20 rounded-2xl p-6 border border-red-200 dark:border-red-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-red-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-red-600 dark:text-red-400&quot;&gt;&#10;                        {summary.unavailableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-red-800 dark:text-red-300&quot;&gt;&#10;                      Unavailable&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm&quot;&gt;&#10;                      Currently out of stock&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/30 dark:to-amber-900/20 rounded-2xl p-6 border border-orange-200 dark:border-orange-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-orange-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                        {summary.priceChangesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                      Price Changes&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-orange-600 dark:text-orange-400 text-sm&quot;&gt;&#10;                      Updated pricing&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/20 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-yellow-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                        {summary.stockIssuesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                      Stock Issues&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm&quot;&gt;&#10;                      Limited availability&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Price Comparison */}&#10;              &lt;div className=&quot;bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-8 border border-gray-200 dark:border-gray-700 shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                    Price Comparison&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Original Total&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-receipt text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatPrice(originalOrder.total)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Previous order&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        New Estimated&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-blue-600 dark:text-blue-400&quot;&gt;&#10;                      {formatPrice(pricing.estimatedTotal)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Current pricing&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Difference&#10;                      &lt;/span&gt;&#10;                      &lt;i&#10;                        className={`${getPriceChangeIcon(pricing.totalDifference)} text-gray-400`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`text-2xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                    &gt;&#10;                      {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                      {formatPrice(pricing.totalDifference)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {pricing.totalDifference &lt; 0&#10;                        ? &quot;You save&quot;&#10;                        : &quot;Additional cost&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Stock Value&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Total inventory value&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Items Tab */}&#10;          {activeTab === &quot;items&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {/* Available Items */}&#10;              {validation.availableItems.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/20 dark:to-green-900/10 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;text-xl font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items ({validation.availableItems.length})&#10;                    &lt;/h4&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    {validation.availableItems.map((item, index) =&gt; (&#10;                      &lt;div&#10;                        key={index}&#10;                        className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-emerald-200 dark:border-emerald-800 hover:shadow-md transition-shadow&quot;&#10;                      &gt;&#10;                        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                          &lt;img&#10;                            src={&#10;                              item.image ||&#10;                              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=60&amp;h=60&amp;fit=crop&quot;&#10;                            }&#10;                            alt={item.productName}&#10;                            className=&quot;w-16 h-16 rounded-xl object-cover border border-gray-200 dark:border-gray-700&quot;&#10;                          /&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                              {item.productName}&#10;                            &lt;/h5&gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4 mt-2 text-sm&quot;&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Qty:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Stock:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium text-emerald-600&quot;&gt;&#10;                                  {item.stock}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Price:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {formatPrice(item.price)}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Issue Items */}&#10;              {(validation.unavailableItems.length &gt; 0 ||&#10;                validation.priceChanges.length &gt; 0 ||&#10;                validation.stockIssues.length &gt; 0) &amp;&amp; (&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Unavailable Items */}&#10;                  {validation.unavailableItems.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/20 dark:to-rose-900/10 rounded-2xl p-6 border border-red-200 dark:border-red-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-red-800 dark:text-red-300&quot;&gt;&#10;                          Unavailable Items (&#10;                          {validation.unavailableItems.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.unavailableItems.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-red-200 dark:border-red-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Qty: {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Price Changes */}&#10;                  {validation.priceChanges.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/20 dark:to-amber-900/10 rounded-2xl p-6 border border-orange-200 dark:border-orange-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                          Price Changes ({validation.priceChanges.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.priceChanges.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-orange-200 dark:border-orange-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mt-1&quot;&gt;&#10;                                  Was {formatPrice(item.originalPrice)} → Now{&quot; &quot;}&#10;                                  {formatPrice(item.currentPrice)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span&#10;                                  className={`text-sm font-semibold ${getPriceChangeColor(item.priceDifference)}`}&#10;                                &gt;&#10;                                  {item.priceDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                                  {item.priceChangePercent}%&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Stock Issues */}&#10;                  {validation.stockIssues.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/20 dark:to-orange-900/10 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                          Stock Issues ({validation.stockIssues.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.stockIssues.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-yellow-200 dark:border-yellow-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;div&gt;Wanted: {item.requestedQuantity}&lt;/div&gt;&#10;                                &lt;div&gt;Available: {item.availableStock}&lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pricing Tab */}&#10;          {activeTab === &quot;pricing&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/10 rounded-2xl p-8 border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-8&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-blue-800 dark:text-blue-300&quot;&gt;&#10;                    Detailed Pricing Breakdown&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;                  {/* Original Order */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-history text-gray-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      Original Order&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.originalSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;{formatPrice(50)}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;&#10;                            {formatPrice(originalOrder.total)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* New Estimated */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      New Estimated&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedDeliveryFee)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold text-blue-600&quot;&gt;&#10;                            {formatPrice(pricing.estimatedTotal)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Comparison Summary */}&#10;                &lt;div className=&quot;mt-8 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 rounded-2xl p-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Price Difference&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference &lt; 0&#10;                          ? &quot;You'll save&quot;&#10;                          : &quot;Additional cost&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-right&quot;&gt;&#10;                      &lt;div&#10;                        className={`text-3xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                      &gt;&#10;                        {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                        {formatPrice(pricing.totalDifference)}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference !== 0 &amp;&amp;&#10;                          `${Math.abs((pricing.totalDifference / originalOrder.total) * 100).toFixed(1)}% ${pricing.totalDifference &lt; 0 ? &quot;less&quot; : &quot;more&quot;}`}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Available Stock Value */}&#10;                &lt;div className=&quot;mt-6 bg-gradient-to-r from-emerald-100 to-green-200 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                        Total Available Stock Value&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        Combined value of all inventory&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Footer */}&#10;        &lt;div className=&quot;bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 border-t border-gray-200 dark:border-gray-700 p-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-between items-center&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    Ready to reorder {summary.availableCount} items&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              {!summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-red-600 dark:text-red-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    No items available for reorder&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;px-8 py-3 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-2xl font-semibold transition-all duration-200 hover:scale-105&quot;&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;&#10;              {summary.availableCount &gt; 0 &amp;&amp; (&#10;                &lt;button&#10;                  onClick={onProceedWithAvailable}&#10;                  disabled={loading}&#10;                  className=&quot;px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-2xl font-semibold transition-all duration-200 disabled:opacity-50 flex items-center space-x-2 hover:scale-105 shadow-lg hover:shadow-xl&quot;&#10;                &gt;&#10;                  {loading &amp;&amp; &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;}&#10;                  &lt;i className=&quot;fas fa-cart-plus&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Add {summary.availableCount} Items&lt;/span&gt;&#10;                  &lt;span className=&quot;bg-white/20 px-2 py-1 rounded-full text-sm&quot;&gt;&#10;                    {formatPrice(pricing.estimatedTotal)}&#10;                  &lt;/span&gt;&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from &quot;react&quot;;&#10;&#10;export default function ReorderModal({&#10;  isOpen,&#10;  onClose,&#10;  validationResult,&#10;  onProceedWithAvailable,&#10;  onProceedWithAll,&#10;  loading,&#10;}) {&#10;  const [showDetails, setShowDetails] = useState(false);&#10;  const [activeTab, setActiveTab] = useState(&quot;summary&quot;);&#10;  const [isVisible, setIsVisible] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isOpen) {&#10;      setIsVisible(true);&#10;    } else {&#10;      setIsVisible(false);&#10;    }&#10;  }, [isOpen]);&#10;&#10;  if (!isOpen || !validationResult) return null;&#10;&#10;  const { summary, validation, pricing, originalOrder } = validationResult;&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const getPriceChangeColor = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;text-red-500&quot;;&#10;    if (change &lt; 0) return &quot;text-emerald-500&quot;;&#10;    return &quot;text-gray-600&quot;;&#10;  };&#10;&#10;  const getPriceChangeIcon = (change) =&gt; {&#10;    if (change &gt; 0) return &quot;fas fa-arrow-up&quot;;&#10;    if (change &lt; 0) return &quot;fas fa-arrow-down&quot;;&#10;    return &quot;fas fa-minus&quot;;&#10;  };&#10;&#10;  // Calculate total value of available stock&#10;  const calculateAvailableStockValue = () =&gt; {&#10;    return validation.availableItems.reduce((total, item) =&gt; {&#10;      return total + item.price * item.stock;&#10;    }, 0);&#10;  };&#10;&#10;  const getStatusColor = (type) =&gt; {&#10;    switch (type) {&#10;      case &quot;available&quot;:&#10;        return &quot;from-emerald-500 to-green-600&quot;;&#10;      case &quot;unavailable&quot;:&#10;        return &quot;from-red-500 to-rose-600&quot;;&#10;      case &quot;price-change&quot;:&#10;        return &quot;from-orange-500 to-amber-600&quot;;&#10;      case &quot;stock-issue&quot;:&#10;        return &quot;from-yellow-500 to-orange-500&quot;;&#10;      default:&#10;        return &quot;from-blue-500 to-indigo-600&quot;;&#10;    }&#10;  };&#10;&#10;  const tabs = [&#10;    { id: &quot;summary&quot;, label: &quot;Summary&quot;, icon: &quot;fas fa-chart-pie&quot; },&#10;    { id: &quot;items&quot;, label: &quot;Items&quot;, icon: &quot;fas fa-boxes&quot; },&#10;    { id: &quot;pricing&quot;, label: &quot;Pricing&quot;, icon: &quot;fas fa-calculator&quot; },&#10;  ];&#10;&#10;  return (&#10;    &lt;div&#10;      className={`fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 transition-all duration-300 ${isVisible ? &quot;opacity-100&quot; : &quot;opacity-0&quot;}`}&#10;    &gt;&#10;      &lt;div&#10;        className={`bg-white dark:bg-gray-900 rounded-3xl w-full max-w-5xl max-h-[90vh] overflow-hidden shadow-2xl border border-gray-200 dark:border-gray-700 transform transition-all duration-300 flex flex-col ${isVisible ? &quot;scale-100 translate-y-0&quot; : &quot;scale-95 translate-y-4&quot;}`}&#10;      &gt;&#10;        {/* Enhanced Header */}&#10;        &lt;div className=&quot;relative bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-700 text-white p-6 flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 bg-black/10&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;relative z-10&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-white/20 rounded-2xl backdrop-blur-sm&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-sync-alt text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold tracking-tight&quot;&gt;&#10;                      Reorder Validation&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-blue-100 text-lg&quot;&gt;&#10;                      Order from{&quot; &quot;}&#10;                      {new Date(originalOrder.orderDate).toLocaleDateString(&#10;                        &quot;en-US&quot;,&#10;                        {&#10;                          weekday: &quot;long&quot;,&#10;                          year: &quot;numeric&quot;,&#10;                          month: &quot;long&quot;,&#10;                          day: &quot;numeric&quot;,&#10;                        },&#10;                      )}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Quick Status Pills */}&#10;                &lt;div className=&quot;flex flex-wrap gap-2 mt-4&quot;&gt;&#10;                  {summary.reorderSuccess &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-emerald-500/20 text-emerald-100 rounded-full text-sm font-medium border border-emerald-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Reorder Available&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.priceChangesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-orange-500/20 text-orange-100 rounded-full text-sm font-medium border border-orange-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-exclamation-triangle mr-1&quot;&gt;&lt;/i&gt;&#10;                      Price Changes&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {summary.stockIssuesCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;px-3 py-1 bg-yellow-500/20 text-yellow-100 rounded-full text-sm font-medium border border-yellow-400/30&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse mr-1&quot;&gt;&lt;/i&gt;&#10;                      Stock Issues&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;p-3 hover:bg-white/20 rounded-2xl transition-all duration-200 group&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-times text-xl group-hover:rotate-90 transition-transform duration-200&quot;&gt;&lt;/i&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Tab Navigation */}&#10;        &lt;div className=&quot;bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex space-x-1 p-2&quot;&gt;&#10;            {tabs.map((tab) =&gt; (&#10;              &lt;button&#10;                key={tab.id}&#10;                onClick={() =&gt; setActiveTab(tab.id)}&#10;                className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${&#10;                  activeTab === tab.id&#10;                    ? &quot;bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-md border border-blue-200 dark:border-blue-800&quot;&#10;                    : &quot;text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-white/50 dark:hover:bg-gray-700/50&quot;&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`${tab.icon} text-sm`}&gt;&lt;/i&gt;&#10;                &lt;span&gt;{tab.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Content */}&#10;        &lt;div className=&quot;p-6 overflow-y-auto flex-1 min-h-0&quot;&gt;&#10;          {/* Summary Tab */}&#10;          {activeTab === &quot;summary&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-8&quot;&gt;&#10;              {/* Enhanced Summary Cards */}&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-emerald-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        {summary.availableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-emerald-600 dark:text-emerald-400 text-sm&quot;&gt;&#10;                      Ready for reorder&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/30 dark:to-rose-900/20 rounded-2xl p-6 border border-red-200 dark:border-red-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-red-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-red-600 dark:text-red-400&quot;&gt;&#10;                        {summary.unavailableCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-red-800 dark:text-red-300&quot;&gt;&#10;                      Unavailable&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm&quot;&gt;&#10;                      Currently out of stock&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/30 dark:to-amber-900/20 rounded-2xl p-6 border border-orange-200 dark:border-orange-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-orange-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-orange-600 dark:text-orange-400&quot;&gt;&#10;                        {summary.priceChangesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                      Price Changes&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-orange-600 dark:text-orange-400 text-sm&quot;&gt;&#10;                      Updated pricing&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;relative overflow-hidden bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/20 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800 group hover:shadow-lg transition-all duration-300&quot;&gt;&#10;                  &lt;div className=&quot;absolute top-0 right-0 w-20 h-20 bg-yellow-500/10 rounded-full -mr-10 -mt-10&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                      &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;text-3xl font-bold text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                        {summary.stockIssuesCount}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;font-semibold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                      Stock Issues&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm&quot;&gt;&#10;                      Limited availability&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Price Comparison */}&#10;              &lt;div className=&quot;bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-8 border border-gray-200 dark:border-gray-700 shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                    Price Comparison&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Original Total&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-receipt text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                      {formatPrice(originalOrder.total)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Previous order&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        New Estimated&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-blue-600 dark:text-blue-400&quot;&gt;&#10;                      {formatPrice(pricing.estimatedTotal)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Current pricing&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Difference&#10;                      &lt;/span&gt;&#10;                      &lt;i&#10;                        className={`${getPriceChangeIcon(pricing.totalDifference)} text-gray-400`}&#10;                      &gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`text-2xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                    &gt;&#10;                      {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                      {formatPrice(pricing.totalDifference)}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {pricing.totalDifference &lt; 0&#10;                        ? &quot;You save&quot;&#10;                        : &quot;Additional cost&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                      &lt;span className=&quot;text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                        Stock Value&#10;                      &lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-warehouse text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-1&quot;&gt;&#10;                      Total inventory value&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Items Tab */}&#10;          {activeTab === &quot;items&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {/* Available Items */}&#10;              {validation.availableItems.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-gradient-to-br from-emerald-50 to-green-100 dark:from-emerald-900/20 dark:to-green-900/10 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-3 bg-emerald-500/20 rounded-xl&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-check-circle text-emerald-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h4 className=&quot;text-xl font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                      Available Items ({validation.availableItems.length})&#10;                    &lt;/h4&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    {validation.availableItems.map((item, index) =&gt; (&#10;                      &lt;div&#10;                        key={index}&#10;                        className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-emerald-200 dark:border-emerald-800 hover:shadow-md transition-shadow&quot;&#10;                      &gt;&#10;                        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                          &lt;img&#10;                            src={&#10;                              item.image ||&#10;                              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=60&amp;h=60&amp;fit=crop&quot;&#10;                            }&#10;                            alt={item.productName}&#10;                            className=&quot;w-16 h-16 rounded-xl object-cover border border-gray-200 dark:border-gray-700&quot;&#10;                          /&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                              {item.productName}&#10;                            &lt;/h5&gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4 mt-2 text-sm&quot;&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Qty:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Stock:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium text-emerald-600&quot;&gt;&#10;                                  {item.stock}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                              &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                Price:{&quot; &quot;}&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {formatPrice(item.price)}&#10;                                &lt;/span&gt;&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Issue Items */}&#10;              {(validation.unavailableItems.length &gt; 0 ||&#10;                validation.priceChanges.length &gt; 0 ||&#10;                validation.stockIssues.length &gt; 0) &amp;&amp; (&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Unavailable Items */}&#10;                  {validation.unavailableItems.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-red-50 to-rose-100 dark:from-red-900/20 dark:to-rose-900/10 rounded-2xl p-6 border border-red-200 dark:border-red-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-red-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-times-circle text-red-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-red-800 dark:text-red-300&quot;&gt;&#10;                          Unavailable Items (&#10;                          {validation.unavailableItems.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.unavailableItems.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-red-200 dark:border-red-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-red-600 dark:text-red-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Qty: {item.quantity}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Price Changes */}&#10;                  {validation.priceChanges.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-orange-50 to-amber-100 dark:from-orange-900/20 dark:to-amber-900/10 rounded-2xl p-6 border border-orange-200 dark:border-orange-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-orange-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exchange-alt text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-orange-800 dark:text-orange-300&quot;&gt;&#10;                          Price Changes ({validation.priceChanges.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.priceChanges.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-orange-200 dark:border-orange-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-sm mt-1&quot;&gt;&#10;                                  Was {formatPrice(item.originalPrice)} → Now{&quot; &quot;}&#10;                                  {formatPrice(item.currentPrice)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span&#10;                                  className={`text-sm font-semibold ${getPriceChangeColor(item.priceDifference)}`}&#10;                                &gt;&#10;                                  {item.priceDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                                  {item.priceChangePercent}%&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Stock Issues */}&#10;                  {validation.stockIssues.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;bg-gradient-to-br from-yellow-50 to-orange-100 dark:from-yellow-900/20 dark:to-orange-900/10 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                        &lt;div className=&quot;p-3 bg-yellow-500/20 rounded-xl&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-exclamation-triangle text-yellow-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h4 className=&quot;text-xl font-bold text-yellow-800 dark:text-yellow-300&quot;&gt;&#10;                          Stock Issues ({validation.stockIssues.length})&#10;                        &lt;/h4&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {validation.stockIssues.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;bg-white dark:bg-gray-800 rounded-xl p-4 border border-yellow-200 dark:border-yellow-800&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-yellow-600 dark:text-yellow-400 text-sm mt-1&quot;&gt;&#10;                                  {item.reason}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;div&gt;Wanted: {item.requestedQuantity}&lt;/div&gt;&#10;                                &lt;div&gt;Available: {item.availableStock}&lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pricing Tab */}&#10;          {activeTab === &quot;pricing&quot; &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/10 rounded-2xl p-8 border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-3 mb-8&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-blue-500/20 rounded-xl&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-calculator text-blue-600 text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;h4 className=&quot;text-2xl font-bold text-blue-800 dark:text-blue-300&quot;&gt;&#10;                    Detailed Pricing Breakdown&#10;                  &lt;/h4&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;                  {/* Original Order */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-history text-gray-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      Original Order&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.originalSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;{formatPrice(50)}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;&#10;                            {formatPrice(originalOrder.total)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* New Estimated */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;h5 className=&quot;text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;                      New Estimated&#10;                    &lt;/h5&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Subtotal:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedSubtotal)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Delivery Fee:&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;font-semibold&quot;&gt;&#10;                          {formatPrice(pricing.estimatedDeliveryFee)}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between py-2&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold&quot;&gt;Total:&lt;/span&gt;&#10;                          &lt;span className=&quot;text-lg font-bold text-blue-600&quot;&gt;&#10;                            {formatPrice(pricing.estimatedTotal)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Comparison Summary */}&#10;                &lt;div className=&quot;mt-8 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 rounded-2xl p-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Price Difference&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference &lt; 0&#10;                          ? &quot;You'll save&quot;&#10;                          : &quot;Additional cost&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-right&quot;&gt;&#10;                      &lt;div&#10;                        className={`text-3xl font-bold ${getPriceChangeColor(pricing.totalDifference)}`}&#10;                      &gt;&#10;                        {pricing.totalDifference &gt; 0 ? &quot;+&quot; : &quot;&quot;}&#10;                        {formatPrice(pricing.totalDifference)}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {pricing.totalDifference !== 0 &amp;&amp;&#10;                          `${Math.abs((pricing.totalDifference / originalOrder.total) * 100).toFixed(1)}% ${pricing.totalDifference &lt; 0 ? &quot;less&quot; : &quot;more&quot;}`}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Available Stock Value */}&#10;                &lt;div className=&quot;mt-6 bg-gradient-to-r from-emerald-100 to-green-200 dark:from-emerald-900/30 dark:to-green-900/20 rounded-2xl p-6 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h6 className=&quot;text-lg font-bold text-emerald-800 dark:text-emerald-300&quot;&gt;&#10;                        Total Available Stock Value&#10;                      &lt;/h6&gt;&#10;                      &lt;p className=&quot;text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                        Combined value of all inventory&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-3xl font-bold text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                      {formatPrice(calculateAvailableStockValue())}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Footer */}&#10;        &lt;div className=&quot;bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 border-t border-gray-200 dark:border-gray-700 p-6 flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-between items-center&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-emerald-600 dark:text-emerald-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    Ready to reorder {summary.availableCount} items&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              {!summary.reorderSuccess &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2 text-red-600 dark:text-red-400&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                    No items available for reorder&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={onClose}&#10;                className=&quot;px-8 py-3 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-2xl font-semibold transition-all duration-200 hover:scale-105&quot;&#10;              &gt;&#10;                Cancel&#10;              &lt;/button&gt;&#10;&#10;              {summary.availableCount &gt; 0 &amp;&amp; (&#10;                &lt;button&#10;                  onClick={onProceedWithAvailable}&#10;                  disabled={loading}&#10;                  className=&quot;px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-2xl font-semibold transition-all duration-200 disabled:opacity-50 flex items-center space-x-2 hover:scale-105 shadow-lg hover:shadow-xl&quot;&#10;                &gt;&#10;                  {loading &amp;&amp; &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;}&#10;                  &lt;i className=&quot;fas fa-cart-plus&quot;&gt;&lt;/i&gt;&#10;                  &lt;span&gt;Add {summary.availableCount} Items&lt;/span&gt;&#10;                  &lt;span className=&quot;bg-white/20 px-2 py-1 rounded-full text-sm&quot;&gt;&#10;                    {formatPrice(pricing.estimatedTotal)}&#10;                  &lt;/span&gt;&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hooks/useReorder.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hooks/useReorder.js" />
              <option name="originalContent" value="import { useState, useCallback } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;&#10;export function useReorder() {&#10;  const [loading, setLoading] = useState(false);&#10;  const [validationResult, setValidationResult] = useState(null);&#10;  const [showReorderModal, setShowReorderModal] = useState(false);&#10;  const router = useRouter();&#10;  const { addToCart } = useCart(); // Use addToCart instead of addMultipleToCart&#10;&#10;  const validateReorder = useCallback(async (orderId, userId) =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const response = await fetch(`/api/orders/${orderId}/reorder`, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ userId }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error(&quot;Failed to validate reorder&quot;);&#10;      }&#10;&#10;      const result = await response.json();&#10;      setValidationResult(result);&#10;&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;      */&#10;      */&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Always show modal for testing purposes&#10;      // Comment out the auto-proceed logic below:&#10;      // Always show modal for testing purposes&#10;&#10;      // Always show modal for testing purposes&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      // Always show modal for testing purposes&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;      */&#10;&#10;      /*&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;      // Always show modal for testing purposes&#10;&#10;      // Always show modal for testing purposes&#10;      // Temporarily disable auto-proceed to always show modal for testing&#10;      // Comment out the auto-proceed logic below:&#10;&#10;      /*&#10;      // Auto-proceed if everything is available and no price changes&#10;      if (&#10;        result.summary.fullReorderPossible &amp;&amp;&#10;      // Always show modal for testing purposes&#10;      ) {&#10;        return await proceedWithReorder(&#10;      */&#10;          result.validation.availableItems,&#10;          false,&#10;        );&#10;      }&#10;      */&#10;&#10;      // Always show modal for testing purposes&#10;      setShowReorderModal(true);&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;Reorder validation failed:&quot;, error);&#10;      throw error;&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  const proceedWithReorder = useCallback(&#10;    async (items, showConfirmation = true) =&gt; {&#10;      try {&#10;        if (!items || items.length === 0) {&#10;          throw new Error(&quot;No items available for reorder&quot;);&#10;        }&#10;&#10;        // Add items to cart one by one using the existing addToCart function&#10;        let successCount = 0;&#10;        for (const item of items) {&#10;          const cartItem = {&#10;            id: item.productId,&#10;            productId: item.productId,&#10;            name: item.productName,&#10;            productName: item.productName,&#10;            price: item.price,&#10;            farmerId: item.farmerId,&#10;            farmerName: item.farmerName,&#10;            image: item.image,&#10;            stock: item.stock,&#10;            category: item.category,&#10;          };&#10;&#10;          const success = await addToCart(cartItem, item.quantity);&#10;          if (success) {&#10;            successCount++;&#10;          }&#10;        }&#10;&#10;        if (showConfirmation) {&#10;          // Show success notification&#10;          const message = `Successfully added ${successCount} item${&#10;            successCount &gt; 1 ? &quot;s&quot; : &quot;&quot;&#10;          } to your cart!`;&#10;          alert(message); // Replace with your notification system&#10;        }&#10;&#10;        // Close modal and redirect&#10;        setShowReorderModal(false);&#10;        setValidationResult(null);&#10;        router.push(&quot;/cart&quot;);&#10;&#10;        return { success: true, itemsAdded: successCount };&#10;      } catch (error) {&#10;        console.error(&quot;Failed to add reorder items to cart:&quot;, error);&#10;        throw error;&#10;      }&#10;    },&#10;    [addToCart, router],&#10;  );&#10;&#10;  const cancelReorder = useCallback(() =&gt; {&#10;    setShowReorderModal(false);&#10;    setValidationResult(null);&#10;  }, []);&#10;&#10;  // Helper function to handle partial reorder (only available items)&#10;  const proceedWithAvailableItems = useCallback(() =&gt; {&#10;    if (validationResult?.validation.availableItems) {&#10;      return proceedWithReorder(validationResult.validation.availableItems);&#10;    }&#10;  }, [validationResult, proceedWithReorder]);&#10;&#10;  // Helper function to get reorder status summary&#10;  const getReorderSummary = useCallback((result) =&gt; {&#10;    if (!result) return null;&#10;&#10;    const { summary, validation } = result;&#10;&#10;    return {&#10;      canReorder: summary.reorderSuccess,&#10;      isFullReorder: summary.fullReorderPossible,&#10;      availableItems: summary.availableCount,&#10;      totalItems: summary.totalOriginalItems,&#10;      issues: {&#10;        unavailable: summary.unavailableCount,&#10;        priceChanges: summary.priceChangesCount,&#10;        stockIssues: summary.stockIssuesCount,&#10;        farmerIssues: summary.farmerIssuesCount,&#10;      },&#10;      pricing: result.pricing,&#10;      items: validation,&#10;    };&#10;  }, []);&#10;&#10;  return {&#10;    loading,&#10;    validationResult,&#10;    showReorderModal,&#10;    validateReorder,&#10;    proceedWithReorder,&#10;    proceedWithAvailableItems,&#10;    cancelReorder,&#10;    getReorderSummary,&#10;    setShowReorderModal,&#10;  };&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useCallback } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;&#10;export function useReorder() {&#10;  const [loading, setLoading] = useState(false);&#10;  const [validationResult, setValidationResult] = useState(null);&#10;  const [showReorderModal, setShowReorderModal] = useState(false);&#10;  const router = useRouter();&#10;  const { addToCart } = useCart(); // Use addToCart instead of addMultipleToCart&#10;&#10;  const validateReorder = useCallback(async (orderId, userId) =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const response = await fetch(`/api/orders/${orderId}/reorder`, {&#10;        method: &quot;POST&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify({ userId }),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error(&quot;Failed to validate reorder&quot;);&#10;      }&#10;&#10;      const result = await response.json();&#10;      setValidationResult(result);&#10;&#10;      // Auto-proceed if everything is available and no price changes&#10;      if (&#10;        result.summary.fullReorderPossible &amp;&amp;&#10;        result.summary.priceChangesCount === 0&#10;      ) {&#10;        return await proceedWithReorder(&#10;          result.validation.availableItems,&#10;          false,&#10;        );&#10;      }&#10;&#10;      // Show modal for cases that need user attention&#10;      setShowReorderModal(true);&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;Reorder validation failed:&quot;, error);&#10;      throw error;&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  const proceedWithReorder = useCallback(&#10;    async (items, showConfirmation = true) =&gt; {&#10;      try {&#10;        if (!items || items.length === 0) {&#10;          throw new Error(&quot;No items available for reorder&quot;);&#10;        }&#10;&#10;        // Add items to cart one by one using the existing addToCart function&#10;        let successCount = 0;&#10;        for (const item of items) {&#10;          const cartItem = {&#10;            id: item.productId,&#10;            productId: item.productId,&#10;            name: item.productName,&#10;            productName: item.productName,&#10;            price: item.price,&#10;            farmerId: item.farmerId,&#10;            farmerName: item.farmerName,&#10;            image: item.image,&#10;            stock: item.stock,&#10;            category: item.category,&#10;          };&#10;&#10;          const success = await addToCart(cartItem, item.quantity);&#10;          if (success) {&#10;            successCount++;&#10;          }&#10;        }&#10;&#10;        if (showConfirmation) {&#10;          // Show success notification&#10;          const message = `Successfully added ${successCount} item${&#10;            successCount &gt; 1 ? &quot;s&quot; : &quot;&quot;&#10;          } to your cart!`;&#10;          alert(message); // Replace with your notification system&#10;        }&#10;&#10;        // Close modal and redirect&#10;        setShowReorderModal(false);&#10;        setValidationResult(null);&#10;        router.push(&quot;/cart&quot;);&#10;&#10;        return { success: true, itemsAdded: successCount };&#10;      } catch (error) {&#10;        console.error(&quot;Failed to add reorder items to cart:&quot;, error);&#10;        throw error;&#10;      }&#10;    },&#10;    [addToCart, router],&#10;  );&#10;&#10;  const cancelReorder = useCallback(() =&gt; {&#10;    setShowReorderModal(false);&#10;    setValidationResult(null);&#10;  }, []);&#10;&#10;  // Helper function to handle partial reorder (only available items)&#10;  const proceedWithAvailableItems = useCallback(() =&gt; {&#10;    if (validationResult?.validation.availableItems) {&#10;      return proceedWithReorder(validationResult.validation.availableItems);&#10;    }&#10;  }, [validationResult, proceedWithReorder]);&#10;&#10;  // Helper function to get reorder status summary&#10;  const getReorderSummary = useCallback((result) =&gt; {&#10;    if (!result) return null;&#10;&#10;    const { summary, validation } = result;&#10;&#10;    return {&#10;      canReorder: summary.reorderSuccess,&#10;      isFullReorder: summary.fullReorderPossible,&#10;      availableItems: summary.availableCount,&#10;      totalItems: summary.totalOriginalItems,&#10;      issues: {&#10;        unavailable: summary.unavailableCount,&#10;        priceChanges: summary.priceChangesCount,&#10;        stockIssues: summary.stockIssuesCount,&#10;        farmerIssues: summary.farmerIssuesCount,&#10;      },&#10;      pricing: result.pricing,&#10;      items: validation,&#10;    };&#10;  }, []);&#10;&#10;  return {&#10;    loading,&#10;    validationResult,&#10;    showReorderModal,&#10;    validateReorder,&#10;    proceedWithReorder,&#10;    proceedWithAvailableItems,&#10;    cancelReorder,&#10;    getReorderSummary,&#10;    setShowReorderModal,&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/reviewUtils.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/reviewUtils.js" />
              <option name="originalContent" value="/**&#10; * Calculate average rating and review count from reviews array&#10; * @param {Array} reviews - Array of review objects with rating property&#10; * @returns {Object} - Object containing averageRating and reviewCount&#10; */&#10;export function calculateRatingStats(reviews) {&#10;  if (!reviews || !Array.isArray(reviews) || reviews.length === 0) {&#10;    return {&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;    };&#10;  }&#10;&#10;  const totalRating = reviews.reduce((sum, review) =&gt; {&#10;    const rating = Number(review.rating);&#10;    return sum + (isNaN(rating) ? 0 : rating);&#10;  }, 0);&#10;&#10;  const averageRating = Math.round((totalRating / reviews.length) * 10) / 10;&#10;&#10;  return {&#10;    averageRating: averageRating,&#10;    reviewCount: reviews.length,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance product data with calculated rating statistics&#10; * @param {Object} product - Product object&#10; * @returns {Object} - Enhanced product object with calculated ratings&#10; */&#10;export function enhanceProductWithRatings(product) {&#10;  const { averageRating, reviewCount } = calculateRatingStats(product.reviews);&#10;&#10;  return {&#10;    ...product,&#10;    averageRating,&#10;    reviewCount: reviewCount,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance multiple products with calculated rating statistics from database&#10; * @param {Array} products - Array of product objects&#10; * @param {Object} db - MongoDB database instance&#10; * @returns {Array} - Array of enhanced product objects&#10; */&#10;export async function enhanceProductsWithRatings(products, db) {&#10;  if (!Array.isArray(products) || products.length === 0) {&#10;    return [];&#10;  }&#10;&#10;  try {&#10;    // Get product IDs for fetching reviews from the reviews collection&#10;    const productIds = products.map((product) =&gt;&#10;      typeof product._id === &quot;string&quot; ? new ObjectId(product._id) : product._id,&#10;&#10;    // Aggregate review statistics for all products from the reviews collection&#10;    const reviewStats = await reviewsCollection&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: &quot;$productId&quot;,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            reviewCount: { $sum: 1 },&#10;            totalReviews: { $sum: 1 },&#10;            productId: { $in: productIds },&#10;      .toArray();&#10;&#10;    // Create a map for quick lookup of reviews collection data&#10;    const reviewsCollectionStatsMap = new Map();&#10;    reviewStats.forEach((stat) =&gt; {&#10;      const productIdStr = stat._id.toString();&#10;      reviewsCollectionStatsMap.set(productIdStr, {&#10;        averageRating: Math.round(stat.averageRating * 10) / 10, // Round to 1 decimal&#10;        reviewCount: stat.reviewCount,&#10;        totalReviews: stat.totalReviews,&#10;        totalRatings: stat.reviewCount, // For compatibility&#10;      });&#10;    });&#10;&#10;    // Get full product documents to check for embedded reviews&#10;    const fullProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;      const productIdStr = stat._id.toString();&#10;      .toArray();&#10;&#10;    // Create a map of full product data for easy lookup&#10;    const fullProductMap = {};&#10;        averageRating: Math.round(stat.averageRating * 10) / 10, // Round to 1 decimal&#10;      fullProductMap[product._id.toString()] = product;&#10;    });&#10;&#10;    // Enhance each product with review data from BOTH sources&#10;        totalRatings: stat.reviewCount, // For compatibility&#10;      const productIdStr =&#10;        typeof product._id === &quot;string&quot; ? product._id : product._id.toString();&#10;&#10;      // First, check reviews collection stats&#10;      const reviewsCollectionStats =&#10;        reviewsCollectionStatsMap.get(productIdStr);&#10;&#10;      // Then check for embedded reviews in product document&#10;      const fullProduct = fullProductMap[productIdStr];&#10;      let embeddedReviewsStats = null;&#10;&#10;      if (&#10;        fullProduct &amp;&amp;&#10;        fullProduct.reviews &amp;&amp;&#10;        Array.isArray(fullProduct.reviews) &amp;&amp;&#10;        fullProduct.reviews.length &gt; 0&#10;      ) {&#10;        const { averageRating, reviewCount } = calculateRatingStats(&#10;          fullProduct.reviews,&#10;        );&#10;        embeddedReviewsStats = {&#10;          averageRating,&#10;          reviewCount,&#10;          totalReviews: reviewCount,&#10;          totalRatings: reviewCount,&#10;        };&#10;      }&#10;&#10;      // Use reviews collection data if available, otherwise use embedded reviews, otherwise default to 0&#10;      let finalStats;&#10;      if (reviewsCollectionStats) {&#10;        // Prefer reviews collection data (for new products)&#10;        finalStats = reviewsCollectionStats;&#10;      } else if (embeddedReviewsStats) {&#10;        // Fall back to embedded reviews (for old hardcoded products)&#10;        finalStats = embeddedReviewsStats;&#10;      } else {&#10;        // No reviews found in either location&#10;        finalStats = {&#10;          averageRating: 0,&#10;          reviewCount: 0,&#10;          totalRatings: 0,&#10;          totalReviews: 0,&#10;        };&#10;      }&#10;&#10;      return {&#10;        ...product,&#10;        ...finalStats,&#10;      };&#10;    });&#10;&#10;    return enhancedProducts;&#10;  } catch (error) {&#10;    console.error(&quot;Error enhancing products with ratings:&quot;, error);&#10;    // Return products with default rating values if enhancement fails&#10;    return products.map((product) =&gt; ({&#10;      ...product,&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;      totalRatings: 0,&#10;      totalReviews: 0,&#10;    }));&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * Calculate average rating and review count from reviews array&#10; * @param {Array} reviews - Array of review objects with rating property&#10; * @returns {Object} - Object containing averageRating and reviewCount&#10; */&#10;export function calculateRatingStats(reviews) {&#10;  if (!reviews || !Array.isArray(reviews) || reviews.length === 0) {&#10;    return {&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;    };&#10;  }&#10;&#10;  const totalRating = reviews.reduce((sum, review) =&gt; {&#10;    const rating = Number(review.rating);&#10;    return sum + (isNaN(rating) ? 0 : rating);&#10;  }, 0);&#10;&#10;  const averageRating = Math.round((totalRating / reviews.length) * 10) / 10;&#10;&#10;  return {&#10;    averageRating: averageRating,&#10;    reviewCount: reviews.length,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance product data with calculated rating statistics&#10; * @param {Object} product - Product object&#10; * @returns {Object} - Enhanced product object with calculated ratings&#10; */&#10;export function enhanceProductWithRatings(product) {&#10;  const { averageRating, reviewCount } = calculateRatingStats(product.reviews);&#10;&#10;  return {&#10;    ...product,&#10;    averageRating,&#10;    reviewCount: reviewCount,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance multiple products with calculated rating statistics from database&#10; * @param {Array} products - Array of product objects&#10; * @param {Object} db - MongoDB database instance&#10; * @returns {Array} - Array of enhanced product objects&#10; */&#10;export async function enhanceProductsWithRatings(products, db) {&#10;  if (!Array.isArray(products) || products.length === 0) {&#10;    return [];&#10;  }&#10;&#10;  try {&#10;    // Get product IDs for fetching reviews from the reviews collection&#10;    const productIds = products.map((product) =&gt; product._id);&#10;    const productIdStrings = productIds.map((id) =&gt;&#10;      typeof id === &quot;string&quot; ? id : id.toString(),&#10;    );&#10;    const productIdObjects = productIds.map((id) =&gt;&#10;      typeof id === &quot;string&quot; ? new ObjectId(id) : id,&#10;    );&#10;&#10;    // Fetch reviews from the separate reviews collection&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;&#10;    // Aggregate review statistics for all products from the reviews collection&#10;    // Use flexible matching to handle both string and ObjectId productId formats&#10;    const reviewStats = await reviewsCollection&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: { $in: productIdStrings } }, // Match string IDs&#10;              { productId: { $in: productIdObjects } }, // Match ObjectId IDs&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: &quot;$productId&quot;,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            reviewCount: { $sum: 1 },&#10;            totalReviews: { $sum: 1 },&#10;            ratings: { $push: &quot;$rating&quot; },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Create a map for quick lookup of reviews collection data&#10;    const reviewsCollectionStatsMap = new Map();&#10;    reviewStats.forEach((stat) =&gt; {&#10;      // Convert both string and ObjectId to string for consistent lookup&#10;      const productIdStr =&#10;        typeof stat._id === &quot;string&quot; ? stat._id : stat._id.toString();&#10;      reviewsCollectionStatsMap.set(productIdStr, {&#10;        averageRating: Math.round(stat.averageRating * 10) / 10,&#10;        reviewCount: stat.reviewCount,&#10;        totalReviews: stat.totalReviews,&#10;        totalRatings: stat.reviewCount,&#10;      });&#10;    });&#10;&#10;    // Get full product documents to check for embedded reviews&#10;    const fullProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        _id: { $in: productIds },&#10;        status: { $ne: &quot;deleted&quot; },&#10;      })&#10;      .toArray();&#10;&#10;    // Create a map of full product data for easy lookup&#10;    const fullProductMap = {};&#10;    fullProducts.forEach((product) =&gt; {&#10;      fullProductMap[product._id.toString()] = product;&#10;    });&#10;&#10;    // Enhance each product with review data from BOTH sources&#10;    const enhancedProducts = products.map((product) =&gt; {&#10;      const productIdStr =&#10;        typeof product._id === &quot;string&quot; ? product._id : product._id.toString();&#10;&#10;      // First, check reviews collection stats&#10;      const reviewsCollectionStats =&#10;        reviewsCollectionStatsMap.get(productIdStr);&#10;&#10;      // Then check for embedded reviews in product document&#10;      const fullProduct = fullProductMap[productIdStr];&#10;      let embeddedReviewsStats = null;&#10;&#10;      if (&#10;        fullProduct &amp;&amp;&#10;        fullProduct.reviews &amp;&amp;&#10;        Array.isArray(fullProduct.reviews) &amp;&amp;&#10;        fullProduct.reviews.length &gt; 0&#10;      ) {&#10;        const { averageRating, reviewCount } = calculateRatingStats(&#10;          fullProduct.reviews,&#10;        );&#10;        embeddedReviewsStats = {&#10;          averageRating,&#10;          reviewCount,&#10;          totalReviews: reviewCount,&#10;          totalRatings: reviewCount,&#10;        };&#10;      }&#10;&#10;      // Use reviews collection data if available, otherwise use embedded reviews, otherwise default to 0&#10;      let finalStats;&#10;      if (reviewsCollectionStats) {&#10;        // Prefer reviews collection data (for new products)&#10;        finalStats = reviewsCollectionStats;&#10;      } else if (embeddedReviewsStats) {&#10;        // Fall back to embedded reviews (for old hardcoded products)&#10;        finalStats = embeddedReviewsStats;&#10;      } else {&#10;        // No reviews found in either location&#10;        finalStats = {&#10;          averageRating: 0,&#10;          reviewCount: 0,&#10;          totalRatings: 0,&#10;          totalReviews: 0,&#10;        };&#10;      }&#10;&#10;      return {&#10;        ...product,&#10;        ...finalStats,&#10;      };&#10;    });&#10;&#10;    return enhancedProducts;&#10;  } catch (error) {&#10;    console.error(&quot;Error enhancing products with ratings:&quot;, error);&#10;    // Return products with default rating values if enhancement fails&#10;    return products.map((product) =&gt; ({&#10;      ...product,&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;      totalRatings: 0,&#10;      totalReviews: 0,&#10;    }));&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/migrate-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/migrate-farmers.js" />
              <option name="updatedContent" value="// Script to migrate farmers from users collection to farmers collection&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function migrateFarmers() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;✅ Migration completed!&quot;);&#10;    &#10;    // Show final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    console.log(` Total farmers in collection: ${totalFarmers}`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Migration error:&quot;, error);&#10;  }&#10;}&#10;&#10;migrateFarmers();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js" />
              <option name="updatedContent" value="// MongoDB Atlas Performance Optimization Script&#10;// Run this script to create optimized indexes for better Atlas performance&#10;&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function createAtlasOptimizedIndexes() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log(&quot; Starting MongoDB Atlas index optimization...&quot;);&#10;&#10;    // Products Collection - Optimized for products page performance&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    console.log(&quot; Optimizing products collection indexes...&quot;);&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, category: 1, featured: 1, createdAt: -1 },&#10;      { name: &quot;products_main_query_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, featured: 1, averageRating: -1 },&#10;      { name: &quot;products_featured_rating_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, price: 1 },&#10;      { name: &quot;products_price_filter_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, purchaseCount: -1 },&#10;      { name: &quot;products_popularity_idx&quot;, background: true }&#10;    );&#10;&#10;    // Orders Collection - Optimized for farmer dashboard and orders pages&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    console.log(&quot; Optimizing orders collection indexes...&quot;);&#10;    &#10;    // Critical farmer query indexes&#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_orders_main_idx&quot;, background: true }&#10;    );&#10;    &#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_email_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Customer order indexes&#10;    await ordersCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;customer_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Status filtering&#10;    await ordersCollection.createIndex(&#10;      { status: 1, createdAt: -1 },&#10;      { name: &quot;status_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Reviews Collection - For faster review loading&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    console.log(&quot;⭐ Optimizing reviews collection indexes...&quot;);&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { productId: 1, createdAt: -1 },&#10;      { name: &quot;product_reviews_idx&quot;, background: true }&#10;    );&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_product_review_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    // Favorites Collection - For user favorites&#10;    const favoritesCollection = db.collection(&quot;favorites&quot;);&#10;    console.log(&quot;❤️ Optimizing favorites collection indexes...&quot;);&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_favorites_idx&quot;, background: true, unique: true }&#10;    );&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;user_favorites_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Carts Collection - For cart operations&#10;    const cartsCollection = db.collection(&quot;carts&quot;);&#10;    console.log(&quot; Optimizing carts collection indexes...&quot;);&#10;    &#10;    await cartsCollection.createIndex(&#10;      { userId: 1 },&#10;      { name: &quot;user_cart_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    console.log(&quot;✅ Atlas optimization complete!&quot;);&#10;    console.log(&quot; Performance improvements applied for:&quot;);&#10;    console.log(&quot;   • Products page - faster filtering and sorting&quot;);&#10;    console.log(&quot;   • Farmer dashboard - optimized order queries&quot;);&#10;    console.log(&quot;   • Farmer orders page - improved farmer-specific queries&quot;);&#10;    console.log(&quot;   • Reviews and favorites - faster user interactions&quot;);&#10;    &#10;    return true;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error optimizing indexes:&quot;, error);&#10;    return false;&#10;  }&#10;}&#10;&#10;// Atlas-specific query optimization hints&#10;async function optimizeAtlasQueries() {&#10;  console.log(&quot; Applying Atlas-specific optimizations...&quot;);&#10;  &#10;  const client = await clientPromise;&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;  &#10;  // Enable collection-level read preferences for better performance&#10;  const collections = ['products', 'orders', 'reviews', 'favorites', 'carts'];&#10;  &#10;  for (const collectionName of collections) {&#10;    const collection = db.collection(collectionName);&#10;    &#10;    // Set read preference to secondary for read-heavy operations&#10;    collection.readPreference = 'secondaryPreferred';&#10;    &#10;    console.log(` Optimized read preference for ${collectionName}`);&#10;  }&#10;  &#10;  console.log(&quot;✅ Query optimizations applied!&quot;);&#10;}&#10;&#10;// Main execution function&#10;async function main() {&#10;  console.log(&quot; MongoDB Atlas Performance Optimization&quot;);&#10;  console.log(&quot;=========================================&quot;);&#10;  &#10;  const indexSuccess = await createAtlasOptimizedIndexes();&#10;  &#10;  if (indexSuccess) {&#10;    await optimizeAtlasQueries();&#10;    console.log(&quot; Your FarmFresh app is now optimized for Atlas!&quot;);&#10;    console.log(&quot; Expected performance improvements:&quot;);&#10;    console.log(&quot;   • Products page: 60-80% faster&quot;);&#10;    console.log(&quot;   • Farmer dashboard: 70-90% faster&quot;); &#10;    console.log(&quot;   • Order queries: 50-70% faster&quot;);&#10;  } else {&#10;    console.log(&quot;❌ Optimization failed. Check your MongoDB connection.&quot;);&#10;  }&#10;}&#10;&#10;// Run if called directly&#10;if (import.meta.url === `file://${process.argv[1]}`) {&#10;  main().catch(console.error);&#10;}&#10;&#10;export { createAtlasOptimizedIndexes, optimizeAtlasQueries };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>