<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/farmer-orders/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/farmer-orders/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useRef } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;&#10;export default function FarmerOrders() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;  const [orders, setOrders] = useState([]);&#10;  const [filteredOrders, setFilteredOrders] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [statusFilter, setStatusFilter] = useState(&quot;All Orders&quot;);&#10;  const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [refreshing, setRefreshing] = useState(false);&#10;&#10;  // Enhanced state for new features&#10;  const [selectedOrders, setSelectedOrders] = useState([]);&#10;  const [viewMode, setViewMode] = useState('detailed'); // 'detailed', 'compact', 'timeline'&#10;  const [sortBy, setSortBy] = useState('newest');&#10;  const [dateRange, setDateRange] = useState({ start: '', end: '' });&#10;  const [priceRange, setPriceRange] = useState({ min: '', max: '' });&#10;  const [showAnalytics, setShowAnalytics] = useState(false);&#10;  const [showExportModal, setShowExportModal] = useState(false);&#10;  const [notifications, setNotifications] = useState([]);&#10;  const [autoRefresh, setAutoRefresh] = useState(false);&#10;  const [expandedOrders, setExpandedOrders] = useState(new Set());&#10;  const [customerFilter, setCustomerFilter] = useState('');&#10;  const intervalRef = useRef(null);&#10;&#10;  const ordersPerPage = viewMode === 'compact' ? 20 : 10;&#10;&#10;  // Memoize the filterOrders function to prevent infinite re-renders&#10;  const filterOrders = useCallback(() =&gt; {&#10;    let filtered = [...orders];&#10;&#10;    // Apply status filter&#10;    if (statusFilter !== &quot;All Orders&quot;) {&#10;      filtered = filtered.filter(&#10;        (order) =&gt; order.status.toLowerCase() === statusFilter.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    // Apply search filter&#10;    if (searchTerm) {&#10;      const searchRegex = new RegExp(searchTerm, &quot;i&quot;);&#10;      filtered = filtered.filter((order) =&gt; {&#10;        const orderItemsMatch = order.items?.some(&#10;          (item) =&gt;&#10;            searchRegex.test(item.name) || searchRegex.test(item.productName),&#10;        );&#10;        const customerMatch =&#10;          searchRegex.test(order.customerName) ||&#10;          searchRegex.test(order.customerEmail);&#10;        const orderIdMatch = searchRegex.test(order._id);&#10;&#10;        return orderItemsMatch || customerMatch || orderIdMatch;&#10;      });&#10;    }&#10;&#10;    // Apply date range filter&#10;    if (dateRange.start) {&#10;      filtered = filtered.filter(order =&gt; new Date(order.createdAt) &gt;= new Date(dateRange.start));&#10;    }&#10;    if (dateRange.end) {&#10;      filtered = filtered.filter(order =&gt; new Date(order.createdAt) &lt;= new Date(dateRange.end));&#10;    }&#10;&#10;    // Apply price range filter&#10;    if (priceRange.min) {&#10;      filtered = filtered.filter(order =&gt; (order.farmerSubtotal || order.total || 0) &gt;= parseFloat(priceRange.min));&#10;    }&#10;    if (priceRange.max) {&#10;      filtered = filtered.filter(order =&gt; (order.farmerSubtotal || order.total || 0) &lt;= parseFloat(priceRange.max));&#10;    }&#10;&#10;    // Apply customer filter&#10;    if (customerFilter) {&#10;      const customerRegex = new RegExp(customerFilter, &quot;i&quot;);&#10;      filtered = filtered.filter(order =&gt;&#10;        customerRegex.test(order.customerName) || customerRegex.test(order.customerEmail)&#10;      );&#10;    }&#10;&#10;    // Apply sorting&#10;    filtered.sort((a, b) =&gt; {&#10;      switch (sortBy) {&#10;        case 'newest':&#10;          return new Date(b.createdAt) - new Date(a.createdAt);&#10;        case 'oldest':&#10;          return new Date(a.createdAt) - new Date(b.createdAt);&#10;        case 'highest-value':&#10;          return (b.farmerSubtotal || b.total || 0) - (a.farmerSubtotal || a.total || 0);&#10;        case 'lowest-value':&#10;          return (a.farmerSubtotal || a.total || 0) - (b.farmerSubtotal || b.total || 0);&#10;        case 'customer-name':&#10;          return (a.customerName || '').localeCompare(b.customerName || '');&#10;        default:&#10;          return 0;&#10;      }&#10;    });&#10;&#10;    setFilteredOrders(filtered);&#10;    setCurrentPage(1);&#10;  }, [orders, statusFilter, searchTerm, dateRange, priceRange, customerFilter, sortBy]);&#10;&#10;  // Apply filters whenever dependencies change&#10;  useEffect(() =&gt; {&#10;    filterOrders();&#10;  }, [filterOrders]);&#10;&#10;  // Auto-refresh functionality&#10;  useEffect(() =&gt; {&#10;    if (autoRefresh) {&#10;      intervalRef.current = setInterval(fetchOrders, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh]);&#10;&#10;  const fetchOrders = useCallback(async () =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    try {&#10;      const userId = session.user.userId || session.user.id || session.user._id;&#10;      const userEmail = session.user.email;&#10;&#10;      const params = new URLSearchParams();&#10;      if (userId) params.append(&quot;farmerId&quot;, userId);&#10;      if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;      const response = await fetch(`/api/orders?${params.toString()}`, {&#10;        cache: &quot;no-store&quot;,&#10;        headers: {&#10;          &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;          Pragma: &quot;no-cache&quot;,&#10;        },&#10;      });&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;&#10;        // Check for new orders for notifications&#10;        if (orders.length &gt; 0 &amp;&amp; data.orders.length &gt; orders.length) {&#10;          const newOrdersCount = data.orders.length - orders.length;&#10;          addNotification(`${newOrdersCount} new order(s) received!`, 'success');&#10;        }&#10;&#10;        setOrders(data.orders || []);&#10;      } else {&#10;        console.error(&quot;Failed to fetch orders&quot;);&#10;        setOrders([]);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching orders:&quot;, error);&#10;      setOrders([]);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [session, orders.length]);&#10;&#10;  useEffect(() =&gt; {&#10;    fetchOrders();&#10;  }, [fetchOrders]);&#10;&#10;  // Notification system&#10;  const addNotification = (message, type = 'info') =&gt; {&#10;    const id = Date.now();&#10;    setNotifications(prev =&gt; [...prev, { id, message, type, timestamp: new Date() }]);&#10;    setTimeout(() =&gt; {&#10;      setNotifications(prev =&gt; prev.filter(n =&gt; n.id !== id));&#10;    }, 5000);&#10;  };&#10;&#10;  // Bulk operations&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      alert('Please select orders to update');&#10;      return;&#10;    }&#10;&#10;    if (!confirm(`Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const updatePromises = selectedOrders.map(orderId =&gt;&#10;        fetch(`/api/orders/${orderId}`, {&#10;          method: &quot;PATCH&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify({&#10;            status: newStatus,&#10;            statusHistory: {&#10;              status: newStatus,&#10;              timestamp: new Date().toISOString(),&#10;              updatedBy: session.user.email || session.user.name,&#10;            },&#10;          }),&#10;        })&#10;      );&#10;&#10;      const results = await Promise.all(updatePromises);&#10;      const successCount = results.filter(r =&gt; r.ok).length;&#10;&#10;      if (successCount === selectedOrders.length) {&#10;        setOrders(prev =&gt; prev.map(order =&gt;&#10;          selectedOrders.includes(order._id)&#10;            ? { ...order, status: newStatus }&#10;            : order&#10;        ));&#10;        setSelectedOrders([]);&#10;        addNotification(`${successCount} orders updated successfully!`, 'success');&#10;      } else {&#10;        addNotification(`${successCount}/${selectedOrders.length} orders updated`, 'warning');&#10;      }&#10;    } catch (error) {&#10;      console.error('Bulk update error:', error);&#10;      addNotification('Failed to update orders', 'error');&#10;    }&#10;  };&#10;&#10;  // Export functionality&#10;  const exportOrders = (format) =&gt; {&#10;    const dataToExport = selectedOrders.length &gt; 0&#10;      ? filteredOrders.filter(order =&gt; selectedOrders.includes(order._id))&#10;      : filteredOrders;&#10;&#10;    if (format === 'csv') {&#10;      const csv = convertToCSV(dataToExport);&#10;      downloadFile(csv, 'orders.csv', 'text/csv');&#10;    } else if (format === 'json') {&#10;      const json = JSON.stringify(dataToExport, null, 2);&#10;      downloadFile(json, 'orders.json', 'application/json');&#10;    }&#10;    setShowExportModal(false);&#10;  };&#10;&#10;  const convertToCSV = (data) =&gt; {&#10;    const headers = ['Order ID', 'Customer Name', 'Customer Email', 'Status', 'Total', 'Date', 'Items Count'];&#10;    const csvData = data.map(order =&gt; [&#10;      order._id?.slice(-8)?.toUpperCase() || 'N/A',&#10;      order.customerName || '',&#10;      order.customerEmail || '',&#10;      order.status || '',&#10;      order.farmerSubtotal || order.total || 0,&#10;      new Date(order.createdAt).toLocaleDateString(),&#10;      order.items?.length || 0&#10;    ]);&#10;&#10;    return [headers, ...csvData].map(row =&gt; row.join(',')).join('\n');&#10;  };&#10;&#10;  const downloadFile = (content, filename, mimeType) =&gt; {&#10;    const blob = new Blob([content], { type: mimeType });&#10;    const url = URL.createObjectURL(blob);&#10;    const link = document.createElement('a');&#10;    link.href = url;&#10;    link.download = filename;&#10;    document.body.appendChild(link);&#10;    link.click();&#10;    document.body.removeChild(link);&#10;    URL.revokeObjectURL(url);&#10;  };&#10;&#10;  // Analytics calculations&#10;  const getAnalytics = () =&gt; {&#10;    const totalRevenue = orders.reduce((sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0), 0);&#10;    const avgOrderValue = orders.length &gt; 0 ? totalRevenue / orders.length : 0;&#10;    const completionRate = orders.length &gt; 0 ? (orders.filter(o =&gt; o.status === 'delivered').length / orders.length) * 100 : 0;&#10;&#10;    const last30Days = orders.filter(order =&gt;&#10;      new Date(order.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)&#10;    );&#10;    const monthlyRevenue = last30Days.reduce((sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0), 0);&#10;&#10;    return {&#10;      totalRevenue,&#10;      avgOrderValue,&#10;      completionRate,&#10;      monthlyRevenue,&#10;      totalOrders: orders.length,&#10;      monthlyOrders: last30Days.length&#10;    };&#10;  };&#10;&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  const handleSearchChange = (e) =&gt; {&#10;    setSearchTerm(e.target.value);&#10;  };&#10;&#10;  const handleUpdateOrderStatus = async (orderId, newStatus) =&gt; {&#10;    // More descriptive confirmation messages based on status transition&#10;    const statusMessages = {&#10;      confirmed:&#10;        &quot;confirm this order? This will notify the customer that their order has been accepted.&quot;,&#10;      shipped:&#10;        &quot;mark this order as shipped? This will notify the customer that their order is on the way.&quot;,&#10;      delivered:&#10;        &quot;mark this order as delivered? This will complete the order and notify the customer.&quot;,&#10;      cancelled:&#10;        &quot;cancel this order? This action cannot be undone and will notify the customer.&quot;,&#10;    };&#10;&#10;    const confirmMessage =&#10;      statusMessages[newStatus] || `mark this order as ${newStatus}?`;&#10;&#10;    if (!confirm(`Are you sure you want to ${confirmMessage}`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const updateData = {&#10;        status: newStatus,&#10;        statusHistory: {&#10;          status: newStatus,&#10;          timestamp: new Date().toISOString(),&#10;          updatedBy: session.user.email || session.user.name,&#10;        },&#10;      };&#10;&#10;      // Add estimated delivery date for shipped status&#10;      if (newStatus === &quot;shipped&quot;) {&#10;        const estimatedDelivery = new Date();&#10;        estimatedDelivery.setDate(estimatedDelivery.getDate() + 3); // 3 days from ship date&#10;        updateData.estimatedDeliveryDate = estimatedDelivery.toISOString();&#10;      }&#10;&#10;      const response = await fetch(`/api/orders/${orderId}`, {&#10;        method: &quot;PATCH&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            order._id === orderId&#10;              ? {&#10;                  ...order,&#10;                  status: newStatus,&#10;                  estimatedDeliveryDate:&#10;                    updateData.estimatedDeliveryDate ||&#10;                    order.estimatedDeliveryDate,&#10;                  statusHistory: [&#10;                    ...(Array.isArray(order.statusHistory)&#10;                      ? order.statusHistory&#10;                      : []),&#10;                    updateData.statusHistory,&#10;                  ],&#10;                }&#10;              : order,&#10;          ),&#10;        );&#10;&#10;        // More specific success messages&#10;        const successMessages = {&#10;          confirmed: &quot;Order confirmed! Customer has been notified.&quot;,&#10;          shipped:&#10;            &quot;Order marked as shipped! Customer has been notified with tracking information.&quot;,&#10;          delivered:&#10;            &quot;Order completed! Customer has been notified of successful delivery.&quot;,&#10;          cancelled: &quot;Order cancelled. Customer has been notified.&quot;,&#10;        };&#10;&#10;        addNotification(&#10;          successMessages[newStatus] ||&#10;            `Order status updated to ${newStatus} successfully!`,&#10;          'success'&#10;        );&#10;      } else {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.error || &quot;Failed to update order status&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating order status:&quot;, error);&#10;      addNotification(`Failed to update order status: ${error.message}`, 'error');&#10;    }&#10;  };&#10;&#10;  const handleRefresh = async () =&gt; {&#10;    setRefreshing(true);&#10;    await fetchOrders();&#10;    setRefreshing(false);&#10;    addNotification('Orders refreshed successfully!', 'success');&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status) =&gt; {&#10;    const statusConfig = {&#10;      pending: {&#10;        bg: &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;      },&#10;      confirmed: {&#10;        bg: &quot;bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;,&#10;        icon: &quot;fas fa-check&quot;,&#10;      },&#10;      shipped: {&#10;        bg: &quot;bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;,&#10;        icon: &quot;fas fa-truck&quot;,&#10;      },&#10;      delivered: {&#10;        bg: &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;        icon: &quot;fas fa-check-circle&quot;,&#10;      },&#10;      cancelled: {&#10;        bg: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;      },&#10;    };&#10;&#10;    const config = statusConfig[status?.toLowerCase()] || statusConfig.pending;&#10;&#10;    return (&#10;      &lt;span&#10;        className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.bg}`}&#10;      &gt;&#10;        &lt;i className={`${config.icon} mr-1`}&gt;&lt;/i&gt;&#10;        {status?.charAt(0).toUpperCase() + status?.slice(1) || &quot;Pending&quot;}&#10;      &lt;/span&gt;&#10;    );&#10;  };&#10;&#10;  const getOrderActions = (order) =&gt; {&#10;    const actions = [];&#10;&#10;    switch (order.status.toLowerCase()) {&#10;      case &quot;pending&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;confirm&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;confirmed&quot;)}&#10;            className=&quot;bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;            Confirm Order&#10;          &lt;/button&gt;,&#10;        );&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;cancel&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;cancelled&quot;)}&#10;            className=&quot;bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;            Cancel Order&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;confirmed&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;ship&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;shipped&quot;)}&#10;            className=&quot;bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Shipped&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;shipped&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;deliver&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;delivered&quot;)}&#10;            className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Delivered&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;    }&#10;&#10;    return actions;&#10;  };&#10;&#10;  // Pagination&#10;  const indexOfLastOrder = currentPage * ordersPerPage;&#10;  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;&#10;  const currentOrders = filteredOrders.slice(&#10;    indexOfFirstOrder,&#10;    indexOfLastOrder,&#10;  );&#10;  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);&#10;&#10;  const getOrderSummary = () =&gt; {&#10;    const summary = {&#10;      total: orders.length,&#10;      pending: orders.filter((o) =&gt; o.status === &quot;pending&quot;).length,&#10;      confirmed: orders.filter((o) =&gt; o.status === &quot;confirmed&quot;).length,&#10;      shipped: orders.filter((o) =&gt; o.status === &quot;shipped&quot;).length,&#10;      delivered: orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length,&#10;      cancelled: orders.filter((o) =&gt; o.status === &quot;cancelled&quot;).length,&#10;    };&#10;    return summary;&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;            Loading your enhanced orders dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const orderSummary = getOrderSummary();&#10;  const analytics = getAnalytics();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Notification System */}&#10;      &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-2&quot;&gt;&#10;        {notifications.map(notification =&gt; (&#10;          &lt;div&#10;            key={notification.id}&#10;            className={`px-6 py-4 rounded-lg shadow-lg text-white transform transition-all duration-500 ${&#10;              notification.type === 'success' ? 'bg-green-600' :&#10;              notification.type === 'error' ? 'bg-red-600' :&#10;              notification.type === 'warning' ? 'bg-yellow-600' : 'bg-blue-600'&#10;            }`}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className={`fas ${&#10;                notification.type === 'success' ? 'fa-check-circle' :&#10;                notification.type === 'error' ? 'fa-exclamation-circle' :&#10;                notification.type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle'&#10;              } mr-2`}&gt;&lt;/i&gt;&#10;              {notification.message}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Export Modal */}&#10;      {showExportModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md w-full mx-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Export Orders&#10;            &lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;              {selectedOrders.length &gt; 0&#10;                ? `Export ${selectedOrders.length} selected orders`&#10;                : `Export all ${filteredOrders.length} filtered orders`&#10;              }&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders('csv')}&#10;                className=&quot;flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-csv mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as CSV&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders('json')}&#10;                className=&quot;flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-code mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as JSON&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowExportModal(false)}&#10;              className=&quot;w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg font-medium transition&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        {/* Enhanced Breadcrumb with Real-time Indicators */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link href=&quot;/&quot; className=&quot;text-gray-500 hover:text-green-600 transition&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-cog mr-1&quot;&gt;&lt;/i&gt;Manage&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-gray-900 dark:text-white font-medium&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-1&quot;&gt;&lt;/i&gt;Advanced Order Management&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Real-time Status Indicator */}&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div className={`w-3 h-3 rounded-full ${autoRefresh ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}&gt;&lt;/div&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                {autoRefresh ? 'Live' : 'Static'}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Page Header with Quick Actions */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-blue-600 p-4 rounded-2xl&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Advanced Order Management&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                  Comprehensive order tracking and analytics dashboard&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4 mt-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                    Last updated: {new Date().toLocaleTimeString()}&#10;                  &lt;/span&gt;&#10;                  {autoRefresh &amp;&amp; (&#10;                    &lt;span className=&quot;bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                      Auto-refresh enabled&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6 lg:mt-0 flex flex-wrap gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setAutoRefresh(!autoRefresh)}&#10;                className={`inline-flex items-center px-4 py-3 rounded-lg font-medium transition ${&#10;                  autoRefresh &#10;                    ? 'bg-green-600 hover:bg-green-700 text-white' &#10;                    : 'bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`fas ${autoRefresh ? 'fa-pause' : 'fa-play'} mr-2`}&gt;&lt;/i&gt;&#10;                {autoRefresh ? 'Pause' : 'Auto'} Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; setShowAnalytics(!showAnalytics)}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-chart-bar mr-2&quot;&gt;&lt;/i&gt;&#10;                Analytics&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; setShowExportModal(true)}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;                Export&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={handleRefresh}&#10;                disabled={refreshing}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;animate-spin&quot; : &quot;&quot;}`}&#10;                &gt;&lt;/i&gt;&#10;                Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;inline-flex items-center px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Back to Manage&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Analytics Dashboard */}&#10;          {showAnalytics &amp;&amp; (&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8&quot;&gt;&#10;              &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-bar mr-2&quot;&gt;&lt;/i&gt;&#10;                Business Analytics&#10;              &lt;/h3&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;div className=&quot;bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 text-white&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;p className=&quot;text-green-100&quot;&gt;Total Revenue&lt;/p&gt;&#10;                      &lt;p className=&quot;text-2xl font-bold&quot;&gt;{formatPrice(analytics.totalRevenue)}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign text-3xl text-green-200&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 text-white&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;p className=&quot;text-blue-100&quot;&gt;Avg Order Value&lt;/p&gt;&#10;                      &lt;p className=&quot;text-2xl font-bold&quot;&gt;{formatPrice(analytics.avgOrderValue)}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;i className=&quot;fas fa-chart-line text-3xl text-blue-200&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-6 text-white&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;p className=&quot;text-purple-100&quot;&gt;Completion Rate&lt;/p&gt;&#10;                      &lt;p className=&quot;text-2xl font-bold&quot;&gt;{analytics.completionRate.toFixed(1)}%&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;i className=&quot;fas fa-percentage text-3xl text-purple-200&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;bg-gradient-to-r from-orange-500 to-orange-600 rounded-xl p-6 text-white&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;p className=&quot;text-orange-100&quot;&gt;Monthly Revenue&lt;/p&gt;&#10;                      &lt;p className=&quot;text-2xl font-bold&quot;&gt;{formatPrice(analytics.monthlyRevenue)}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;i className=&quot;fas fa-calendar text-3xl text-orange-200&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Enhanced Order Summary Cards with Animations */}&#10;          &lt;div className=&quot;grid grid-cols-2 md:grid-cols-6 gap-4 mb-8&quot;&gt;&#10;            {Object.entries(orderSummary).map(([key, value], index) =&gt; {&#10;              const config = {&#10;                total: { icon: 'fa-shopping-cart', color: 'gray', label: 'Total' },&#10;                pending: { icon: 'fa-clock', color: 'yellow', label: 'Pending' },&#10;                confirmed: { icon: 'fa-check', color: 'blue', label: 'Confirmed' },&#10;                shipped: { icon: 'fa-truck', color: 'purple', label: 'Shipped' },&#10;                delivered: { icon: 'fa-check-circle', color: 'green', label: 'Delivered' },&#10;                cancelled: { icon: 'fa-times-circle', color: 'red', label: 'Cancelled' }&#10;              }[key];&#10;&#10;              return (&#10;                &lt;div&#10;                  key={key}&#10;                  className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 transform hover:scale-105 transition-transform duration-200 cursor-pointer&quot;&#10;                  onClick={() =&gt; setStatusFilter(key === 'total' ? 'All Orders' : config.label.toLowerCase())}&#10;                  style={{ animationDelay: `${index * 100}ms` }}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div className={`p-2 bg-${config.color}-100 dark:bg-${config.color}-900 rounded-lg`}&gt;&#10;                      &lt;i className={`fas ${config.icon} text-${config.color}-600 dark:text-${config.color}-300`}&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;ml-3&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {config.label}&#10;                      &lt;/p&gt;&#10;                      &lt;p className={`text-2xl font-bold text-${config.color}-600 dark:text-${config.color}-400`}&gt;&#10;                        {value}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Filters and Controls */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6&quot;&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4 lg:mb-0&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Advanced Filters &amp; Controls&#10;              &lt;/h3&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex space-x-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#10;                {['detailed', 'compact', 'timeline'].map(mode =&gt; (&#10;                  &lt;button&#10;                    key={mode}&#10;                    onClick={() =&gt; setViewMode(mode)}&#10;                    className={`px-4 py-2 rounded-md text-sm font-medium transition ${&#10;                      viewMode === mode&#10;                        ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'&#10;                        : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'&#10;                    }`}&#10;                  &gt;&#10;                    &lt;i className={`fas ${&#10;                      mode === 'detailed' ? 'fa-list' :&#10;                      mode === 'compact' ? 'fa-th-list' : 'fa-project-diagram'&#10;                    } mr-1`}&gt;&lt;/i&gt;&#10;                    {mode.charAt(0).toUpperCase() + mode.slice(1)}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4&quot;&gt;&#10;              {/* Search */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Search Orders&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search by customer, email, or ID...&quot;&#10;                    value={searchTerm}&#10;                    onChange={handleSearchChange}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                  &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Status Filter */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Status Filter&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={statusFilter}&#10;                  onChange={handleStatusChange}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;All Orders&quot;&gt;All Orders&lt;/option&gt;&#10;                  &lt;option value=&quot;pending&quot;&gt;Pending&lt;/option&gt;&#10;                  &lt;option value=&quot;confirmed&quot;&gt;Confirmed&lt;/option&gt;&#10;                  &lt;option value=&quot;shipped&quot;&gt;Shipped&lt;/option&gt;&#10;                  &lt;option value=&quot;delivered&quot;&gt;Delivered&lt;/option&gt;&#10;                  &lt;option value=&quot;cancelled&quot;&gt;Cancelled&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Sort By */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Sort By&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={sortBy}&#10;                  onChange={(e) =&gt; setSortBy(e.target.value)}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                  &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                  &lt;option value=&quot;highest-value&quot;&gt;Highest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;lowest-value&quot;&gt;Lowest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;customer-name&quot;&gt;Customer Name&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Date Range */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date From&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.start}&#10;                  onChange={(e) =&gt; setDateRange(prev =&gt; ({ ...prev, start: e.target.value }))}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date To&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.end}&#10;                  onChange={(e) =&gt; setDateRange(prev =&gt; ({ ...prev, end: e.target.value }))}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Clear Filters */}&#10;              &lt;div className=&quot;flex items-end&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: '', end: '' });&#10;                    setPriceRange({ min: '', max: '' });&#10;                    setCustomerFilter('');&#10;                  }}&#10;                  className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Bulk Operations */}&#10;            {selectedOrders.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center&quot;&gt;&#10;                  &lt;div className=&quot;mb-3 sm:mb-0&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                      {selectedOrders.length} order(s) selected&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                      Choose a bulk action to apply to selected orders&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate('confirmed')}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Confirm All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate('shipped')}&#10;                      className=&quot;bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;                      Ship All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setSelectedOrders([])}&#10;                      className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                      Clear Selection&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Orders List - Enhanced with different view modes */}&#10;          {currentOrders.length === 0 ? (&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-12 text-center&quot;&gt;&#10;              &lt;div className=&quot;max-w-md mx-auto&quot;&gt;&#10;                &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                  No orders found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                  {statusFilter === &quot;All Orders&quot;&#10;                    ? &quot;You haven't received any orders yet, or no orders match your current filters.&quot;&#10;                    : `No ${statusFilter.toLowerCase()} orders found matching your criteria.`}&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: '', end: '' });&#10;                    setPriceRange({ min: '', max: '' });&#10;                  }}&#10;                  className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  Clear All Filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className={`space-y-${viewMode === 'compact' ? '3' : '6'}`}&gt;&#10;              {/* Select All Checkbox */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;label className=&quot;flex items-center&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={selectedOrders.length === currentOrders.length}&#10;                    onChange={(e) =&gt; {&#10;                      if (e.target.checked) {&#10;                        setSelectedOrders(currentOrders.map(order =&gt; order._id));&#10;                      } else {&#10;                        setSelectedOrders([]);&#10;                      }&#10;                    }}&#10;                    className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                  /&gt;&#10;                  &lt;span className=&quot;ml-2 text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Select all visible orders ({currentOrders.length})&#10;                  &lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders */}&#10;              {currentOrders.map((order) =&gt; (&#10;                &lt;div&#10;                  key={order._id}&#10;                  className={`bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden transform hover:scale-[1.01] transition-all duration-200 ${&#10;                    selectedOrders.includes(order._id) ? 'ring-2 ring-green-500' : ''&#10;                  }`}&#10;                &gt;&#10;                  &lt;div className={`p-${viewMode === 'compact' ? '4' : '6'}`}&gt;&#10;                    {/* Order Header with Checkbox */}&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedOrders.includes(order._id)}&#10;                          onChange={(e) =&gt; {&#10;                            if (e.target.checked) {&#10;                              setSelectedOrders(prev =&gt; [...prev, order._id]);&#10;                            } else {&#10;                              setSelectedOrders(prev =&gt; prev.filter(id =&gt; id !== order._id));&#10;                            }&#10;                          }}&#10;                          className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                        /&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3 className={`${viewMode === 'compact' ? 'text-base' : 'text-lg'} font-semibold text-gray-900 dark:text-white`}&gt;&#10;                            Order #&#10;                            {order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;}&#10;                          &lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Placed on {formatDate(order.createdAt)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        {getStatusBadge(order.status)}&#10;                        &lt;span className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice(&#10;                            order.farmerSubtotal || order.total || 0,&#10;                          )}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Information */}&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Customer Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Name:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerName || order.userName || &quot;Customer&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Email:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerEmail ||&#10;                              order.userEmail ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Phone:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerPhone ||&#10;                              order.userPhone ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Delivery Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Address:&lt;/span&gt;{&quot; &quot;}&#10;                            {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress&#10;                              ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`&#10;                                  .replace(/^,\s*/, &quot;&quot;)&#10;                                  .replace(/,\s*$/, &quot;&quot;) || &quot;Not provided&quot;&#10;                              : order.deliveryAddress || &quot;Not provided&quot;}&#10;                          &lt;/p&gt;&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.name &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Recipient:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.name}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.phone &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Contact:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.phone}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.instructions &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  Instructions:&#10;                                &lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.instructions}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Payment Method:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.paymentMethod || &quot;Cash on Delivery&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Order Items */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-6 mb-6&quot;&gt;&#10;                      &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                        Order Items ({order.items?.length || 0})&#10;                      &lt;/h4&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {order.items?.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;flex items-center justify-between py-3 px-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                              &lt;img&#10;                                src={&#10;                                  item.image ||&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                                }&#10;                                alt={item.name || item.productName}&#10;                                className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                              /&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.name || item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Quantity: {item.quantity} {item.unit || &quot;kg&quot;}&#10;                                &lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Unit Price: {formatPrice(item.price)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                              &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                {formatPrice(item.price * item.quantity)}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Action Buttons */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4&quot;&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                        {getOrderActions(order)}&#10;                        &lt;Link&#10;                          href={`/farmer-orders/${order._id}`}&#10;                          className=&quot;bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                          View Details&#10;                        &lt;/Link&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pagination */}&#10;          {totalPages &gt; 1 &amp;&amp; (&#10;            &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#10;              &lt;nav aria-label=&quot;Pagination&quot;&gt;&#10;                &lt;ul className=&quot;inline-flex items-center -space-x-px text-gray-600 dark:text-gray-300&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                      }&#10;                      disabled={currentPage === 1}&#10;                      className=&quot;block px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                  {[...Array(totalPages)].map((_, index) =&gt; (&#10;                    &lt;li key={index}&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(index + 1)}&#10;                        className={`px-3 py-2 leading-tight border ${&#10;                          currentPage === index + 1&#10;                            ? &quot;text-white bg-green-600 border-green-600 hover:bg-green-700&quot;&#10;                            : &quot;text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {index + 1}&#10;                      &lt;/button&gt;&#10;                    &lt;/li&gt;&#10;                  ))}&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.min(prev + 1, totalPages))&#10;                      }&#10;                      disabled={currentPage === totalPages}&#10;                      className=&quot;block px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ul&gt;&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useCallback, useRef } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;&#10;export default function FarmerOrders() {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;  const [orders, setOrders] = useState([]);&#10;  const [filteredOrders, setFilteredOrders] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [statusFilter, setStatusFilter] = useState(&quot;All Orders&quot;);&#10;  const [searchTerm, setSearchTerm] = useState(&quot;&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [refreshing, setRefreshing] = useState(false);&#10;&#10;  // Enhanced state for new features&#10;  const [selectedOrders, setSelectedOrders] = useState([]);&#10;  const [viewMode, setViewMode] = useState('detailed'); // 'detailed', 'compact'&#10;  const [sortBy, setSortBy] = useState('newest');&#10;  const [dateRange, setDateRange] = useState({ start: '', end: '' });&#10;  const [showExportModal, setShowExportModal] = useState(false);&#10;  const [notifications, setNotifications] = useState([]);&#10;  const [autoRefresh, setAutoRefresh] = useState(false);&#10;  const [expandedOrders, setExpandedOrders] = useState(new Set());&#10;  const intervalRef = useRef(null);&#10;&#10;  const ordersPerPage = viewMode === 'compact' ? 20 : 10;&#10;&#10;  // Memoize the filterOrders function to prevent infinite re-renders&#10;  const filterOrders = useCallback(() =&gt; {&#10;    let filtered = [...orders];&#10;&#10;    // Apply status filter&#10;    if (statusFilter !== &quot;All Orders&quot;) {&#10;      filtered = filtered.filter(&#10;        (order) =&gt; order.status.toLowerCase() === statusFilter.toLowerCase(),&#10;      );&#10;    }&#10;&#10;    // Apply search filter&#10;    if (searchTerm) {&#10;      const searchRegex = new RegExp(searchTerm, &quot;i&quot;);&#10;      filtered = filtered.filter((order) =&gt; {&#10;        const orderItemsMatch = order.items?.some(&#10;          (item) =&gt;&#10;            searchRegex.test(item.name) || searchRegex.test(item.productName),&#10;        );&#10;        const customerMatch =&#10;          searchRegex.test(order.customerName) ||&#10;          searchRegex.test(order.customerEmail);&#10;        const orderIdMatch = searchRegex.test(order._id);&#10;&#10;        return orderItemsMatch || customerMatch || orderIdMatch;&#10;      });&#10;    }&#10;&#10;    // Apply date range filter&#10;    if (dateRange.start) {&#10;      filtered = filtered.filter(order =&gt; new Date(order.createdAt) &gt;= new Date(dateRange.start));&#10;    }&#10;    if (dateRange.end) {&#10;      filtered = filtered.filter(order =&gt; new Date(order.createdAt) &lt;= new Date(dateRange.end));&#10;    }&#10;&#10;    // Apply sorting&#10;    filtered.sort((a, b) =&gt; {&#10;      switch (sortBy) {&#10;        case 'newest':&#10;          return new Date(b.createdAt) - new Date(a.createdAt);&#10;        case 'oldest':&#10;          return new Date(a.createdAt) - new Date(b.createdAt);&#10;        case 'highest-value':&#10;          return (b.farmerSubtotal || b.total || 0) - (a.farmerSubtotal || a.total || 0);&#10;        case 'lowest-value':&#10;          return (a.farmerSubtotal || a.total || 0) - (b.farmerSubtotal || b.total || 0);&#10;        case 'customer-name':&#10;          return (a.customerName || '').localeCompare(b.customerName || '');&#10;        default:&#10;          return 0;&#10;      }&#10;    });&#10;&#10;    setFilteredOrders(filtered);&#10;    setCurrentPage(1);&#10;  }, [orders, statusFilter, searchTerm, dateRange, sortBy]);&#10;&#10;  // Apply filters whenever dependencies change&#10;  useEffect(() =&gt; {&#10;    filterOrders();&#10;  }, [filterOrders]);&#10;&#10;  // Auto-refresh functionality&#10;  useEffect(() =&gt; {&#10;    if (autoRefresh) {&#10;      intervalRef.current = setInterval(fetchOrders, 30000); // Refresh every 30 seconds&#10;    } else {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    }&#10;    return () =&gt; {&#10;      if (intervalRef.current) {&#10;        clearInterval(intervalRef.current);&#10;      }&#10;    };&#10;  }, [autoRefresh]);&#10;&#10;  const fetchOrders = useCallback(async () =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    try {&#10;      const userId = session.user.userId || session.user.id || session.user._id;&#10;      const userEmail = session.user.email;&#10;&#10;      const params = new URLSearchParams();&#10;      if (userId) params.append(&quot;farmerId&quot;, userId);&#10;      if (userEmail) params.append(&quot;farmerEmail&quot;, userEmail);&#10;&#10;      const response = await fetch(`/api/orders?${params.toString()}`, {&#10;        cache: &quot;no-store&quot;,&#10;        headers: {&#10;          &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;          Pragma: &quot;no-cache&quot;,&#10;        },&#10;      });&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;&#10;        // Check for new orders for notifications&#10;        if (orders.length &gt; 0 &amp;&amp; data.orders.length &gt; orders.length) {&#10;          const newOrdersCount = data.orders.length - orders.length;&#10;          addNotification(`${newOrdersCount} new order(s) received!`, 'success');&#10;        }&#10;&#10;        setOrders(data.orders || []);&#10;      } else {&#10;        console.error(&quot;Failed to fetch orders&quot;);&#10;        setOrders([]);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching orders:&quot;, error);&#10;      setOrders([]);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [session, orders.length]);&#10;&#10;  useEffect(() =&gt; {&#10;    fetchOrders();&#10;  }, [fetchOrders]);&#10;&#10;  // Notification system&#10;  const addNotification = (message, type = 'info') =&gt; {&#10;    const id = Date.now();&#10;    setNotifications(prev =&gt; [...prev, { id, message, type, timestamp: new Date() }]);&#10;    setTimeout(() =&gt; {&#10;      setNotifications(prev =&gt; prev.filter(n =&gt; n.id !== id));&#10;    }, 5000);&#10;  };&#10;&#10;  // Bulk operations&#10;  const handleBulkStatusUpdate = async (newStatus) =&gt; {&#10;    if (selectedOrders.length === 0) {&#10;      alert('Please select orders to update');&#10;      return;&#10;    }&#10;&#10;    if (!confirm(`Are you sure you want to mark ${selectedOrders.length} orders as ${newStatus}?`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const updatePromises = selectedOrders.map(orderId =&gt;&#10;        fetch(`/api/orders/${orderId}`, {&#10;          method: &quot;PATCH&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify({&#10;            status: newStatus,&#10;            statusHistory: {&#10;              status: newStatus,&#10;              timestamp: new Date().toISOString(),&#10;              updatedBy: session.user.email || session.user.name,&#10;            },&#10;          }),&#10;        })&#10;      );&#10;&#10;      const results = await Promise.all(updatePromises);&#10;      const successCount = results.filter(r =&gt; r.ok).length;&#10;&#10;      if (successCount === selectedOrders.length) {&#10;        setOrders(prev =&gt; prev.map(order =&gt;&#10;          selectedOrders.includes(order._id)&#10;            ? { ...order, status: newStatus }&#10;            : order&#10;        ));&#10;        setSelectedOrders([]);&#10;        addNotification(`${successCount} orders updated successfully!`, 'success');&#10;      } else {&#10;        addNotification(`${successCount}/${selectedOrders.length} orders updated`, 'warning');&#10;      }&#10;    } catch (error) {&#10;      console.error('Bulk update error:', error);&#10;      addNotification('Failed to update orders', 'error');&#10;    }&#10;  };&#10;&#10;  // Export functionality&#10;  const exportOrders = (format) =&gt; {&#10;    const dataToExport = selectedOrders.length &gt; 0&#10;      ? filteredOrders.filter(order =&gt; selectedOrders.includes(order._id))&#10;      : filteredOrders;&#10;&#10;    if (format === 'csv') {&#10;      const csv = convertToCSV(dataToExport);&#10;      downloadFile(csv, 'orders.csv', 'text/csv');&#10;    } else if (format === 'json') {&#10;      const json = JSON.stringify(dataToExport, null, 2);&#10;      downloadFile(json, 'orders.json', 'application/json');&#10;    }&#10;    setShowExportModal(false);&#10;  };&#10;&#10;  const convertToCSV = (data) =&gt; {&#10;    const headers = ['Order ID', 'Customer Name', 'Customer Email', 'Status', 'Total', 'Date', 'Items Count'];&#10;    const csvData = data.map(order =&gt; [&#10;      order._id?.slice(-8)?.toUpperCase() || 'N/A',&#10;      order.customerName || '',&#10;      order.customerEmail || '',&#10;      order.status || '',&#10;      order.farmerSubtotal || order.total || 0,&#10;      new Date(order.createdAt).toLocaleDateString(),&#10;      order.items?.length || 0&#10;    ]);&#10;&#10;    return [headers, ...csvData].map(row =&gt; row.join(',')).join('\n');&#10;  };&#10;&#10;  const downloadFile = (content, filename, mimeType) =&gt; {&#10;    const blob = new Blob([content], { type: mimeType });&#10;    const url = URL.createObjectURL(blob);&#10;    const link = document.createElement('a');&#10;    link.href = url;&#10;    link.download = filename;&#10;    document.body.appendChild(link);&#10;    link.click();&#10;    document.body.removeChild(link);&#10;    URL.revokeObjectURL(url);&#10;  };&#10;&#10;  const handleStatusChange = (e) =&gt; {&#10;    setStatusFilter(e.target.value);&#10;  };&#10;&#10;  const handleSearchChange = (e) =&gt; {&#10;    setSearchTerm(e.target.value);&#10;  };&#10;&#10;  const handleUpdateOrderStatus = async (orderId, newStatus) =&gt; {&#10;    // More descriptive confirmation messages based on status transition&#10;    const statusMessages = {&#10;      confirmed:&#10;        &quot;confirm this order? This will notify the customer that their order has been accepted.&quot;,&#10;      shipped:&#10;        &quot;mark this order as shipped? This will notify the customer that their order is on the way.&quot;,&#10;      delivered:&#10;        &quot;mark this order as delivered? This will complete the order and notify the customer.&quot;,&#10;      cancelled:&#10;        &quot;cancel this order? This action cannot be undone and will notify the customer.&quot;,&#10;    };&#10;&#10;    const confirmMessage =&#10;      statusMessages[newStatus] || `mark this order as ${newStatus}?`;&#10;&#10;    if (!confirm(`Are you sure you want to ${confirmMessage}`)) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const updateData = {&#10;        status: newStatus,&#10;        statusHistory: {&#10;          status: newStatus,&#10;          timestamp: new Date().toISOString(),&#10;          updatedBy: session.user.email || session.user.name,&#10;        },&#10;      };&#10;&#10;      // Add estimated delivery date for shipped status&#10;      if (newStatus === &quot;shipped&quot;) {&#10;        const estimatedDelivery = new Date();&#10;        estimatedDelivery.setDate(estimatedDelivery.getDate() + 3); // 3 days from ship date&#10;        updateData.estimatedDeliveryDate = estimatedDelivery.toISOString();&#10;      }&#10;&#10;      const response = await fetch(`/api/orders/${orderId}`, {&#10;        method: &quot;PATCH&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setOrders((prev) =&gt;&#10;          prev.map((order) =&gt;&#10;            order._id === orderId&#10;              ? {&#10;                  ...order,&#10;                  status: newStatus,&#10;                  estimatedDeliveryDate:&#10;                    updateData.estimatedDeliveryDate ||&#10;                    order.estimatedDeliveryDate,&#10;                  statusHistory: [&#10;                    ...(Array.isArray(order.statusHistory)&#10;                      ? order.statusHistory&#10;                      : []),&#10;                    updateData.statusHistory,&#10;                  ],&#10;                }&#10;              : order,&#10;          ),&#10;        );&#10;&#10;        // More specific success messages&#10;        const successMessages = {&#10;          confirmed: &quot;Order confirmed! Customer has been notified.&quot;,&#10;          shipped:&#10;            &quot;Order marked as shipped! Customer has been notified with tracking information.&quot;,&#10;          delivered:&#10;            &quot;Order completed! Customer has been notified of successful delivery.&quot;,&#10;          cancelled: &quot;Order cancelled. Customer has been notified.&quot;,&#10;        };&#10;&#10;        addNotification(&#10;          successMessages[newStatus] ||&#10;            `Order status updated to ${newStatus} successfully!`,&#10;          'success'&#10;        );&#10;      } else {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.error || &quot;Failed to update order status&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating order status:&quot;, error);&#10;      addNotification(`Failed to update order status: ${error.message}`, 'error');&#10;    }&#10;  };&#10;&#10;  const handleRefresh = async () =&gt; {&#10;    setRefreshing(true);&#10;    await fetchOrders();&#10;    setRefreshing(false);&#10;    addNotification('Orders refreshed successfully!', 'success');&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString(&quot;en-US&quot;, {&#10;      year: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status) =&gt; {&#10;    const statusConfig = {&#10;      pending: {&#10;        bg: &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;      },&#10;      confirmed: {&#10;        bg: &quot;bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;,&#10;        icon: &quot;fas fa-check&quot;,&#10;      },&#10;      shipped: {&#10;        bg: &quot;bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;,&#10;        icon: &quot;fas fa-truck&quot;,&#10;      },&#10;      delivered: {&#10;        bg: &quot;bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;,&#10;        icon: &quot;fas fa-check-circle&quot;,&#10;      },&#10;      cancelled: {&#10;        bg: &quot;bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;      },&#10;    };&#10;&#10;    const config = statusConfig[status?.toLowerCase()] || statusConfig.pending;&#10;&#10;    return (&#10;      &lt;span&#10;        className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.bg}`}&#10;      &gt;&#10;        &lt;i className={`${config.icon} mr-1`}&gt;&lt;/i&gt;&#10;        {status?.charAt(0).toUpperCase() + status?.slice(1) || &quot;Pending&quot;}&#10;      &lt;/span&gt;&#10;    );&#10;  };&#10;&#10;  const getOrderActions = (order) =&gt; {&#10;    const actions = [];&#10;&#10;    switch (order.status.toLowerCase()) {&#10;      case &quot;pending&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;confirm&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;confirmed&quot;)}&#10;            className=&quot;bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;            Confirm Order&#10;          &lt;/button&gt;,&#10;        );&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;cancel&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;cancelled&quot;)}&#10;            className=&quot;bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;            Cancel Order&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;confirmed&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;ship&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;shipped&quot;)}&#10;            className=&quot;bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Shipped&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;      case &quot;shipped&quot;:&#10;        actions.push(&#10;          &lt;button&#10;            key=&quot;deliver&quot;&#10;            onClick={() =&gt; handleUpdateOrderStatus(order._id, &quot;delivered&quot;)}&#10;            className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-check-circle mr-1&quot;&gt;&lt;/i&gt;&#10;            Mark as Delivered&#10;          &lt;/button&gt;,&#10;        );&#10;        break;&#10;    }&#10;&#10;    return actions;&#10;  };&#10;&#10;  // Pagination&#10;  const indexOfLastOrder = currentPage * ordersPerPage;&#10;  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;&#10;  const currentOrders = filteredOrders.slice(&#10;    indexOfFirstOrder,&#10;    indexOfLastOrder,&#10;  );&#10;  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);&#10;&#10;  const getOrderSummary = () =&gt; {&#10;    const summary = {&#10;      total: orders.length,&#10;      pending: orders.filter((o) =&gt; o.status === &quot;pending&quot;).length,&#10;      confirmed: orders.filter((o) =&gt; o.status === &quot;confirmed&quot;).length,&#10;      shipped: orders.filter((o) =&gt; o.status === &quot;shipped&quot;).length,&#10;      delivered: orders.filter((o) =&gt; o.status === &quot;delivered&quot;).length,&#10;      cancelled: orders.filter((o) =&gt; o.status === &quot;cancelled&quot;).length,&#10;    };&#10;    return summary;&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 text-lg&quot;&gt;&#10;            Loading your enhanced orders dashboard...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const orderSummary = getOrderSummary();&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Notification System */}&#10;      &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-2&quot;&gt;&#10;        {notifications.map(notification =&gt; (&#10;          &lt;div&#10;            key={notification.id}&#10;            className={`px-6 py-4 rounded-lg shadow-lg text-white transform transition-all duration-500 ${&#10;              notification.type === 'success' ? 'bg-green-600' :&#10;              notification.type === 'error' ? 'bg-red-600' :&#10;              notification.type === 'warning' ? 'bg-yellow-600' : 'bg-blue-600'&#10;            }`}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className={`fas ${&#10;                notification.type === 'success' ? 'fa-check-circle' :&#10;                notification.type === 'error' ? 'fa-exclamation-circle' :&#10;                notification.type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle'&#10;              } mr-2`}&gt;&lt;/i&gt;&#10;              {notification.message}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Export Modal */}&#10;      {showExportModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md w-full mx-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Export Orders&#10;            &lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;              {selectedOrders.length &gt; 0&#10;                ? `Export ${selectedOrders.length} selected orders`&#10;                : `Export all ${filteredOrders.length} filtered orders`&#10;              }&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders('csv')}&#10;                className=&quot;flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-csv mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as CSV&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; exportOrders('json')}&#10;                className=&quot;flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-file-code mr-2&quot;&gt;&lt;/i&gt;&#10;                Export as JSON&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowExportModal(false)}&#10;              className=&quot;w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg font-medium transition&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        {/* Enhanced Breadcrumb with Real-time Indicators */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;              &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link href=&quot;/&quot; className=&quot;text-gray-500 hover:text-green-600 transition&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-home mr-1&quot;&gt;&lt;/i&gt;Home&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className=&quot;text-gray-500 hover:text-green-600 transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-cog mr-1&quot;&gt;&lt;/i&gt;Manage&#10;                  &lt;/Link&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;                &lt;/li&gt;&#10;                &lt;li className=&quot;text-gray-900 dark:text-white font-medium&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-chart-line mr-1&quot;&gt;&lt;/i&gt;Advanced Order Management&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;&#10;            &lt;/nav&gt;&#10;&#10;            {/* Real-time Status Indicator */}&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div className={`w-3 h-3 rounded-full ${autoRefresh ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}&gt;&lt;/div&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                {autoRefresh ? 'Live' : 'Static'}&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Enhanced Page Header with Quick Actions */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-blue-600 p-4 rounded-2xl&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                  Advanced Order Management&#10;                &lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                  Comprehensive order tracking and analytics dashboard&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4 mt-2&quot;&gt;&#10;                  &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                    Last updated: {new Date().toLocaleTimeString()}&#10;                  &lt;/span&gt;&#10;                  {autoRefresh &amp;&amp; (&#10;                    &lt;span className=&quot;bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                      Auto-refresh enabled&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6 lg:mt-0 flex flex-wrap gap-3&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setAutoRefresh(!autoRefresh)}&#10;                className={`inline-flex items-center px-4 py-3 rounded-lg font-medium transition ${&#10;                  autoRefresh &#10;                    ? 'bg-green-600 hover:bg-green-700 text-white' &#10;                    : 'bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'&#10;                }`}&#10;              &gt;&#10;                &lt;i className={`fas ${autoRefresh ? 'fa-pause' : 'fa-play'} mr-2`}&gt;&lt;/i&gt;&#10;                {autoRefresh ? 'Pause' : 'Auto'} Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; setShowExportModal(true)}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;                Export&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={handleRefresh}&#10;                disabled={refreshing}&#10;                className=&quot;inline-flex items-center px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i&#10;                  className={`fas fa-sync-alt mr-2 ${refreshing ? &quot;animate-spin&quot; : &quot;&quot;}`}&#10;                &gt;&lt;/i&gt;&#10;                Refresh&#10;              &lt;/button&gt;&#10;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;inline-flex items-center px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                Back to Manage&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Order Summary Cards with Animations */}&#10;          &lt;div className=&quot;grid grid-cols-2 md:grid-cols-6 gap-4 mb-8&quot;&gt;&#10;            {Object.entries(orderSummary).map(([key, value], index) =&gt; {&#10;              const config = {&#10;                total: { icon: 'fa-shopping-cart', color: 'gray', label: 'Total' },&#10;                pending: { icon: 'fa-clock', color: 'yellow', label: 'Pending' },&#10;                confirmed: { icon: 'fa-check', color: 'blue', label: 'Confirmed' },&#10;                shipped: { icon: 'fa-truck', color: 'purple', label: 'Shipped' },&#10;                delivered: { icon: 'fa-check-circle', color: 'green', label: 'Delivered' },&#10;                cancelled: { icon: 'fa-times-circle', color: 'red', label: 'Cancelled' }&#10;              }[key];&#10;&#10;              return (&#10;                &lt;div&#10;                  key={key}&#10;                  className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 transform hover:scale-105 transition-transform duration-200 cursor-pointer&quot;&#10;                  onClick={() =&gt; setStatusFilter(key === 'total' ? 'All Orders' : config.label.toLowerCase())}&#10;                  style={{ animationDelay: `${index * 100}ms` }}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;div className={`p-2 bg-${config.color}-100 dark:bg-${config.color}-900 rounded-lg`}&gt;&#10;                      &lt;i className={`fas ${config.icon} text-${config.color}-600 dark:text-${config.color}-300`}&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;ml-3&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {config.label}&#10;                      &lt;/p&gt;&#10;                      &lt;p className={`text-2xl font-bold text-${config.color}-600 dark:text-${config.color}-400`}&gt;&#10;                        {value}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Filters and Controls */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6&quot;&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4 lg:mb-0&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Advanced Filters &amp; Controls&#10;              &lt;/h3&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex space-x-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1&quot;&gt;&#10;                {['detailed', 'compact'].map(mode =&gt; (&#10;                  &lt;button&#10;                    key={mode}&#10;                    onClick={() =&gt; setViewMode(mode)}&#10;                    className={`px-4 py-2 rounded-md text-sm font-medium transition ${&#10;                      viewMode === mode&#10;                        ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'&#10;                        : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'&#10;                    }`}&#10;                  &gt;&#10;                    &lt;i className={`fas ${&#10;                      mode === 'detailed' ? 'fa-list' :&#10;                      mode === 'compact' ? 'fa-th-list' : ''&#10;                    } mr-1`}&gt;&lt;/i&gt;&#10;                    {mode.charAt(0).toUpperCase() + mode.slice(1)}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4&quot;&gt;&#10;              {/* Search */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Search Orders&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    placeholder=&quot;Search by customer, email, or ID...&quot;&#10;                    value={searchTerm}&#10;                    onChange={handleSearchChange}&#10;                    className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                  &lt;i className=&quot;fas fa-search absolute left-3 top-3 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Status Filter */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Status Filter&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={statusFilter}&#10;                  onChange={handleStatusChange}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;All Orders&quot;&gt;All Orders&lt;/option&gt;&#10;                  &lt;option value=&quot;pending&quot;&gt;Pending&lt;/option&gt;&#10;                  &lt;option value=&quot;confirmed&quot;&gt;Confirmed&lt;/option&gt;&#10;                  &lt;option value=&quot;shipped&quot;&gt;Shipped&lt;/option&gt;&#10;                  &lt;option value=&quot;delivered&quot;&gt;Delivered&lt;/option&gt;&#10;                  &lt;option value=&quot;cancelled&quot;&gt;Cancelled&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Sort By */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Sort By&#10;                &lt;/label&gt;&#10;                &lt;select&#10;                  value={sortBy}&#10;                  onChange={(e) =&gt; setSortBy(e.target.value)}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                  &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                  &lt;option value=&quot;highest-value&quot;&gt;Highest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;lowest-value&quot;&gt;Lowest Value&lt;/option&gt;&#10;                  &lt;option value=&quot;customer-name&quot;&gt;Customer Name&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Date Range */}&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date From&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.start}&#10;                  onChange={(e) =&gt; setDateRange(prev =&gt; ({ ...prev, start: e.target.value }))}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                  Date To&#10;                &lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;date&quot;&#10;                  value={dateRange.end}&#10;                  onChange={(e) =&gt; setDateRange(prev =&gt; ({ ...prev, end: e.target.value }))}&#10;                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Clear Filters */}&#10;              &lt;div className=&quot;flex items-end&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: '', end: '' });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Bulk Operations */}&#10;            {selectedOrders.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center&quot;&gt;&#10;                  &lt;div className=&quot;mb-3 sm:mb-0&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                      {selectedOrders.length} order(s) selected&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                      Choose a bulk action to apply to selected orders&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate('confirmed')}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-check mr-1&quot;&gt;&lt;/i&gt;&#10;                      Confirm All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleBulkStatusUpdate('shipped')}&#10;                      className=&quot;bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-truck mr-1&quot;&gt;&lt;/i&gt;&#10;                      Ship All&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setSelectedOrders([])}&#10;                      className=&quot;bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-times mr-1&quot;&gt;&lt;/i&gt;&#10;                      Clear Selection&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Orders List - Enhanced with different view modes */}&#10;          {currentOrders.length === 0 ? (&#10;            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-12 text-center&quot;&gt;&#10;              &lt;div className=&quot;max-w-md mx-auto&quot;&gt;&#10;                &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                  No orders found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;                  {statusFilter === &quot;All Orders&quot;&#10;                    ? &quot;You haven't received any orders yet, or no orders match your current filters.&quot;&#10;                    : `No ${statusFilter.toLowerCase()} orders found matching your criteria.`}&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setSearchTerm(&quot;&quot;);&#10;                    setStatusFilter(&quot;All Orders&quot;);&#10;                    setSortBy(&quot;newest&quot;);&#10;                    setDateRange({ start: '', end: '' });&#10;                    setSelectedOrders([]);&#10;                  }}&#10;                  className=&quot;bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg font-medium transition&quot;&#10;                &gt;&#10;                  Clear All Filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className={`space-y-${viewMode === 'compact' ? '3' : '6'}`}&gt;&#10;              {/* Select All Checkbox */}&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                &lt;label className=&quot;flex items-center&quot;&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={selectedOrders.length === currentOrders.length}&#10;                    onChange={(e) =&gt; {&#10;                      if (e.target.checked) {&#10;                        setSelectedOrders(currentOrders.map(order =&gt; order._id));&#10;                      } else {&#10;                        setSelectedOrders([]);&#10;                      }&#10;                    }}&#10;                    className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                  /&gt;&#10;                  &lt;span className=&quot;ml-2 text-sm font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Select all visible orders ({currentOrders.length})&#10;                  &lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Orders */}&#10;              {currentOrders.map((order) =&gt; (&#10;                &lt;div&#10;                  key={order._id}&#10;                  className={`bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden transform hover:scale-[1.01] transition-all duration-200 ${&#10;                    selectedOrders.includes(order._id) ? 'ring-2 ring-green-500' : ''&#10;                  }`}&#10;                &gt;&#10;                  &lt;div className={`p-${viewMode === 'compact' ? '4' : '6'}`}&gt;&#10;                    {/* Order Header with Checkbox */}&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedOrders.includes(order._id)}&#10;                          onChange={(e) =&gt; {&#10;                            if (e.target.checked) {&#10;                              setSelectedOrders(prev =&gt; [...prev, order._id]);&#10;                            } else {&#10;                              setSelectedOrders(prev =&gt; prev.filter(id =&gt; id !== order._id));&#10;                            }&#10;                          }}&#10;                          className=&quot;rounded border-gray-300 text-green-600 focus:ring-green-500&quot;&#10;                        /&gt;&#10;                        &lt;div&gt;&#10;                          &lt;h3 className={`${viewMode === 'compact' ? 'text-base' : 'text-lg'} font-semibold text-gray-900 dark:text-white`}&gt;&#10;                            Order #&#10;                            {order._id?.slice(-8)?.toUpperCase() || &quot;N/A&quot;}&#10;                          &lt;/h3&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Placed on {formatDate(order.createdAt)}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                        {getStatusBadge(order.status)}&#10;                        &lt;span className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {formatPrice(&#10;                            order.farmerSubtotal || order.total || 0,&#10;                          )}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Customer Information */}&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Customer Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Name:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerName || order.userName || &quot;Customer&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Email:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerEmail ||&#10;                              order.userEmail ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Phone:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.customerPhone ||&#10;                              order.userPhone ||&#10;                              &quot;Not available&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;bg-gray-50 dark:bg-gray-700 rounded-lg p-4&quot;&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Delivery Information&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Address:&lt;/span&gt;{&quot; &quot;}&#10;                            {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress&#10;                              ? `${order.deliveryAddress.address || &quot;&quot;}, ${order.deliveryAddress.city || &quot;&quot;} ${order.deliveryAddress.postalCode || &quot;&quot;}`&#10;                                  .replace(/^,\s*/, &quot;&quot;)&#10;                                  .replace(/,\s*$/, &quot;&quot;) || &quot;Not provided&quot;&#10;                              : order.deliveryAddress || &quot;Not provided&quot;}&#10;                          &lt;/p&gt;&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.name &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Recipient:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.name}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.phone &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;Contact:&lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.phone}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          {typeof order.deliveryAddress === &quot;object&quot; &amp;&amp;&#10;                            order.deliveryAddress?.instructions &amp;&amp; (&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  Instructions:&#10;                                &lt;/span&gt;{&quot; &quot;}&#10;                                {order.deliveryAddress.instructions}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Payment Method:&lt;/span&gt;{&quot; &quot;}&#10;                            {order.paymentMethod || &quot;Cash on Delivery&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Order Items */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-6 mb-6&quot;&gt;&#10;                      &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                        Order Items ({order.items?.length || 0})&#10;                      &lt;/h4&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {order.items?.map((item, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;flex items-center justify-between py-3 px-4 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                              &lt;img&#10;                                src={&#10;                                  item.image ||&#10;                                  &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=80&amp;h=80&amp;fit=crop&quot;&#10;                                }&#10;                                alt={item.name || item.productName}&#10;                                className=&quot;w-16 h-16 rounded-lg object-cover&quot;&#10;                              /&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h5 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                  {item.name || item.productName}&#10;                                &lt;/h5&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Quantity: {item.quantity} {item.unit || &quot;kg&quot;}&#10;                                &lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                  Unit Price: {formatPrice(item.price)}&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                              &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                                {formatPrice(item.price * item.quantity)}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Action Buttons */}&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-600 pt-4&quot;&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-3&quot;&gt;&#10;                        {getOrderActions(order)}&#10;                        &lt;Link&#10;                          href={`/farmer-orders/${order._id}`}&#10;                          className=&quot;bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                          View Details&#10;                        &lt;/Link&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Pagination */}&#10;          {totalPages &gt; 1 &amp;&amp; (&#10;            &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#10;              &lt;nav aria-label=&quot;Pagination&quot;&gt;&#10;                &lt;ul className=&quot;inline-flex items-center -space-x-px text-gray-600 dark:text-gray-300&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                      }&#10;                      disabled={currentPage === 1}&#10;                      className=&quot;block px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                  {[...Array(totalPages)].map((_, index) =&gt; (&#10;                    &lt;li key={index}&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(index + 1)}&#10;                        className={`px-3 py-2 leading-tight border ${&#10;                          currentPage === index + 1&#10;                            ? &quot;text-white bg-green-600 border-green-600 hover:bg-green-700&quot;&#10;                            : &quot;text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {index + 1}&#10;                      &lt;/button&gt;&#10;                    &lt;/li&gt;&#10;                  ))}&#10;                  &lt;li&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        setCurrentPage((prev) =&gt; Math.min(prev + 1, totalPages))&#10;                      }&#10;                      disabled={currentPage === totalPages}&#10;                      className=&quot;block px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ul&gt;&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>