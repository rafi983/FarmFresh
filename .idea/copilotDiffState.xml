<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/[id]/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/[id]/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // First, let's check what products actually exist&#10;    const allProductsCheck = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    let targetProduct = null;&#10;&#10;    // Try multiple approaches to find the product&#10;&#10;    // 1. Try exact string match&#10;    targetProduct = await db.collection(&quot;products&quot;).findOne({ _id: id });&#10;&#10;    // 2. If not found and ID looks like ObjectId, try ObjectId&#10;    if (!targetProduct &amp;&amp; ObjectId.isValid(id)) {&#10;      targetProduct = await db&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(id) });&#10;    }&#10;&#10;    // 3. Try farmerId field match (in case it's stored there)&#10;    if (!targetProduct) {&#10;      targetProduct = await db.collection(&quot;products&quot;).findOne({ farmerId: id });&#10;&#10;      // If we found a product by farmerId, this means we're looking for farmer details, not product details&#10;      if (targetProduct) {&#10;        // Since this is a farmer ID, let's find all products by this farmer and return farmer info&#10;        const farmerProducts = await db&#10;          .collection(&quot;products&quot;)&#10;          .find({ farmerId: id })&#10;          .toArray();&#10;&#10;        // Get farmer info from the first product or create default&#10;        const farmerInfo = targetProduct.farmer || {&#10;          name: &quot;Local Farmer&quot;,&#10;          location: &quot;Bangladesh&quot;,&#10;          bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;          experience: 5,&#10;          id: id,&#10;        };&#10;&#10;        // Return farmer details with their products&#10;        return NextResponse.json({&#10;          isFarmerDetails: true,&#10;          farmer: farmerInfo,&#10;          farmerProducts: farmerProducts.map((p) =&gt; ({&#10;            ...p,&#10;            images: (() =&gt; {&#10;              const imageArray = [];&#10;              if (p.image) imageArray.push(p.image);&#10;              if (p.images &amp;&amp; Array.isArray(p.images))&#10;                imageArray.push(...p.images);&#10;              return [&#10;                ...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim())),&#10;              ];&#10;            })(),&#10;          })),&#10;          totalProducts: farmerProducts.length,&#10;          farmerId: id,&#10;        });&#10;      }&#10;    }&#10;&#10;    // 4. Try searching in nested structures (legacy support)&#10;    if (!targetProduct) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;&#10;      for (const doc of productDocuments) {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          const found = doc.products.find(&#10;            (product) =&gt;&#10;              product._id === id ||&#10;              product._id?.toString() === id ||&#10;              product.farmerId === id ||&#10;              (ObjectId.isValid(id) &amp;&amp;&#10;                product._id?.toString() === new ObjectId(id).toString()),&#10;          );&#10;          if (found) {&#10;            targetProduct = found;&#10;            break;&#10;          }&#10;        }&#10;      }&#10;    }&#10;&#10;    // 5. Last resort: search by any field that might contain this ID&#10;    if (!targetProduct) {&#10;      const regexSearch = await db.collection(&quot;products&quot;).findOne({&#10;        $or: [&#10;          { _id: { $regex: id, $options: &quot;i&quot; } },&#10;          { farmerId: { $regex: id, $options: &quot;i&quot; } },&#10;          { &quot;farmer.id&quot;: id },&#10;          { &quot;farmer._id&quot;: id },&#10;        ],&#10;      });&#10;      targetProduct = regexSearch;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        {&#10;          error: &quot;Product not found&quot;,&#10;          searchedId: id,&#10;          totalProductsInDb: allProductsCheck.length,&#10;          availableIds: allProductsCheck.slice(0, 10).map((p) =&gt; p._id),&#10;        },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Get all products for finding related products&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If products are in nested structure, extract them&#10;    if (allProducts.length &gt; 0 &amp;&amp; allProducts[0].products) {&#10;      let extractedProducts = [];&#10;      allProducts.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          extractedProducts = extractedProducts.concat(doc.products);&#10;        }&#10;      });&#10;      allProducts = extractedProducts;&#10;    }&#10;&#10;    // Add default values for missing fields&#10;    const product = {&#10;      ...targetProduct,&#10;      // Combine both image sources - single image field and images array&#10;      images: (() =&gt; {&#10;        const imageArray = [];&#10;&#10;        // Add single image if it exists&#10;        if (targetProduct.image) {&#10;          imageArray.push(targetProduct.image);&#10;        }&#10;&#10;        // Add images array if it exists&#10;        if (targetProduct.images &amp;&amp; Array.isArray(targetProduct.images)) {&#10;          imageArray.push(...targetProduct.images);&#10;        }&#10;&#10;        // Remove duplicates and empty values&#10;        return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;      })(),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch real performance metrics from orders collection&#10;    const performanceMetrics = await calculateProductPerformance(db, id);&#10;&#10;    // Add performance metrics to the product&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products (same category, exclude current product)&#10;    let relatedProducts = allProducts&#10;      .filter(&#10;        (p) =&gt;&#10;          p.category === enhancedProduct.category &amp;&amp;&#10;          p._id !== enhancedProduct._id,&#10;      )&#10;      .slice(0, 4)&#10;      .map((p) =&gt; ({&#10;        ...p,&#10;        // Fix related products images too - combine both sources&#10;        images: (() =&gt; {&#10;          const imageArray = [];&#10;&#10;          // Add single image if it exists&#10;          if (p.image) {&#10;            imageArray.push(p.image);&#10;          }&#10;&#10;          // Add images array if it exists&#10;          if (p.images &amp;&amp; Array.isArray(p.images)) {&#10;            imageArray.push(...p.images);&#10;          }&#10;&#10;          // Remove duplicates and empty values&#10;          return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;        })(),&#10;        farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;        stock: p.stock || 50,&#10;        isOrganic: p.isOrganic || false,&#10;        isFresh: p.isFresh || true,&#10;      }));&#10;&#10;    // Calculate real ratings for related products too&#10;    relatedProducts = enhanceProductsWithRatings(relatedProducts);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date().toISOString();&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import {&#10;  enhanceProductWithRatings,&#10;  enhanceProductsWithRatings,&#10;} from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request, { params }) {&#10;  try {&#10;    const { id } = await params;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // First, let's check what products actually exist&#10;    const allProductsCheck = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    let targetProduct = null;&#10;&#10;    // Try multiple approaches to find the product&#10;&#10;    // 1. Try exact string match&#10;    targetProduct = await db.collection(&quot;products&quot;).findOne({ _id: id });&#10;&#10;    // 2. If not found and ID looks like ObjectId, try ObjectId&#10;    if (!targetProduct &amp;&amp; ObjectId.isValid(id)) {&#10;      targetProduct = await db&#10;        .collection(&quot;products&quot;)&#10;        .findOne({ _id: new ObjectId(id) });&#10;    }&#10;&#10;    // 3. Try farmerId field match (in case it's stored there)&#10;    if (!targetProduct) {&#10;      targetProduct = await db.collection(&quot;products&quot;).findOne({ farmerId: id });&#10;&#10;      // If we found a product by farmerId, this means we're looking for farmer details, not product details&#10;      if (targetProduct) {&#10;        // Since this is a farmer ID, let's find all products by this farmer and return farmer info&#10;        const farmerProducts = await db&#10;          .collection(&quot;products&quot;)&#10;          .find({ farmerId: id })&#10;          .toArray();&#10;&#10;        // Get farmer info from the first product or create default&#10;        const farmerInfo = targetProduct.farmer || {&#10;          name: &quot;Local Farmer&quot;,&#10;          location: &quot;Bangladesh&quot;,&#10;          bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;          experience: 5,&#10;          id: id,&#10;        };&#10;&#10;        // Return farmer details with their products&#10;        return NextResponse.json({&#10;          isFarmerDetails: true,&#10;          farmer: farmerInfo,&#10;          farmerProducts: farmerProducts.map((p) =&gt; ({&#10;            ...p,&#10;            images: (() =&gt; {&#10;              const imageArray = [];&#10;              if (p.image) imageArray.push(p.image);&#10;              if (p.images &amp;&amp; Array.isArray(p.images))&#10;                imageArray.push(...p.images);&#10;              return [&#10;                ...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim())),&#10;              ];&#10;            })(),&#10;          })),&#10;          totalProducts: farmerProducts.length,&#10;          farmerId: id,&#10;        });&#10;      }&#10;    }&#10;&#10;    // 4. Try searching in nested structures (legacy support)&#10;    if (!targetProduct) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;&#10;      for (const doc of productDocuments) {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          const found = doc.products.find(&#10;            (product) =&gt;&#10;              product._id === id ||&#10;              product._id?.toString() === id ||&#10;              product.farmerId === id ||&#10;              (ObjectId.isValid(id) &amp;&amp;&#10;                product._id?.toString() === new ObjectId(id).toString()),&#10;          );&#10;          if (found) {&#10;            targetProduct = found;&#10;            break;&#10;          }&#10;        }&#10;      }&#10;    }&#10;&#10;    // 5. Last resort: search by any field that might contain this ID&#10;    if (!targetProduct) {&#10;      const regexSearch = await db.collection(&quot;products&quot;).findOne({&#10;        $or: [&#10;          { _id: { $regex: id, $options: &quot;i&quot; } },&#10;          { farmerId: { $regex: id, $options: &quot;i&quot; } },&#10;          { &quot;farmer.id&quot;: id },&#10;          { &quot;farmer._id&quot;: id },&#10;        ],&#10;      });&#10;      targetProduct = regexSearch;&#10;    }&#10;&#10;    if (!targetProduct) {&#10;      return NextResponse.json(&#10;        {&#10;          error: &quot;Product not found&quot;,&#10;          searchedId: id,&#10;          totalProductsInDb: allProductsCheck.length,&#10;          availableIds: allProductsCheck.slice(0, 10).map((p) =&gt; p._id),&#10;        },&#10;        { status: 404 },&#10;      );&#10;    }&#10;&#10;    // Get all products for finding related products&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If products are in nested structure, extract them&#10;    if (allProducts.length &gt; 0 &amp;&amp; allProducts[0].products) {&#10;      let extractedProducts = [];&#10;      allProducts.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          extractedProducts = extractedProducts.concat(doc.products);&#10;        }&#10;      });&#10;      allProducts = extractedProducts;&#10;    }&#10;&#10;    // Add default values for missing fields&#10;    const product = {&#10;      ...targetProduct,&#10;      // Combine both image sources - single image field and images array&#10;      images: (() =&gt; {&#10;        const imageArray = [];&#10;&#10;        // Add single image if it exists&#10;        if (targetProduct.image) {&#10;          imageArray.push(targetProduct.image);&#10;        }&#10;&#10;        // Add images array if it exists&#10;        if (targetProduct.images &amp;&amp; Array.isArray(targetProduct.images)) {&#10;          imageArray.push(...targetProduct.images);&#10;        }&#10;&#10;        // Remove duplicates and empty values&#10;        return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;      })(),&#10;      farmer: targetProduct.farmer || {&#10;        name: &quot;Local Farmer&quot;,&#10;        location: &quot;Bangladesh&quot;,&#10;        bio: &quot;Dedicated to providing fresh, high-quality produce using sustainable farming practices.&quot;,&#10;        experience: 5,&#10;      },&#10;      stock: targetProduct.stock || 50,&#10;      isOrganic: targetProduct.isOrganic || false,&#10;      isFresh: targetProduct.isFresh || true,&#10;      features: targetProduct.features || [&#10;        &quot;Fresh&quot;,&#10;        &quot;Locally sourced&quot;,&#10;        &quot;High quality&quot;,&#10;      ],&#10;    };&#10;&#10;    // Calculate real ratings and review counts from reviews data&#10;    const enhancedProduct = enhanceProductWithRatings(product);&#10;&#10;    // Fetch real performance metrics from orders collection&#10;    const performanceMetrics = await calculateProductPerformance(db, id);&#10;&#10;    // Add performance metrics to the product&#10;    enhancedProduct.performanceMetrics = performanceMetrics;&#10;&#10;    // Get related products (same category, exclude current product)&#10;    let relatedProducts = allProducts&#10;      .filter(&#10;        (p) =&gt;&#10;          p.category === enhancedProduct.category &amp;&amp;&#10;          p._id !== enhancedProduct._id,&#10;      )&#10;      .slice(0, 4)&#10;      .map((p) =&gt; ({&#10;        ...p,&#10;        // Fix related products images too - combine both sources&#10;        images: (() =&gt; {&#10;          const imageArray = [];&#10;&#10;          // Add single image if it exists&#10;          if (p.image) {&#10;            imageArray.push(p.image);&#10;          }&#10;&#10;          // Add images array if it exists&#10;          if (p.images &amp;&amp; Array.isArray(p.images)) {&#10;            imageArray.push(...p.images);&#10;          }&#10;&#10;          // Remove duplicates and empty values&#10;          return [...new Set(imageArray.filter((img) =&gt; img &amp;&amp; img.trim()))];&#10;        })(),&#10;        farmer: p.farmer || { name: &quot;Local Farmer&quot;, location: &quot;Bangladesh&quot; },&#10;        stock: p.stock || 50,&#10;        isOrganic: p.isOrganic || false,&#10;        isFresh: p.isFresh || true,&#10;      }));&#10;&#10;    // Calculate real ratings for related products too&#10;    relatedProducts = await enhanceProductsWithRatings(relatedProducts, db);&#10;&#10;    return NextResponse.json({&#10;      product: enhancedProduct,&#10;      relatedProducts,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching product details:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch product details&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// PUT - Update a product&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;    const updateData = await request.json();&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Remove _id from updateData if it exists to avoid conflicts&#10;    delete updateData._id;&#10;&#10;    // Add updated timestamp&#10;    updateData.updatedAt = new Date().toISOString();&#10;&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .updateOne({ _id: new ObjectId(id) }, { $set: updateData });&#10;&#10;    if (result.matchedCount === 0) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Fetch the updated product to return&#10;    const updatedProduct = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product updated successfully&quot;,&#10;      product: updatedProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to update product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// DELETE - Delete a product&#10;export async function DELETE(request, { params }) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const { id } = await params;&#10;&#10;    if (!ObjectId.isValid(id)) {&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid product ID&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // First check if product exists&#10;    const product = await db&#10;      .collection(&quot;products&quot;)&#10;      .findOne({ _id: new ObjectId(id) });&#10;&#10;    if (!product) {&#10;      return NextResponse.json({ error: &quot;Product not found&quot; }, { status: 404 });&#10;    }&#10;&#10;    // Optional: Check if there are any pending orders with this product&#10;    const pendingOrders = await db.collection(&quot;orders&quot;).findOne({&#10;      &quot;items.productId&quot;: id,&#10;      status: { $in: [&quot;pending&quot;, &quot;confirmed&quot;, &quot;shipped&quot;] },&#10;    });&#10;&#10;    if (pendingOrders) {&#10;      return NextResponse.json(&#10;        {&#10;          error:&#10;            &quot;Cannot delete product with pending orders. Please wait for all orders to be completed or cancelled.&quot;,&#10;          hasPendingOrders: true,&#10;        },&#10;        { status: 409 },&#10;      );&#10;    }&#10;&#10;    // Delete the product&#10;    const result = await db&#10;      .collection(&quot;products&quot;)&#10;      .deleteOne({ _id: new ObjectId(id) });&#10;&#10;    if (result.deletedCount === 0) {&#10;      return NextResponse.json(&#10;        { error: &quot;Failed to delete product&quot; },&#10;        { status: 500 },&#10;      );&#10;    }&#10;&#10;    // Optional: Remove product from any user favorites&#10;    await db&#10;      .collection(&quot;users&quot;)&#10;      .updateMany({ favorites: id }, { $pull: { favorites: id } });&#10;&#10;    return NextResponse.json({&#10;      message: &quot;Product deleted successfully&quot;,&#10;      deletedProductId: id,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to delete product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;// Helper function to calculate real product performance metrics from orders and reviews&#10;async function calculateProductPerformance(db, productId) {&#10;  try {&#10;    // Handle both string IDs and ObjectIds&#10;    let productIdQuery = productId;&#10;    if (ObjectId.isValid(productId)) {&#10;      productIdQuery = new ObjectId(productId);&#10;    }&#10;&#10;    // Calculate sales metrics from completed orders&#10;    const salesData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            status: { $in: [&quot;completed&quot;, &quot;delivered&quot;, &quot;shipped&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            totalSales: { $sum: &quot;$items.quantity&quot; },&#10;            totalRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;            totalOrders: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Calculate review metrics&#10;    const reviewsData = await db&#10;      .collection(&quot;reviews&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { productId: productId },&#10;              { productId: productIdQuery },&#10;              { productId: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            averageRating: { $avg: &quot;$rating&quot; },&#10;            totalReviews: { $sum: 1 },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    // Get recent orders count (last 30 days)&#10;    const thirtyDaysAgo = new Date();&#10;    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);&#10;&#10;    const recentOrdersData = await db&#10;      .collection(&quot;orders&quot;)&#10;      .aggregate([&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { createdAt: { $gte: thirtyDaysAgo.toISOString() } },&#10;              { createdAt: { $gte: thirtyDaysAgo } },&#10;            ],&#10;            status: { $in: [&quot;completed&quot;, &quot;shipped&quot;, &quot;delivered&quot;] },&#10;          },&#10;        },&#10;        { $unwind: &quot;$items&quot; },&#10;        {&#10;          $match: {&#10;            $or: [&#10;              { &quot;items.productId&quot;: productId },&#10;              { &quot;items.productId&quot;: productIdQuery },&#10;              { &quot;items.productId&quot;: productId.toString() },&#10;            ],&#10;          },&#10;        },&#10;        {&#10;          $group: {&#10;            _id: null,&#10;            recentSales: { $sum: &quot;$items.quantity&quot; },&#10;            recentRevenue: {&#10;              $sum: { $multiply: [&quot;$items.quantity&quot;, &quot;$items.price&quot;] },&#10;            },&#10;          },&#10;        },&#10;      ])&#10;      .toArray();&#10;&#10;    const salesMetrics = salesData[0] || {};&#10;    const reviewsMetrics = reviewsData[0] || {};&#10;    const recentMetrics = recentOrdersData[0] || {};&#10;&#10;    return {&#10;      totalSales: salesMetrics.totalSales || 0,&#10;      totalRevenue: salesMetrics.totalRevenue || 0,&#10;      totalOrders: salesMetrics.totalOrders || 0,&#10;      averageRating: reviewsMetrics.averageRating || 0,&#10;      totalReviews: reviewsMetrics.totalReviews || 0,&#10;      recentSales: recentMetrics.recentSales || 0,&#10;      recentRevenue: recentMetrics.recentRevenue || 0,&#10;      // Add some calculated metrics&#10;      averageOrderValue:&#10;        salesMetrics.totalOrders &gt; 0&#10;          ? salesMetrics.totalRevenue / salesMetrics.totalOrders&#10;          : 0,&#10;      salesTrend: recentMetrics.recentSales &gt; 0 ? &quot;up&quot; : &quot;stable&quot;,&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error calculating product performance:&quot;, error);&#10;    return {&#10;      totalSales: 0,&#10;      totalRevenue: 0,&#10;      totalOrders: 0,&#10;      averageRating: 0,&#10;      totalReviews: 0,&#10;      recentSales: 0,&#10;      recentRevenue: 0,&#10;      averageOrderValue: 0,&#10;      salesTrend: &quot;stable&quot;,&#10;    };&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/products/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/products/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : null;&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Try to get products directly from the collection first&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If no direct products found, try the nested structure&#10;    if (allProducts.length === 0) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;      productDocuments.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          allProducts = allProducts.concat(doc.products);&#10;        }&#10;      });&#10;    }&#10;&#10;    // Apply search filter&#10;    if (search) {&#10;      const searchRegex = new RegExp(search, &quot;i&quot;);&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description) ||&#10;          searchRegex.test(product.category),&#10;      );&#10;    }&#10;&#10;    // Apply category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt; product.category === category,&#10;      );&#10;    }&#10;&#10;    // Apply featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      allProducts = allProducts.filter((product) =&gt; product.featured);&#10;    }&#10;&#10;    // Sort products based on sortBy parameter&#10;    if (sortBy) {&#10;      switch (sortBy) {&#10;        case &quot;purchases&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.purchaseCount || 0) - (a.purchaseCount || 0),&#10;          );&#10;          break;&#10;        case &quot;newest&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;          break;&#10;        case &quot;price-low&quot;:&#10;          allProducts.sort((a, b) =&gt; (a.price || 0) - (b.price || 0));&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          allProducts.sort((a, b) =&gt; (b.price || 0) - (a.price || 0));&#10;          break;&#10;        case &quot;rating&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.averageRating || 0) - (a.averageRating || 0),&#10;          );&#10;          break;&#10;        default:&#10;          // Default to newest&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;      }&#10;    }&#10;&#10;    // Enhance products with ratings&#10;    console.log(`Enhancing ${allProducts.length} products with ratings...`);&#10;    allProducts = await enhanceProductsWithRatings(allProducts, db);&#10;&#10;    // Debug: Log a sample of enhanced products&#10;    console.log(&quot;Sample enhanced products:&quot;);&#10;    allProducts.slice(0, 3).forEach((p) =&gt; {&#10;      console.log(&#10;        `- ${p.name}: ${p.averageRating} rating, ${p.reviewCount} reviews (ID: ${p._id})`,&#10;      );&#10;    });&#10;&#10;    // Apply pagination&#10;    const itemsPerPage = 12;&#10;    const startIndex = (page - 1) * itemsPerPage;&#10;    const endIndex = limit&#10;      ? Math.min(startIndex + (limit || itemsPerPage), allProducts.length)&#10;      : startIndex + itemsPerPage;&#10;&#10;    const paginatedProducts = limit&#10;      ? allProducts.slice(0, limit)&#10;      : allProducts.slice(startIndex, endIndex);&#10;&#10;    const totalPages = Math.ceil(allProducts.length / itemsPerPage);&#10;&#10;    return NextResponse.json({&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage: page,&#10;        totalPages,&#10;        totalProducts: allProducts.length,&#10;        hasNext: endIndex &lt; allProducts.length,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch products&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const productData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Add timestamps and default values&#10;    const newProduct = {&#10;      ...productData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      purchaseCount: 0,&#10;      featured: false,&#10;      status: &quot;active&quot;,&#10;      stock: productData.stock || 0,&#10;      averageRating: 0,&#10;      totalRatings: 0,&#10;    };&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne(newProduct);&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;      product: newProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { enhanceProductsWithRatings } from &quot;@/lib/reviewUtils&quot;;&#10;&#10;export async function GET(request) {&#10;  try {&#10;    const { searchParams } = new URL(request.url);&#10;    const search = searchParams.get(&quot;search&quot;);&#10;    const category = searchParams.get(&quot;category&quot;);&#10;    const featured = searchParams.get(&quot;featured&quot;);&#10;    const sortBy = searchParams.get(&quot;sortBy&quot;);&#10;    const limit = searchParams.get(&quot;limit&quot;)&#10;      ? parseInt(searchParams.get(&quot;limit&quot;))&#10;      : null;&#10;    const page = parseInt(searchParams.get(&quot;page&quot;)) || 1;&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Try to get products directly from the collection first&#10;    let allProducts = await db.collection(&quot;products&quot;).find({}).toArray();&#10;&#10;    // If no direct products found, try the nested structure&#10;    if (allProducts.length === 0) {&#10;      const productDocuments = await db&#10;        .collection(&quot;products&quot;)&#10;        .find({})&#10;        .toArray();&#10;      productDocuments.forEach((doc) =&gt; {&#10;        if (doc.products &amp;&amp; Array.isArray(doc.products)) {&#10;          allProducts = allProducts.concat(doc.products);&#10;        }&#10;      });&#10;    }&#10;&#10;    // Apply search filter&#10;    if (search) {&#10;      const searchRegex = new RegExp(search, &quot;i&quot;);&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt;&#10;          searchRegex.test(product.name) ||&#10;          searchRegex.test(product.description) ||&#10;          searchRegex.test(product.category),&#10;      );&#10;    }&#10;&#10;    // Apply category filter&#10;    if (category &amp;&amp; category !== &quot;All Categories&quot;) {&#10;      allProducts = allProducts.filter(&#10;        (product) =&gt; product.category === category,&#10;      );&#10;    }&#10;&#10;    // Apply featured filter&#10;    if (featured === &quot;true&quot;) {&#10;      allProducts = allProducts.filter((product) =&gt; product.featured);&#10;    }&#10;&#10;    // Sort products based on sortBy parameter&#10;    if (sortBy) {&#10;      switch (sortBy) {&#10;        case &quot;purchases&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.purchaseCount || 0) - (a.purchaseCount || 0),&#10;          );&#10;          break;&#10;        case &quot;newest&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;          break;&#10;        case &quot;price-low&quot;:&#10;          allProducts.sort((a, b) =&gt; (a.price || 0) - (b.price || 0));&#10;          break;&#10;        case &quot;price-high&quot;:&#10;          allProducts.sort((a, b) =&gt; (b.price || 0) - (a.price || 0));&#10;          break;&#10;        case &quot;rating&quot;:&#10;          allProducts.sort(&#10;            (a, b) =&gt; (b.averageRating || 0) - (a.averageRating || 0),&#10;          );&#10;          break;&#10;        default:&#10;          // Default to newest&#10;          allProducts.sort(&#10;            (a, b) =&gt;&#10;              new Date(b.createdAt || b.dateAdded) -&#10;              new Date(a.createdAt || a.dateAdded),&#10;          );&#10;      }&#10;    }&#10;&#10;    // Enhance products with ratings&#10;    allProducts = await enhanceProductsWithRatings(allProducts, db);&#10;&#10;    // Apply pagination&#10;    const itemsPerPage = 12;&#10;    const startIndex = (page - 1) * itemsPerPage;&#10;    const endIndex = limit&#10;      ? Math.min(startIndex + (limit || itemsPerPage), allProducts.length)&#10;      : startIndex + itemsPerPage;&#10;&#10;    const paginatedProducts = limit&#10;      ? allProducts.slice(0, limit)&#10;      : allProducts.slice(startIndex, endIndex);&#10;&#10;    const totalPages = Math.ceil(allProducts.length / itemsPerPage);&#10;&#10;    return NextResponse.json({&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage: page,&#10;        totalPages,&#10;        totalProducts: allProducts.length,&#10;        hasNext: endIndex &lt; allProducts.length,&#10;        hasPrev: page &gt; 1,&#10;      },&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to fetch products&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const productData = await request.json();&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Add timestamps and default values&#10;    const newProduct = {&#10;      ...productData,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      purchaseCount: 0,&#10;      featured: false,&#10;      status: &quot;active&quot;,&#10;      stock: productData.stock || 0,&#10;      averageRating: 0,&#10;      totalRatings: 0,&#10;    };&#10;&#10;    const result = await db.collection(&quot;products&quot;).insertOne(newProduct);&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      productId: result.insertedId,&#10;      product: newProduct,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error creating product:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Failed to create product&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/details/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/details/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#10;import useReviews from &quot;@/hooks/useReviews&quot;;&#10;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#10;  const { data: session } = useSession();&#10;  const { addToCart } = useCart();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;&#10;  // Custom hooks&#10;  const {&#10;    product,&#10;    farmer,&#10;    farmerProducts,&#10;    responseType,&#10;    relatedProducts,&#10;    loading,&#10;    fetchProductDetails,&#10;  } = useProductData(productId);&#10;&#10;  const { reviews, hasMoreReviews, fetchReviews, reviewsPage } = useReviews(&#10;    productId,&#10;    responseType,&#10;    session?.user?.id, // Pass userId to prioritize user's review&#10;  );&#10;  const isOwner = useOwnership(product, session, viewMode);&#10;&#10;  // State management&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isFavorite, setIsFavorite] = useState(false);&#10;&#10;  // Review form state&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState({ rating: 5, comment: &quot;&quot; });&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;&#10;  // Review edit/delete state&#10;  const [editingReview, setEditingReview] = useState(null);&#10;  const [isUpdatingReview, setIsUpdatingReview] = useState(false);&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#10;&#10;  // Purchase verification state&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#10;&#10;  // Farmer-specific states&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;&#10;  // Effects&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      fetchProductDetails();&#10;    }&#10;  }, [productId]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      const interval = setInterval(() =&gt; {&#10;        fetchProductDetails();&#10;      }, 30000);&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  // Check if product is favorited when productId changes&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      setIsFavorite(isProductFavorited(productId));&#10;    }&#10;  }, [productId, isProductFavorited]);&#10;&#10;  // Check if user has purchased this product&#10;  useEffect(() =&gt; {&#10;    if (session?.user?.id &amp;&amp; productId) {&#10;      checkUserPurchase();&#10;    }&#10;  }, [session?.user?.id, productId]);&#10;&#10;  const checkUserPurchase = async () =&gt; {&#10;    if (!session?.user?.id) return;&#10;&#10;    setCheckingPurchase(true);&#10;    try {&#10;      const response = await fetch(&#10;        `/api/orders?userId=${session.user.id}&amp;productId=${productId}`,&#10;      );&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        // Check if user has any order with this product that's confirmed/delivered/pending&#10;        const hasPurchased = data.orders?.some(&#10;          (order) =&gt;&#10;            order.items?.some((item) =&gt; item.productId === productId) &amp;&amp;&#10;            [&quot;delivered&quot;, &quot;confirmed&quot;, &quot;pending&quot;].includes(order.status),&#10;        );&#10;        setHasPurchasedProduct(hasPurchased);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error checking purchase history:&quot;, error);&#10;      setHasPurchasedProduct(false);&#10;    } finally {&#10;      setCheckingPurchase(false);&#10;    }&#10;  };&#10;&#10;  // API calls&#10;  const fetchRecentOrders = async () =&gt; {&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  };&#10;&#10;  // Event handlers&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const item = {&#10;        productId: productId,&#10;        id: productId, // Add id field for cart context&#10;        name: product.name,&#10;        price: product.price,&#10;        quantity: quantity,&#10;        stock: product.stock, // Include stock information&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;      };&#10;&#10;      await addToCart(item, quantity);&#10;      alert(&quot;Product added to cart successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      // Show user-friendly error message for stock issues&#10;      if (&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#10;        error.message.includes(&quot;available in stock&quot;)&#10;      ) {&#10;        alert(error.message);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleBuyNow = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Create a product object that matches the CartContext expectations&#10;      const productForCart = {&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmer: {&#10;          id: product.farmerId,&#10;          _id: product.farmerId,&#10;          email: product.farmer?.email,&#10;          name:&#10;            product.farmer?.name ||&#10;            product.farmer?.farmName ||&#10;            &quot;Unknown Farmer&quot;,&#10;        },&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;        stock: product.stock || 0,&#10;      };&#10;&#10;      // Use CartContext's addToCart function&#10;      await addToCart(productForCart, quantity);&#10;&#10;      // Immediately redirect to payment - let the payment page handle the cart state&#10;      // The payment page should wait for cart loading to complete before checking if empty&#10;      router.push(&quot;/payment&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    try {&#10;      if (isFavorite) {&#10;        // Remove from favorites&#10;        const success = await removeFromFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(false);&#10;          alert(&quot;Product removed from favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to remove from favorites. Please try again.&quot;);&#10;        }&#10;      } else {&#10;        // Add to favorites&#10;        const success = await addToFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(true);&#10;          alert(&quot;Product added to favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to add to favorites. Please try again.&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;    }&#10;  };&#10;&#10;  const handleSubmitReview = async (e) =&gt; {&#10;    e.preventDefault();&#10;    if (!session) {&#10;      alert(&quot;Please login to submit a review&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsSubmittingReview(true);&#10;    try {&#10;      // Include userId in the review submission&#10;      const reviewData = {&#10;        ...reviewForm,&#10;        userId:&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.userId ||&#10;          session.user.email,&#10;      };&#10;&#10;      const response = await fetch(`/api/products/${productId}/reviews`, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(reviewData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setShowReviewForm(false);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review submitted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to submit review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error submitting review:&quot;, error);&#10;      alert(&quot;Failed to submit review&quot;);&#10;    } finally {&#10;      setIsSubmittingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleUpdateReview = async () =&gt; {&#10;    if (!editingReview) return;&#10;&#10;    setIsUpdatingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          rating: reviewForm.rating,&#10;          comment: reviewForm.comment,&#10;          userId:&#10;            session.user.userId ||&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.email,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setEditingReview(null);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        setShowReviewForm(false);&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review updated successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating review:&quot;, error);&#10;      alert(&quot;Failed to update review&quot;);&#10;    } finally {&#10;      setIsUpdatingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteReview = async (reviewId) =&gt; {&#10;    if (!confirm(&quot;Are you sure you want to delete this review?&quot;)) {&#10;      return;&#10;    }&#10;&#10;    setIsDeletingReview(true);&#10;    try {&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;      const response = await fetch(&#10;        `/api/reviews/${reviewId}?userId=${encodeURIComponent(userId)}`,&#10;        {&#10;          method: &quot;DELETE&quot;,&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review deleted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to delete review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting review:&quot;, error);&#10;      alert(&quot;Failed to delete review&quot;);&#10;    } finally {&#10;      setIsDeletingReview(false);&#10;    }&#10;  };&#10;&#10;  const loadMoreReviews = () =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  };&#10;&#10;  const handleUpdateProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;      alert(&quot;Please enter a value to update&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleToggleStatus = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const newStatus = product.status === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product. Please try again.`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (&#10;      !confirm(&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\nThis action cannot be undone and will remove:\n• The product listing\n• All associated data\n• Product from any pending orders&quot;,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        window.location.href = &quot;/manage&quot;;&#10;      } else {&#10;        const error = await response.json();&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\nThis product has pending orders and cannot be deleted.\nPlease wait for all orders to be completed or cancelled before deleting this product.\n\nYou can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          alert(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(&quot;Failed to delete product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleAddImages = () =&gt; {&#10;    router.push(`/create?edit=${productId}`);&#10;  };&#10;&#10;  // Helper function to get all images&#10;  const getAllImages = () =&gt; {&#10;    const allImages = [];&#10;    if (product?.image) {&#10;      allImages.push(product.image);&#10;    }&#10;    if (product?.images &amp;&amp; product.images.length &gt; 0) {&#10;      allImages.push(...product.images);&#10;    }&#10;    return allImages;&#10;  };&#10;&#10;  // Calculate rating distribution from reviews&#10;  const calculateRatingDistribution = () =&gt; {&#10;    if (!reviews || reviews.length === 0) {&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    }&#10;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;&#10;    reviews.forEach((review) =&gt; {&#10;      const rating = Math.floor(review.rating); // Round down to nearest integer&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;        distribution[rating]++;&#10;      }&#10;    });&#10;&#10;    return distribution;&#10;  };&#10;&#10;  const getRatingPercentage = (rating, distribution) =&gt; {&#10;    const totalReviews = reviews?.length || 0;&#10;    if (totalReviews === 0) return 0;&#10;    return (distribution[rating] / totalReviews) * 100;&#10;  };&#10;&#10;  // Render components based on state&#10;  if (loading) {&#10;    return &lt;Loading /&gt;;&#10;  }&#10;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#10;    return (&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#10;    );&#10;  }&#10;&#10;  if (!product &amp;&amp; !farmer) {&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#10;  }&#10;&#10;  // Main product details render&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Farmer Dashboard View */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage]}&#10;                              alt={product.name}&#10;                              width={400}&#10;                              height={225}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-primary-500&quot;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} ${index + 1}`}&#10;                                    width={80}&#10;                                    height={80}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                  /&gt;&#10;                                &lt;/button&gt;&#10;                              ))}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            No images uploaded&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Price&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            ${product.price?.toFixed(2)} per{&quot; &quot;}&#10;                            {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Stock&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Description&#10;                        &lt;/span&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                          {product.description || &quot;No description provided.&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Features&#10;                          &lt;/span&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder=&quot;New stock amount&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !stockUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            step=&quot;0.01&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder=&quot;New price&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !priceUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          $&#10;                          {(&#10;                            product.performanceMetrics?.totalRevenue || 0&#10;                          ).toFixed(2)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {(product.averageRating || 0).toFixed(1)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          &lt;StarRating&#10;                            rating={product.averageRating || 0}&#10;                            size=&quot;sm&quot;&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.reviewCount || product.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            $&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              2,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot;Your product is performing well!&quot;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-orange-600 hover:bg-orange-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {product.status === &quot;active&quot;&#10;                          ? &quot;Deactivate&quot;&#10;                          : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        Delete Product&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    const allImages = getAllImages();&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farmer&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;StarRating&#10;                      rating={product.averageRating || 0}&#10;                      showValue={true}&#10;                    /&gt;&#10;                    &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      ({product.reviewCount || product.totalReviews || 0}{&quot; &quot;}&#10;                      reviews)&#10;                    &lt;/span&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab(&quot;reviews&quot;)}&#10;                      className=&quot;text-primary-600 dark:text-primary-400 hover:underline&quot;&#10;                    &gt;&#10;                      Write a review&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ${product.price?.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.farmer?.email ||&#10;                            &quot;Contact information not available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {[&#10;                      &quot;description&quot;,&#10;                      &quot;nutrition&quot;,&#10;                      &quot;storage&quot;,&#10;                      &quot;reviews&quot;,&#10;                      &quot;farmer&quot;,&#10;                    ].map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#10;                            Key Features&#10;                          &lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.nutritionalInformation}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.storageInstructions}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-blue-900 dark:text-blue-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#10;                              Temperature&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                              Store in a cool, dry place away from direct&#10;                              sunlight&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-green-900 dark:text-green-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#10;                              Humidity&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-green-700 dark:text-green-300&quot;&gt;&#10;                              Keep in low humidity environment to prevent&#10;                              spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews (&#10;                          {product.reviewCount || product.totalReviews || 0})&#10;                        &lt;/h2&gt;&#10;                        {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Write Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {session &amp;&amp;&#10;                          !hasPurchasedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 italic&quot;&gt;&#10;                              You need to purchase this product to write a&#10;                              review&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        {checkingPurchase &amp;&amp; (&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                            Checking purchase history...&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          {/* Overall Rating Section */}&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                              {(() =&gt; {&#10;                                // Calculate actual average rating from reviews if available&#10;                                const actualReviewCount = reviews?.length || 0;&#10;                                let displayRating = product.averageRating || 0;&#10;&#10;                                // If we have reviews but no product rating, calculate from reviews&#10;                                if (&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#10;                                  (!product.averageRating ||&#10;                                    product.averageRating === 0)&#10;                                ) {&#10;                                  const totalRating = reviews.reduce(&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  displayRating =&#10;                                    totalRating / actualReviewCount;&#10;                                }&#10;&#10;                                return (&#10;                                  &lt;&gt;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#10;                                      {displayRating.toFixed(1)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;StarRating&#10;                                      rating={displayRating}&#10;                                      size=&quot;lg&quot;&#10;                                    /&gt;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#10;                                      Based on{&quot; &quot;}&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#10;                                        {actualReviewCount}&#10;                                      &lt;/span&gt;{&quot; &quot;}&#10;                                      {actualReviewCount === 1&#10;                                        ? &quot;review&quot;&#10;                                        : &quot;reviews&quot;}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/&gt;&#10;                                );&#10;                              })()}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Review Quality Indicator */}&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                                  {(reviews?.length || 0) &gt; 0&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#10;                                    : &quot;No reviews yet&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Rating Distribution */}&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                              Rating Breakdown&#10;                            &lt;/h4&gt;&#10;                            {(() =&gt; {&#10;                              const ratingDistribution =&#10;                                calculateRatingDistribution();&#10;                              const totalReviews = reviews?.length || 0;&#10;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#10;                                const count = ratingDistribution[rating];&#10;                                const percentage =&#10;                                  totalReviews &gt; 0&#10;                                    ? (count / totalReviews) * 100&#10;                                    : 0;&#10;&#10;                                return (&#10;                                  &lt;div&#10;                                    key={rating}&#10;                                    className=&quot;flex items-center space-x-3&quot;&#10;                                  &gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#10;                                    &lt;/span&gt;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                                      &lt;div&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#10;                                        style={{ width: `${percentage}%` }}&#10;                                      &gt;&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#10;                                      {count}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#10;                                      {percentage.toFixed(0)}%&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                );&#10;                              });&#10;                            })()}&#10;&#10;                            {/* Total Reviews Summary */}&#10;                            &lt;div className=&quot;mt-4 pt-3 border-t border-gray-200 dark:border-gray-600&quot;&gt;&#10;                              &lt;div className=&quot;text-center text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {(reviews?.length || 0) === 0 &amp;&amp;&#10;                                    &quot;Be the first to review this product!&quot;}&#10;                                  {(reviews?.length || 0) === 1 &amp;&amp;&#10;                                    &quot;1 customer has reviewed this product&quot;}&#10;                                  {(reviews?.length || 0) &gt; 1 &amp;&amp;&#10;                                    `${reviews.length} customers have reviewed this product`}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Form Modal */}&#10;                      {showReviewForm &amp;&amp; (&#10;                        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 w-full max-w-md&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                Write a Review&#10;                              &lt;/h3&gt;&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(false)}&#10;                                className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                              &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;form&#10;                              onSubmit={&#10;                                editingReview&#10;                                  ? (e) =&gt; {&#10;                                      e.preventDefault();&#10;                                      handleUpdateReview();&#10;                                    }&#10;                                  : handleSubmitReview&#10;                              }&#10;                              className=&quot;space-y-4&quot;&#10;                            &gt;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Rating&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                  {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                    &lt;button&#10;                                      key={star}&#10;                                      type=&quot;button&quot;&#10;                                      onClick={() =&gt;&#10;                                        setReviewForm({&#10;                                          ...reviewForm,&#10;                                          rating: star,&#10;                                        })&#10;                                      }&#10;                                      className={`text-2xl ${&#10;                                        star &lt;= reviewForm.rating&#10;                                          ? &quot;text-yellow-400&quot;&#10;                                          : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      ★&#10;                                    &lt;/button&gt;&#10;                                  ))}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Comment&#10;                                &lt;/label&gt;&#10;                                &lt;textarea&#10;                                  value={reviewForm.comment}&#10;                                  onChange={(e) =&gt;&#10;                                    setReviewForm({&#10;                                      ...reviewForm,&#10;                                      comment: e.target.value,&#10;                                    })&#10;                                  }&#10;                                  rows={4}&#10;                                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                                  placeholder=&quot;Share your experience with this product...&quot;&#10;                                  required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                                &lt;button&#10;                                  type=&quot;button&quot;&#10;                                  onClick={() =&gt; {&#10;                                    setShowReviewForm(false);&#10;                                    setEditingReview(null);&#10;                                    setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;                                  }}&#10;                                  className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                                &gt;&#10;                                  Cancel&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  type=&quot;submit&quot;&#10;                                  disabled={&#10;                                    editingReview&#10;                                      ? isUpdatingReview&#10;                                      : isSubmittingReview&#10;                                  }&#10;                                  className=&quot;flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50&quot;&#10;                                &gt;&#10;                                  {editingReview&#10;                                    ? isUpdatingReview&#10;                                      ? &quot;Updating...&quot;&#10;                                      : &quot;Update Review&quot;&#10;                                    : isSubmittingReview&#10;                                      ? &quot;Submitting...&quot;&#10;                                      : &quot;Submit Review&quot;}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/form&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#10;                          reviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={review._id}&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#10;                                          .charAt(0)&#10;                                          .toUpperCase()}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#10;                                        Verified Buyer&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                          &lt;span&#10;                                            key={star}&#10;                                            className={`text-lg transition-all duration-200 ${&#10;                                              star &lt;= review.rating&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&#10;                                            ★&#10;                                          &lt;/span&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                                        {review.rating}/5&#10;                                      &lt;/span&gt;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt || review.date,&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#10;                                          year: &quot;numeric&quot;,&#10;                                          month: &quot;short&quot;,&#10;                                          day: &quot;numeric&quot;,&#10;                                        })}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#10;                                  {/* Debug information */}&#10;                                  {console.log(&quot;DEBUG Review comparison:&quot;, {&#10;                                    sessionUserId: session?.user?.userId,&#10;                                    reviewUserId: review.userId,&#10;                                    areEqual:&#10;                                      session?.user?.userId === review.userId,&#10;                                    sessionUser: session?.user,&#10;                                  })}&#10;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#10;                                  {session?.user?.userId === review.userId ? (&#10;                                    &lt;&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt; {&#10;                                          setEditingReview(review);&#10;                                          setReviewForm({&#10;                                            rating: review.rating,&#10;                                            comment: review.comment,&#10;                                          });&#10;                                          setShowReviewForm(true);&#10;                                        }}&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Edit Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt;&#10;                                          handleDeleteReview(review._id)&#10;                                        }&#10;                                        disabled={isDeletingReview}&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Delete Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  ) : (&#10;                                    &lt;&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &quot;{review.comment}&quot;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                              {product.farmer?.farmName ||&#10;                                product.farmer?.name ||&#10;                                &quot;Farm Name&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              {product.farmer?.email ||&#10;                                &quot;Farmer contact not available&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.location &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            {product.farmer?.phone &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                              {product.farmer?.description ||&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                View All Products from this Farmer&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Related Products Section - Enhanced */}&#10;                  {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                      {/* Section Header */}&#10;                      &lt;div className=&quot;text-center mb-10&quot;&gt;&#10;                        &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Related Products&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#10;                          Discover similar high-quality products from our&#10;                          trusted farmers. Each item is carefully selected to&#10;                          meet our quality standards.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#10;                          &lt;span&gt;•&lt;/span&gt;&#10;                          &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;Fast delivery available&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Product Grid */}&#10;                      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#10;                        {relatedProducts.map((relatedProduct, index) =&gt; (&#10;                          &lt;div&#10;                            key={relatedProduct._id}&#10;                            className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#10;                            style={{ animationDelay: `${index * 100}ms` }}&#10;                          &gt;&#10;                            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#10;                              {/* Product Image */}&#10;                              &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#10;                                &lt;Image&#10;                                  src={&#10;                                    relatedProduct.image ||&#10;                                    relatedProduct.images?.[0] ||&#10;                                    &quot;/placeholder-image.jpg&quot;&#10;                                  }&#10;                                  alt={relatedProduct.name}&#10;                                  width={300}&#10;                                  height={300}&#10;                                  className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#10;                                /&gt;&#10;&#10;                                {/* Product Badges */}&#10;                                &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#10;                                  {relatedProduct.isOrganic &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Organic&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                  {relatedProduct.isFresh &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Fresh&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Quick Actions Overlay */}&#10;                                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#10;                                  &lt;Link&#10;                                    href={`/details?id=${relatedProduct._id}`}&#10;                                    className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#10;                                  &gt;&#10;                                    View Details&#10;                                  &lt;/Link&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Product Info */}&#10;                              &lt;div className=&quot;p-6&quot;&gt;&#10;                                &lt;div className=&quot;mb-3&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#10;                                    {relatedProduct.name}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#10;                                    by{&quot; &quot;}&#10;                                    {relatedProduct.farmer?.name ||&#10;                                      relatedProduct.farmer?.farmName ||&#10;                                      &quot;Unknown Farmer&quot;}&#10;                                  &lt;/p&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Rating */}&#10;                                &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#10;                                  &lt;StarRating&#10;                                    rating={relatedProduct.averageRating || 0}&#10;                                    size=&quot;sm&quot;&#10;                                  /&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    (&#10;                                    {relatedProduct.reviewCount ||&#10;                                      relatedProduct.totalReviews ||&#10;                                      0}&#10;                                    )&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Price and Stock */}&#10;                                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                                      ${(relatedProduct.price || 0).toFixed(2)}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      /{relatedProduct.unit || &quot;kg&quot;}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div&#10;                                      className={`text-xs font-medium ${&#10;                                        (relatedProduct.stock || 0) &gt; 0&#10;                                          ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                          : &quot;text-red-600 dark:text-red-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      {(relatedProduct.stock || 0) &gt; 0&#10;                                        ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#10;                                        : &quot;Out of stock&quot;}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Action Button */}&#10;                                &lt;Link&#10;                                  href={`/details?id=${relatedProduct._id}`}&#10;                                  className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                                  View Product&#10;                                &lt;/Link&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Browse More Section */}&#10;                      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Looking for more products?&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href=&quot;/products&quot;&#10;                            className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;                            Browse All Products&#10;                            &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#10;import useReviews from &quot;@/hooks/useReviews&quot;;&#10;&#10;import Loading from &quot;@/components/Loading&quot;;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#10;  const { data: session } = useSession();&#10;  const { addToCart } = useCart();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;&#10;  // Custom hooks&#10;  const {&#10;    product,&#10;    farmer,&#10;    farmerProducts,&#10;    responseType,&#10;    relatedProducts,&#10;    loading,&#10;    fetchProductDetails,&#10;  } = useProductData(productId);&#10;&#10;  const { reviews, hasMoreReviews, fetchReviews, reviewsPage } = useReviews(&#10;    productId,&#10;    responseType,&#10;    session?.user?.id, // Pass userId to prioritize user's review&#10;  );&#10;  const isOwner = useOwnership(product, session, viewMode);&#10;&#10;  // State management&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isFavorite, setIsFavorite] = useState(false);&#10;&#10;  // Review form state&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState({ rating: 5, comment: &quot;&quot; });&#10;  const [isSubmittingReview, setIsSubmittingReview] = useState(false);&#10;&#10;  // Review edit/delete state&#10;  const [editingReview, setEditingReview] = useState(null);&#10;  const [isUpdatingReview, setIsUpdatingReview] = useState(false);&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#10;&#10;  // Purchase verification state&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#10;&#10;  // Farmer-specific states&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;  const [isUpdating, setIsUpdating] = useState(false);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;&#10;  // Effects&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      fetchProductDetails();&#10;    }&#10;  }, [productId]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      const interval = setInterval(() =&gt; {&#10;        fetchProductDetails();&#10;      }, 30000);&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode]);&#10;&#10;  // Check if product is favorited when productId changes&#10;  useEffect(() =&gt; {&#10;    if (productId) {&#10;      setIsFavorite(isProductFavorited(productId));&#10;    }&#10;  }, [productId, isProductFavorited]);&#10;&#10;  // Check if user has purchased this product&#10;  useEffect(() =&gt; {&#10;    if (session?.user?.id &amp;&amp; productId) {&#10;      checkUserPurchase();&#10;    }&#10;  }, [session?.user?.id, productId]);&#10;&#10;  const checkUserPurchase = async () =&gt; {&#10;    if (!session?.user?.id) return;&#10;&#10;    setCheckingPurchase(true);&#10;    try {&#10;      const response = await fetch(&#10;        `/api/orders?userId=${session.user.id}&amp;productId=${productId}`,&#10;      );&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        // Check if user has any order with this product that's confirmed/delivered/pending&#10;        const hasPurchased = data.orders?.some(&#10;          (order) =&gt;&#10;            order.items?.some((item) =&gt; item.productId === productId) &amp;&amp;&#10;            [&quot;delivered&quot;, &quot;confirmed&quot;, &quot;pending&quot;].includes(order.status),&#10;        );&#10;        setHasPurchasedProduct(hasPurchased);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error checking purchase history:&quot;, error);&#10;      setHasPurchasedProduct(false);&#10;    } finally {&#10;      setCheckingPurchase(false);&#10;    }&#10;  };&#10;&#10;  // API calls&#10;  const fetchRecentOrders = async () =&gt; {&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  };&#10;&#10;  // Event handlers&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const item = {&#10;        productId: productId,&#10;        id: productId, // Add id field for cart context&#10;        name: product.name,&#10;        price: product.price,&#10;        quantity: quantity,&#10;        stock: product.stock, // Include stock information&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;      };&#10;&#10;      await addToCart(item, quantity);&#10;      alert(&quot;Product added to cart successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      // Show user-friendly error message for stock issues&#10;      if (&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#10;        error.message.includes(&quot;available in stock&quot;)&#10;      ) {&#10;        alert(error.message);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleBuyNow = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Create a product object that matches the CartContext expectations&#10;      const productForCart = {&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.image ||&#10;          (product.images &amp;&amp; product.images[0]) ||&#10;          &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmer: {&#10;          id: product.farmerId,&#10;          _id: product.farmerId,&#10;          email: product.farmer?.email,&#10;          name:&#10;            product.farmer?.name ||&#10;            product.farmer?.farmName ||&#10;            &quot;Unknown Farmer&quot;,&#10;        },&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;        stock: product.stock || 0,&#10;      };&#10;&#10;      // Use CartContext's addToCart function&#10;      await addToCart(productForCart, quantity);&#10;&#10;      // Immediately redirect to payment - let the payment page handle the cart state&#10;      // The payment page should wait for cart loading to complete before checking if empty&#10;      router.push(&quot;/payment&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    try {&#10;      if (isFavorite) {&#10;        // Remove from favorites&#10;        const success = await removeFromFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(false);&#10;          alert(&quot;Product removed from favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to remove from favorites. Please try again.&quot;);&#10;        }&#10;      } else {&#10;        // Add to favorites&#10;        const success = await addToFavorites(productId);&#10;        if (success) {&#10;          setIsFavorite(true);&#10;          alert(&quot;Product added to favorites!&quot;);&#10;        } else {&#10;          alert(&quot;Failed to add to favorites. Please try again.&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;    }&#10;  };&#10;&#10;  const handleSubmitReview = async (e) =&gt; {&#10;    e.preventDefault();&#10;    if (!session) {&#10;      alert(&quot;Please login to submit a review&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsSubmittingReview(true);&#10;    try {&#10;      // Include userId in the review submission&#10;      const reviewData = {&#10;        ...reviewForm,&#10;        userId:&#10;          session.user.id ||&#10;          session.user._id ||&#10;          session.user.userId ||&#10;          session.user.email,&#10;      };&#10;&#10;      const response = await fetch(`/api/products/${productId}/reviews`, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(reviewData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setShowReviewForm(false);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review submitted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to submit review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error submitting review:&quot;, error);&#10;      alert(&quot;Failed to submit review&quot;);&#10;    } finally {&#10;      setIsSubmittingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleUpdateReview = async () =&gt; {&#10;    if (!editingReview) return;&#10;&#10;    setIsUpdatingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          rating: reviewForm.rating,&#10;          comment: reviewForm.comment,&#10;          userId:&#10;            session.user.userId ||&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.email,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setEditingReview(null);&#10;        setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;        setShowReviewForm(false);&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review updated successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating review:&quot;, error);&#10;      alert(&quot;Failed to update review&quot;);&#10;    } finally {&#10;      setIsUpdatingReview(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteReview = async (reviewId) =&gt; {&#10;    if (!confirm(&quot;Are you sure you want to delete this review?&quot;)) {&#10;      return;&#10;    }&#10;&#10;    setIsDeletingReview(true);&#10;    try {&#10;      const userId =&#10;        session.user.userId ||&#10;        session.user.id ||&#10;        session.user._id ||&#10;        session.user.email;&#10;      const response = await fetch(&#10;        `/api/reviews/${reviewId}?userId=${encodeURIComponent(userId)}`,&#10;        {&#10;          method: &quot;DELETE&quot;,&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        fetchReviews();&#10;        fetchProductDetails();&#10;        alert(&quot;Review deleted successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to delete review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting review:&quot;, error);&#10;      alert(&quot;Failed to delete review&quot;);&#10;    } finally {&#10;      setIsDeletingReview(false);&#10;    }&#10;  };&#10;&#10;  const loadMoreReviews = () =&gt; {&#10;    fetchReviews(reviewsPage + 1, true);&#10;  };&#10;&#10;  const handleUpdateProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;      alert(&quot;Please enter a value to update&quot;);&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleToggleStatus = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const newStatus = product.status === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product. Please try again.`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleDeleteProduct = async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    if (&#10;      !confirm(&#10;        &quot;⚠️ Are you sure you want to delete this product?\n\nThis action cannot be undone and will remove:\n• The product listing\n• All associated data\n• Product from any pending orders&quot;,&#10;      )&#10;    ) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        window.location.href = &quot;/manage&quot;;&#10;      } else {&#10;        const error = await response.json();&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\nThis product has pending orders and cannot be deleted.\nPlease wait for all orders to be completed or cancelled before deleting this product.\n\nYou can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          alert(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(&quot;Failed to delete product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  };&#10;&#10;  const handleAddImages = () =&gt; {&#10;    router.push(`/create?edit=${productId}`);&#10;  };&#10;&#10;  // Helper function to get all images&#10;  const getAllImages = () =&gt; {&#10;    const allImages = [];&#10;    if (product?.image) {&#10;      allImages.push(product.image);&#10;    }&#10;    if (product?.images &amp;&amp; product.images.length &gt; 0) {&#10;      allImages.push(...product.images);&#10;    }&#10;    return allImages;&#10;  };&#10;&#10;  // Calculate rating distribution from reviews&#10;  const calculateRatingDistribution = () =&gt; {&#10;    if (!reviews || reviews.length === 0) {&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    }&#10;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;&#10;    reviews.forEach((review) =&gt; {&#10;      const rating = Math.floor(review.rating); // Round down to nearest integer&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;        distribution[rating]++;&#10;      }&#10;    });&#10;&#10;    return distribution;&#10;  };&#10;&#10;  const getRatingPercentage = (rating, distribution) =&gt; {&#10;    const totalReviews = reviews?.length || 0;&#10;    if (totalReviews === 0) return 0;&#10;    return (distribution[rating] / totalReviews) * 100;&#10;  };&#10;&#10;  // Render components based on state&#10;  if (loading) {&#10;    return &lt;Loading /&gt;;&#10;  }&#10;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#10;    return (&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#10;    );&#10;  }&#10;&#10;  if (!product &amp;&amp; !farmer) {&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#10;  }&#10;&#10;  // Main product details render&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Farmer Dashboard View */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images&#10;                      &lt;/h3&gt;&#10;                      &lt;button&#10;                        onClick={handleAddImages}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-plus mr-1&quot;&gt;&lt;/i&gt;&#10;                        Add Images&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage]}&#10;                              alt={product.name}&#10;                              width={400}&#10;                              height={225}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-primary-500&quot;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} ${index + 1}`}&#10;                                    width={80}&#10;                                    height={80}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                  /&gt;&#10;                                &lt;/button&gt;&#10;                              ))}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            No images uploaded&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-1&quot;&gt;&lt;/i&gt;&#10;                        Edit Details&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Price&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            ${product.price?.toFixed(2)} per{&quot; &quot;}&#10;                            {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Stock&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Description&#10;                        &lt;/span&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                          {product.description || &quot;No description provided.&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Features&#10;                          &lt;/span&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quick Actions */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;                      Quick Updates&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                      {/* Stock Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Stock&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            value={stockUpdate}&#10;                            onChange={(e) =&gt; setStockUpdate(e.target.value)}&#10;                            placeholder=&quot;New stock amount&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !stockUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Price Update */}&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                          Update Price&#10;                        &lt;/label&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;number&quot;&#10;                            step=&quot;0.01&quot;&#10;                            value={priceUpdate}&#10;                            onChange={(e) =&gt; setPriceUpdate(e.target.value)}&#10;                            placeholder=&quot;New price&quot;&#10;                            className=&quot;flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                          /&gt;&#10;                          &lt;button&#10;                            onClick={handleUpdateProduct}&#10;                            disabled={isUpdating || !priceUpdate}&#10;                            className=&quot;bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          &gt;&#10;                            Update&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          $&#10;                          {(&#10;                            product.performanceMetrics?.totalRevenue || 0&#10;                          ).toFixed(2)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {(product.averageRating || 0).toFixed(1)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          &lt;StarRating&#10;                            rating={product.averageRating || 0}&#10;                            size=&quot;sm&quot;&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.reviewCount || product.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            $&#10;                            {product.performanceMetrics.averageOrderValue.toFixed(&#10;                              2,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot;Your product is performing well!&quot;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;Link&#10;                        href={`/create?edit=${productId}`}&#10;                        className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                        Edit Product&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;Link&#10;                        href={`/details?id=${productId}&amp;view=customer`}&#10;                        className=&quot;w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                        View as Customer&#10;                      &lt;/Link&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleToggleStatus}&#10;                        disabled={isUpdating}&#10;                        className={`w-full py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          product.status === &quot;active&quot;&#10;                            ? &quot;bg-orange-600 hover:bg-orange-700 text-white&quot;&#10;                            : &quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                        } ${isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i&#10;                            className={`fas ${product.status === &quot;active&quot; ? &quot;fa-pause&quot; : &quot;fa-play&quot;} mr-2`}&#10;                          &gt;&lt;/i&gt;&#10;                        )}&#10;                        {product.status === &quot;active&quot;&#10;                          ? &quot;Deactivate&quot;&#10;                          : &quot;Activate&quot;}&#10;                      &lt;/button&gt;&#10;&#10;                      &lt;button&#10;                        onClick={handleDeleteProduct}&#10;                        disabled={isUpdating}&#10;                        className={`w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-medium transition flex items-center justify-center ${&#10;                          isUpdating ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {isUpdating ? (&#10;                          &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        ) : (&#10;                          &lt;i className=&quot;fas fa-trash mr-2&quot;&gt;&lt;/i&gt;&#10;                        )}&#10;                        Delete Product&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      const allImages = getAllImages();&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    const allImages = getAllImages();&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farmer&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    {(() =&gt; {&#10;                      // Calculate actual average rating and count from reviews if available&#10;                      const actualReviewCount = reviews?.length || 0;&#10;                      let displayRating = product.averageRating || 0;&#10;&#10;                      // If we have reviews but no product rating, calculate from reviews&#10;                      if (&#10;                        actualReviewCount &gt; 0 &amp;&amp;&#10;                        (!product.averageRating || product.averageRating === 0)&#10;                      ) {&#10;                        const totalRating = reviews.reduce(&#10;                          (sum, review) =&gt; sum + (review.rating || 0),&#10;                          0,&#10;                        );&#10;                        displayRating = totalRating / actualReviewCount;&#10;                      }&#10;&#10;                      return (&#10;                        &lt;&gt;&#10;                          &lt;StarRating&#10;                            rating={displayRating}&#10;                            showValue={true}&#10;                          /&gt;&#10;                          &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ({actualReviewCount} reviews)&#10;                          &lt;/span&gt;&#10;                        &lt;/&gt;&#10;                      );&#10;                    })()}&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab(&quot;reviews&quot;)}&#10;                      className=&quot;text-primary-600 dark:text-primary-400 hover:underline&quot;&#10;                    &gt;&#10;                      Write a review&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          ${product.price?.toFixed(2)}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;button&#10;                      onClick={handleBuyNow}&#10;                      disabled={product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                      Buy Now&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleAddToCart}&#10;                      disabled={isAddingToCart || product.stock &lt;= 0}&#10;                      className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                      {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={handleFavoriteToggle}&#10;                      className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                      &gt;&lt;/i&gt;&#10;                      Add to Favorite&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Farmer Contact */}&#10;                  &lt;div className=&quot;bg-primary-50 dark:bg-primary-900 rounded-xl p-4&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className=&quot;w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-800 flex items-center justify-center&quot;&gt;&#10;                        &lt;i className=&quot;fas fa-user text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.farmer?.name || &quot;Farmer&quot;}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.farmer?.email ||&#10;                            &quot;Contact information not available&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {[&#10;                      &quot;description&quot;,&#10;                      &quot;nutrition&quot;,&#10;                      &quot;storage&quot;,&#10;                      &quot;reviews&quot;,&#10;                      &quot;farmer&quot;,&#10;                    ].map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#10;                            Key Features&#10;                          &lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.nutritionalInformation}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.storageInstructions}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-blue-900 dark:text-blue-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#10;                              Temperature&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                              Store in a cool, dry place away from direct&#10;                              sunlight&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900/20 p-4 rounded-lg&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium text-green-900 dark:text-green-100 mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#10;                              Humidity&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm text-green-700 dark:text-green-300&quot;&gt;&#10;                              Keep in low humidity environment to prevent&#10;                              spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews (&#10;                          {product.reviewCount || product.totalReviews || 0})&#10;                        &lt;/h2&gt;&#10;                        {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; setShowReviewForm(true)}&#10;                            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Write Review&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {session &amp;&amp;&#10;                          !hasPurchasedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400 italic&quot;&gt;&#10;                              You need to purchase this product to write a&#10;                              review&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        {checkingPurchase &amp;&amp; (&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                            Checking purchase history...&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          {/* Overall Rating Section */}&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                              {(() =&gt; {&#10;                                // Calculate actual average rating from reviews if available&#10;                                const actualReviewCount = reviews?.length || 0;&#10;                                let displayRating = product.averageRating || 0;&#10;&#10;                                // If we have reviews but no product rating, calculate from reviews&#10;                                if (&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#10;                                  (!product.averageRating ||&#10;                                    product.averageRating === 0)&#10;                                ) {&#10;                                  const totalRating = reviews.reduce(&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  displayRating =&#10;                                    totalRating / actualReviewCount;&#10;                                }&#10;&#10;                                return (&#10;                                  &lt;&gt;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#10;                                      {displayRating.toFixed(1)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;StarRating&#10;                                      rating={displayRating}&#10;                                      size=&quot;lg&quot;&#10;                                    /&gt;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#10;                                      Based on{&quot; &quot;}&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#10;                                        {actualReviewCount}&#10;                                      &lt;/span&gt;{&quot; &quot;}&#10;                                      {actualReviewCount === 1&#10;                                        ? &quot;review&quot;&#10;                                        : &quot;reviews&quot;}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/&gt;&#10;                                );&#10;                              })()}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Review Quality Indicator */}&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                                  {(reviews?.length || 0) &gt; 0&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#10;                                    : &quot;No reviews yet&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Rating Distribution */}&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                              Rating Breakdown&#10;                            &lt;/h4&gt;&#10;                            {(() =&gt; {&#10;                              const ratingDistribution =&#10;                                calculateRatingDistribution();&#10;                              const totalReviews = reviews?.length || 0;&#10;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#10;                                const count = ratingDistribution[rating];&#10;                                const percentage =&#10;                                  totalReviews &gt; 0&#10;                                    ? (count / totalReviews) * 100&#10;                                    : 0;&#10;&#10;                                return (&#10;                                  &lt;div&#10;                                    key={rating}&#10;                                    className=&quot;flex items-center space-x-3&quot;&#10;                                  &gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#10;                                    &lt;/span&gt;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                                      &lt;div&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#10;                                        style={{ width: `${percentage}%` }}&#10;                                      &gt;&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#10;                                      {count}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#10;                                      {percentage.toFixed(0)}%&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                );&#10;                              });&#10;                            })()}&#10;&#10;                            {/* Total Reviews Summary */}&#10;                            &lt;div className=&quot;mt-4 pt-3 border-t border-gray-200 dark:border-gray-600&quot;&gt;&#10;                              &lt;div className=&quot;text-center text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                                &lt;span className=&quot;font-medium&quot;&gt;&#10;                                  {(reviews?.length || 0) === 0 &amp;&amp;&#10;                                    &quot;Be the first to review this product!&quot;}&#10;                                  {(reviews?.length || 0) === 1 &amp;&amp;&#10;                                    &quot;1 customer has reviewed this product&quot;}&#10;                                  {(reviews?.length || 0) &gt; 1 &amp;&amp;&#10;                                    `${reviews.length} customers have reviewed this product`}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Form Modal */}&#10;                      {showReviewForm &amp;&amp; (&#10;                        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 w-full max-w-md&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                                Write a Review&#10;                              &lt;/h3&gt;&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(false)}&#10;                                className=&quot;text-gray-400 hover:text-gray-600 dark:hover:text-gray-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-times&quot;&gt;&lt;/i&gt;&#10;                              &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;form&#10;                              onSubmit={&#10;                                editingReview&#10;                                  ? (e) =&gt; {&#10;                                      e.preventDefault();&#10;                                      handleUpdateReview();&#10;                                    }&#10;                                  : handleSubmitReview&#10;                              }&#10;                              className=&quot;space-y-4&quot;&#10;                            &gt;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Rating&#10;                                &lt;/label&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                  {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                    &lt;button&#10;                                      key={star}&#10;                                      type=&quot;button&quot;&#10;                                      onClick={() =&gt;&#10;                                        setReviewForm({&#10;                                          ...reviewForm,&#10;                                          rating: star,&#10;                                        })&#10;                                      }&#10;                                      className={`text-2xl ${&#10;                                        star &lt;= reviewForm.rating&#10;                                          ? &quot;text-yellow-400&quot;&#10;                                          : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      ★&#10;                                    &lt;/button&gt;&#10;                                  ))}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                                  Comment&#10;                                &lt;/label&gt;&#10;                                &lt;textarea&#10;                                  value={reviewForm.comment}&#10;                                  onChange={(e) =&gt;&#10;                                    setReviewForm({&#10;                                      ...reviewForm,&#10;                                      comment: e.target.value,&#10;                                    })&#10;                                  }&#10;                                  rows={4}&#10;                                  className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                                  placeholder=&quot;Share your experience with this product...&quot;&#10;                                  required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                                &lt;button&#10;                                  type=&quot;button&quot;&#10;                                  onClick={() =&gt; {&#10;                                    setShowReviewForm(false);&#10;                                    setEditingReview(null);&#10;                                    setReviewForm({ rating: 5, comment: &quot;&quot; });&#10;                                  }}&#10;                                  className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                                &gt;&#10;                                  Cancel&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                  type=&quot;submit&quot;&#10;                                  disabled={&#10;                                    editingReview&#10;                                      ? isUpdatingReview&#10;                                      : isSubmittingReview&#10;                                  }&#10;                                  className=&quot;flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50&quot;&#10;                                &gt;&#10;                                  {editingReview&#10;                                    ? isUpdatingReview&#10;                                      ? &quot;Updating...&quot;&#10;                                      : &quot;Update Review&quot;&#10;                                    : isSubmittingReview&#10;                                      ? &quot;Submitting...&quot;&#10;                                      : &quot;Submit Review&quot;}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/form&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#10;                          reviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={review._id}&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#10;                                          .charAt(0)&#10;                                          .toUpperCase()}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#10;                                        Verified Buyer&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                          &lt;span&#10;                                            key={star}&#10;                                            className={`text-lg transition-all duration-200 ${&#10;                                              star &lt;= review.rating&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&#10;                                            ★&#10;                                          &lt;/span&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                                        {review.rating}/5&#10;                                      &lt;/span&gt;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt || review.date,&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#10;                                          year: &quot;numeric&quot;,&#10;                                          month: &quot;short&quot;,&#10;                                          day: &quot;numeric&quot;,&#10;                                        })}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#10;                                  {/* Debug information */}&#10;                                  {console.log(&quot;DEBUG Review comparison:&quot;, {&#10;                                    sessionUserId: session?.user?.userId,&#10;                                    reviewUserId: review.userId,&#10;                                    areEqual:&#10;                                      session?.user?.userId === review.userId,&#10;                                    sessionUser: session?.user,&#10;                                  })}&#10;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#10;                                  {session?.user?.userId === review.userId ? (&#10;                                    &lt;&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt; {&#10;                                          setEditingReview(review);&#10;                                          setReviewForm({&#10;                                            rating: review.rating,&#10;                                            comment: review.comment,&#10;                                          });&#10;                                          setShowReviewForm(true);&#10;                                        }}&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Edit Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt;&#10;                                          handleDeleteReview(review._id)&#10;                                        }&#10;                                        disabled={isDeletingReview}&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Delete Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  ) : (&#10;                                    &lt;&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &quot;{review.comment}&quot;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                              {product.farmer?.farmName ||&#10;                                product.farmer?.name ||&#10;                                &quot;Farm Name&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              {product.farmer?.email ||&#10;                                &quot;Farmer contact not available&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.location &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            {product.farmer?.phone &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                              {product.farmer?.description ||&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                View All Products from this Farmer&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Related Products Section - Enhanced */}&#10;                  {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                      {/* Section Header */}&#10;                      &lt;div className=&quot;text-center mb-10&quot;&gt;&#10;                        &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                          Related Products&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#10;                          Discover similar high-quality products from our&#10;                          trusted farmers. Each item is carefully selected to&#10;                          meet our quality standards.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#10;                          &lt;span&gt;•&lt;/span&gt;&#10;                          &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#10;                          &lt;span&gt;Fast delivery available&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Product Grid */}&#10;                      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#10;                        {relatedProducts.map((relatedProduct, index) =&gt; (&#10;                          &lt;div&#10;                            key={relatedProduct._id}&#10;                            className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#10;                            style={{ animationDelay: `${index * 100}ms` }}&#10;                          &gt;&#10;                            &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#10;                              {/* Product Image */}&#10;                              &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#10;                                &lt;Image&#10;                                  src={&#10;                                    relatedProduct.image ||&#10;                                    relatedProduct.images?.[0] ||&#10;                                    &quot;/placeholder-image.jpg&quot;&#10;                                  }&#10;                                  alt={relatedProduct.name}&#10;                                  width={300}&#10;                                  height={300}&#10;                                  className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#10;                                /&gt;&#10;&#10;                                {/* Product Badges */}&#10;                                &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#10;                                  {relatedProduct.isOrganic &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Organic&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                  {relatedProduct.isFresh &amp;&amp; (&#10;                                    &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                      Fresh&#10;                                    &lt;/span&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Quick Actions Overlay */}&#10;                                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#10;                                  &lt;Link&#10;                                    href={`/details?id=${relatedProduct._id}`}&#10;                                    className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#10;                                  &gt;&#10;                                    View Details&#10;                                  &lt;/Link&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Product Info */}&#10;                              &lt;div className=&quot;p-6&quot;&gt;&#10;                                &lt;div className=&quot;mb-3&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#10;                                    {relatedProduct.name}&#10;                                  &lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#10;                                    by{&quot; &quot;}&#10;                                    {relatedProduct.farmer?.name ||&#10;                                      relatedProduct.farmer?.farmName ||&#10;                                      &quot;Unknown Farmer&quot;}&#10;                                  &lt;/p&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Rating */}&#10;                                &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#10;                                  &lt;StarRating&#10;                                    rating={relatedProduct.averageRating || 0}&#10;                                    size=&quot;sm&quot;&#10;                                  /&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                    (&#10;                                    {relatedProduct.reviewCount ||&#10;                                      relatedProduct.totalReviews ||&#10;                                      0}&#10;                                    )&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Price and Stock */}&#10;                                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                                  &lt;div&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                                      ${(relatedProduct.price || 0).toFixed(2)}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                      /{relatedProduct.unit || &quot;kg&quot;}&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;text-right&quot;&gt;&#10;                                    &lt;div&#10;                                      className={`text-xs font-medium ${&#10;                                        (relatedProduct.stock || 0) &gt; 0&#10;                                          ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                          : &quot;text-red-600 dark:text-red-400&quot;&#10;                                      }`}&#10;                                    &gt;&#10;                                      {(relatedProduct.stock || 0) &gt; 0&#10;                                        ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#10;                                        : &quot;Out of stock&quot;}&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Action Button */}&#10;                                &lt;Link&#10;                                  href={`/details?id=${relatedProduct._id}`}&#10;                                  className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#10;                                &gt;&#10;                                  &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                                  View Product&#10;                                &lt;/Link&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Browse More Section */}&#10;                      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                            Looking for more products?&#10;                          &lt;/p&gt;&#10;                          &lt;Link&#10;                            href=&quot;/products&quot;&#10;                            className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;                            Browse All Products&#10;                            &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#10;                          &lt;/Link&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ProductCard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ProductCard.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useFavorites } from &quot;../contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;../contexts/CartContext&quot;;&#10;import StarRating from &quot;./StarRating&quot;;&#10;&#10;export default function ProductCard({ product, showAddToCart = true }) {&#10;  const { data: session } = useSession();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;  const { addToCart } = useCart();&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [isLoadingFavorite, setIsLoadingFavorite] = useState(false);&#10;&#10;  // Check if this product is favorited&#10;  const isFavorite = isProductFavorited(product._id);&#10;&#10;  const handleFavoriteToggle = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsLoadingFavorite(true);&#10;    try {&#10;      if (isFavorite) {&#10;        await removeFromFavorites(product._id);&#10;      } else {&#10;        await addToFavorites(product._id);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating favorite:&quot;, error);&#10;    } finally {&#10;      setIsLoadingFavorite(false);&#10;    }&#10;  };&#10;&#10;  const handleAddToCart = async () =&gt; {&#10;    if (!session?.user) {&#10;      window.location.href = &quot;/login&quot;;&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      // Pass the complete product object with normalized id field&#10;      const productForCart = {&#10;        id: product._id, // Normalize _id to id for cart&#10;        _id: product._id,&#10;        name: product.name,&#10;        price: product.price,&#10;        image:&#10;          product.images?.[0] ||&#10;          product.image ||&#10;          &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;, // Use first image from images array&#10;        farmer: product.farmer,&#10;        category: product.category,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        stock: product.stock || 0, // Add missing stock field&#10;        farmerId: product.farmerId, // Add farmerId for consistency&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;, // Add farmerName&#10;      };&#10;&#10;      const success = await addToCart(productForCart, 1);&#10;      if (success !== false) {&#10;        alert(&quot;Product added to cart successfully!&quot;);&#10;      } else {&#10;        alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      alert(&quot;Failed to add product to cart. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const isOutOfStock = product.stock === 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden group hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        {/* Product Image */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;Image&#10;            src={&#10;              product.images?.[0] ||&#10;              product.image ||&#10;              &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;&#10;            }&#10;            alt={product.name}&#10;            width={400}&#10;            height={300}&#10;            className=&quot;w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer&quot;&#10;          /&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Favorite Button */}&#10;        &lt;button&#10;          onClick={handleFavoriteToggle}&#10;          disabled={isLoadingFavorite}&#10;          className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${&#10;            isFavorite&#10;              ? &quot;bg-red-500 text-white&quot;&#10;              : &quot;bg-white/80 text-gray-600 hover:bg-white hover:text-red-500&quot;&#10;          } ${isLoadingFavorite ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;i&#10;            className={`${&#10;              isFavorite ? &quot;fas&quot; : &quot;far&quot;&#10;            } fa-heart text-sm ${isLoadingFavorite ? &quot;fa-spin fa-spinner&quot; : &quot;&quot;}`}&#10;          &gt;&lt;/i&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Stock Status Badge */}&#10;        {isOutOfStock &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Out of Stock&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Featured Badge */}&#10;        {product.featured &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-primary-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            Featured&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Discount Badge */}&#10;        {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {Math.round(&#10;              ((product.originalPrice - product.price) /&#10;                product.originalPrice) *&#10;                100,&#10;            )}&#10;            % OFF&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#10;        {/* Category */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;          &lt;span className=&quot;text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-100 dark:bg-primary-900 px-2 py-1 rounded-full&quot;&gt;&#10;            {product.category}&#10;          &lt;/span&gt;&#10;          {product.tags &amp;&amp; product.tags.includes(&quot;Organic&quot;) &amp;&amp; (&#10;            &lt;span className=&quot;text-xs font-medium text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full&quot;&gt;&#10;              Organic&#10;            &lt;/span&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;Link href={`/details?id=${product._id}`}&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2 hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer line-clamp-2&quot;&gt;&#10;            {product.name}&#10;          &lt;/h3&gt;&#10;        &lt;/Link&gt;&#10;&#10;        {/* Farmer Name */}&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;          &lt;i className=&quot;fas fa-user-tie mr-1&quot;&gt;&lt;/i&gt;&#10;          by{&quot; &quot;}&#10;          {typeof product.farmer === &quot;object&quot; &amp;&amp; product.farmer?.name&#10;            ? product.farmer.name&#10;            : typeof product.farmer === &quot;string&quot;&#10;              ? product.farmer&#10;              : product.farmerName || &quot;Unknown Farmer&quot;}&#10;        &lt;/p&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center mb-3&quot;&gt;&#10;          &lt;StarRating&#10;            rating={product.averageRating || 0}&#10;            size=&quot;sm&quot;&#10;            showCount={false}&#10;          /&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400 ml-2&quot;&gt;&#10;            ({product.reviewCount || product.totalRatings || 0} reviews)&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {formatPrice(product.price)}&#10;            &lt;/span&gt;&#10;            {product.originalPrice &amp;&amp; product.originalPrice &gt; product.price &amp;&amp; (&#10;              &lt;span className=&quot;text-sm text-gray-500 line-through&quot;&gt;&#10;                {formatPrice(product.originalPrice)}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;            per {product.unit || &quot;kg&quot;}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Stock Info */}&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;            &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Stock:&lt;/span&gt;&#10;            &lt;span&#10;              className={`font-medium ${&#10;                product.stock &gt; 50&#10;                  ? &quot;text-green-600&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;text-yellow-600&quot;&#10;                    : &quot;text-red-600&quot;&#10;              }`}&#10;            &gt;&#10;              {product.stock} {product.unit || &quot;kg&quot;} available&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1&quot;&gt;&#10;            &lt;div&#10;              className={`h-2 rounded-full transition-all duration-300 ${&#10;                product.stock &gt; 50&#10;                  ? &quot;bg-green-500&quot;&#10;                  : product.stock &gt; 10&#10;                    ? &quot;bg-yellow-500&quot;&#10;                    : &quot;bg-red-500&quot;&#10;              }`}&#10;              style={{&#10;                width: `${Math.min((product.stock / 100) * 100, 100)}%`,&#10;              }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        {showAddToCart &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;button&#10;              onClick={handleAddToCart}&#10;              disabled={isAddingToCart || isOutOfStock}&#10;              className={`flex-1 py-2 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${&#10;                isOutOfStock&#10;                  ? &quot;bg-gray-300 text-gray-500 cursor-not-allowed&quot;&#10;                  : &quot;bg-primary-600 hover:bg-primary-700 text-white&quot;&#10;              } ${isAddingToCart ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;            &gt;&#10;              {isAddingToCart ? (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                  Adding...&#10;                &lt;/&gt;&#10;              ) : isOutOfStock ? (&#10;                &quot;Out of Stock&quot;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;i className=&quot;fas fa-cart-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                  Add to Cart&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href={`/details?id=${product._id}`}&#10;              className=&quot;px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 flex items-center justify-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Purchase Count (for featured products) */}&#10;        {product.purchaseCount &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-1&quot;&gt;&lt;/i&gt;&#10;            {product.purchaseCount} purchases&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/reviewUtils.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/reviewUtils.js" />
              <option name="originalContent" value="/**&#10; * Calculate average rating and review count from reviews array&#10; * @param {Array} reviews - Array of review objects with rating property&#10; * @returns {Object} - Object containing averageRating and reviewCount&#10; */&#10;export function calculateRatingStats(reviews) {&#10;  if (!reviews || !Array.isArray(reviews) || reviews.length === 0) {&#10;    return {&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;    };&#10;  }&#10;&#10;  const totalRating = reviews.reduce((sum, review) =&gt; {&#10;    const rating = Number(review.rating);&#10;    return sum + (isNaN(rating) ? 0 : rating);&#10;  }, 0);&#10;&#10;  const averageRating = Math.round((totalRating / reviews.length) * 10) / 10;&#10;&#10;  return {&#10;    averageRating: averageRating,&#10;    reviewCount: reviews.length,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance product data with calculated rating statistics&#10; * @param {Object} product - Product object&#10; * @returns {Object} - Enhanced product object with calculated ratings&#10; */&#10;export function enhanceProductWithRatings(product) {&#10;  const { averageRating, reviewCount } = calculateRatingStats(product.reviews);&#10;&#10;  return {&#10;    ...product,&#10;    averageRating,&#10;    reviewCount: reviewCount,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance multiple products with calculated rating statistics from database&#10; * @param {Array} products - Array of product objects&#10; * @param {Object} db - MongoDB database instance&#10; * @returns {Array} - Array of enhanced product objects&#10; */&#10;export async function enhanceProductsWithRatings(products, db) {&#10;  if (!Array.isArray(products) || products.length === 0) {&#10;    return [];&#10;  }&#10;&#10;  try {&#10;    // Get all reviews from the database first (simpler approach)&#10;    const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;&#10;    // Group reviews by product ID&#10;    const reviewsByProduct = {};&#10;    allReviews.forEach((review) =&gt; {&#10;      const productId = review.productId;&#10;      if (!reviewsByProduct[productId]) {&#10;        reviewsByProduct[productId] = [];&#10;      }&#10;      reviewsByProduct[productId].push(review);&#10;    });&#10;&#10;    // Enhance each product with its review data&#10;    const enhancedProducts = products.map((product) =&gt; {&#10;      const productId = product._id.toString();&#10;      const productReviews = reviewsByProduct[productId] || [];&#10;      const { averageRating, reviewCount } =&#10;        calculateRatingStats(productReviews);&#10;&#10;      return {&#10;        ...product,&#10;        averageRating,&#10;        reviewCount,&#10;        totalRatings: reviewCount, // Add totalRatings for compatibility with existing code&#10;        reviews: productReviews, // Include reviews if needed&#10;      };&#10;    });&#10;&#10;    return enhancedProducts;&#10;  } catch (error) {&#10;    console.error(&quot;Error enhancing products with ratings:&quot;, error);&#10;    // Return products with default rating values if enhancement fails&#10;    return products.map((product) =&gt; ({&#10;      ...product,&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;      totalRatings: 0,&#10;    }));&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * Calculate average rating and review count from reviews array&#10; * @param {Array} reviews - Array of review objects with rating property&#10; * @returns {Object} - Object containing averageRating and reviewCount&#10; */&#10;export function calculateRatingStats(reviews) {&#10;  if (!reviews || !Array.isArray(reviews) || reviews.length === 0) {&#10;    return {&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;    };&#10;  }&#10;&#10;  const totalRating = reviews.reduce((sum, review) =&gt; {&#10;    const rating = Number(review.rating);&#10;    return sum + (isNaN(rating) ? 0 : rating);&#10;  }, 0);&#10;&#10;  const averageRating = Math.round((totalRating / reviews.length) * 10) / 10;&#10;&#10;  return {&#10;    averageRating: averageRating,&#10;    reviewCount: reviews.length,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance product data with calculated rating statistics&#10; * @param {Object} product - Product object&#10; * @returns {Object} - Enhanced product object with calculated ratings&#10; */&#10;export function enhanceProductWithRatings(product) {&#10;  const { averageRating, reviewCount } = calculateRatingStats(product.reviews);&#10;&#10;  return {&#10;    ...product,&#10;    averageRating,&#10;    reviewCount: reviewCount,&#10;  };&#10;}&#10;&#10;/**&#10; * Enhance multiple products with calculated rating statistics from database&#10; * @param {Array} products - Array of product objects&#10; * @param {Object} db - MongoDB database instance&#10; * @returns {Array} - Array of enhanced product objects&#10; */&#10;export async function enhanceProductsWithRatings(products, db) {&#10;  if (!Array.isArray(products) || products.length === 0) {&#10;    return [];&#10;  }&#10;&#10;  try {&#10;    // Get all reviews from the separate reviews collection&#10;    const separateReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;&#10;    // Group separate reviews by product ID&#10;    const reviewsByProduct = {};&#10;    separateReviews.forEach((review) =&gt; {&#10;      const productId = review.productId;&#10;      if (!reviewsByProduct[productId]) {&#10;        reviewsByProduct[productId] = [];&#10;      }&#10;      reviewsByProduct[productId].push(review);&#10;    });&#10;&#10;    // Enhance each product with its review data&#10;    const enhancedProducts = products.map((product) =&gt; {&#10;      const productId = product._id.toString();&#10;&#10;      // Check for reviews in two places:&#10;      // 1. Reviews stored inside the product document (old products)&#10;      // 2. Reviews in the separate reviews collection (new products)&#10;      let productReviews = [];&#10;&#10;      // First, check if reviews are stored in the product document itself&#10;      if (product.reviews &amp;&amp; Array.isArray(product.reviews)) {&#10;        productReviews = product.reviews;&#10;      }&#10;      // Second, check the separate reviews collection&#10;      else if (reviewsByProduct[productId]) {&#10;        productReviews = reviewsByProduct[productId];&#10;      }&#10;&#10;      const { averageRating, reviewCount } = calculateRatingStats(productReviews);&#10;&#10;      return {&#10;        ...product,&#10;        averageRating,&#10;        reviewCount,&#10;        totalRatings: reviewCount, // Add totalRatings for compatibility with existing code&#10;        reviews: productReviews, // Include reviews if needed&#10;      };&#10;    });&#10;&#10;    return enhancedProducts;&#10;  } catch (error) {&#10;    console.error(&quot;Error enhancing products with ratings:&quot;, error);&#10;    // Return products with default rating values if enhancement fails&#10;    return products.map((product) =&gt; ({&#10;      ...product,&#10;      averageRating: 0,&#10;      reviewCount: 0,&#10;      totalRatings: 0,&#10;    }));&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>