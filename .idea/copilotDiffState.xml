<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add-farming-methods-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-farming-methods-to-all.js" />
              <option name="originalContent" value="&#10;    });&#10;&#10;    console.log(`\n5.  SUMMARY:`);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Successfully updated: ${successCount}`);&#10;    console.log(`Errors: ${errorCount}`);&#10;    console.log(&#10;      `Farmers with methods: ${farmersWithMethods.length} (${((farmersWithMethods.length / allFarmers.length) * 100).toFixed(1)}%)`,&#10;    );&#10;&#10;    if (farmersWithMethods.length === allFarmers.length) {&#10;      console.log(&#10;        `\n SUCCESS! All farmers now have farming methods defined!`,&#10;      );&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;addFarmingMethodsToAllFarmers().catch(console.error);&#10;" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function addFarmingMethodsToAllFarmers() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; ADDING FARMING METHODS TO FARMERS WITHOUT THEM\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Define appropriate farming methods for each farmer based on their specializations and farm type&#10;    const farmerMethods = {&#10;      // Farmers without farmInfo.farmingMethods currently&#10;      &quot;688b5723287e9adbc28801dc&quot;: [&quot;Sustainable&quot;, &quot;Traditional&quot;], // unnamed farmer&#10;      &quot;6888b23e626cff1716f3353c&quot;: [&quot;Organic&quot;, &quot;Sustainable&quot;, &quot;Traditional&quot;], // kazi abrar (vegetables)&#10;      &quot;688b3f4f37eade0f39f64de2&quot;: [&#10;        &quot;Traditional&quot;,&#10;        &quot;Sustainable&quot;,&#10;        &quot;Mixed Farming&quot;,&#10;      ], // chashi jashim (mixed)&#10;      &quot;689054bb0f308009e3dd8225&quot;: [&#10;        &quot;Free-range&quot;,&#10;        &quot;Animal Welfare&quot;,&#10;        &quot;Sustainable&quot;,&#10;      ], // sharif hossain (poultry)&#10;      &quot;6898578b2fcd466685f715f5&quot;: [&#10;        &quot;Traditional&quot;,&#10;        &quot;Grain Cultivation&quot;,&#10;        &quot;Sustainable&quot;,&#10;      ], // kashem ali (grains)&#10;      farmer_001: [&quot;Traditional&quot;, &quot;Grain Production&quot;, &quot;Natural Beekeeping&quot;], // Abdul fakir (Grains, Honey)&#10;      farmer_002: [&quot;Organic&quot;, &quot;Fruit Cultivation&quot;, &quot;Herb Growing&quot;], // Sufia akhter (Fruits, Herbs)&#10;      farmer_006: [&quot;Hydroponic&quot;, &quot;Organic&quot;, &quot;Sustainable&quot;], // Mostafa Kabir (hydroponic farm)&#10;    };&#10;&#10;    console.log(&quot;1.  FARMERS TO UPDATE:&quot;);&#10;    for (const [farmerId, methods] of Object.entries(farmerMethods)) {&#10;      console.log(`- ${farmerId}: [${methods.join(&quot;, &quot;)}]`);&#10;    }&#10;&#10;    console.log(&quot;\n2.  UPDATING FARMERS WITH FARMING METHODS...&quot;);&#10;&#10;    let successCount = 0;&#10;    let errorCount = 0;&#10;&#10;    for (const [farmerId, methods] of Object.entries(farmerMethods)) {&#10;      try {&#10;        // Check if farmer exists first&#10;        const farmer = await db.collection(&quot;farmers&quot;).findOne({&#10;          _id: farmerId.startsWith('688') || farmerId.startsWith('689') ? new ObjectId(farmerId) : farmerId&#10;        });&#10;&#10;        if (!farmer) {&#10;          console.log(`⚠️  Farmer ${farmerId} not found, skipping...`);&#10;          continue;&#10;        }&#10;&#10;        console.log(`\nUpdating ${farmer.name || &quot;unnamed&quot;} (${farmerId})...`);&#10;&#10;        // Prepare update data&#10;        const updateData = {&#10;          $set: {&#10;            &quot;farmInfo.farmingMethods&quot;: methods,&#10;            updatedAt: new Date(),&#10;          },&#10;        };&#10;&#10;        // If farmInfo doesn't exist, create it&#10;        if (!farmer.farmInfo) {&#10;          updateData.$set.farmInfo = {&#10;            farmName: farmer.farmName || `Farm ${farmerId}`,&#10;            farmDescription: &quot;&quot;,&#10;            farmSize: farmer.farmSize || null,&#10;            farmType: farmer.farmType || &quot;Mixed Farming&quot;,&#10;            certifications: [],&#10;            establishedYear: null,&#10;            farmingMethods: methods,&#10;          };&#10;        }&#10;&#10;        const result = await db&#10;          .collection(&quot;farmers&quot;)&#10;          .updateOne({ _id: farmer._id }, updateData);&#10;&#10;        if (result.modifiedCount &gt; 0) {&#10;          console.log(`  ✅ Updated successfully`);&#10;          successCount++;&#10;        } else {&#10;          console.log(`  ⚠️  No changes made`);&#10;        }&#10;      } catch (error) {&#10;        console.log(`  ❌ Error updating ${farmerId}: ${error.message}`);&#10;        errorCount++;&#10;      }&#10;    }&#10;&#10;    console.log(&quot;\n3.  VERIFYING UPDATES...&quot;);&#10;&#10;    // Verify all farmers now have farming methods&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;&#10;    const farmersWithMethods = [];&#10;    const farmersWithoutMethods = [];&#10;&#10;    allFarmers.forEach((farmer) =&gt; {&#10;      const hasMethods =&#10;        farmer.farmInfo?.farmingMethods &amp;&amp;&#10;        Array.isArray(farmer.farmInfo.farmingMethods) &amp;&amp;&#10;        farmer.farmInfo.farmingMethods.length &gt; 0;&#10;&#10;      if (hasMethods) {&#10;        farmersWithMethods.push(farmer);&#10;      } else {&#10;        farmersWithoutMethods.push(farmer);&#10;      }&#10;    });&#10;&#10;    console.log(`\n4.  FINAL RESULTS:`);&#10;    console.log(&#10;      `✅ Farmers with farming methods: ${farmersWithMethods.length}`,&#10;    );&#10;    farmersWithMethods.forEach((farmer) =&gt; {&#10;      console.log(&#10;        `  - ${farmer.name || &quot;unnamed&quot;}: [${farmer.farmInfo.farmingMethods.join(&quot;, &quot;)}]`,&#10;      );&#10;    });&#10;&#10;    console.log(&#10;      `\n❌ Farmers still without farming methods: ${farmersWithoutMethods.length}`,&#10;    );&#10;    farmersWithoutMethods.forEach((farmer) =&gt; {&#10;      console.log(`  - ${farmer.name || &quot;unnamed&quot;} (${farmer._id})`);&#10;    });&#10;&#10;    console.log(`\n5.  SUMMARY:`);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Successfully updated: ${successCount}`);&#10;    console.log(`Errors: ${errorCount}`);&#10;    console.log(&#10;      `Farmers with methods: ${farmersWithMethods.length} (${((farmersWithMethods.length / allFarmers.length) * 100).toFixed(1)}%)`,&#10;    );&#10;&#10;    if (farmersWithMethods.length === allFarmers.length) {&#10;      console.log(&#10;        `\n SUCCESS! All farmers now have farming methods defined!`,&#10;      );&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;addFarmingMethodsToAllFarmers().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/analyze-fatema-issue.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/analyze-fatema-issue.js" />
              <option name="originalContent" value="&#10;    // Summary and recommendations&#10;    console.log(&quot;\n SUMMARY &amp; RECOMMENDATIONS:&quot;);&#10;&#10;    if (sweetCorn.farmerId !== fatema._id) {&#10;      console.log(&quot;⚠️  Issue: Product farmerId doesn't match Fatema's ID&quot;);&#10;    }&#10;&#10;    if (sweetCorn.farmerEmail !== fatema.email) {&#10;      console.log(&#10;        &quot;⚠️  Issue: Product farmerEmail doesn't match Fatema's email&quot;,&#10;      );&#10;    }&#10;&#10;    if (&#10;      sweetCorn.category === &quot;Vegetables&quot; &amp;&amp;&#10;      sweetCorn.farmerId === fatema._id&#10;    ) {&#10;      console.log(&quot;✅ Product is correctly categorized and linked to Fatema&quot;);&#10;      console.log(&#10;        &quot;❓ Issue might be in the frontend filtering or display logic&quot;,&#10;      );&#10;      console.log(&quot;   Check farmer details page filtering logic for products&quot;);&#10;      console.log(&quot;   Check analytics tab category filtering&quot;);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;  }&#10;}&#10;&#10;analyzeFatemaIssue().catch(console.error);&#10;" />
              <option name="updatedContent" value="&#10;    // Summary and recommendations&#10;    console.log(&quot;\n SUMMARY &amp; RECOMMENDATIONS:&quot;);&#10;&#10;    if (sweetCorn.farmerId !== fatema._id) {&#10;      console.log(&quot;⚠️  Issue: Product farmerId doesn't match Fatema's ID&quot;);&#10;    }&#10;&#10;    if (sweetCorn.farmerEmail !== fatema.email) {&#10;      console.log(&#10;        &quot;⚠️  Issue: Product farmerEmail doesn't match Fatema's email&quot;,&#10;      );&#10;    }&#10;&#10;    if (&#10;      sweetCorn.category === &quot;Vegetables&quot; &amp;&amp;&#10;      sweetCorn.farmerId === fatema._id&#10;    ) {&#10;      console.log(&quot;✅ Product is correctly categorized and linked to Fatema&quot;);&#10;      console.log(&#10;        &quot;❓ Issue might be in the frontend filtering or display logic&quot;,&#10;      );&#10;      console.log(&quot;   Check farmer details page filtering logic for products&quot;);&#10;      console.log(&quot;   Check analytics tab category filtering&quot;);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;  }&#10;}&#10;&#10;analyzeFatemaIssue().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/debug/clear-cache/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/debug/clear-cache/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import { responseCache, clearProductsCache, clearAllProductsCaches } from &quot;@/app/api/products/route&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST() {&#10;  try {&#10;    console.log(' Starting cache clear process...');&#10;    &#10;    // Clear all product caches&#10;    clearAllProductsCaches();&#10;    console.log('✅ Cleared all products caches');&#10;    &#10;    // Also clear the response cache directly&#10;    if (responseCache &amp;&amp; typeof responseCache.clear === 'function') {&#10;      responseCache.clear();&#10;      console.log('✅ Cleared response cache');&#10;    }&#10;    &#10;    // Verify current Green Beans data from database&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log('\n VERIFYING CURRENT GREEN BEANS DATA:');&#10;    const greenBeans = await db.collection('products').findOne({&#10;      name: 'Green Beans'&#10;    });&#10;    &#10;    let greenBeansInfo = null;&#10;    if (greenBeans) {&#10;      greenBeansInfo = {&#10;        name: greenBeans.name,&#10;        farmerId: greenBeans.farmerId,&#10;        farmerEmail: greenBeans.farmerEmail,&#10;        farmerName: greenBeans.farmerName,&#10;        embeddedFarmerId: greenBeans.farmer?._id,&#10;        embeddedFarmerName: greenBeans.farmer?.name,&#10;        embeddedFarmerEmail: greenBeans.farmer?.email&#10;      };&#10;      console.log('Green Beans current data:', greenBeansInfo);&#10;    }&#10;    &#10;    // Check Mostafa's current products&#10;    console.log('\n CHECKING MOSTAFA\'S CURRENT PRODUCTS:');&#10;    const mostafaProducts = await db.collection('products').find({&#10;      $or: [&#10;        { farmerId: 'farmer_006' },&#10;        { 'farmer._id': 'farmer_006' },&#10;        { farmerName: 'Mostafa Kabir' }&#10;      ]&#10;    }).toArray();&#10;    &#10;    const mostafaProductsList = mostafaProducts.map(product =&gt; ({&#10;      name: product.name,&#10;      farmerId: product.farmerId,&#10;      farmerName: product.farmerName || product.farmer?.name&#10;    }));&#10;    &#10;    console.log(`Found ${mostafaProducts.length} products for Mostafa Kabir:`, mostafaProductsList);&#10;    &#10;    // Check Mizanur's current products  &#10;    console.log('\n CHECKING MIZANUR\'S CURRENT PRODUCTS:');&#10;    const mizanurProducts = await db.collection('products').find({&#10;      $or: [&#10;        { farmerId: 'farmer_005' },&#10;        { 'farmer._id': 'farmer_005' },&#10;        { farmerName: 'Mizanur Rahman' }&#10;      ]&#10;    }).toArray();&#10;    &#10;    const mizanurProductsList = mizanurProducts.map(product =&gt; ({&#10;      name: product.name,&#10;      farmerId: product.farmerId,&#10;      farmerName: product.farmerName || product.farmer?.name&#10;    }));&#10;    &#10;    console.log(`Found ${mizanurProducts.length} products for Mizanur Rahman:`, mizanurProductsList);&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: 'Cache cleared successfully',&#10;      data: {&#10;        greenBeansInfo,&#10;        mostafaProductsCount: mostafaProducts.length,&#10;        mostafaProducts: mostafaProductsList,&#10;        mizanurProductsCount: mizanurProducts.length,&#10;        mizanurProducts: mizanurProductsList,&#10;        cacheCleared: true,&#10;        timestamp: new Date().toISOString()&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Error clearing cache:', error);&#10;    return NextResponse.json({&#10;      success: false,&#10;      error: error.message,&#10;      message: 'Failed to clear cache'&#10;    }, { status: 500 });&#10;  }&#10;}&#10;&#10;export async function GET() {&#10;  try {&#10;    // Just return current cache status and data verification&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    const greenBeans = await db.collection('products').findOne({&#10;      name: 'Green Beans'&#10;    });&#10;    &#10;    const mostafaProducts = await db.collection('products').find({&#10;      $or: [&#10;        { farmerId: 'farmer_006' },&#10;        { 'farmer._id': 'farmer_006' },&#10;        { farmerName: 'Mostafa Kabir' }&#10;      ]&#10;    }).toArray();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      data: {&#10;        greenBeansCurrentOwner: greenBeans ? {&#10;          farmerId: greenBeans.farmerId,&#10;          farmerName: greenBeans.farmerName,&#10;          embeddedFarmerId: greenBeans.farmer?._id,&#10;          embeddedFarmerName: greenBeans.farmer?.name&#10;        } : null,&#10;        mostafaProductsCount: mostafaProducts.length,&#10;        mostafaProducts: mostafaProducts.map(p =&gt; p.name),&#10;        cacheStatus: 'Active (5 minute TTL)',&#10;        timestamp: new Date().toISOString()&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    return NextResponse.json({&#10;      success: false,&#10;      error: error.message&#10;    }, { status: 500 });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/debug/clear-react-query-cache/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/debug/clear-react-query-cache/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;&#10;export async function POST() {&#10;  try {&#10;    // This endpoint can be called to signal cache clearing&#10;    // The actual cache clearing happens on the client side&#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Cache clear signal sent&quot;,&#10;      timestamp: new Date().toISOString()&#10;    });&#10;  } catch (error) {&#10;    return NextResponse.json({&#10;      success: false,&#10;      error: error.message&#10;    }, { status: 500 });&#10;  }&#10;}&#10;&#10;export async function GET() {&#10;  return NextResponse.json({&#10;    message: &quot;Cache clearing endpoint&quot;,&#10;    instructions: &quot;Use POST method to signal cache clearing&quot;&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/farmers/migrate/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/farmers/migrate/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    let migratedCount = 0;&#10;    let skippedCount = 0;&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;        migratedCount++;&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;        skippedCount++;&#10;      }&#10;    }&#10;&#10;    // Get final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Farmer migration completed&quot;,&#10;      results: {&#10;        farmersFound: farmerUsers.length,&#10;        migrated: migratedCount,&#10;        skipped: skippedCount,&#10;        totalFarmersInCollection: totalFarmers&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;Migration error:&quot;, error);&#10;    return NextResponse.json(&#10;      { &#10;        success: false, &#10;        error: &quot;Failed to migrate farmers&quot;,&#10;        message: error.message &#10;      },&#10;      { status: 500 }&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/messages/[conversationId]/read/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/messages/[conversationId]/read/route.js" />
              <option name="originalContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { getServerSession } from &quot;next-auth/next&quot;;&#10;import { authOptions } from &quot;../../auth/[...nextauth]/route&quot;;&#10;&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const session = await getServerSession(authOptions);&#10;    if (!session) {&#10;      return NextResponse.json({ error: &quot;Unauthorized&quot; }, { status: 401 });&#10;    }&#10;&#10;    const conversationId = params.conversationId;&#10;" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;import { ObjectId } from &quot;mongodb&quot;;&#10;import { getServerSession } from &quot;next-auth/next&quot;;&#10;import { authOptions } from &quot;../../../auth/[...nextauth]/route&quot;;&#10;&#10;export async function PUT(request, { params }) {&#10;  try {&#10;    const session = await getServerSession(authOptions);&#10;    if (!session) {&#10;      return NextResponse.json({ error: &quot;Unauthorized&quot; }, { status: 401 });&#10;    }&#10;&#10;    // Await params before using its properties&#10;    const { conversationId } = await params;&#10;    if (!conversationId) {&#10;      return NextResponse.json(&#10;        { error: &quot;Conversation ID required&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    // Enhanced user ID detection&#10;    const currentUser = session.user;&#10;    const userId =&#10;      currentUser?.id ||&#10;      currentUser?._id ||&#10;      currentUser?.userId ||&#10;      currentUser?.sub ||&#10;      currentUser?.email;&#10;&#10;    if (!userId) {&#10;      console.error(&quot;❌ No user ID found for marking conversation as read&quot;);&#10;      return NextResponse.json(&#10;        { error: &quot;Invalid user session&quot; },&#10;        { status: 400 },&#10;      );&#10;    }&#10;&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farm-fresh&quot;);&#10;&#10;    // Mark all messages in this conversation as read for the current user&#10;    const result = await db.collection(&quot;messages&quot;).updateMany(&#10;      {&#10;        conversationId: new ObjectId(conversationId),&#10;        receiverId: new ObjectId(userId),&#10;        isRead: false,&#10;      },&#10;      {&#10;        $set: {&#10;          isRead: true,&#10;          readAt: new Date(),&#10;        },&#10;      },&#10;    );&#10;&#10;    return NextResponse.json({&#10;      success: true,&#10;      markedAsRead: result.modifiedCount,&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error marking conversation as read:&quot;, error);&#10;    return NextResponse.json(&#10;      { error: &quot;Internal server error&quot; },&#10;      { status: 500 },&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/details/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/details/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { useState, useEffect, useCallback, useMemo } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#10;import EnhancedReviewModal from &quot;@/components/EnhancedReviewModal&quot;;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#10;import { useReviewsQuery } from &quot;@/hooks/useReviewsQuery&quot;;&#10;import { useDashboardData } from &quot;@/hooks/useDashboardData&quot;;&#10;import { useProductsCache } from &quot;@/hooks/useProductsQuery&quot;;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#10;import FarmerDetailsLoading from &quot;@/components/FarmerDetailsLoading&quot;;&#10;import CustomerDetailsLoading from &quot;@/components/CustomerDetailsLoading&quot;;&#10;&#10;// Move constants outside component to prevent recreations&#10;const TAB_OPTIONS = [&#10;  &quot;description&quot;,&#10;  &quot;nutrition&quot;,&#10;  &quot;storage&quot;,&#10;  &quot;reviews&quot;,&#10;  &quot;farmer&quot;,&#10;];&#10;const DEFAULT_REVIEW_FORM = { rating: 5, comment: &quot;&quot; };&#10;&#10;// Currency formatting function&#10;const formatPrice = (price) =&gt; {&#10;  return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;    style: &quot;currency&quot;,&#10;    currency: &quot;BDT&quot;,&#10;    minimumFractionDigits: 0,&#10;  }).format(price);&#10;};&#10;&#10;export default function ProductDetails() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const productId = searchParams.get(&quot;id&quot;);&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#10;  const { data: session } = useSession();&#10;&#10;  const { addToCart } = useCart();&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#10;    useFavorites();&#10;&#10;  // Custom hooks&#10;  const {&#10;    product,&#10;    farmer,&#10;    farmerProducts,&#10;    responseType,&#10;    relatedProducts,&#10;    loading,&#10;    fetchProductDetails,&#10;  } = useProductData(productId);&#10;&#10;  const {&#10;    reviews,&#10;    hasMoreReviews,&#10;    isSubmitting,&#10;    isUpdating,&#10;    submitReview,&#10;    updateReview,&#10;    deleteReview,&#10;  } = useReviewsQuery(productId, session?.user?.id);&#10;  const isOwner = useOwnership(product, session, viewMode);&#10;&#10;  // Add dashboard data hook for optimistic caching&#10;  const { updateProductInCache } = useDashboardData();&#10;  const { updateProductInCache: updateProductsCache } = useProductsCache();&#10;&#10;  // Core UI states&#10;  const [selectedImage, setSelectedImage] = useState(0);&#10;  const [quantity, setQuantity] = useState(1);&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#10;&#10;  // Loading states&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#10;  const [, setIsSubmittingReview] = useState(false);&#10;  const [, setIsUpdatingReview] = useState(false);&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#10;  const [, setIsUpdating] = useState(false);&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#10;&#10;  // Form states&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#10;  const [reviewForm, setReviewForm] = useState(DEFAULT_REVIEW_FORM);&#10;  const [editingReview, setEditingReview] = useState(null);&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#10;&#10;  // Data states&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#10;  const [hasReviewedProduct, setHasReviewedProduct] = useState(false);&#10;  const [userExistingReview, setUserExistingReview] = useState(null);&#10;  const [recentOrders, setRecentOrders] = useState([]);&#10;&#10;  // Memoized favorite status&#10;  const isFavorite = useMemo(() =&gt; {&#10;    return productId ? isProductFavorited(productId) : false;&#10;  }, [productId, isProductFavorited]);&#10;&#10;  // Memoized image data&#10;  const imageData = useMemo(() =&gt; {&#10;    if (!product) return { allImages: [], hasMultipleImages: false };&#10;&#10;    const allImages = [];&#10;    if (product.image) allImages.push(product.image);&#10;    if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;      allImages.push(...product.images);&#10;    }&#10;&#10;    return {&#10;      allImages: [...new Set(allImages)], // Remove duplicates&#10;      hasMultipleImages: allImages.length &gt; 1,&#10;    };&#10;  }, [product]);&#10;&#10;  // Memoized rating distribution&#10;  useMemo(() =&gt; {&#10;    if (!reviews || reviews.length === 0) {&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    }&#10;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#10;    reviews.forEach((review) =&gt; {&#10;      const rating = Math.floor(review.rating);&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;        distribution[rating]++;&#10;      }&#10;    });&#10;&#10;    return distribution;&#10;  }, [reviews]);&#10;  // Optimized API calls with caching&#10;  const checkUserPurchase = useCallback(async () =&gt; {&#10;    // Get userId from either property&#10;    const userId = session?.user?.id || session?.user?.userId;&#10;&#10;    if (!userId || !productId) {&#10;      return;&#10;    }&#10;&#10;    setCheckingPurchase(true);&#10;    try {&#10;      // Use the new can-review endpoint to check if user can review this product&#10;      const apiUrl = `/api/products/${productId}/can-review?userId=${userId}`;&#10;&#10;      const response = await fetch(apiUrl, {&#10;        headers: {&#10;          &quot;Cache-Control&quot;: &quot;no-cache&quot;, // Disable cache for debugging&#10;        },&#10;      });&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;&#10;        // Set states based on API response&#10;        setHasPurchasedProduct(data.hasPurchased || false); // Whether user has purchased (regardless of review status)&#10;        setHasReviewedProduct(data.hasReviewed || false); // Whether user has already reviewed&#10;        setUserExistingReview(data.existingReview || null); // User's existing review if any&#10;      } else {&#10;        const errorData = await response.text();&#10;        setHasPurchasedProduct(false);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;❌ Can-review API error:&quot;, error);&#10;      setHasPurchasedProduct(false);&#10;    } finally {&#10;      setCheckingPurchase(false);&#10;    }&#10;  }, [&#10;    session?.user?.id,&#10;    session?.user?.userId,&#10;    productId,&#10;    hasPurchasedProduct,&#10;  ]);&#10;&#10;  const fetchRecentOrders = useCallback(async () =&gt; {&#10;    if (!productId) return;&#10;&#10;    try {&#10;      setLoadingOrders(true);&#10;      const response = await fetch(&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#10;        {&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;public, max-age=300&quot;,&#10;          },&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setRecentOrders(data.orders || []);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#10;    } finally {&#10;      setLoadingOrders(false);&#10;    }&#10;  }, [productId]);&#10;&#10;  // Optimized event handlers&#10;  const handleAddToCart = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!product) return;&#10;&#10;    // Check if user is a farmer and show appropriate message&#10;    if (session?.user?.userType === &quot;farmer&quot;) {&#10;      alert(&#10;        &quot;Farmers cannot purchase products. You can only sell your own products on this platform. Use the 'Manage' section to add your products.&quot;,&#10;      );&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const item = {&#10;        productId: productId,&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        quantity: quantity,&#10;        stock: product.stock,&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;      };&#10;&#10;      await addToCart(item, quantity);&#10;      // Consider using a toast notification instead of alert&#10;      alert(&quot;Product added to cart successfully!&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#10;      const errorMessage =&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#10;        error.message.includes(&quot;available in stock&quot;)&#10;          ? error.message&#10;          : error.message || &quot;Failed to add product to cart. Please try again.&quot;;&#10;      alert(errorMessage);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    product,&#10;    productId,&#10;    quantity,&#10;    imageData.allImages,&#10;    addToCart,&#10;    router,&#10;  ]);&#10;&#10;  const handleBuyNow = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!product) return;&#10;&#10;    // Check if user is a farmer and show appropriate message&#10;    if (session?.user?.userType === &quot;farmer&quot;) {&#10;      alert(&#10;        &quot;Farmers cannot purchase products. You can only sell your own products on this platform. Use the 'Manage' section to add your products.&quot;,&#10;      );&#10;      return;&#10;    }&#10;&#10;    setIsAddingToCart(true);&#10;    try {&#10;      const productForCart = {&#10;        id: productId,&#10;        name: product.name,&#10;        price: product.price,&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#10;        unit: product.unit || &quot;kg&quot;,&#10;        farmerId: product.farmerId,&#10;        farmer: {&#10;          id: product.farmerId,&#10;          _id: product.farmerId,&#10;          email: product.farmer?.email,&#10;          name:&#10;            product.farmer?.name ||&#10;            product.farmer?.farmName ||&#10;            &quot;Unknown Farmer&quot;,&#10;        },&#10;        farmerName:&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#10;        stock: product.stock || 0,&#10;      };&#10;&#10;      await addToCart(productForCart, quantity);&#10;      router.push(&quot;/payment&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#10;    } finally {&#10;      setIsAddingToCart(false);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    product,&#10;    productId,&#10;    quantity,&#10;    imageData.allImages,&#10;    addToCart,&#10;    router,&#10;  ]);&#10;&#10;  const handleFavoriteToggle = useCallback(async () =&gt; {&#10;    if (!session?.user) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (!productId) return;&#10;&#10;    try {&#10;      const success = isFavorite&#10;        ? await removeFromFavorites(productId)&#10;        : await addToFavorites(productId);&#10;&#10;      if (success) {&#10;        const message = isFavorite&#10;          ? &quot;Product removed from favorites!&quot;&#10;          : &quot;Product added to favorites!&quot;;&#10;        alert(message);&#10;      } else {&#10;        alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#10;    }&#10;  }, [&#10;    session?.user,&#10;    productId,&#10;    isFavorite,&#10;    addToFavorites,&#10;    removeFromFavorites,&#10;    router,&#10;  ]);&#10;&#10;  const handleSubmitReview = useCallback(&#10;    async (e) =&gt; {&#10;      e.preventDefault();&#10;      if (!session) {&#10;        alert(&quot;Please login to submit a review&quot;);&#10;        return;&#10;      }&#10;&#10;      setIsSubmittingReview(true);&#10;      try {&#10;        const reviewData = {&#10;          ...reviewForm,&#10;          userId:&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.userId ||&#10;            session.user.email,&#10;        };&#10;&#10;        const response = await fetch(`/api/products/${productId}/reviews`, {&#10;          method: &quot;POST&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify(reviewData),&#10;        });&#10;&#10;        if (response.ok) {&#10;          setShowReviewForm(false);&#10;          setReviewForm(DEFAULT_REVIEW_FORM);&#10;          alert(&quot;Review submitted successfully!&quot;);&#10;        } else {&#10;          const error = await response.json();&#10;          alert(error.error || &quot;Failed to submit review&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error submitting review:&quot;, error);&#10;        alert(&quot;Failed to submit review&quot;);&#10;      } finally {&#10;        setIsSubmittingReview(false);&#10;      }&#10;    },&#10;    [session, reviewForm, productId],&#10;  );&#10;&#10;  // Enhanced review submission handler using React Query mutations&#10;  const handleEnhancedReviewSubmit = useCallback(&#10;    async (reviewData) =&gt; {&#10;      console.log(&quot; Starting handleEnhancedReviewSubmit&quot;, {&#10;        reviewData,&#10;        editingReview,&#10;      });&#10;&#10;      try {&#10;        if (editingReview) {&#10;          console.log(&quot; Updating existing review...&quot;);&#10;          // Update existing review using React Query mutation&#10;          await updateReview({&#10;            reviewId: editingReview._id,&#10;            reviewData: {&#10;              rating: reviewData.rating,&#10;              comment: reviewData.comment,&#10;              title: reviewData.title,&#10;              pros: reviewData.pros,&#10;              cons: reviewData.cons,&#10;              wouldRecommend: reviewData.wouldRecommend,&#10;              isAnonymous: reviewData.isAnonymous,&#10;              tags: reviewData.tags,&#10;            },&#10;            userId: reviewData.userId,&#10;          });&#10;&#10;          console.log(&quot;✅ Review updated successfully!&quot;);&#10;          alert(&quot;Review updated successfully!&quot;);&#10;        } else {&#10;          console.log(&quot;➕ Creating new review...&quot;);&#10;          // Create new review using React Query mutation&#10;          await submitReview({&#10;            productId,&#10;            reviewData,&#10;          });&#10;&#10;          console.log(&quot;✅ Review submitted successfully!&quot;);&#10;&#10;          // Update user review states&#10;          setHasReviewedProduct(true);&#10;          setUserExistingReview(reviewData);&#10;&#10;          console.log(&quot; Updated local states - hasReviewedProduct: true&quot;);&#10;&#10;          alert(&quot;Review submitted successfully!&quot;);&#10;        }&#10;&#10;        // Close modal and reset form&#10;        setShowReviewForm(false);&#10;        setEditingReview(null);&#10;        setReviewForm(DEFAULT_REVIEW_FORM);&#10;&#10;        console.log(&quot; Modal closed and form reset&quot;);&#10;&#10;        // React Query mutations automatically handle cache invalidation&#10;        // so we don't need to manually refresh&#10;        console.log(&#10;          &quot;✅ Review operation completed - React Query handled updates&quot;,&#10;        );&#10;      } catch (error) {&#10;        console.error(&#10;          `❌ Error ${editingReview ? &quot;updating&quot; : &quot;submitting&quot;} review:`,&#10;          error,&#10;        );&#10;        alert(&#10;          `Failed to ${editingReview ? &quot;update&quot; : &quot;submit&quot;} review: ${error.message}`,&#10;        );&#10;      }&#10;    },&#10;    [productId, editingReview, submitReview, updateReview],&#10;  );&#10;&#10;  const handleUpdateReview = useCallback(async () =&gt; {&#10;    if (!editingReview) return;&#10;&#10;    setIsUpdatingReview(true);&#10;    try {&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          rating: reviewForm.rating,&#10;          comment: reviewForm.comment,&#10;          userId:&#10;            session.user.userId ||&#10;            session.user.id ||&#10;            session.user._id ||&#10;            session.user.email,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setEditingReview(null);&#10;        setReviewForm(DEFAULT_REVIEW_FORM);&#10;        setShowReviewForm(false);&#10;        // Removed manual refresh calls - React Query mutations handle cache invalidation automatically&#10;        alert(&quot;Review updated successfully!&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;        alert(error.error || &quot;Failed to update review&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating review:&quot;, error);&#10;      alert(&quot;Failed to update review&quot;);&#10;    } finally {&#10;      setIsUpdatingReview(false);&#10;    }&#10;  }, [editingReview, reviewForm, session]);&#10;&#10;  // Delete review handler using React Query mutations&#10;  const handleDeleteReview = useCallback(&#10;    async (reviewId) =&gt; {&#10;      if (!session?.user) {&#10;        alert(&quot;Please login to delete a review&quot;);&#10;        return;&#10;      }&#10;&#10;      try {&#10;        // Get the user ID from session&#10;        const userId =&#10;          session?.user?.id || session?.user?.userId || session?.user?.email;&#10;&#10;        if (!userId) {&#10;          alert(&quot;Unable to delete review: User not authenticated&quot;);&#10;          return;&#10;        }&#10;&#10;        await deleteReview({ reviewId, userId });&#10;&#10;        // Update user review states&#10;        setHasReviewedProduct(false);&#10;        setUserExistingReview(null);&#10;&#10;        // Removed manual fetchProductDetails() call - React Query mutations handle cache invalidation automatically&#10;        alert(&quot;Review deleted successfully!&quot;);&#10;      } catch (error) {&#10;        console.error(&quot;Error deleting review:&quot;, error);&#10;        alert(`Failed to delete review: ${error.message}`);&#10;      }&#10;    },&#10;    [deleteReview, session],&#10;  );&#10;&#10;  const loadMoreReviews = useCallback(() =&gt; {&#10;    // Since we're using React Query, we don't need a separate loadMoreReviews function&#10;    // The pagination should be handled by the useReviewsQuery hook&#10;    // For now, let's remove this function as it's not being used properly&#10;    console.log(&#10;      &quot;Load more reviews functionality needs to be implemented with React Query pagination&quot;,&#10;    );&#10;  }, []);&#10;&#10;  // Farmer-specific handlers&#10;  const handleUpdateProduct = useCallback(async () =&gt; {&#10;    if (!isOwner || (!stockUpdate &amp;&amp; !priceUpdate)) {&#10;      if (!stockUpdate &amp;&amp; !priceUpdate) {&#10;        alert(&quot;Please enter a value to update&quot;);&#10;      }&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const updateData = {};&#10;      const originalData = { stock: product.stock, price: product.price };&#10;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#10;        const stockValue = parseInt(stockUpdate);&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#10;          alert(&quot;Please enter a valid stock number&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.stock = stockValue;&#10;      }&#10;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#10;        const priceValue = parseFloat(priceUpdate);&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#10;          alert(&quot;Please enter a valid price&quot;);&#10;          setIsUpdating(false);&#10;          return;&#10;        }&#10;        updateData.price = priceValue;&#10;      }&#10;&#10;      // Optimistically update the product in dashboard cache&#10;      if (updateProductInCache) {&#10;        updateProductInCache(productId, {&#10;          ...updateData,&#10;          updatedAt: new Date().toISOString(),&#10;        });&#10;      }&#10;      // Optimistically update the product in products cache&#10;      if (updateProductsCache) {&#10;        updateProductsCache(productId, {&#10;          ...updateData,&#10;          updatedAt: new Date().toISOString(),&#10;        });&#10;      }&#10;&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify(updateData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const updatedProduct = await response.json();&#10;&#10;        // Update the dashboard cache with the server response&#10;        if (updateProductInCache &amp;&amp; updatedProduct.product) {&#10;          updateProductInCache(productId, updatedProduct.product);&#10;        }&#10;        // Update the products cache with the server response&#10;        if (updateProductsCache &amp;&amp; updatedProduct.product) {&#10;          updateProductsCache(productId, updatedProduct.product);&#10;        }&#10;&#10;        alert(&quot;Product updated successfully!&quot;);&#10;        // Refresh the product details to sync with server&#10;        await fetchProductDetails();&#10;        setStockUpdate(&quot;&quot;);&#10;        setPriceUpdate(&quot;&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;&#10;        // Revert optimistic update on error&#10;        if (updateProductInCache) {&#10;          updateProductInCache(productId, originalData);&#10;        }&#10;        if (updateProductsCache) {&#10;          updateProductsCache(productId, originalData);&#10;        }&#10;&#10;        alert(error.error || &quot;Failed to update product&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error updating product:&quot;, error);&#10;&#10;      // Revert optimistic update on error&#10;      if (updateProductInCache) {&#10;        const originalData = { stock: product.stock, price: product.price };&#10;        updateProductInCache(productId, originalData);&#10;      }&#10;      if (updateProductsCache) {&#10;        const originalData = { stock: product.stock, price: product.price };&#10;        updateProductsCache(productId, originalData);&#10;      }&#10;&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [&#10;    isOwner,&#10;    stockUpdate,&#10;    priceUpdate,&#10;    productId,&#10;    product,&#10;    updateProductInCache,&#10;    updateProductsCache,&#10;    fetchProductDetails,&#10;  ]);&#10;&#10;  // Handle adding images to product&#10;  const handleAddImages = useCallback(() =&gt; {&#10;    // Create a file input element&#10;    const input = document.createElement(&quot;input&quot;);&#10;    input.type = &quot;file&quot;;&#10;    input.accept = &quot;image/*&quot;;&#10;    input.multiple = true;&#10;&#10;    input.onchange = async (event) =&gt; {&#10;      const files = event.target.files;&#10;      if (!files || files.length === 0) return;&#10;&#10;      // Validate file types and sizes&#10;      const validFiles = Array.from(files).filter((file) =&gt; {&#10;        const isValidType = file.type.startsWith(&quot;image/&quot;);&#10;        const isValidSize = file.size &lt;= 5 * 1024 * 1024; // 5MB limit&#10;&#10;        if (!isValidType) {&#10;          alert(`${file.name} is not a valid image file.`);&#10;          return false;&#10;        }&#10;        if (!isValidSize) {&#10;          alert(`${file.name} is too large. Maximum size is 5MB.`);&#10;          return false;&#10;        }&#10;        return true;&#10;      });&#10;&#10;      if (validFiles.length === 0) return;&#10;&#10;      try {&#10;        // Create FormData for file upload&#10;        const formData = new FormData();&#10;        validFiles.forEach((file) =&gt; {&#10;          formData.append(&quot;images&quot;, file);&#10;        });&#10;        formData.append(&quot;productId&quot;, productId);&#10;&#10;        // Show loading state&#10;        alert(&quot;Uploading images...&quot;);&#10;&#10;        // Upload images to your API endpoint&#10;        const response = await fetch(`/api/products/${productId}/images`, {&#10;          method: &quot;POST&quot;,&#10;          body: formData,&#10;        });&#10;&#10;        if (response.ok) {&#10;          const result = await response.json();&#10;          alert(`Successfully uploaded ${validFiles.length} image(s)!`);&#10;&#10;          // Refresh product details to show new images&#10;          fetchProductDetails();&#10;        } else {&#10;          const error = await response.json();&#10;          throw new Error(error.error || &quot;Failed to upload images&quot;);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error uploading images:&quot;, error);&#10;        alert(`Failed to upload images: ${error.message}`);&#10;      }&#10;    };&#10;&#10;    // Trigger file selection&#10;    input.click();&#10;  }, [productId, fetchProductDetails]);&#10;&#10;  // Handle toggling product status (activate/deactivate)&#10;  const handleToggleStatus = useCallback(async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const currentStatus = product?.status || &quot;active&quot;;&#10;    const newStatus = currentStatus === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#10;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ status: newStatus }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(`Product ${actionText}d successfully!`);&#10;        fetchProductDetails();&#10;      } else {&#10;        const error = await response.json();&#10;        throw new Error(error.error || `Failed to ${actionText} product`);&#10;      }&#10;    } catch (error) {&#10;      console.error(`Error ${actionText}ing product:`, error);&#10;      alert(`Failed to ${actionText} product: ${error.message}`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, product?.status, productId, fetchProductDetails]);&#10;&#10;  // Handle deleting product&#10;  const handleDeleteProduct = useCallback(async () =&gt; {&#10;    if (!isOwner) return;&#10;&#10;    const confirmMessage =&#10;      &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#10;      &quot;This action cannot be undone and will remove:\n&quot; +&#10;      &quot;• The product listing\n&quot; +&#10;      &quot;• All associated data\n&quot; +&#10;      &quot;• Product images\n&quot; +&#10;      &quot;• Product from any pending orders&quot;;&#10;&#10;    if (!confirm(confirmMessage)) {&#10;      return;&#10;    }&#10;&#10;    setIsUpdating(true);&#10;    try {&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: &quot;DELETE&quot;,&#10;      });&#10;&#10;      if (response.ok) {&#10;        alert(&quot;Product deleted successfully!&quot;);&#10;        // Redirect to manage page&#10;        router.push(&quot;/manage&quot;);&#10;      } else {&#10;        const error = await response.json();&#10;&#10;        if (response.status === 409) {&#10;          alert(&#10;            &quot;❌ Cannot Delete Product\n\n&quot; +&#10;              &quot;This product has pending orders and cannot be deleted.\n&quot; +&#10;              &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#10;              &quot;You can temporarily deactivate the product instead.&quot;,&#10;          );&#10;        } else {&#10;          throw new Error(error.error || &quot;Failed to delete product&quot;);&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error deleting product:&quot;, error);&#10;      alert(`Failed to delete product: ${error.message}`);&#10;    } finally {&#10;      setIsUpdating(false);&#10;    }&#10;  }, [isOwner, productId, fetchProductDetails, router]);&#10;&#10;  // Effects with proper dependencies&#10;  useEffect(() =&gt; {&#10;    console.log(&quot; PRODUCT DETAILS useEffect triggered!&quot;, {&#10;      productId: productId,&#10;      hasProductId: !!productId,&#10;    });&#10;    if (productId) {&#10;      fetchProductDetails();&#10;    }&#10;  }, [productId, fetchProductDetails]);&#10;&#10;  useEffect(() =&gt; {&#10;    let interval;&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      interval = setInterval(fetchProductDetails, 30000);&#10;    }&#10;    return () =&gt; {&#10;      if (interval) clearInterval(interval);&#10;    };&#10;  }, [productId, isOwner, viewMode, fetchProductDetails]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#10;      fetchRecentOrders();&#10;    }&#10;  }, [productId, isOwner, viewMode, fetchRecentOrders]);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot; SESSION CHECK useEffect triggered!&quot;, {&#10;      hasSession: !!session,&#10;      hasUserId: !!session?.user?.id,&#10;      hasUserIdProp: !!session?.user?.userId, // Check both properties&#10;      sessionUserId: session?.user?.id,&#10;      sessionUserIdProp: session?.user?.userId,&#10;      productId: productId,&#10;      hasProductId: !!productId,&#10;      sessionData: session,&#10;    });&#10;&#10;    // Check both session.user.id and session.user.userId&#10;    const userId = session?.user?.id || session?.user?.userId;&#10;&#10;    if (userId &amp;&amp; productId) {&#10;      console.log(&quot;✅ Calling checkUserPurchase with userId:&quot;, userId);&#10;      checkUserPurchase();&#10;    } else {&#10;      console.log(&quot;❌ NOT calling checkUserPurchase because:&quot;, {&#10;        noSession: !userId,&#10;        noProductId: !productId,&#10;        availableUserId: userId,&#10;      });&#10;    }&#10;  }, [session?.user?.id, session?.user?.userId, productId, checkUserPurchase]);&#10;&#10;  // Check if user has purchased this product&#10;  useEffect(() =&gt; {&#10;    if (session?.user?.id &amp;&amp; productId) {&#10;      checkUserPurchase();&#10;    }&#10;  }, [session?.user?.id, productId]);&#10;&#10;  // Render components based on state&#10;  if (loading) {&#10;    // Use the same ownership logic as the actual content to determine loading skeleton&#10;    // The content logic is: isOwner &amp;&amp; viewMode !== &quot;customer&quot;&#10;    // We need to replicate this logic during loading&#10;&#10;    const checkPotentialOwnership = () =&gt; {&#10;      // If explicit customer view, always show customer skeleton&#10;      if (viewMode === &quot;customer&quot;) {&#10;        return false;&#10;      }&#10;&#10;      // If no session or not a farmer, show customer skeleton&#10;      if (!session?.user || session?.user?.userType !== &quot;farmer&quot;) {&#10;        return false;&#10;      }&#10;&#10;      // For farmers, we need to make an educated guess about ownership&#10;      // Since we don't have product data yet, we can:&#10;      // 1. Check if they came from /manage page (referrer)&#10;      // 2. Check if the productId might belong to them (requires API call)&#10;      // 3. Use a heuristic based on navigation patterns&#10;&#10;      // For now, let's show farmer skeleton for farmers by default&#10;      // and let it switch to customer view if they're not the owner&#10;      // This provides better UX for farmers viewing their own products&#10;      if (productId &amp;&amp; session?.user?.userType === &quot;farmer&quot;) {&#10;        return true; // Show farmer skeleton, will switch if not owner&#10;      }&#10;&#10;      return false;&#10;    };&#10;&#10;    const showFarmerSkeleton = checkPotentialOwnership();&#10;&#10;    return showFarmerSkeleton ? (&#10;      &lt;FarmerDetailsLoading /&gt;&#10;    ) : (&#10;      &lt;CustomerDetailsLoading /&gt;&#10;    );&#10;  }&#10;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#10;    return (&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#10;    );&#10;  }&#10;&#10;  if (!product &amp;&amp; !farmer) {&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#10;  }&#10;&#10;  // Main product details render&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          {/* Farmer Dashboard View */}&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#10;            &lt;&gt;&#10;              {/* Farmer Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                      Dashboard&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name} - Management&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              {/* Customer View Notice */}&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#10;                      You are viewing this as the product owner.&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#10;                    View as Customer&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Farmer Product Management Header */}&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#10;                      Product Management&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#10;                      Manage your product listing and inventory&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                      Product Status&#10;                    &lt;/div&gt;&#10;                    &lt;div&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#10;                        product.status === &quot;active&quot;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Product Images &amp; Info */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Image Management */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Images&#10;                      &lt;/h3&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Current Images Display */}&#10;                    {(() =&gt; {&#10;                      const allImages = imageData.allImages;&#10;&#10;                      return allImages.length &gt; 0 ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={allImages[selectedImage]}&#10;                              alt={product.name}&#10;                              width={400}&#10;                              height={225}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#10;                              {allImages.map((image, index) =&gt; (&#10;                                &lt;button&#10;                                  key={index}&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                                    selectedImage === index&#10;                                      ? &quot;border-primary-500&quot;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  &lt;Image&#10;                                    src={image}&#10;                                    alt={`${product.name} ${index + 1}`}&#10;                                    width={80}&#10;                                    height={80}&#10;                                    className=&quot;w-full h-full object-cover&quot;&#10;                                  /&gt;&#10;                                &lt;/button&gt;&#10;                              ))}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            No images uploaded&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Information */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Product Information&#10;                      &lt;/h3&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {product.category}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Price&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {formatPrice(product.price)} per{&quot; &quot;}&#10;                            {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Stock&#10;                          &lt;/span&gt;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Description&#10;                        &lt;/span&gt;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                          {product.description || &quot;No description provided.&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {product.features &amp;&amp; (&#10;                        &lt;div&gt;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            Features&#10;                          &lt;/span&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Recent Orders */}&#10;                  &lt;RecentOrdersSection&#10;                    recentOrders={recentOrders}&#10;                    loadingOrders={loadingOrders}&#10;                    product={product}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Performance Stats */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                        Performance&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        Real-time data&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      {/* Total Sales */}&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#10;                            {product.performanceMetrics?.totalSales || 0}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Sales&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Revenue */}&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#10;                          {formatPrice(&#10;                            product.performanceMetrics?.totalRevenue || 0,&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Revenue&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Rating */}&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#10;                          {(product.averageRating || 0).toFixed(1)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Average Rating&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#10;                          &lt;StarRating&#10;                            rating={product.averageRating || 0}&#10;                            size=&quot;sm&quot;&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Total Reviews */}&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#10;                          {product.reviewCount || product.totalReviews || 0}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Total Reviews&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Average Order Value */}&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#10;                            {formatPrice(&#10;                              product.performanceMetrics.averageOrderValue,&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Avg. Order Value&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* Total Orders */}&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#10;                            {product.performanceMetrics.totalOrders}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Total Orders&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Performance Summary */}&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#10;                          ? &quot;Your product is performing well!&quot;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Actions&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      {session?.user?.userType === &quot;farmer&quot; ? (&#10;                        // Farmer-specific buttons&#10;                        &lt;&gt;&#10;                          &lt;Link&#10;                            href=&quot;/create&quot;&#10;                            className=&quot;w-full bg-green-600 hover:bg-green-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                            Add Product&#10;                          &lt;/Link&gt;&#10;                          &lt;Link&#10;                            href=&quot;/manage&quot;&#10;                            className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#10;                            Manage Orders&#10;                          &lt;/Link&gt;&#10;                          &lt;Link&#10;                            href=&quot;/farmer-orders&quot;&#10;                            className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#10;                            View My Orders&#10;                          &lt;/Link&gt;&#10;                        &lt;/&gt;&#10;                      ) : (&#10;                        // Customer buttons&#10;                        &lt;&gt;&#10;                          &lt;button&#10;                            onClick={handleBuyNow}&#10;                            disabled={&#10;                              product.stock &lt;= 0 ||&#10;                              session?.user?.userType === &quot;farmer&quot;&#10;                            }&#10;                            className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                            title={&#10;                              session?.user?.userType === &quot;farmer&quot;&#10;                                ? &quot;Farmers cannot purchase products&quot;&#10;                                : &quot;&quot;&#10;                            }&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                            Buy Now&#10;                          &lt;/button&gt;&#10;                          &lt;button&#10;                            onClick={handleAddToCart}&#10;                            disabled={&#10;                              isAddingToCart ||&#10;                              product.stock &lt;= 0 ||&#10;                              session?.user?.userType === &quot;farmer&quot;&#10;                            }&#10;                            className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                            title={&#10;                              session?.user?.userType === &quot;farmer&quot;&#10;                                ? &quot;Farmers cannot purchase products&quot;&#10;                                : &quot;&quot;&#10;                            }&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                            {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                          &lt;/button&gt;&#10;                          &lt;button&#10;                            onClick={handleFavoriteToggle}&#10;                            className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                          &gt;&#10;                            &lt;i&#10;                              className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                            &gt;&lt;/i&gt;&#10;                            Add to Favorite&#10;                          &lt;/button&gt;&#10;                        &lt;/&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/&gt;&#10;          ) : (&#10;            /* Regular Customer View */&#10;            &lt;&gt;&#10;              {/* Breadcrumb */}&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Home&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#10;                      Products&#10;                    &lt;/Link&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#10;                  &lt;/li&gt;&#10;                  &lt;li&gt;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/span&gt;&#10;                  &lt;/li&gt;&#10;                &lt;/ol&gt;&#10;              &lt;/nav&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#10;                {/* Product Images */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#10;                    {(() =&gt; {&#10;                      const allImages = imageData.allImages;&#10;&#10;                      return (&#10;                        &lt;Image&#10;                          src={&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#10;                          }&#10;                          alt={product.name}&#10;                          width={600}&#10;                          height={600}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Thumbnail Images */}&#10;                  {(() =&gt; {&#10;                    const allImages = imageData.allImages;&#10;&#10;                    return allImages.length &gt; 1 ? (&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#10;                        {allImages.map((image, index) =&gt; (&#10;                          &lt;button&#10;                            key={index}&#10;                            onClick={() =&gt; setSelectedImage(index)}&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#10;                              selectedImage === index&#10;                                ? &quot;border-primary-500&quot;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={image}&#10;                              alt={`${product.name} ${index + 1}`}&#10;                              width={100}&#10;                              height={100}&#10;                              className=&quot;w-full h-full object-cover&quot;&#10;                            /&gt;&#10;                          &lt;/button&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    ) : null;&#10;                  })()}&#10;                &lt;/div&gt;&#10;&#10;                {/* Product Info */}&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  {/* Category and Features */}&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;                      {product.category}&#10;                    &lt;/span&gt;&#10;                    {product.isOrganic &amp;&amp; (&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Organic&#10;                      &lt;/span&gt;&#10;                    )}&#10;                    {product.isFresh &amp;&amp; (&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;                        Fresh&#10;                      &lt;/span&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Product Name and Farmer */}&#10;                  &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                      {product.name}&#10;                    &lt;/h1&gt;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      Produced by{&quot; &quot;}&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                        {product.farmer?.farmName ||&#10;                          product.farmer?.name ||&#10;                          &quot;Unknown Farmer&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Rating and Reviews */}&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    {(() =&gt; {&#10;                      // Calculate actual average rating and count from reviews if available&#10;                      const actualReviewCount = reviews?.length || 0;&#10;                      let displayRating = product.averageRating || 0;&#10;&#10;                      // If we have reviews but no product rating, calculate from reviews&#10;                      if (&#10;                        actualReviewCount &gt; 0 &amp;&amp;&#10;                        (!product.averageRating || product.averageRating === 0)&#10;                      ) {&#10;                        const totalRating = reviews.reduce(&#10;                          (sum, review) =&gt; sum + (review.rating || 0),&#10;                          0,&#10;                        );&#10;                        displayRating = totalRating / actualReviewCount;&#10;                      }&#10;&#10;                      return (&#10;                        &lt;&gt;&#10;                          &lt;StarRating rating={displayRating} showValue={true} /&gt;&#10;                          &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            ({actualReviewCount} reviews)&#10;                          &lt;/span&gt;&#10;                        &lt;/&gt;&#10;                      );&#10;                    })()}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Price and Stock */}&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                          {formatPrice(product.price)}&#10;                        &lt;/span&gt;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          /{product.unit || &quot;kg&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                          Available Stock&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Location */}&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Quantity Selection */}&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#10;                          disabled={session?.user?.userType === &quot;farmer&quot;}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          max={product.stock}&#10;                          value={quantity}&#10;                          onChange={(e) =&gt;&#10;                            setQuantity(&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#10;                            )&#10;                          }&#10;                          disabled={session?.user?.userType === &quot;farmer&quot;}&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                        /&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#10;                          }&#10;                          disabled={session?.user?.userType === &quot;farmer&quot;}&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                      {session?.user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-2 italic&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-info-circle mr-1&quot;&gt;&lt;/i&gt;&#10;                          Farmers can only view product details, not purchase&#10;                        &lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Action Buttons */}&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    {session?.user?.userType === &quot;farmer&quot; ? (&#10;                      // Farmer-specific buttons&#10;                      &lt;&gt;&#10;                        &lt;Link&#10;                          href=&quot;/create&quot;&#10;                          className=&quot;w-full bg-green-600 hover:bg-green-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                          Add Product&#10;                        &lt;/Link&gt;&#10;                        &lt;Link&#10;                          href=&quot;/manage&quot;&#10;                          className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#10;                          Manage Orders&#10;                        &lt;/Link&gt;&#10;                        &lt;Link&#10;                          href=&quot;/farmer-orders&quot;&#10;                          className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition flex items-center justify-center&quot;&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#10;                          View My Orders&#10;                        &lt;/Link&gt;&#10;                      &lt;/&gt;&#10;                    ) : (&#10;                      // Customer buttons&#10;                      &lt;&gt;&#10;                        &lt;button&#10;                          onClick={handleBuyNow}&#10;                          disabled={&#10;                            product.stock &lt;= 0 ||&#10;                            session?.user?.userType === &quot;farmer&quot;&#10;                          }&#10;                          className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#10;                          title={&#10;                            session?.user?.userType === &quot;farmer&quot;&#10;                              ? &quot;Farmers cannot purchase products&quot;&#10;                              : &quot;&quot;&#10;                          }&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#10;                          Buy Now&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                          onClick={handleAddToCart}&#10;                          disabled={&#10;                            isAddingToCart ||&#10;                            product.stock &lt;= 0 ||&#10;                            session?.user?.userType === &quot;farmer&quot;&#10;                          }&#10;                          className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#10;                          title={&#10;                            session?.user?.userType === &quot;farmer&quot;&#10;                              ? &quot;Farmers cannot purchase products&quot;&#10;                              : &quot;&quot;&#10;                          }&#10;                        &gt;&#10;                          &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                          {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                          onClick={handleFavoriteToggle}&#10;                          className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#10;                        &gt;&#10;                          &lt;i&#10;                            className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#10;                          &gt;&lt;/i&gt;&#10;                          Add to Favorite&#10;                        &lt;/button&gt;&#10;                      &lt;/&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Tabs Section */}&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {TAB_OPTIONS.map((tab) =&gt; (&#10;                      &lt;button&#10;                        key={tab}&#10;                        onClick={() =&gt; setActiveTab(tab)}&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#10;                          activeTab === tab&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/nav&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#10;                  {/* Description Tab */}&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#10;                        Product Description&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                        {product.description ||&#10;                          &quot;No description available for this product.&quot;}&#10;                      &lt;/p&gt;&#10;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#10;                            Key Features&#10;                          &lt;/h4&gt;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                            {product.features.map((feature, index) =&gt; (&#10;                              &lt;li&#10;                                key={index}&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#10;                              &gt;&#10;                                {feature}&#10;                              &lt;/li&gt;&#10;                            ))}&#10;                          &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Nutrition Tab */}&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Nutritional Information&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.nutritionalInformation ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          {typeof product.nutritionalInformation ===&#10;                          &quot;string&quot; ? (&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                              {product.nutritionalInformation}&#10;                            &lt;/p&gt;&#10;                          ) : (&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                              {/* Display nutritional information as structured data */}&#10;                              {product.nutritionalInformation.servingSize &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                                    Serving Size:&#10;                                  &lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.servingSize}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.calories &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Calories:&lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.calories}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.protein &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Protein:&lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.protein}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.fat &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Fat:&lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.fat}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.carbohydrates &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                                    Carbohydrates:&#10;                                  &lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {&#10;                                      product.nutritionalInformation&#10;                                        .carbohydrates&#10;                                    }&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.fiber &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Fiber:&lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.fiber}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.vitaminC &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                                    Vitamin C:&#10;                                  &lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.vitaminC}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.potassium &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#10;                                    Potassium:&#10;                                  &lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.potassium}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {product.nutritionalInformation.iron &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Iron:&lt;/span&gt;&#10;                                  &lt;span&gt;&#10;                                    {product.nutritionalInformation.iron}&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Nutritional information is not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Storage Instructions Tab */}&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        Storage Instructions&#10;                      &lt;/h3&gt;&#10;&#10;                      {product.storageInstructions ? (&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {product.storageInstructions}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            Storage instructions are not available for this&#10;                            product.&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;&#10;                      {/* General storage tips */}&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#10;                          General Storage Tips&#10;                        &lt;/h4&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900 text-blue-900 dark:text-blue-100 rounded-lg p-4&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#10;                              Temperature&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm&quot;&gt;&#10;                              Store in a cool, dry place away from direct&#10;                              sunlight&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900 text-green-900 dark:text-green-100 rounded-lg p-4&quot;&gt;&#10;                            &lt;h5 className=&quot;font-medium mb-2&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#10;                              Humidity&#10;                            &lt;/h5&gt;&#10;                            &lt;p className=&quot;text-sm&quot;&gt;&#10;                              Keep in low humidity environment to prevent&#10;                              spoilage&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Reviews Tab */}&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                          Customer Reviews (&#10;                          {product.reviewCount || product.totalReviews || 0})&#10;                        &lt;/h2&gt;&#10;                        {/* Show review button only for customers who have purchased and received the product but haven't reviewed yet */}&#10;                        {session &amp;&amp;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#10;                          hasPurchasedProduct &amp;&amp;&#10;                          !hasReviewedProduct &amp;&amp; (&#10;                            &lt;button&#10;                              onClick={() =&gt; setShowReviewForm(true)}&#10;                              className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                              Write Review&#10;                            &lt;/button&gt;&#10;                          )}&#10;&#10;                        {/* Show edit button if user has already reviewed */}&#10;                        {session &amp;&amp;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#10;                          hasPurchasedProduct &amp;&amp;&#10;                          hasReviewedProduct &amp;&amp;&#10;                          userExistingReview &amp;&amp; (&#10;                            &lt;button&#10;                              onClick={() =&gt; {&#10;                                setEditingReview(userExistingReview);&#10;                                setReviewForm({&#10;                                  rating: userExistingReview.rating || 5,&#10;                                  comment: userExistingReview.comment || &quot;&quot;,&#10;                                });&#10;                                setShowReviewForm(true);&#10;                              }}&#10;                              className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                              Edit Your Review&#10;                            &lt;/button&gt;&#10;                          )}&#10;&#10;                        {session &amp;&amp;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#10;                          !hasPurchasedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                              &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm italic mb-4&quot;&gt;&#10;                                You need to purchase and receive this product to&#10;                                write a review&#10;                              &lt;/p&gt;&#10;                              &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                                Purchase required for reviews&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;&#10;                        {/* Show message if user has already reviewed */}&#10;                        {session &amp;&amp;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#10;                          hasPurchasedProduct &amp;&amp;&#10;                          hasReviewedProduct &amp;&amp;&#10;                          !checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                              &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm italic mb-4&quot;&gt;&#10;                                You have already reviewed this product&#10;                              &lt;/p&gt;&#10;                              &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-green-100 dark:bg-green-800 rounded-lg text-green-600 dark:text-green-400 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-check-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                                Review submitted&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;&#10;                        {session &amp;&amp;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#10;                          checkingPurchase &amp;&amp; (&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                              &lt;div className=&quot;inline-flex items-center text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                                Checking purchase history...&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        {session &amp;&amp; session?.user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-blue-600 dark:text-blue-400 text-sm&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-info-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                              Farmers can view reviews but cannot write them&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Review Summary */}&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#10;                          {/* Overall Rating Section */}&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#10;                              {(() =&gt; {&#10;                                // Calculate actual average rating from reviews if available&#10;                                const actualReviewCount = reviews?.length || 0;&#10;                                let displayRating = product.averageRating || 0;&#10;&#10;                                // If we have reviews but no product rating, calculate from reviews&#10;                                if (&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#10;                                  (!product.averageRating ||&#10;                                    product.averageRating === 0)&#10;                                ) {&#10;                                  const totalRating = reviews.reduce(&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#10;                                    0,&#10;                                  );&#10;                                  displayRating =&#10;                                    totalRating / actualReviewCount;&#10;                                }&#10;&#10;                                return (&#10;                                  &lt;&gt;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#10;                                      {displayRating.toFixed(1)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;StarRating&#10;                                      rating={displayRating}&#10;                                      size=&quot;lg&quot;&#10;                                    /&gt;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#10;                                      Based on{&quot; &quot;}&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#10;                                        {actualReviewCount}&#10;                                      &lt;/span&gt;{&quot; &quot;}&#10;                                      {actualReviewCount === 1&#10;                                        ? &quot;review&quot;&#10;                                        : &quot;reviews&quot;}&#10;                                    &lt;/p&gt;&#10;                                  &lt;/&gt;&#10;                                );&#10;                              })()}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Review Quality Indicator */}&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#10;                                  {(reviews?.length || 0) &gt; 0&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#10;                                    : &quot;No reviews yet&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Rating Distribution */}&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                              Rating Breakdown&#10;                            &lt;/h4&gt;&#10;                            {(() =&gt; {&#10;                              // Calculate rating distribution&#10;                              const ratingDistribution = {&#10;                                5: 0,&#10;                                4: 0,&#10;                                3: 0,&#10;                                2: 0,&#10;                                1: 0,&#10;                              };&#10;                              if (reviews &amp;&amp; reviews.length &gt; 0) {&#10;                                reviews.forEach((review) =&gt; {&#10;                                  const rating = Math.floor(review.rating);&#10;                                  if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#10;                                    ratingDistribution[rating]++;&#10;                                  }&#10;                                });&#10;                              }&#10;                              const totalReviews = reviews?.length || 0;&#10;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#10;                                const count = ratingDistribution[rating];&#10;                                const percentage =&#10;                                  totalReviews &gt; 0&#10;                                    ? (count / totalReviews) * 100&#10;                                    : 0;&#10;&#10;                                return (&#10;                                  &lt;div&#10;                                    key={rating}&#10;                                    className=&quot;flex items-center space-x-3&quot;&#10;                                  &gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#10;                                    &lt;/span&gt;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                                      &lt;div&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#10;                                        style={{ width: `${percentage}%` }}&#10;                                      &gt;&lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#10;                                      {count}&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#10;                                      {percentage.toFixed(0)}%&#10;                                    &lt;/span&gt;&#10;                                  &lt;/div&gt;&#10;                                );&#10;                              });&#10;                            })()}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      {/* Enhanced Review Modal */}&#10;                      &lt;EnhancedReviewModal&#10;                        isOpen={showReviewForm}&#10;                        onClose={() =&gt; {&#10;                          setShowReviewForm(false);&#10;                          setEditingReview(null);&#10;                          setReviewForm(DEFAULT_REVIEW_FORM);&#10;                        }}&#10;                        product={product}&#10;                        user={session?.user}&#10;                        existingReview={editingReview}&#10;                        onSubmit={handleEnhancedReviewSubmit}&#10;                        isSubmitting={isSubmitting || isUpdating}&#10;                      /&gt;&#10;&#10;                      {/* Individual Reviews */}&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#10;                          reviews.map((review, index) =&gt; (&#10;                            &lt;div&#10;                              key={`${review._id}-${review.userId}-${index}`}&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#10;                            &gt;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#10;                                          .charAt(0)&#10;                                          .toUpperCase()}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#10;                                      &lt;/h4&gt;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#10;                                        Verified Buyer&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;                                          &lt;span&#10;                                            key={star}&#10;                                            className={`text-lg transition-all duration-200 ${&#10;                                              star &lt;= review.rating&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#10;                                            }`}&#10;                                          &gt;&#10;                                            ★&#10;                                          &lt;/span&gt;&#10;                                        ))}&#10;                                      &lt;/div&gt;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#10;                                        {review.rating}/5&#10;                                      &lt;/span&gt;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#10;                                        {new Date(&#10;                                          review.createdAt || review.date,&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#10;                                          year: &quot;numeric&quot;,&#10;                                          month: &quot;short&quot;,&#10;                                          day: &quot;numeric&quot;,&#10;                                        })}&#10;                                      &lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#10;                                  {session?.user?.userId === review.userId ? (&#10;                                    &lt;&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt; {&#10;                                          setEditingReview(review);&#10;                                          setReviewForm({&#10;                                            rating: review.rating,&#10;                                            comment: review.comment,&#10;                                          });&#10;                                          setShowReviewForm(true);&#10;                                        }}&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Edit Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button&#10;                                        onClick={() =&gt;&#10;                                          handleDeleteReview(review._id)&#10;                                        }&#10;                                        disabled={isDeletingReview}&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#10;                                        title=&quot;Delete Review&quot;&#10;                                      &gt;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  ) : (&#10;                                    &lt;&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &amp;ldquo;{review.comment}&amp;rdquo;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {/* Farmer Tab */}&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#10;                    &lt;div&gt;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#10;                        About the Farmer&#10;                      &lt;/h3&gt;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                              {product.farmer?.farmName ||&#10;                                product.farmer?.name ||&#10;                                &quot;Farm Name&quot;}&#10;                            &lt;/h4&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                              {product.farmer?.email ||&#10;                                &quot;Farmer contact not available&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            {product.farmer?.location &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            {product.farmer?.phone &amp;&amp; (&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                              {product.farmer?.description ||&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#10;                            &lt;/p&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                                View All Products from this Farmer&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Related Products Section - Enhanced */}&#10;              {relatedProducts.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#10;                  {/* Section Header */}&#10;                  &lt;div className=&quot;text-center mb-10&quot;&gt;&#10;                    &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                      Related Products&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#10;                      Discover similar high-quality products from our trusted&#10;                      farmers. Each item is carefully selected to meet our&#10;                      quality standards.&#10;                    &lt;/p&gt;&#10;                    &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#10;                      &lt;span&gt;•&lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;Fast delivery available&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Enhanced Product Grid */}&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#10;                    {relatedProducts.map((relatedProduct, index) =&gt; (&#10;                      &lt;div&#10;                        key={relatedProduct._id}&#10;                        className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#10;                        style={{ animationDelay: `${index * 100}ms` }}&#10;                      &gt;&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#10;                          {/* Product Image */}&#10;                          &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#10;                            &lt;Image&#10;                              src={&#10;                                relatedProduct.image ||&#10;                                relatedProduct.images?.[0] ||&#10;                                &quot;/placeholder-image.jpg&quot;&#10;                              }&#10;                              alt={relatedProduct.name}&#10;                              width={300}&#10;                              height={300}&#10;                              className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#10;                            /&gt;&#10;&#10;                            {/* Product Badges */}&#10;                            &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#10;                              {relatedProduct.isOrganic &amp;&amp; (&#10;                                &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                  Organic&#10;                                &lt;/span&gt;&#10;                              )}&#10;                              {relatedProduct.isFresh &amp;&amp; (&#10;                                &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#10;                                  Fresh&#10;                                &lt;/span&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Quick Actions Overlay */}&#10;                            &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#10;                              &lt;Link&#10;                                href={`/details?id=${relatedProduct._id}`}&#10;                                className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#10;                              &gt;&#10;                                View Details&#10;                              &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Product Info */}&#10;                          &lt;div className=&quot;p-6&quot;&gt;&#10;                            &lt;div className=&quot;mb-3&quot;&gt;&#10;                              &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#10;                                {relatedProduct.name}&#10;                              &lt;/h4&gt;&#10;                              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#10;                                by{&quot; &quot;}&#10;                                {relatedProduct.farmer?.name ||&#10;                                  relatedProduct.farmer?.farmName ||&#10;                                  &quot;Unknown Farmer&quot;}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Rating */}&#10;                            &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#10;                              &lt;StarRating&#10;                                rating={relatedProduct.averageRating || 0}&#10;                                size=&quot;sm&quot;&#10;                              /&gt;&#10;                              &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                (&#10;                                {relatedProduct.reviewCount ||&#10;                                  relatedProduct.totalReviews ||&#10;                                  0}&#10;                                )&#10;                              &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Price and Stock */}&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#10;                                  {formatPrice(relatedProduct.price || 0)}&#10;                                &lt;/span&gt;&#10;                                &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  /{relatedProduct.unit || &quot;kg&quot;}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;div&#10;                                  className={`text-xs font-medium ${&#10;                                    (relatedProduct.stock || 0) &gt; 0&#10;                                      ? &quot;text-green-600 dark:text-green-400&quot;&#10;                                      : &quot;text-red-600 dark:text-red-400&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  {(relatedProduct.stock || 0) &gt; 0&#10;                                    ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#10;                                    : &quot;Out of stock&quot;}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Action Button */}&#10;                            &lt;Link&#10;                              href={`/details?id=${relatedProduct._id}`}&#10;                              className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#10;                              View Product&#10;                            &lt;/Link&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Browse More Section */}&#10;                  &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                        Looking for more products?&#10;                      &lt;/p&gt;&#10;                      &lt;Link&#10;                        href=&quot;/products&quot;&#10;                        className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;                        Browse All Products&#10;                        &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;/Link&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import Link from &quot;next/link&quot;;&#13;&#10;import Image from &quot;next/image&quot;;&#13;&#10;import { useState, useEffect, useCallback, useMemo, Suspense } from &quot;react&quot;;&#13;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#13;&#10;import { useSession } from &quot;next-auth/react&quot;;&#13;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#13;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#13;&#10;import StarRating from &quot;@/components/StarRating&quot;;&#13;&#10;import Footer from &quot;@/components/Footer&quot;;&#13;&#10;import RecentOrdersSection from &quot;@/components/RecentOrdersSection&quot;;&#13;&#10;import FarmerProfileView from &quot;@/components/FarmerProfileView&quot;;&#13;&#10;import EnhancedReviewModal from &quot;@/components/EnhancedReviewModal&quot;;&#13;&#10;import useProductData from &quot;@/hooks/useProductData&quot;;&#13;&#10;import useOwnership from &quot;@/hooks/useOwnership&quot;;&#13;&#10;import { useReviewsQuery } from &quot;@/hooks/useReviewsQuery&quot;;&#13;&#10;import { useDashboardData } from &quot;@/hooks/useDashboardData&quot;;&#13;&#10;import { useProductsCache } from &quot;@/hooks/useProductsQuery&quot;;&#13;&#10;import NotFound from &quot;@/components/NotFound&quot;;&#13;&#10;import FarmerDetailsLoading from &quot;@/components/FarmerDetailsLoading&quot;;&#13;&#10;import CustomerDetailsLoading from &quot;@/components/CustomerDetailsLoading&quot;;&#13;&#10;&#13;&#10;// Move constants outside component to prevent recreations&#13;&#10;const TAB_OPTIONS = [&#13;&#10;  &quot;description&quot;,&#13;&#10;  &quot;nutrition&quot;,&#13;&#10;  &quot;storage&quot;,&#13;&#10;  &quot;reviews&quot;,&#13;&#10;  &quot;farmer&quot;,&#13;&#10;];&#13;&#10;const DEFAULT_REVIEW_FORM = { rating: 5, comment: &quot;&quot; };&#13;&#10;&#13;&#10;// Currency formatting function&#13;&#10;const formatPrice = (price) =&gt; {&#13;&#10;  return new Intl.NumberFormat(&quot;en-BD&quot;, {&#13;&#10;    style: &quot;currency&quot;,&#13;&#10;    currency: &quot;BDT&quot;,&#13;&#10;    minimumFractionDigits: 0,&#13;&#10;  }).format(price);&#13;&#10;};&#13;&#10;&#13;&#10;// Force dynamic rendering for this page&#13;&#10;export const dynamic = 'force-dynamic';&#13;&#10;&#13;&#10;// Component that uses useSearchParams - must be wrapped in Suspense&#13;&#10;function ProductDetailsContent() {&#13;&#10;  const searchParams = useSearchParams();&#13;&#10;  const router = useRouter();&#13;&#10;  const productId = searchParams.get(&quot;id&quot;);&#13;&#10;  const viewMode = searchParams.get(&quot;view&quot;);&#13;&#10;  const { data: session } = useSession();&#13;&#10;&#13;&#10;  const { addToCart } = useCart();&#13;&#10;  const { addToFavorites, removeFromFavorites, isProductFavorited } =&#13;&#10;    useFavorites();&#13;&#10;&#13;&#10;  // Custom hooks&#13;&#10;  const {&#13;&#10;    product,&#13;&#10;    farmer,&#13;&#10;    farmerProducts,&#13;&#10;    responseType,&#13;&#10;    relatedProducts,&#13;&#10;    loading,&#13;&#10;    fetchProductDetails,&#13;&#10;  } = useProductData(productId);&#13;&#10;&#13;&#10;  const {&#13;&#10;    reviews,&#13;&#10;    hasMoreReviews,&#13;&#10;    isSubmitting,&#13;&#10;    isUpdating,&#13;&#10;    submitReview,&#13;&#10;    updateReview,&#13;&#10;    deleteReview,&#13;&#10;  } = useReviewsQuery(productId, session?.user?.id);&#13;&#10;  const isOwner = useOwnership(product, session, viewMode);&#13;&#10;&#13;&#10;  // Add dashboard data hook for optimistic caching&#13;&#10;  const { updateProductInCache } = useDashboardData();&#13;&#10;  const { updateProductInCache: updateProductsCache } = useProductsCache();&#13;&#10;&#13;&#10;  // Core UI states&#13;&#10;  const [selectedImage, setSelectedImage] = useState(0);&#13;&#10;  const [quantity, setQuantity] = useState(1);&#13;&#10;  const [activeTab, setActiveTab] = useState(&quot;description&quot;);&#13;&#10;&#13;&#10;  // Loading states&#13;&#10;  const [isAddingToCart, setIsAddingToCart] = useState(false);&#13;&#10;  const [, setIsSubmittingReview] = useState(false);&#13;&#10;  const [, setIsUpdatingReview] = useState(false);&#13;&#10;  const [isDeletingReview, setIsDeletingReview] = useState(false);&#13;&#10;  const [, setIsUpdating] = useState(false);&#13;&#10;  const [loadingOrders, setLoadingOrders] = useState(false);&#13;&#10;  const [checkingPurchase, setCheckingPurchase] = useState(false);&#13;&#10;&#13;&#10;  // Form states&#13;&#10;  const [showReviewForm, setShowReviewForm] = useState(false);&#13;&#10;  const [reviewForm, setReviewForm] = useState(DEFAULT_REVIEW_FORM);&#13;&#10;  const [editingReview, setEditingReview] = useState(null);&#13;&#10;  const [stockUpdate, setStockUpdate] = useState(&quot;&quot;);&#13;&#10;  const [priceUpdate, setPriceUpdate] = useState(&quot;&quot;);&#13;&#10;&#13;&#10;  // Data states&#13;&#10;  const [hasPurchasedProduct, setHasPurchasedProduct] = useState(false);&#13;&#10;  const [hasReviewedProduct, setHasReviewedProduct] = useState(false);&#13;&#10;  const [userExistingReview, setUserExistingReview] = useState(null);&#13;&#10;  const [recentOrders, setRecentOrders] = useState([]);&#13;&#10;&#13;&#10;  // Memoized favorite status&#13;&#10;  const isFavorite = useMemo(() =&gt; {&#13;&#10;    return productId ? isProductFavorited(productId) : false;&#13;&#10;  }, [productId, isProductFavorited]);&#13;&#10;&#13;&#10;  // Memoized image data&#13;&#10;  const imageData = useMemo(() =&gt; {&#13;&#10;    if (!product) return { allImages: [], hasMultipleImages: false };&#13;&#10;&#13;&#10;    const allImages = [];&#13;&#10;    if (product.image) allImages.push(product.image);&#13;&#10;    if (product.images &amp;&amp; product.images.length &gt; 0) {&#13;&#10;      allImages.push(...product.images);&#13;&#10;    }&#13;&#10;&#13;&#10;    return {&#13;&#10;      allImages: [...new Set(allImages)], // Remove duplicates&#13;&#10;      hasMultipleImages: allImages.length &gt; 1,&#13;&#10;    };&#13;&#10;  }, [product]);&#13;&#10;&#13;&#10;  // Memoized rating distribution&#13;&#10;  useMemo(() =&gt; {&#13;&#10;    if (!reviews || reviews.length === 0) {&#13;&#10;      return { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#13;&#10;    }&#13;&#10;&#13;&#10;    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };&#13;&#10;    reviews.forEach((review) =&gt; {&#13;&#10;      const rating = Math.floor(review.rating);&#13;&#10;      if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#13;&#10;        distribution[rating]++;&#13;&#10;      }&#13;&#10;    });&#13;&#10;&#13;&#10;    return distribution;&#13;&#10;  }, [reviews]);&#13;&#10;  // Optimized API calls with caching&#13;&#10;  const checkUserPurchase = useCallback(async () =&gt; {&#13;&#10;    // Get userId from either property&#13;&#10;    const userId = session?.user?.id || session?.user?.userId;&#13;&#10;&#13;&#10;    if (!userId || !productId) {&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    setCheckingPurchase(true);&#13;&#10;    try {&#13;&#10;      // Use the new can-review endpoint to check if user can review this product&#13;&#10;      const apiUrl = `/api/products/${productId}/can-review?userId=${userId}`;&#13;&#10;&#13;&#10;      const response = await fetch(apiUrl, {&#13;&#10;        headers: {&#13;&#10;          &quot;Cache-Control&quot;: &quot;no-cache&quot;, // Disable cache for debugging&#13;&#10;        },&#13;&#10;      });&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        const data = await response.json();&#13;&#10;&#13;&#10;        // Set states based on API response&#13;&#10;        setHasPurchasedProduct(data.hasPurchased || false); // Whether user has purchased (regardless of review status)&#13;&#10;        setHasReviewedProduct(data.hasReviewed || false); // Whether user has already reviewed&#13;&#10;        setUserExistingReview(data.existingReview || null); // User's existing review if any&#13;&#10;      } else {&#13;&#10;        const errorData = await response.text();&#13;&#10;        setHasPurchasedProduct(false);&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;❌ Can-review API error:&quot;, error);&#13;&#10;      setHasPurchasedProduct(false);&#13;&#10;    } finally {&#13;&#10;      setCheckingPurchase(false);&#13;&#10;    }&#13;&#10;  }, [&#13;&#10;    session?.user?.id,&#13;&#10;    session?.user?.userId,&#13;&#10;    productId,&#13;&#10;    hasPurchasedProduct,&#13;&#10;  ]);&#13;&#10;&#13;&#10;  const fetchRecentOrders = useCallback(async () =&gt; {&#13;&#10;    if (!productId) return;&#13;&#10;&#13;&#10;    try {&#13;&#10;      setLoadingOrders(true);&#13;&#10;      const response = await fetch(&#13;&#10;        `/api/orders?productId=${productId}&amp;limit=5`,&#13;&#10;        {&#13;&#10;          headers: {&#13;&#10;            &quot;Cache-Control&quot;: &quot;public, max-age=300&quot;,&#13;&#10;          },&#13;&#10;        },&#13;&#10;      );&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        const data = await response.json();&#13;&#10;        setRecentOrders(data.orders || []);&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;Error fetching recent orders:&quot;, error);&#13;&#10;    } finally {&#13;&#10;      setLoadingOrders(false);&#13;&#10;    }&#13;&#10;  }, [productId]);&#13;&#10;&#13;&#10;  // Optimized event handlers&#13;&#10;  const handleAddToCart = useCallback(async () =&gt; {&#13;&#10;    if (!session?.user) {&#13;&#10;      router.push(&quot;/login&quot;);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    if (!product) return;&#13;&#10;&#13;&#10;    // Check if user is a farmer and show appropriate message&#13;&#10;    if (session?.user?.userType === &quot;farmer&quot;) {&#13;&#10;      alert(&#13;&#10;        &quot;Farmers cannot purchase products. You can only sell your own products on this platform. Use the 'Manage' section to add your products.&quot;,&#13;&#10;      );&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    setIsAddingToCart(true);&#13;&#10;    try {&#13;&#10;      const item = {&#13;&#10;        productId: productId,&#13;&#10;        id: productId,&#13;&#10;        name: product.name,&#13;&#10;        price: product.price,&#13;&#10;        quantity: quantity,&#13;&#10;        stock: product.stock,&#13;&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#13;&#10;        unit: product.unit || &quot;kg&quot;,&#13;&#10;        farmerId: product.farmerId,&#13;&#10;        farmerName:&#13;&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#13;&#10;      };&#13;&#10;&#13;&#10;      await addToCart(item, quantity);&#13;&#10;      // Consider using a toast notification instead of alert&#13;&#10;      alert(&quot;Product added to cart successfully!&quot;);&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;Error adding to cart:&quot;, error);&#13;&#10;      const errorMessage =&#13;&#10;        error.message.includes(&quot;Only&quot;) &amp;&amp;&#13;&#10;        error.message.includes(&quot;available in stock&quot;)&#13;&#10;          ? error.message&#13;&#10;          : error.message || &quot;Failed to add product to cart. Please try again.&quot;;&#13;&#10;      alert(errorMessage);&#13;&#10;    } finally {&#13;&#10;      setIsAddingToCart(false);&#13;&#10;    }&#13;&#10;  }, [&#13;&#10;    session?.user,&#13;&#10;    product,&#13;&#10;    productId,&#13;&#10;    quantity,&#13;&#10;    imageData.allImages,&#13;&#10;    addToCart,&#13;&#10;    router,&#13;&#10;  ]);&#13;&#10;&#13;&#10;  const handleBuyNow = useCallback(async () =&gt; {&#13;&#10;    if (!session?.user) {&#13;&#10;      router.push(&quot;/login&quot;);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    if (!product) return;&#13;&#10;&#13;&#10;    // Check if user is a farmer and show appropriate message&#13;&#10;    if (session?.user?.userType === &quot;farmer&quot;) {&#13;&#10;      alert(&#13;&#10;        &quot;Farmers cannot purchase products. You can only sell your own products on this platform. Use the 'Manage' section to add your products.&quot;,&#13;&#10;      );&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    setIsAddingToCart(true);&#13;&#10;    try {&#13;&#10;      const productForCart = {&#13;&#10;        id: productId,&#13;&#10;        name: product.name,&#13;&#10;        price: product.price,&#13;&#10;        image: imageData.allImages[0] || &quot;/placeholder-image.jpg&quot;,&#13;&#10;        unit: product.unit || &quot;kg&quot;,&#13;&#10;        farmerId: product.farmerId,&#13;&#10;        farmer: {&#13;&#10;          id: product.farmerId,&#13;&#10;          _id: product.farmerId,&#13;&#10;          email: product.farmer?.email,&#13;&#10;          name:&#13;&#10;            product.farmer?.name ||&#13;&#10;            product.farmer?.farmName ||&#13;&#10;            &quot;Unknown Farmer&quot;,&#13;&#10;        },&#13;&#10;        farmerName:&#13;&#10;          product.farmer?.name || product.farmer?.farmName || &quot;Unknown Farmer&quot;,&#13;&#10;        stock: product.stock || 0,&#13;&#10;      };&#13;&#10;&#13;&#10;      await addToCart(productForCart, quantity);&#13;&#10;      router.push(&quot;/payment&quot;);&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;Error processing buy now:&quot;, error);&#13;&#10;      alert(error.message || &quot;Failed to process order. Please try again.&quot;);&#13;&#10;    } finally {&#13;&#10;      setIsAddingToCart(false);&#13;&#10;    }&#13;&#10;  }, [&#13;&#10;    session?.user,&#13;&#10;    product,&#13;&#10;    productId,&#13;&#10;    quantity,&#13;&#10;    imageData.allImages,&#13;&#10;    addToCart,&#13;&#10;    router,&#13;&#10;  ]);&#13;&#10;&#13;&#10;  const handleFavoriteToggle = useCallback(async () =&gt; {&#13;&#10;    if (!session?.user) {&#13;&#10;      router.push(&quot;/login&quot;);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    if (!productId) return;&#13;&#10;&#13;&#10;    try {&#13;&#10;      const success = isFavorite&#13;&#10;        ? await removeFromFavorites(productId)&#13;&#10;        : await addToFavorites(productId);&#13;&#10;&#13;&#10;      if (success) {&#13;&#10;        const message = isFavorite&#13;&#10;          ? &quot;Product removed from favorites!&quot;&#13;&#10;          : &quot;Product added to favorites!&quot;;&#13;&#10;        alert(message);&#13;&#10;      } else {&#13;&#10;        alert(&quot;Failed to update favorites. Please try again.&quot;);&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;Error toggling favorite:&quot;, error);&#13;&#10;      alert(&quot;Failed to update favorites. Please try again.&quot;);&#13;&#10;    }&#13;&#10;  }, [&#13;&#10;    session?.user,&#13;&#10;    productId,&#13;&#10;    isFavorite,&#13;&#10;    addToFavorites,&#13;&#10;    removeFromFavorites,&#13;&#10;    router,&#13;&#10;  ]);&#13;&#10;&#13;&#10;  const handleSubmitReview = useCallback(&#13;&#10;    async (e) =&gt; {&#13;&#10;      e.preventDefault();&#13;&#10;      if (!session) {&#13;&#10;        alert(&quot;Please login to submit a review&quot;);&#13;&#10;        return;&#13;&#10;      }&#13;&#10;&#13;&#10;      setIsSubmittingReview(true);&#13;&#10;      try {&#13;&#10;        const reviewData = {&#13;&#10;          ...reviewForm,&#13;&#10;          userId:&#13;&#10;            session.user.id ||&#13;&#10;            session.user._id ||&#13;&#10;            session.user.userId ||&#13;&#10;            session.user.email,&#13;&#10;        };&#13;&#10;&#13;&#10;        const response = await fetch(`/api/products/${productId}/reviews`, {&#13;&#10;          method: &quot;POST&quot;,&#13;&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#13;&#10;          body: JSON.stringify(reviewData),&#13;&#10;        });&#13;&#10;&#13;&#10;        if (response.ok) {&#13;&#10;          setShowReviewForm(false);&#13;&#10;          setReviewForm(DEFAULT_REVIEW_FORM);&#13;&#10;          alert(&quot;Review submitted successfully!&quot;);&#13;&#10;        } else {&#13;&#10;          const error = await response.json();&#13;&#10;          alert(error.error || &quot;Failed to submit review&quot;);&#13;&#10;        }&#13;&#10;      } catch (error) {&#13;&#10;        console.error(&quot;Error submitting review:&quot;, error);&#13;&#10;        alert(&quot;Failed to submit review&quot;);&#13;&#10;      } finally {&#13;&#10;        setIsSubmittingReview(false);&#13;&#10;      }&#13;&#10;    },&#13;&#10;    [session, reviewForm, productId],&#13;&#10;  );&#13;&#10;&#13;&#10;  // Enhanced review submission handler using React Query mutations&#13;&#10;  const handleEnhancedReviewSubmit = useCallback(&#13;&#10;    async (reviewData) =&gt; {&#13;&#10;      console.log(&quot; Starting handleEnhancedReviewSubmit&quot;, {&#13;&#10;        reviewData,&#13;&#10;        editingReview,&#13;&#10;      });&#13;&#10;&#13;&#10;      try {&#13;&#10;        if (editingReview) {&#13;&#10;          console.log(&quot; Updating existing review...&quot;);&#13;&#10;          // Update existing review using React Query mutation&#13;&#10;          await updateReview({&#13;&#10;            reviewId: editingReview._id,&#13;&#10;            reviewData: {&#13;&#10;              rating: reviewData.rating,&#13;&#10;              comment: reviewData.comment,&#13;&#10;              title: reviewData.title,&#13;&#10;              pros: reviewData.pros,&#13;&#10;              cons: reviewData.cons,&#13;&#10;              wouldRecommend: reviewData.wouldRecommend,&#13;&#10;              isAnonymous: reviewData.isAnonymous,&#13;&#10;              tags: reviewData.tags,&#13;&#10;            },&#13;&#10;            userId: reviewData.userId,&#13;&#10;          });&#13;&#10;&#13;&#10;          console.log(&quot;✅ Review updated successfully!&quot;);&#13;&#10;          alert(&quot;Review updated successfully!&quot;);&#13;&#10;        } else {&#13;&#10;          console.log(&quot;➕ Creating new review...&quot;);&#13;&#10;          // Create new review using React Query mutation&#13;&#10;          await submitReview({&#13;&#10;            productId,&#13;&#10;            reviewData,&#13;&#10;          });&#13;&#10;&#13;&#10;          console.log(&quot;✅ Review submitted successfully!&quot;);&#13;&#10;&#13;&#10;          // Update user review states&#13;&#10;          setHasReviewedProduct(true);&#13;&#10;          setUserExistingReview(reviewData);&#13;&#10;&#13;&#10;          console.log(&quot; Updated local states - hasReviewedProduct: true&quot;);&#13;&#10;&#13;&#10;          alert(&quot;Review submitted successfully!&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Close modal and reset form&#13;&#10;        setShowReviewForm(false);&#13;&#10;        setEditingReview(null);&#13;&#10;        setReviewForm(DEFAULT_REVIEW_FORM);&#13;&#10;&#13;&#10;        console.log(&quot; Modal closed and form reset&quot;);&#13;&#10;&#13;&#10;        // React Query mutations automatically handle cache invalidation&#13;&#10;        // so we don't need to manually refresh&#13;&#10;        console.log(&#13;&#10;          &quot;✅ Review operation completed - React Query handled updates&quot;,&#13;&#10;        );&#13;&#10;      } catch (error) {&#13;&#10;        console.error(&#13;&#10;          `❌ Error ${editingReview ? &quot;updating&quot; : &quot;submitting&quot;} review:`,&#13;&#10;          error,&#13;&#10;        );&#13;&#10;        alert(&#13;&#10;          `Failed to ${editingReview ? &quot;update&quot; : &quot;submit&quot;} review: ${error.message}`,&#13;&#10;        );&#13;&#10;      }&#13;&#10;    },&#13;&#10;    [productId, editingReview, submitReview, updateReview],&#13;&#10;  );&#13;&#10;&#13;&#10;  const handleUpdateReview = useCallback(async () =&gt; {&#13;&#10;    if (!editingReview) return;&#13;&#10;&#13;&#10;    setIsUpdatingReview(true);&#13;&#10;    try {&#13;&#10;      const response = await fetch(`/api/reviews/${editingReview._id}`, {&#13;&#10;        method: &quot;PUT&quot;,&#13;&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#13;&#10;        body: JSON.stringify({&#13;&#10;          rating: reviewForm.rating,&#13;&#10;          comment: reviewForm.comment,&#13;&#10;          userId:&#13;&#10;            session.user.userId ||&#13;&#10;            session.user.id ||&#13;&#10;            session.user._id ||&#13;&#10;            session.user.email,&#13;&#10;        }),&#13;&#10;      });&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        setEditingReview(null);&#13;&#10;        setReviewForm(DEFAULT_REVIEW_FORM);&#13;&#10;        setShowReviewForm(false);&#13;&#10;        // Removed manual refresh calls - React Query mutations handle cache invalidation automatically&#13;&#10;        alert(&quot;Review updated successfully!&quot;);&#13;&#10;      } else {&#13;&#10;        const error = await response.json();&#13;&#10;        alert(error.error || &quot;Failed to update review&quot;);&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;Error updating review:&quot;, error);&#13;&#10;      alert(&quot;Failed to update review&quot;);&#13;&#10;    } finally {&#13;&#10;      setIsUpdatingReview(false);&#13;&#10;    }&#13;&#10;  }, [editingReview, reviewForm, session]);&#13;&#10;&#13;&#10;  // Delete review handler using React Query mutations&#13;&#10;  const handleDeleteReview = useCallback(&#13;&#10;    async (reviewId) =&gt; {&#13;&#10;      if (!session?.user) {&#13;&#10;        alert(&quot;Please login to delete a review&quot;);&#13;&#10;        return;&#13;&#10;      }&#13;&#10;&#13;&#10;      try {&#13;&#10;        // Get the user ID from session&#13;&#10;        const userId =&#13;&#10;          session?.user?.id || session?.user?.userId || session?.user?.email;&#13;&#10;&#13;&#10;        if (!userId) {&#13;&#10;          alert(&quot;Unable to delete review: User not authenticated&quot;);&#13;&#10;          return;&#13;&#10;        }&#13;&#10;&#13;&#10;        await deleteReview({ reviewId, userId });&#13;&#10;&#13;&#10;        // Update user review states&#13;&#10;        setHasReviewedProduct(false);&#13;&#10;        setUserExistingReview(null);&#13;&#10;&#13;&#10;        // Removed manual fetchProductDetails() call - React Query mutations handle cache invalidation automatically&#13;&#10;        alert(&quot;Review deleted successfully!&quot;);&#13;&#10;      } catch (error) {&#13;&#10;        console.error(&quot;Error deleting review:&quot;, error);&#13;&#10;        alert(`Failed to delete review: ${error.message}`);&#13;&#10;      }&#13;&#10;    },&#13;&#10;    [deleteReview, session],&#13;&#10;  );&#13;&#10;&#13;&#10;  const loadMoreReviews = useCallback(() =&gt; {&#13;&#10;    // Since we're using React Query, we don't need a separate loadMoreReviews function&#13;&#10;    // The pagination should be handled by the useReviewsQuery hook&#13;&#10;    // For now, let's remove this function as it's not being used properly&#13;&#10;    console.log(&#13;&#10;      &quot;Load more reviews functionality needs to be implemented with React Query pagination&quot;,&#13;&#10;    );&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  // Farmer-specific handlers&#13;&#10;  const handleUpdateProduct = useCallback(async () =&gt; {&#13;&#10;    if (!isOwner || (!stockUpdate &amp;&amp; !priceUpdate)) {&#13;&#10;      if (!stockUpdate &amp;&amp; !priceUpdate) {&#13;&#10;        alert(&quot;Please enter a value to update&quot;);&#13;&#10;      }&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    setIsUpdating(true);&#13;&#10;    try {&#13;&#10;      const updateData = {};&#13;&#10;      const originalData = { stock: product.stock, price: product.price };&#13;&#10;&#13;&#10;      if (stockUpdate &amp;&amp; stockUpdate.trim() !== &quot;&quot;) {&#13;&#10;        const stockValue = parseInt(stockUpdate);&#13;&#10;        if (isNaN(stockValue) || stockValue &lt; 0) {&#13;&#10;          alert(&quot;Please enter a valid stock number&quot;);&#13;&#10;          setIsUpdating(false);&#13;&#10;          return;&#13;&#10;        }&#13;&#10;        updateData.stock = stockValue;&#13;&#10;      }&#13;&#10;&#13;&#10;      if (priceUpdate &amp;&amp; priceUpdate.trim() !== &quot;&quot;) {&#13;&#10;        const priceValue = parseFloat(priceUpdate);&#13;&#10;        if (isNaN(priceValue) || priceValue &lt;= 0) {&#13;&#10;          alert(&quot;Please enter a valid price&quot;);&#13;&#10;          setIsUpdating(false);&#13;&#10;          return;&#13;&#10;        }&#13;&#10;        updateData.price = priceValue;&#13;&#10;      }&#13;&#10;&#13;&#10;      // Optimistically update the product in dashboard cache&#13;&#10;      if (updateProductInCache) {&#13;&#10;        updateProductInCache(productId, {&#13;&#10;          ...updateData,&#13;&#10;          updatedAt: new Date().toISOString(),&#13;&#10;        });&#13;&#10;      }&#13;&#10;      // Optimistically update the product in products cache&#13;&#10;      if (updateProductsCache) {&#13;&#10;        updateProductsCache(productId, {&#13;&#10;          ...updateData,&#13;&#10;          updatedAt: new Date().toISOString(),&#13;&#10;        });&#13;&#10;      }&#13;&#10;&#13;&#10;      const response = await fetch(`/api/products/${productId}`, {&#13;&#10;        method: &quot;PUT&quot;,&#13;&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#13;&#10;        body: JSON.stringify(updateData),&#13;&#10;      });&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        const updatedProduct = await response.json();&#13;&#10;&#13;&#10;        // Update the dashboard cache with the server response&#13;&#10;        if (updateProductInCache &amp;&amp; updatedProduct.product) {&#13;&#10;          updateProductInCache(productId, updatedProduct.product);&#13;&#10;        }&#13;&#10;        // Update the products cache with the server response&#13;&#10;        if (updateProductsCache &amp;&amp; updatedProduct.product) {&#13;&#10;          updateProductsCache(productId, updatedProduct.product);&#13;&#10;        }&#13;&#10;&#13;&#10;        alert(&quot;Product updated successfully!&quot;);&#13;&#10;        // Refresh the product details to sync with server&#13;&#10;        await fetchProductDetails();&#13;&#10;        setStockUpdate(&quot;&quot;);&#13;&#10;        setPriceUpdate(&quot;&quot;);&#13;&#10;      } else {&#13;&#10;        const error = await response.json();&#13;&#10;&#13;&#10;        // Revert optimistic update on error&#13;&#10;        if (updateProductInCache) {&#13;&#10;          updateProductInCache(productId, originalData);&#13;&#10;        }&#13;&#10;        if (updateProductsCache) {&#13;&#10;          updateProductsCache(productId, originalData);&#13;&#10;        }&#13;&#10;&#13;&#10;        alert(error.error || &quot;Failed to update product&quot;);&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;Error updating product:&quot;, error);&#13;&#10;&#13;&#10;      // Revert optimistic update on error&#13;&#10;      if (updateProductInCache) {&#13;&#10;        const originalData = { stock: product.stock, price: product.price };&#13;&#10;        updateProductInCache(productId, originalData);&#13;&#10;      }&#13;&#10;      if (updateProductsCache) {&#13;&#10;        const originalData = { stock: product.stock, price: product.price };&#13;&#10;        updateProductsCache(productId, originalData);&#13;&#10;      }&#13;&#10;&#13;&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#13;&#10;    } finally {&#13;&#10;      setIsUpdating(false);&#13;&#10;    }&#13;&#10;  }, [&#13;&#10;    isOwner,&#13;&#10;    stockUpdate,&#13;&#10;    priceUpdate,&#13;&#10;    productId,&#13;&#10;    product,&#13;&#10;    updateProductInCache,&#13;&#10;    updateProductsCache,&#13;&#10;    fetchProductDetails,&#13;&#10;  ]);&#13;&#10;&#13;&#10;  // Handle adding images to product&#13;&#10;  const handleAddImages = useCallback(() =&gt; {&#13;&#10;    // Create a file input element&#13;&#10;    const input = document.createElement(&quot;input&quot;);&#13;&#10;    input.type = &quot;file&quot;;&#13;&#10;    input.accept = &quot;image/*&quot;;&#13;&#10;    input.multiple = true;&#13;&#10;&#13;&#10;    input.onchange = async (event) =&gt; {&#13;&#10;      const files = event.target.files;&#13;&#10;      if (!files || files.length === 0) return;&#13;&#10;&#13;&#10;      // Validate file types and sizes&#13;&#10;      const validFiles = Array.from(files).filter((file) =&gt; {&#13;&#10;        const isValidType = file.type.startsWith(&quot;image/&quot;);&#13;&#10;        const isValidSize = file.size &lt;= 5 * 1024 * 1024; // 5MB limit&#13;&#10;&#13;&#10;        if (!isValidType) {&#13;&#10;          alert(`${file.name} is not a valid image file.`);&#13;&#10;          return false;&#13;&#10;        }&#13;&#10;        if (!isValidSize) {&#13;&#10;          alert(`${file.name} is too large. Maximum size is 5MB.`);&#13;&#10;          return false;&#13;&#10;        }&#13;&#10;        return true;&#13;&#10;      });&#13;&#10;&#13;&#10;      if (validFiles.length === 0) return;&#13;&#10;&#13;&#10;      try {&#13;&#10;        // Create FormData for file upload&#13;&#10;        const formData = new FormData();&#13;&#10;        validFiles.forEach((file) =&gt; {&#13;&#10;          formData.append(&quot;images&quot;, file);&#13;&#10;        });&#13;&#10;        formData.append(&quot;productId&quot;, productId);&#13;&#10;&#13;&#10;        // Show loading state&#13;&#10;        alert(&quot;Uploading images...&quot;);&#13;&#10;&#13;&#10;        // Upload images to your API endpoint&#13;&#10;        const response = await fetch(`/api/products/${productId}/images`, {&#13;&#10;          method: &quot;POST&quot;,&#13;&#10;          body: formData,&#13;&#10;        });&#13;&#10;&#13;&#10;        if (response.ok) {&#13;&#10;          const result = await response.json();&#13;&#10;          alert(`Successfully uploaded ${validFiles.length} image(s)!`);&#13;&#10;&#13;&#10;          // Refresh product details to show new images&#13;&#10;          fetchProductDetails();&#13;&#10;        } else {&#13;&#10;          const error = await response.json();&#13;&#10;          throw new Error(error.error || &quot;Failed to upload images&quot;);&#13;&#10;        }&#13;&#10;      } catch (error) {&#13;&#10;        console.error(&quot;Error uploading images:&quot;, error);&#13;&#10;        alert(`Failed to upload images: ${error.message}`);&#13;&#10;      }&#13;&#10;    };&#13;&#10;&#13;&#10;    // Trigger file selection&#13;&#10;    input.click();&#13;&#10;  }, [productId, fetchProductDetails]);&#13;&#10;&#13;&#10;  // Handle toggling product status (activate/deactivate)&#13;&#10;  const handleToggleStatus = useCallback(async () =&gt; {&#13;&#10;    if (!isOwner) return;&#13;&#10;&#13;&#10;    const currentStatus = product?.status || &quot;active&quot;;&#13;&#10;    const newStatus = currentStatus === &quot;active&quot; ? &quot;inactive&quot; : &quot;active&quot;;&#13;&#10;    const actionText = newStatus === &quot;active&quot; ? &quot;activate&quot; : &quot;deactivate&quot;;&#13;&#10;&#13;&#10;    if (!confirm(`Are you sure you want to ${actionText} this product?`)) {&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    setIsUpdating(true);&#13;&#10;    try {&#13;&#10;      const response = await fetch(`/api/products/${productId}`, {&#13;&#10;        method: &quot;PUT&quot;,&#13;&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#13;&#10;        body: JSON.stringify({ status: newStatus }),&#13;&#10;      });&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        alert(`Product ${actionText}d successfully!`);&#13;&#10;        fetchProductDetails();&#13;&#10;      } else {&#13;&#10;        const error = await response.json();&#13;&#10;        throw new Error(error.error || `Failed to ${actionText} product`);&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error(`Error ${actionText}ing product:`, error);&#13;&#10;      alert(`Failed to ${actionText} product: ${error.message}`);&#13;&#10;    } finally {&#13;&#10;      setIsUpdating(false);&#13;&#10;    }&#13;&#10;  }, [isOwner, product?.status, productId, fetchProductDetails]);&#13;&#10;&#13;&#10;  // Handle deleting product&#13;&#10;  const handleDeleteProduct = useCallback(async () =&gt; {&#13;&#10;    if (!isOwner) return;&#13;&#10;&#13;&#10;    const confirmMessage =&#13;&#10;      &quot;⚠️ Are you sure you want to delete this product?\n\n&quot; +&#13;&#10;      &quot;This action cannot be undone and will remove:\n&quot; +&#13;&#10;      &quot;• The product listing\n&quot; +&#13;&#10;      &quot;• All associated data\n&quot; +&#13;&#10;      &quot;• Product images\n&quot; +&#13;&#10;      &quot;• Product from any pending orders&quot;;&#13;&#10;&#13;&#10;    if (!confirm(confirmMessage)) {&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    setIsUpdating(true);&#13;&#10;    try {&#13;&#10;      const response = await fetch(`/api/products/${productId}`, {&#13;&#10;        method: &quot;DELETE&quot;,&#13;&#10;      });&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        alert(&quot;Product deleted successfully!&quot;);&#13;&#10;        // Redirect to manage page&#13;&#10;        router.push(&quot;/manage&quot;);&#13;&#10;      } else {&#13;&#10;        const error = await response.json();&#13;&#10;&#13;&#10;        if (response.status === 409) {&#13;&#10;          alert(&#13;&#10;            &quot;❌ Cannot Delete Product\n\n&quot; +&#13;&#10;              &quot;This product has pending orders and cannot be deleted.\n&quot; +&#13;&#10;              &quot;Please wait for all orders to be completed or cancelled before deleting this product.\n\n&quot; +&#13;&#10;              &quot;You can temporarily deactivate the product instead.&quot;,&#13;&#10;          );&#13;&#10;        } else {&#13;&#10;          throw new Error(error.error || &quot;Failed to delete product&quot;);&#13;&#10;        }&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error(&quot;Error deleting product:&quot;, error);&#13;&#10;      alert(`Failed to delete product: ${error.message}`);&#13;&#10;    } finally {&#13;&#10;      setIsUpdating(false);&#13;&#10;    }&#13;&#10;  }, [isOwner, productId, fetchProductDetails, router]);&#13;&#10;&#13;&#10;  // Effects with proper dependencies&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    console.log(&quot; PRODUCT DETAILS useEffect triggered!&quot;, {&#13;&#10;      productId: productId,&#13;&#10;      hasProductId: !!productId,&#13;&#10;    });&#13;&#10;    if (productId) {&#13;&#10;      fetchProductDetails();&#13;&#10;    }&#13;&#10;  }, [productId, fetchProductDetails]);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    let interval;&#13;&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#13;&#10;      interval = setInterval(fetchProductDetails, 30000);&#13;&#10;    }&#13;&#10;    return () =&gt; {&#13;&#10;      if (interval) clearInterval(interval);&#13;&#10;    };&#13;&#10;  }, [productId, isOwner, viewMode, fetchProductDetails]);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (productId &amp;&amp; isOwner &amp;&amp; viewMode !== &quot;customer&quot;) {&#13;&#10;      fetchRecentOrders();&#13;&#10;    }&#13;&#10;  }, [productId, isOwner, viewMode, fetchRecentOrders]);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    console.log(&quot; SESSION CHECK useEffect triggered!&quot;, {&#13;&#10;      hasSession: !!session,&#13;&#10;      hasUserId: !!session?.user?.id,&#13;&#10;      hasUserIdProp: !!session?.user?.userId, // Check both properties&#13;&#10;      sessionUserId: session?.user?.id,&#13;&#10;      sessionUserIdProp: session?.user?.userId,&#13;&#10;      productId: productId,&#13;&#10;      hasProductId: !!productId,&#13;&#10;      sessionData: session,&#13;&#10;    });&#13;&#10;&#13;&#10;    // Check both session.user.id and session.user.userId&#13;&#10;    const userId = session?.user?.id || session?.user?.userId;&#13;&#10;&#13;&#10;    if (userId &amp;&amp; productId) {&#13;&#10;      console.log(&quot;✅ Calling checkUserPurchase with userId:&quot;, userId);&#13;&#10;      checkUserPurchase();&#13;&#10;    } else {&#13;&#10;      console.log(&quot;❌ NOT calling checkUserPurchase because:&quot;, {&#13;&#10;        noSession: !userId,&#13;&#10;        noProductId: !productId,&#13;&#10;        availableUserId: userId,&#13;&#10;      });&#13;&#10;    }&#13;&#10;  }, [session?.user?.id, session?.user?.userId, productId, checkUserPurchase]);&#13;&#10;&#13;&#10;  // Check if user has purchased this product&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (session?.user?.id &amp;&amp; productId) {&#13;&#10;      checkUserPurchase();&#13;&#10;    }&#13;&#10;  }, [session?.user?.id, productId]);&#13;&#10;&#13;&#10;  // Render components based on state&#13;&#10;  if (loading) {&#13;&#10;    // Use the same ownership logic as the actual content to determine loading skeleton&#13;&#10;    // The content logic is: isOwner &amp;&amp; viewMode !== &quot;customer&quot;&#13;&#10;    // We need to replicate this logic during loading&#13;&#10;&#13;&#10;    const checkPotentialOwnership = () =&gt; {&#13;&#10;      // If explicit customer view, always show customer skeleton&#13;&#10;      if (viewMode === &quot;customer&quot;) {&#13;&#10;        return false;&#13;&#10;      }&#13;&#10;&#13;&#10;      // If no session or not a farmer, show customer skeleton&#13;&#10;      if (!session?.user || session?.user?.userType !== &quot;farmer&quot;) {&#13;&#10;        return false;&#13;&#10;      }&#13;&#10;&#13;&#10;      // For farmers, we need to make an educated guess about ownership&#13;&#10;      // Since we don't have product data yet, we can:&#13;&#10;      // 1. Check if they came from /manage page (referrer)&#13;&#10;      // 2. Check if the productId might belong to them (requires API call)&#13;&#10;      // 3. Use a heuristic based on navigation patterns&#13;&#10;&#13;&#10;      // For now, let's show farmer skeleton for farmers by default&#13;&#10;      // and let it switch to customer view if they're not the owner&#13;&#10;      // This provides better UX for farmers viewing their own products&#13;&#10;      if (productId &amp;&amp; session?.user?.userType === &quot;farmer&quot;) {&#13;&#10;        return true; // Show farmer skeleton, will switch if not owner&#13;&#10;      }&#13;&#10;&#13;&#10;      return false;&#13;&#10;    };&#13;&#10;&#13;&#10;    const showFarmerSkeleton = checkPotentialOwnership();&#13;&#10;&#13;&#10;    return showFarmerSkeleton ? (&#13;&#10;      &lt;FarmerDetailsLoading /&gt;&#13;&#10;    ) : (&#13;&#10;      &lt;CustomerDetailsLoading /&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  if (responseType === &quot;farmer&quot; &amp;&amp; farmer) {&#13;&#10;    return (&#13;&#10;      &lt;FarmerProfileView farmer={farmer} farmerProducts={farmerProducts} /&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  if (!product &amp;&amp; !farmer) {&#13;&#10;    return &lt;NotFound responseType={responseType} /&gt;;&#13;&#10;  }&#13;&#10;&#13;&#10;  // Main product details render&#13;&#10;  return (&#13;&#10;    &lt;&gt;&#13;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#13;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#13;&#10;          {/* Farmer Dashboard View */}&#13;&#10;          {isOwner &amp;&amp; viewMode !== &quot;customer&quot; ? (&#13;&#10;            &lt;&gt;&#13;&#10;              {/* Farmer Breadcrumb */}&#13;&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#13;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;Link href=&quot;/manage&quot; className=&quot;hover:text-primary-600&quot;&gt;&#13;&#10;                      &lt;i className=&quot;fas fa-tachometer-alt mr-1&quot;&gt;&lt;/i&gt;&#13;&#10;                      Dashboard&#13;&#10;                    &lt;/Link&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                      {product.name} - Management&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                &lt;/ol&gt;&#13;&#10;              &lt;/nav&gt;&#13;&#10;&#13;&#10;              {/* Customer View Notice */}&#13;&#10;              &lt;div className=&quot;bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;i className=&quot;fas fa-info-circle text-blue-600 dark:text-blue-400 mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;span className=&quot;text-blue-800 dark:text-blue-200&quot;&gt;&#13;&#10;                      You are viewing this as the product owner.&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;Link&#13;&#10;                    href={`/details?id=${productId}&amp;view=customer`}&#13;&#10;                    className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition&quot;&#13;&#10;                  &gt;&#13;&#10;                    &lt;i className=&quot;fas fa-eye mr-1&quot;&gt;&lt;/i&gt;&#13;&#10;                    View as Customer&#13;&#10;                  &lt;/Link&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Farmer Product Management Header */}&#13;&#10;              &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;&#13;&#10;                      Product Management&#13;&#10;                    &lt;/h1&gt;&#13;&#10;                    &lt;p className=&quot;text-green-100&quot;&gt;&#13;&#10;                      Manage your product listing and inventory&#13;&#10;                    &lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;text-right&quot;&gt;&#13;&#10;                    &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#13;&#10;                      Product Status&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div&#13;&#10;                      className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${&#13;&#10;                        product.status === &quot;active&quot;&#13;&#10;                          ? &quot;bg-green-100 text-green-800&quot;&#13;&#10;                          : &quot;bg-red-100 text-red-800&quot;&#13;&#10;                      }`}&#13;&#10;                    &gt;&#13;&#10;                      &lt;i&#13;&#10;                        className={`fas ${product.status === &quot;active&quot; ? &quot;fa-check-circle&quot; : &quot;fa-times-circle&quot;} mr-1`}&#13;&#10;                      &gt;&lt;/i&gt;&#13;&#10;                      {product.status === &quot;active&quot; ? &quot;Active&quot; : &quot;Inactive&quot;}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#13;&#10;                {/* Product Images &amp; Info */}&#13;&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#13;&#10;                  {/* Image Management */}&#13;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#13;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                        Product Images&#13;&#10;                      &lt;/h3&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    {/* Current Images Display */}&#13;&#10;                    {(() =&gt; {&#13;&#10;                      const allImages = imageData.allImages;&#13;&#10;&#13;&#10;                      return allImages.length &gt; 0 ? (&#13;&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;                          &lt;div className=&quot;aspect-video max-w-md bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden&quot;&gt;&#13;&#10;                            &lt;Image&#13;&#10;                              src={allImages[selectedImage]}&#13;&#10;                              alt={product.name}&#13;&#10;                              width={400}&#13;&#10;                              height={225}&#13;&#10;                              className=&quot;w-full h-full object-cover&quot;&#13;&#10;                            /&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;                          {allImages.length &gt; 1 &amp;&amp; (&#13;&#10;                            &lt;div className=&quot;grid grid-cols-5 gap-2 max-w-md&quot;&gt;&#13;&#10;                              {allImages.map((image, index) =&gt; (&#13;&#10;                                &lt;button&#13;&#10;                                  key={index}&#13;&#10;                                  onClick={() =&gt; setSelectedImage(index)}&#13;&#10;                                  className={`aspect-square rounded-lg overflow-hidden border-2 ${&#13;&#10;                                    selectedImage === index&#13;&#10;                                      ? &quot;border-primary-500&quot;&#13;&#10;                                      : &quot;border-gray-300 dark:border-gray-600&quot;&#13;&#10;                                  }`}&#13;&#10;                                &gt;&#13;&#10;                                  &lt;Image&#13;&#10;                                    src={image}&#13;&#10;                                    alt={`${product.name} ${index + 1}`}&#13;&#10;                                    width={80}&#13;&#10;                                    height={80}&#13;&#10;                                    className=&quot;w-full h-full object-cover&quot;&#13;&#10;                                  /&gt;&#13;&#10;                                &lt;/button&gt;&#13;&#10;                              ))}&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          )}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      ) : (&#13;&#10;                        &lt;div className=&quot;text-center py-12 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#13;&#10;                          &lt;i className=&quot;fas fa-image text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#13;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                            No images uploaded&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      );&#13;&#10;                    })()}&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Product Information */}&#13;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#13;&#10;                      &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                        Product Information&#13;&#10;                      &lt;/h3&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                          {product.name}&#13;&#10;                        &lt;/h2&gt;&#13;&#10;                        &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                          {product.category}&#13;&#10;                        &lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#13;&#10;                        &lt;div&gt;&#13;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                            Price&#13;&#10;                          &lt;/span&gt;&#13;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                            {formatPrice(product.price)} per{&quot; &quot;}&#13;&#10;                            {product.unit || &quot;kg&quot;}&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div&gt;&#13;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                            Stock&#13;&#10;                          &lt;/span&gt;&#13;&#10;                          &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                            {product.stock} {product.unit || &quot;kg&quot;}&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                          Description&#13;&#10;                        &lt;/span&gt;&#13;&#10;                        &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#13;&#10;                          {product.description || &quot;No description provided.&quot;}&#13;&#10;                        &lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      {product.features &amp;&amp; (&#13;&#10;                        &lt;div&gt;&#13;&#10;                          &lt;span className=&quot;text-sm font-medium text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                            Features&#13;&#10;                          &lt;/span&gt;&#13;&#10;                          &lt;ul className=&quot;list-disc list-inside text-gray-700 dark:text-gray-300 mt-1&quot;&gt;&#13;&#10;                            {product.features.map((feature, index) =&gt; (&#13;&#10;                              &lt;li key={index}&gt;{feature}&lt;/li&gt;&#13;&#10;                            ))}&#13;&#10;                          &lt;/ul&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Recent Orders */}&#13;&#10;                  &lt;RecentOrdersSection&#13;&#10;                    recentOrders={recentOrders}&#13;&#10;                    loadingOrders={loadingOrders}&#13;&#10;                    product={product}&#13;&#10;                  /&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                {/* Sidebar - Analytics &amp; Actions */}&#13;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#13;&#10;                  {/* Performance Stats */}&#13;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                        Performance&#13;&#10;                      &lt;/h3&gt;&#13;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                        Real-time data&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;                      {/* Total Sales */}&#13;&#10;                      &lt;div className=&quot;text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg&quot;&gt;&#13;&#10;                        &lt;div className=&quot;flex items-center justify-center gap-2 mb-1&quot;&gt;&#13;&#10;                          &lt;i className=&quot;fas fa-chart-line text-blue-600&quot;&gt;&lt;/i&gt;&#13;&#10;                          &lt;span className=&quot;text-2xl font-bold text-blue-600&quot;&gt;&#13;&#10;                            {product.performanceMetrics?.totalSales || 0}&#13;&#10;                          &lt;/span&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                          Total Sales&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      {/* Total Revenue */}&#13;&#10;                      &lt;div className=&quot;text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg&quot;&gt;&#13;&#10;                        &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;&#13;&#10;                          {formatPrice(&#13;&#10;                            product.performanceMetrics?.totalRevenue || 0,&#13;&#10;                          )}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                          Total Revenue&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      {/* Average Rating */}&#13;&#10;                      &lt;div className=&quot;text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg&quot;&gt;&#13;&#10;                        &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;&#13;&#10;                          {(product.averageRating || 0).toFixed(1)}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                          Average Rating&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;flex justify-center mt-1&quot;&gt;&#13;&#10;                          &lt;StarRating&#13;&#10;                            rating={product.averageRating || 0}&#13;&#10;                            size=&quot;sm&quot;&#13;&#10;                          /&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      {/* Total Reviews */}&#13;&#10;                      &lt;div className=&quot;text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg&quot;&gt;&#13;&#10;                        &lt;div className=&quot;text-2xl font-bold text-purple-600&quot;&gt;&#13;&#10;                          {product.reviewCount || product.totalReviews || 0}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                          Total Reviews&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      {/* Average Order Value */}&#13;&#10;                      {product.performanceMetrics?.averageOrderValue &gt; 0 &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg&quot;&gt;&#13;&#10;                          &lt;div className=&quot;text-2xl font-bold text-orange-600&quot;&gt;&#13;&#10;                            {formatPrice(&#13;&#10;                              product.performanceMetrics.averageOrderValue,&#13;&#10;                            )}&#13;&#10;                          &lt;/div&gt;&#13;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                            Avg. Order Value&#13;&#10;                          &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;&#13;&#10;                      {/* Total Orders */}&#13;&#10;                      {product.performanceMetrics?.totalOrders &gt; 0 &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;text-center p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg&quot;&gt;&#13;&#10;                          &lt;div className=&quot;text-2xl font-bold text-indigo-600&quot;&gt;&#13;&#10;                            {product.performanceMetrics.totalOrders}&#13;&#10;                          &lt;/div&gt;&#13;&#10;                          &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                            Total Orders&#13;&#10;                          &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    {/* Performance Summary */}&#13;&#10;                    &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#13;&#10;                      &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 text-center&quot;&gt;&#13;&#10;                        {product.performanceMetrics?.totalSales &gt; 0&#13;&#10;                          ? &quot;Your product is performing well!&quot;&#13;&#10;                          : &quot;Start promoting your product to get your first sale!&quot;}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Action Buttons */}&#13;&#10;                  &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6&quot;&gt;&#13;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#13;&#10;                      Actions&#13;&#10;                    &lt;/h3&gt;&#13;&#10;&#13;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#13;&#10;                      {session?.user?.userType === &quot;farmer&quot; ? (&#13;&#10;                        // Farmer-specific buttons&#13;&#10;                        &lt;&gt;&#13;&#10;                          &lt;Link&#13;&#10;                            href=&quot;/create&quot;&#13;&#10;                            className=&quot;w-full bg-green-600 hover:bg-green-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            Add Product&#13;&#10;                          &lt;/Link&gt;&#13;&#10;                          &lt;Link&#13;&#10;                            href=&quot;/manage&quot;&#13;&#10;                            className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            Manage Orders&#13;&#10;                          &lt;/Link&gt;&#13;&#10;                          &lt;Link&#13;&#10;                            href=&quot;/farmer-orders&quot;&#13;&#10;                            className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition flex items-center justify-center&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            View My Orders&#13;&#10;                          &lt;/Link&gt;&#13;&#10;                        &lt;/&gt;&#13;&#10;                      ) : (&#13;&#10;                        // Customer buttons&#13;&#10;                        &lt;&gt;&#13;&#10;                          &lt;button&#13;&#10;                            onClick={handleBuyNow}&#13;&#10;                            disabled={&#13;&#10;                              product.stock &lt;= 0 ||&#13;&#10;                              session?.user?.userType === &quot;farmer&quot;&#13;&#10;                            }&#13;&#10;                            className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#13;&#10;                            title={&#13;&#10;                              session?.user?.userType === &quot;farmer&quot;&#13;&#10;                                ? &quot;Farmers cannot purchase products&quot;&#13;&#10;                                : &quot;&quot;&#13;&#10;                            }&#13;&#10;                          &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            Buy Now&#13;&#10;                          &lt;/button&gt;&#13;&#10;                          &lt;button&#13;&#10;                            onClick={handleAddToCart}&#13;&#10;                            disabled={&#13;&#10;                              isAddingToCart ||&#13;&#10;                              product.stock &lt;= 0 ||&#13;&#10;                              session?.user?.userType === &quot;farmer&quot;&#13;&#10;                            }&#13;&#10;                            className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#13;&#10;                            title={&#13;&#10;                              session?.user?.userType === &quot;farmer&quot;&#13;&#10;                                ? &quot;Farmers cannot purchase products&quot;&#13;&#10;                                : &quot;&quot;&#13;&#10;                            }&#13;&#10;                          &gt;&#13;&#10;                            &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                            {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#13;&#10;                          &lt;/button&gt;&#13;&#10;                          &lt;button&#13;&#10;                            onClick={handleFavoriteToggle}&#13;&#10;                            className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;i&#13;&#10;                              className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#13;&#10;                            &gt;&lt;/i&gt;&#13;&#10;                            Add to Favorite&#13;&#10;                          &lt;/button&gt;&#13;&#10;                        &lt;/&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/&gt;&#13;&#10;          ) : (&#13;&#10;            /* Regular Customer View */&#13;&#10;            &lt;&gt;&#13;&#10;              {/* Breadcrumb */}&#13;&#10;              &lt;nav className=&quot;mb-8&quot;&gt;&#13;&#10;                &lt;ol className=&quot;flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;Link href=&quot;/&quot; className=&quot;hover:text-primary-600&quot;&gt;&#13;&#10;                      Home&#13;&#10;                    &lt;/Link&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;Link href=&quot;/products&quot; className=&quot;hover:text-primary-600&quot;&gt;&#13;&#10;                      Products&#13;&#10;                    &lt;/Link&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;i className=&quot;fas fa-chevron-right text-xs&quot;&gt;&lt;/i&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                  &lt;li&gt;&#13;&#10;                    &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                      {product.name}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/li&gt;&#13;&#10;                &lt;/ol&gt;&#13;&#10;              &lt;/nav&gt;&#13;&#10;&#13;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-12&quot;&gt;&#13;&#10;                {/* Product Images */}&#13;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;                  &lt;div className=&quot;aspect-square bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg&quot;&gt;&#13;&#10;                    {(() =&gt; {&#13;&#10;                      const allImages = imageData.allImages;&#13;&#10;&#13;&#10;                      return (&#13;&#10;                        &lt;Image&#13;&#10;                          src={&#13;&#10;                            allImages[selectedImage] || &quot;/placeholder-image.jpg&quot;&#13;&#10;                          }&#13;&#10;                          alt={product.name}&#13;&#10;                          width={600}&#13;&#10;                          height={600}&#13;&#10;                          className=&quot;w-full h-full object-cover&quot;&#13;&#10;                        /&gt;&#13;&#10;                      );&#13;&#10;                    })()}&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Thumbnail Images */}&#13;&#10;                  {(() =&gt; {&#13;&#10;                    const allImages = imageData.allImages;&#13;&#10;&#13;&#10;                    return allImages.length &gt; 1 ? (&#13;&#10;                      &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt;&#13;&#10;                        {allImages.map((image, index) =&gt; (&#13;&#10;                          &lt;button&#13;&#10;                            key={index}&#13;&#10;                            onClick={() =&gt; setSelectedImage(index)}&#13;&#10;                            className={`aspect-square rounded-lg overflow-hidden border-2 ${&#13;&#10;                              selectedImage === index&#13;&#10;                                ? &quot;border-primary-500&quot;&#13;&#10;                                : &quot;border-gray-300 dark:border-gray-600&quot;&#13;&#10;                            }`}&#13;&#10;                          &gt;&#13;&#10;                            &lt;Image&#13;&#10;                              src={image}&#13;&#10;                              alt={`${product.name} ${index + 1}`}&#13;&#10;                              width={100}&#13;&#10;                              height={100}&#13;&#10;                              className=&quot;w-full h-full object-cover&quot;&#13;&#10;                            /&gt;&#13;&#10;                          &lt;/button&gt;&#13;&#10;                        ))}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    ) : null;&#13;&#10;                  })()}&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                {/* Product Info */}&#13;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#13;&#10;                  {/* Category and Features */}&#13;&#10;                  &lt;div className=&quot;flex items-center gap-2 flex-wrap&quot;&gt;&#13;&#10;                    &lt;span className=&quot;bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#13;&#10;                      {product.category}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                    {product.isOrganic &amp;&amp; (&#13;&#10;                      &lt;span className=&quot;bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#13;&#10;                        Organic&#13;&#10;                      &lt;/span&gt;&#13;&#10;                    )}&#13;&#10;                    {product.isFresh &amp;&amp; (&#13;&#10;                      &lt;span className=&quot;bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#13;&#10;                        Fresh&#13;&#10;                      &lt;/span&gt;&#13;&#10;                    )}&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Product Name and Farmer */}&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#13;&#10;                      {product.name}&#13;&#10;                    &lt;/h1&gt;&#13;&#10;                    &lt;p className=&quot;text-lg text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                      Produced by{&quot; &quot;}&#13;&#10;                      &lt;span className=&quot;font-semibold text-primary-600 dark:text-primary-400&quot;&gt;&#13;&#10;                        {product.farmer?.farmName ||&#13;&#10;                          product.farmer?.name ||&#13;&#10;                          &quot;Unknown Farmer&quot;}&#13;&#10;                      &lt;/span&gt;&#13;&#10;                    &lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Rating and Reviews */}&#13;&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#13;&#10;                    {(() =&gt; {&#13;&#10;                      // Calculate actual average rating and count from reviews if available&#13;&#10;                      const actualReviewCount = reviews?.length || 0;&#13;&#10;                      let displayRating = product.averageRating || 0;&#13;&#10;&#13;&#10;                      // If we have reviews but no product rating, calculate from reviews&#13;&#10;                      if (&#13;&#10;                        actualReviewCount &gt; 0 &amp;&amp;&#13;&#10;                        (!product.averageRating || product.averageRating === 0)&#13;&#10;                      ) {&#13;&#10;                        const totalRating = reviews.reduce(&#13;&#10;                          (sum, review) =&gt; sum + (review.rating || 0),&#13;&#10;                          0,&#13;&#10;                        );&#13;&#10;                        displayRating = totalRating / actualReviewCount;&#13;&#10;                      }&#13;&#10;&#13;&#10;                      return (&#13;&#10;                        &lt;&gt;&#13;&#10;                          &lt;StarRating rating={displayRating} showValue={true} /&gt;&#13;&#10;                          &lt;span className=&quot;text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                            ({actualReviewCount} reviews)&#13;&#10;                          &lt;/span&gt;&#13;&#10;                        &lt;/&gt;&#13;&#10;                      );&#13;&#10;                    })()}&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Price and Stock */}&#13;&#10;                  &lt;div className=&quot;bg-gray-100 dark:bg-gray-800 rounded-xl p-6&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;span className=&quot;text-3xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#13;&#10;                          {formatPrice(product.price)}&#13;&#10;                        &lt;/span&gt;&#13;&#10;                        &lt;span className=&quot;text-lg text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                          /{product.unit || &quot;kg&quot;}&#13;&#10;                        &lt;/span&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;text-right&quot;&gt;&#13;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                          Available Stock&#13;&#10;                        &lt;/p&gt;&#13;&#10;                        &lt;p className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                          {product.stock} {product.unit || &quot;kg&quot;}&#13;&#10;                        &lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    {/* Location */}&#13;&#10;                    &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#13;&#10;                      &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                      &lt;span&gt;&#13;&#10;                        {product.farmer?.location || &quot;Location not specified&quot;}&#13;&#10;                      &lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Quantity Selection */}&#13;&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;                    &lt;div&gt;&#13;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#13;&#10;                        Quantity ({product.unit || &quot;kg&quot;})&#13;&#10;                      &lt;/label&gt;&#13;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#13;&#10;                        &lt;button&#13;&#10;                          onClick={() =&gt; setQuantity(Math.max(1, quantity - 1))}&#13;&#10;                          disabled={session?.user?.userType === &quot;farmer&quot;}&#13;&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;i className=&quot;fas fa-minus&quot;&gt;&lt;/i&gt;&#13;&#10;                        &lt;/button&gt;&#13;&#10;                        &lt;input&#13;&#10;                          type=&quot;number&quot;&#13;&#10;                          min=&quot;1&quot;&#13;&#10;                          max={product.stock}&#13;&#10;                          value={quantity}&#13;&#10;                          onChange={(e) =&gt;&#13;&#10;                            setQuantity(&#13;&#10;                              Math.max(1, parseInt(e.target.value) || 1),&#13;&#10;                            )&#13;&#10;                          }&#13;&#10;                          disabled={session?.user?.userType === &quot;farmer&quot;}&#13;&#10;                          className=&quot;w-20 text-center py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;                        /&gt;&#13;&#10;                        &lt;button&#13;&#10;                          onClick={() =&gt;&#13;&#10;                            setQuantity(Math.min(product.stock, quantity + 1))&#13;&#10;                          }&#13;&#10;                          disabled={session?.user?.userType === &quot;farmer&quot;}&#13;&#10;                          className=&quot;w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&#13;&#10;                        &lt;/button&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      {session?.user?.userType === &quot;farmer&quot; &amp;&amp; (&#13;&#10;                        &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 mt-2 italic&quot;&gt;&#13;&#10;                          &lt;i className=&quot;fas fa-info-circle mr-1&quot;&gt;&lt;/i&gt;&#13;&#10;                          Farmers can only view product details, not purchase&#13;&#10;                        &lt;/p&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Action Buttons */}&#13;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#13;&#10;                    {session?.user?.userType === &quot;farmer&quot; ? (&#13;&#10;                      // Farmer-specific buttons&#13;&#10;                      &lt;&gt;&#13;&#10;                        &lt;Link&#13;&#10;                          href=&quot;/create&quot;&#13;&#10;                          className=&quot;w-full bg-green-600 hover:bg-green-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                          Add Product&#13;&#10;                        &lt;/Link&gt;&#13;&#10;                        &lt;Link&#13;&#10;                          href=&quot;/manage&quot;&#13;&#10;                          className=&quot;w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                          Manage Orders&#13;&#10;                        &lt;/Link&gt;&#13;&#10;                        &lt;Link&#13;&#10;                          href=&quot;/farmer-orders&quot;&#13;&#10;                          className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition flex items-center justify-center&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                          View My Orders&#13;&#10;                        &lt;/Link&gt;&#13;&#10;                      &lt;/&gt;&#13;&#10;                    ) : (&#13;&#10;                      // Customer buttons&#13;&#10;                      &lt;&gt;&#13;&#10;                        &lt;button&#13;&#10;                          onClick={handleBuyNow}&#13;&#10;                          disabled={&#13;&#10;                            product.stock &lt;= 0 ||&#13;&#10;                            session?.user?.userType === &quot;farmer&quot;&#13;&#10;                          }&#13;&#10;                          className=&quot;w-full bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-800 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:bg-gray-400&quot;&#13;&#10;                          title={&#13;&#10;                            session?.user?.userType === &quot;farmer&quot;&#13;&#10;                              ? &quot;Farmers cannot purchase products&quot;&#13;&#10;                              : &quot;&quot;&#13;&#10;                          }&#13;&#10;                        &gt;&#13;&#10;                          &lt;i className=&quot;fas fa-bolt mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                          Buy Now&#13;&#10;                        &lt;/button&gt;&#13;&#10;                        &lt;button&#13;&#10;                          onClick={handleAddToCart}&#13;&#10;                          disabled={&#13;&#10;                            isAddingToCart ||&#13;&#10;                            product.stock &lt;= 0 ||&#13;&#10;                            session?.user?.userType === &quot;farmer&quot;&#13;&#10;                          }&#13;&#10;                          className=&quot;w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition disabled:bg-gray-400&quot;&#13;&#10;                          title={&#13;&#10;                            session?.user?.userType === &quot;farmer&quot;&#13;&#10;                              ? &quot;Farmers cannot purchase products&quot;&#13;&#10;                              : &quot;&quot;&#13;&#10;                          }&#13;&#10;                        &gt;&#13;&#10;                          &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                          {isAddingToCart ? &quot;Adding...&quot; : &quot;Add to Cart&quot;}&#13;&#10;                        &lt;/button&gt;&#13;&#10;                        &lt;button&#13;&#10;                          onClick={handleFavoriteToggle}&#13;&#10;                          className=&quot;w-full border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-6 rounded-lg font-medium transition&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;i&#13;&#10;                            className={`${isFavorite ? &quot;fas&quot; : &quot;far&quot;} fa-heart mr-2 ${isFavorite ? &quot;text-red-500&quot; : &quot;&quot;}`}&#13;&#10;                          &gt;&lt;/i&gt;&#13;&#10;                          Add to Favorite&#13;&#10;                        &lt;/button&gt;&#13;&#10;                      &lt;/&gt;&#13;&#10;                    )}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Tabs Section */}&#13;&#10;              &lt;div className=&quot;mt-16&quot;&gt;&#13;&#10;                &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#13;&#10;                  &lt;nav className=&quot;flex space-x-8&quot;&gt;&#13;&#10;                    {TAB_OPTIONS.map((tab) =&gt; (&#13;&#10;                      &lt;button&#13;&#10;                        key={tab}&#13;&#10;                        onClick={() =&gt; setActiveTab(tab)}&#13;&#10;                        className={`py-4 px-1 border-b-2 font-medium text-sm ${&#13;&#10;                          activeTab === tab&#13;&#10;                            ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#13;&#10;                            : &quot;border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300&quot;&#13;&#10;                        }`}&#13;&#10;                      &gt;&#13;&#10;                        {tab.charAt(0).toUpperCase() + tab.slice(1)}&#13;&#10;                      &lt;/button&gt;&#13;&#10;                    ))}&#13;&#10;                  &lt;/nav&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;div className=&quot;py-8&quot;&gt;&#13;&#10;                  {/* Description Tab */}&#13;&#10;                  {activeTab === &quot;description&quot; &amp;&amp; (&#13;&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#13;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-4&quot;&gt;&#13;&#10;                        Product Description&#13;&#10;                      &lt;/h3&gt;&#13;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#13;&#10;                        {product.description ||&#13;&#10;                          &quot;No description available for this product.&quot;}&#13;&#10;                      &lt;/p&gt;&#13;&#10;&#13;&#10;                      {product.features &amp;&amp; product.features.length &gt; 0 &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;mt-6&quot;&gt;&#13;&#10;                          &lt;h4 className=&quot;text-lg font-medium mb-3&quot;&gt;&#13;&#10;                            Key Features&#13;&#10;                          &lt;/h4&gt;&#13;&#10;                          &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#13;&#10;                            {product.features.map((feature, index) =&gt; (&#13;&#10;                              &lt;li&#13;&#10;                                key={index}&#13;&#10;                                className=&quot;text-gray-600 dark:text-gray-400&quot;&#13;&#10;                              &gt;&#13;&#10;                                {feature}&#13;&#10;                              &lt;/li&gt;&#13;&#10;                            ))}&#13;&#10;                          &lt;/ul&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;&#13;&#10;                  {/* Nutrition Tab */}&#13;&#10;                  {activeTab === &quot;nutrition&quot; &amp;&amp; (&#13;&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#13;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#13;&#10;                        Nutritional Information&#13;&#10;                      &lt;/h3&gt;&#13;&#10;&#13;&#10;                      {product.nutritionalInformation ? (&#13;&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#13;&#10;                          {typeof product.nutritionalInformation ===&#13;&#10;                          &quot;string&quot; ? (&#13;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                              {product.nutritionalInformation}&#13;&#10;                            &lt;/p&gt;&#13;&#10;                          ) : (&#13;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#13;&#10;                              {/* Display nutritional information as structured data */}&#13;&#10;                              {product.nutritionalInformation.servingSize &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#13;&#10;                                    Serving Size:&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.servingSize}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.calories &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Calories:&lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.calories}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.protein &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Protein:&lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.protein}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.fat &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Fat:&lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.fat}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.carbohydrates &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#13;&#10;                                    Carbohydrates:&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {&#13;&#10;                                      product.nutritionalInformation&#13;&#10;                                        .carbohydrates&#13;&#10;                                    }&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.fiber &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Fiber:&lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.fiber}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.vitaminC &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#13;&#10;                                    Vitamin C:&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.vitaminC}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.potassium &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;&#13;&#10;                                    Potassium:&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.potassium}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                              {product.nutritionalInformation.iron &amp;&amp; (&#13;&#10;                                &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                                  &lt;span className=&quot;font-medium&quot;&gt;Iron:&lt;/span&gt;&#13;&#10;                                  &lt;span&gt;&#13;&#10;                                    {product.nutritionalInformation.iron}&#13;&#10;                                  &lt;/span&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              )}&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          )}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      ) : (&#13;&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#13;&#10;                          &lt;i className=&quot;fas fa-apple-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#13;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                            Nutritional information is not available for this&#13;&#10;                            product.&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;&#13;&#10;                  {/* Storage Instructions Tab */}&#13;&#10;                  {activeTab === &quot;storage&quot; &amp;&amp; (&#13;&#10;                    &lt;div className=&quot;prose dark:prose-invert max-w-none&quot;&gt;&#13;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#13;&#10;                        Storage Instructions&#13;&#10;                      &lt;/h3&gt;&#13;&#10;&#13;&#10;                      {product.storageInstructions ? (&#13;&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#13;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                            {product.storageInstructions}&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      ) : (&#13;&#10;                        &lt;div className=&quot;text-center py-8&quot;&gt;&#13;&#10;                          &lt;i className=&quot;fas fa-warehouse text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#13;&#10;                          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                            Storage instructions are not available for this&#13;&#10;                            product.&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;&#13;&#10;                      {/* General storage tips */}&#13;&#10;                      &lt;div className=&quot;mt-8&quot;&gt;&#13;&#10;                        &lt;h4 className=&quot;text-lg font-medium mb-4&quot;&gt;&#13;&#10;                          General Storage Tips&#13;&#10;                        &lt;/h4&gt;&#13;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#13;&#10;                          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900 text-blue-900 dark:text-blue-100 rounded-lg p-4&quot;&gt;&#13;&#10;                            &lt;h5 className=&quot;font-medium mb-2&quot;&gt;&#13;&#10;                              &lt;i className=&quot;fas fa-thermometer-half mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                              Temperature&#13;&#10;                            &lt;/h5&gt;&#13;&#10;                            &lt;p className=&quot;text-sm&quot;&gt;&#13;&#10;                              Store in a cool, dry place away from direct&#13;&#10;                              sunlight&#13;&#10;                            &lt;/p&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;                          &lt;div className=&quot;bg-green-50 dark:bg-green-900 text-green-900 dark:text-green-100 rounded-lg p-4&quot;&gt;&#13;&#10;                            &lt;h5 className=&quot;font-medium mb-2&quot;&gt;&#13;&#10;                              &lt;i className=&quot;fas fa-tint mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                              Humidity&#13;&#10;                            &lt;/h5&gt;&#13;&#10;                            &lt;p className=&quot;text-sm&quot;&gt;&#13;&#10;                              Keep in low humidity environment to prevent&#13;&#10;                              spoilage&#13;&#10;                            &lt;/p&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;&#13;&#10;                  {/* Reviews Tab */}&#13;&#10;                  {activeTab === &quot;reviews&quot; &amp;&amp; (&#13;&#10;                    &lt;div&gt;&#13;&#10;                      &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#13;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;&#13;&#10;                          Customer Reviews (&#13;&#10;                          {product.reviewCount || product.totalReviews || 0})&#13;&#10;                        &lt;/h2&gt;&#13;&#10;                        {/* Show review button only for customers who have purchased and received the product but haven't reviewed yet */}&#13;&#10;                        {session &amp;&amp;&#13;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#13;&#10;                          hasPurchasedProduct &amp;&amp;&#13;&#10;                          !hasReviewedProduct &amp;&amp; (&#13;&#10;                            &lt;button&#13;&#10;                              onClick={() =&gt; setShowReviewForm(true)}&#13;&#10;                              className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#13;&#10;                            &gt;&#13;&#10;                              &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                              Write Review&#13;&#10;                            &lt;/button&gt;&#13;&#10;                          )}&#13;&#10;&#13;&#10;                        {/* Show edit button if user has already reviewed */}&#13;&#10;                        {session &amp;&amp;&#13;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#13;&#10;                          hasPurchasedProduct &amp;&amp;&#13;&#10;                          hasReviewedProduct &amp;&amp;&#13;&#10;                          userExistingReview &amp;&amp; (&#13;&#10;                            &lt;button&#13;&#10;                              onClick={() =&gt; {&#13;&#10;                                setEditingReview(userExistingReview);&#13;&#10;                                setReviewForm({&#13;&#10;                                  rating: userExistingReview.rating || 5,&#13;&#10;                                  comment: userExistingReview.comment || &quot;&quot;,&#13;&#10;                                });&#13;&#10;                                setShowReviewForm(true);&#13;&#10;                              }}&#13;&#10;                              className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition&quot;&#13;&#10;                            &gt;&#13;&#10;                              &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                              Edit Your Review&#13;&#10;                            &lt;/button&gt;&#13;&#10;                          )}&#13;&#10;&#13;&#10;                        {session &amp;&amp;&#13;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#13;&#10;                          !hasPurchasedProduct &amp;&amp;&#13;&#10;                          !checkingPurchase &amp;&amp; (&#13;&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;                              &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm italic mb-4&quot;&gt;&#13;&#10;                                You need to purchase and receive this product to&#13;&#10;                                write a review&#13;&#10;                              &lt;/p&gt;&#13;&#10;                              &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg text-gray-600 dark:text-gray-400 text-sm&quot;&gt;&#13;&#10;                                &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                                Purchase required for reviews&#13;&#10;                              &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          )}&#13;&#10;&#13;&#10;                        {/* Show message if user has already reviewed */}&#13;&#10;                        {session &amp;&amp;&#13;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#13;&#10;                          hasPurchasedProduct &amp;&amp;&#13;&#10;                          hasReviewedProduct &amp;&amp;&#13;&#10;                          !checkingPurchase &amp;&amp; (&#13;&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;                              &lt;p className=&quot;text-gray-500 dark:text-gray-400 text-sm italic mb-4&quot;&gt;&#13;&#10;                                You have already reviewed this product&#13;&#10;                              &lt;/p&gt;&#13;&#10;                              &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-green-100 dark:bg-green-800 rounded-lg text-green-600 dark:text-green-400 text-sm&quot;&gt;&#13;&#10;                                &lt;i className=&quot;fas fa-check-circle mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                                Review submitted&#13;&#10;                              &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          )}&#13;&#10;&#13;&#10;                        {session &amp;&amp;&#13;&#10;                          session?.user?.userType !== &quot;farmer&quot; &amp;&amp;&#13;&#10;                          checkingPurchase &amp;&amp; (&#13;&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;                              &lt;div className=&quot;inline-flex items-center text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#13;&#10;                                &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                                Checking purchase history...&#13;&#10;                              &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          )}&#13;&#10;                        {session &amp;&amp; session?.user?.userType === &quot;farmer&quot; &amp;&amp; (&#13;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;                            &lt;div className=&quot;inline-flex items-center px-4 py-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-blue-600 dark:text-blue-400 text-sm&quot;&gt;&#13;&#10;                              &lt;i className=&quot;fas fa-info-circle mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                              Farmers can view reviews but cannot write them&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;                        )}&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      {/* Review Summary */}&#13;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl p-6 mb-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#13;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#13;&#10;                          {/* Overall Rating Section */}&#13;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;                            &lt;div className=&quot;mb-4&quot;&gt;&#13;&#10;                              {(() =&gt; {&#13;&#10;                                // Calculate actual average rating from reviews if available&#13;&#10;                                const actualReviewCount = reviews?.length || 0;&#13;&#10;                                let displayRating = product.averageRating || 0;&#13;&#10;&#13;&#10;                                // If we have reviews but no product rating, calculate from reviews&#13;&#10;                                if (&#13;&#10;                                  actualReviewCount &gt; 0 &amp;&amp;&#13;&#10;                                  (!product.averageRating ||&#13;&#10;                                    product.averageRating === 0)&#13;&#10;                                ) {&#13;&#10;                                  const totalRating = reviews.reduce(&#13;&#10;                                    (sum, review) =&gt; sum + (review.rating || 0),&#13;&#10;                                    0,&#13;&#10;                                  );&#13;&#10;                                  displayRating =&#13;&#10;                                    totalRating / actualReviewCount;&#13;&#10;                                }&#13;&#10;&#13;&#10;                                return (&#13;&#10;                                  &lt;&gt;&#13;&#10;                                    &lt;div className=&quot;text-5xl font-bold text-primary-600 dark:text-primary-400 mb-2&quot;&gt;&#13;&#10;                                      {displayRating.toFixed(1)}&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                    &lt;StarRating&#13;&#10;                                      rating={displayRating}&#13;&#10;                                      size=&quot;lg&quot;&#13;&#10;                                    /&gt;&#13;&#10;                                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 mt-3 text-lg font-medium&quot;&gt;&#13;&#10;                                      Based on{&quot; &quot;}&#13;&#10;                                      &lt;span className=&quot;text-primary-600 dark:text-primary-400 font-bold&quot;&gt;&#13;&#10;                                        {actualReviewCount}&#13;&#10;                                      &lt;/span&gt;{&quot; &quot;}&#13;&#10;                                      {actualReviewCount === 1&#13;&#10;                                        ? &quot;review&quot;&#13;&#10;                                        : &quot;reviews&quot;}&#13;&#10;                                    &lt;/p&gt;&#13;&#10;                                  &lt;/&gt;&#13;&#10;                                );&#13;&#10;                              })()}&#13;&#10;                            &lt;/div&gt;&#13;&#10;&#13;&#10;                            {/* Review Quality Indicator */}&#13;&#10;                            &lt;div className=&quot;mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg&quot;&gt;&#13;&#10;                              &lt;div className=&quot;flex items-center justify-center space-x-2 text-sm&quot;&gt;&#13;&#10;                                &lt;i className=&quot;fas fa-shield-alt text-green-600&quot;&gt;&lt;/i&gt;&#13;&#10;                                &lt;span className=&quot;font-medium text-gray-700 dark:text-gray-300&quot;&gt;&#13;&#10;                                  {(reviews?.length || 0) &gt; 0&#13;&#10;                                    ? `${reviews.length} verified review${reviews.length === 1 ? &quot;&quot; : &quot;s&quot;}`&#13;&#10;                                    : &quot;No reviews yet&quot;}&#13;&#10;                                &lt;/span&gt;&#13;&#10;                              &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;&#13;&#10;                          {/* Rating Distribution */}&#13;&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#13;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#13;&#10;                              Rating Breakdown&#13;&#10;                            &lt;/h4&gt;&#13;&#10;                            {(() =&gt; {&#13;&#10;                              // Calculate rating distribution&#13;&#10;                              const ratingDistribution = {&#13;&#10;                                5: 0,&#13;&#10;                                4: 0,&#13;&#10;                                3: 0,&#13;&#10;                                2: 0,&#13;&#10;                                1: 0,&#13;&#10;                              };&#13;&#10;                              if (reviews &amp;&amp; reviews.length &gt; 0) {&#13;&#10;                                reviews.forEach((review) =&gt; {&#13;&#10;                                  const rating = Math.floor(review.rating);&#13;&#10;                                  if (rating &gt;= 1 &amp;&amp; rating &lt;= 5) {&#13;&#10;                                    ratingDistribution[rating]++;&#13;&#10;                                  }&#13;&#10;                                });&#13;&#10;                              }&#13;&#10;                              const totalReviews = reviews?.length || 0;&#13;&#10;&#13;&#10;                              return [5, 4, 3, 2, 1].map((rating) =&gt; {&#13;&#10;                                const count = ratingDistribution[rating];&#13;&#10;                                const percentage =&#13;&#10;                                  totalReviews &gt; 0&#13;&#10;                                    ? (count / totalReviews) * 100&#13;&#10;                                    : 0;&#13;&#10;&#13;&#10;                                return (&#13;&#10;                                  &lt;div&#13;&#10;                                    key={rating}&#13;&#10;                                    className=&quot;flex items-center space-x-3&quot;&#13;&#10;                                  &gt;&#13;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400 w-12&quot;&gt;&#13;&#10;                                      {rating} star{rating === 1 ? &quot;&quot; : &quot;s&quot;}&#13;&#10;                                    &lt;/span&gt;&#13;&#10;                                    &lt;div className=&quot;flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden&quot;&gt;&#13;&#10;                                      &lt;div&#13;&#10;                                        className=&quot;bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500 ease-out&quot;&#13;&#10;                                        style={{ width: `${percentage}%` }}&#13;&#10;                                      &gt;&lt;/div&gt;&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                    &lt;span className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-right&quot;&gt;&#13;&#10;                                      {count}&#13;&#10;                                    &lt;/span&gt;&#13;&#10;                                    &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 w-12 text-right&quot;&gt;&#13;&#10;                                      {percentage.toFixed(0)}%&#13;&#10;                                    &lt;/span&gt;&#13;&#10;                                  &lt;/div&gt;&#13;&#10;                                );&#13;&#10;                              });&#13;&#10;                            })()}&#13;&#10;                          &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;&#13;&#10;                      {/* Enhanced Review Modal */}&#13;&#10;                      &lt;EnhancedReviewModal&#13;&#10;                        isOpen={showReviewForm}&#13;&#10;                        onClose={() =&gt; {&#13;&#10;                          setShowReviewForm(false);&#13;&#10;                          setEditingReview(null);&#13;&#10;                          setReviewForm(DEFAULT_REVIEW_FORM);&#13;&#10;                        }}&#13;&#10;                        product={product}&#13;&#10;                        user={session?.user}&#13;&#10;                        existingReview={editingReview}&#13;&#10;                        onSubmit={handleEnhancedReviewSubmit}&#13;&#10;                        isSubmitting={isSubmitting || isUpdating}&#13;&#10;                      /&gt;&#13;&#10;&#13;&#10;                      {/* Individual Reviews */}&#13;&#10;                      &lt;div className=&quot;space-y-8&quot;&gt;&#13;&#10;                        {reviews &amp;&amp; reviews.length &gt; 0 ? (&#13;&#10;                          reviews.map((review, index) =&gt; (&#13;&#10;                            &lt;div&#13;&#10;                              key={`${review._id}-${review.userId}-${index}`}&#13;&#10;                              className=&quot;group bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-800 dark:via-gray-850 dark:to-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-800&quot;&#13;&#10;                              style={{ animationDelay: `${index * 100}ms` }}&#13;&#10;                            &gt;&#13;&#10;                              &lt;div className=&quot;flex items-start justify-between mb-4&quot;&gt;&#13;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#13;&#10;                                  &lt;div className=&quot;relative&quot;&gt;&#13;&#10;                                    &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 dark:from-primary-500 dark:to-primary-700 flex items-center justify-center shadow-lg&quot;&gt;&#13;&#10;                                      &lt;span className=&quot;text-white font-bold text-lg&quot;&gt;&#13;&#10;                                        {(review.reviewer || &quot;Anonymous&quot;)&#13;&#10;                                          .charAt(0)&#13;&#10;                                          .toUpperCase()}&#13;&#10;                                      &lt;/span&gt;&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center&quot;&gt;&#13;&#10;                                      &lt;i className=&quot;fas fa-check text-white text-xs&quot;&gt;&lt;/i&gt;&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                  &lt;/div&gt;&#13;&#10;                                  &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;                                    &lt;div className=&quot;flex items-center gap-3 mb-1&quot;&gt;&#13;&#10;                                      &lt;h4 className=&quot;font-semibold text-gray-900 dark:text-white text-lg&quot;&gt;&#13;&#10;                                        {review.reviewer || &quot;Anonymous&quot;}&#13;&#10;                                      &lt;/h4&gt;&#13;&#10;                                      &lt;span className=&quot;px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs font-medium rounded-full&quot;&gt;&#13;&#10;                                        Verified Buyer&#13;&#10;                                      &lt;/span&gt;&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#13;&#10;                                      &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#13;&#10;                                        {[1, 2, 3, 4, 5].map((star) =&gt; (&#13;&#10;                                          &lt;span&#13;&#10;                                            key={star}&#13;&#10;                                            className={`text-lg transition-all duration-200 ${&#13;&#10;                                              star &lt;= review.rating&#13;&#10;                                                ? &quot;text-yellow-400 drop-shadow-sm&quot;&#13;&#10;                                                : &quot;text-gray-300 dark:text-gray-600&quot;&#13;&#10;                                            }`}&#13;&#10;                                          &gt;&#13;&#10;                                            ★&#13;&#10;                                          &lt;/span&gt;&#13;&#10;                                        ))}&#13;&#10;                                      &lt;/div&gt;&#13;&#10;                                      &lt;span className=&quot;text-sm font-medium text-yellow-600 dark:text-yellow-400&quot;&gt;&#13;&#10;                                        {review.rating}/5&#13;&#10;                                      &lt;/span&gt;&#13;&#10;                                      &lt;span className=&quot;text-gray-400&quot;&gt;•&lt;/span&gt;&#13;&#10;                                      &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400 font-medium&quot;&gt;&#13;&#10;                                        {new Date(&#13;&#10;                                          review.createdAt || review.date,&#13;&#10;                                        ).toLocaleDateString(&quot;en-US&quot;, {&#13;&#10;                                          year: &quot;numeric&quot;,&#13;&#10;                                          month: &quot;short&quot;,&#13;&#10;                                          day: &quot;numeric&quot;,&#13;&#10;                                        })}&#13;&#10;                                      &lt;/span&gt;&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                  &lt;/div&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                                &lt;div className=&quot;flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&#13;&#10;                                  {/* Show edit/delete buttons only for user's own review */}&#13;&#10;                                  {session?.user?.userId === review.userId ? (&#13;&#10;                                    &lt;&gt;&#13;&#10;                                      &lt;button&#13;&#10;                                        onClick={() =&gt; {&#13;&#10;                                          setEditingReview(review);&#13;&#10;                                          setReviewForm({&#13;&#10;                                            rating: review.rating,&#13;&#10;                                            comment: review.comment,&#13;&#10;                                          });&#13;&#10;                                          setShowReviewForm(true);&#13;&#10;                                        }}&#13;&#10;                                        className=&quot;p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors&quot;&#13;&#10;                                        title=&quot;Edit Review&quot;&#13;&#10;                                      &gt;&#13;&#10;                                        &lt;i className=&quot;fas fa-edit text-blue-500 hover:text-blue-600&quot;&gt;&lt;/i&gt;&#13;&#10;                                      &lt;/button&gt;&#13;&#10;                                      &lt;button&#13;&#10;                                        onClick={() =&gt;&#13;&#10;                                          handleDeleteReview(review._id)&#13;&#10;                                        }&#13;&#10;                                        disabled={isDeletingReview}&#13;&#10;                                        className=&quot;p-2 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors&quot;&#13;&#10;                                        title=&quot;Delete Review&quot;&#13;&#10;                                      &gt;&#13;&#10;                                        &lt;i className=&quot;fas fa-trash text-red-500 hover:text-red-600&quot;&gt;&lt;/i&gt;&#13;&#10;                                      &lt;/button&gt;&#13;&#10;                                    &lt;/&gt;&#13;&#10;                                  ) : (&#13;&#10;                                    &lt;&gt;&#13;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#13;&#10;                                        &lt;i className=&quot;fas fa-thumbs-up text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#13;&#10;                                      &lt;/button&gt;&#13;&#10;                                      &lt;button className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors&quot;&gt;&#10;                                        &lt;i className=&quot;fas fa-share text-gray-400 hover:text-primary-500&quot;&gt;&lt;/i&gt;&#10;                                      &lt;/button&gt;&#10;                                    &lt;/&gt;&#10;                                  )}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;div className=&quot;absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-primary-400 to-primary-600 rounded-full opacity-20&quot;&gt;&lt;/div&gt;&#10;                                &lt;p className=&quot;text-gray-700 dark:text-gray-300 leading-relaxed pl-6 text-base&quot;&gt;&#10;                                  &amp;ldquo;{review.comment}&amp;rdquo;&#10;                                &lt;/p&gt;&#10;                              &lt;/div&gt;&#10;&#10;                              {/* Review actions footer */}&#10;                              &lt;div className=&quot;mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex items-center justify-between&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-heart text-red-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Helpful&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                  &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                                    &lt;i className=&quot;fas fa-comment text-blue-400&quot;&gt;&lt;/i&gt;&#10;                                    &lt;span&gt;Reply&lt;/span&gt;&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                                    {[1, 2, 3].map((i) =&gt; (&#10;                                      &lt;div&#10;                                        key={i}&#10;                                        className=&quot;w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 border-2 border-white dark:border-gray-800&quot;&#10;                                      &gt;&lt;/div&gt;&#10;                                    ))}&#10;                                  &lt;/div&gt;&#10;                                  &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                    +2 found helpful&#10;                                  &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          ))&#10;                        ) : (&#10;                          &lt;div className=&quot;text-center py-16 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 rounded-2xl border-2 border-dashed border-gray-200 dark:border-gray-700&quot;&gt;&#10;                            &lt;div className=&quot;relative inline-block mb-6&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-800 dark:to-primary-900 rounded-full flex items-center justify-center mx-auto shadow-lg&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-star text-3xl text-primary-500 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div className=&quot;absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center animate-bounce&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-plus text-white text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h3 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                              No Reviews Yet&#10;                            &lt;/h3&gt;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto&quot;&gt;&#10;                              Be the first to share your experience with this&#10;                              amazing product! Your review helps other customers&#10;                              make informed decisions.&#10;                            &lt;/p&gt;&#10;                            {session &amp;&amp; hasPurchasedProduct &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setShowReviewForm(true)}&#10;                                className=&quot;inline-flex items-center bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-edit mr-2&quot;&gt;&lt;/i&gt;&#10;                                Write First Review&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Load More Reviews Button */}&#10;                        {hasMoreReviews &amp;&amp; (&#10;                          &lt;div className=&quot;text-center pt-8&quot;&gt;&#10;                            &lt;button&#10;                              onClick={loadMoreReviews}&#10;                              className=&quot;group inline-flex items-center bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-900 dark:text-white px-8 py-4 rounded-xl font-semibold border-2 border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chevron-down mr-3 group-hover:animate-bounce&quot;&gt;&lt;/i&gt;&#10;                              Load More Reviews&#10;                              &lt;span className=&quot;ml-3 px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-sm rounded-full&quot;&gt;&#10;                                +{Math.min(5, reviews?.length || 0)}&#10;                              &lt;/span&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#13;&#10;&#13;&#10;                  {/* Farmer Tab */}&#13;&#10;                  {activeTab === &quot;farmer&quot; &amp;&amp; (&#13;&#10;                    &lt;div&gt;&#13;&#10;                      &lt;h3 className=&quot;text-xl font-semibold mb-6&quot;&gt;&#13;&#10;                        About the Farmer&#13;&#10;                      &lt;/h3&gt;&#13;&#10;                      &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg&quot;&gt;&#13;&#10;                        &lt;div className=&quot;flex items-start gap-4&quot;&gt;&#13;&#10;                          &lt;div className=&quot;w-16 h-16 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center flex-shrink-0&quot;&gt;&#13;&#10;                            &lt;i className=&quot;fas fa-user text-2xl text-primary-600 dark:text-primary-400&quot;&gt;&lt;/i&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;                          &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;                            &lt;h4 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#13;&#10;                              {product.farmer?.farmName ||&#13;&#10;                                product.farmer?.name ||&#13;&#10;                                &quot;Farm Name&quot;}&#13;&#10;                            &lt;/h4&gt;&#13;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#13;&#10;                              {product.farmer?.email ||&#13;&#10;                                &quot;Farmer contact not available&quot;}&#13;&#10;                            &lt;/p&gt;&#13;&#10;&#13;&#10;                            {product.farmer?.location &amp;&amp; (&#13;&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-3&quot;&gt;&#13;&#10;                                &lt;i className=&quot;fas fa-map-marker-alt mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                                &lt;span&gt;{product.farmer.location}&lt;/span&gt;&#13;&#10;                              &lt;/div&gt;&#13;&#10;                            )}&#13;&#10;&#13;&#10;                            {product.farmer?.phone &amp;&amp; (&#13;&#10;                              &lt;div className=&quot;flex items-center text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#13;&#10;                                &lt;i className=&quot;fas fa-phone mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                                &lt;span&gt;{product.farmer.phone}&lt;/span&gt;&#13;&#10;                              &lt;/div&gt;&#13;&#10;                            )}&#13;&#10;&#13;&#10;                            &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#13;&#10;                              {product.farmer?.description ||&#13;&#10;                                &quot;A dedicated farmer committed to providing fresh, quality produce to the community.&quot;}&#13;&#10;                            &lt;/p&gt;&#13;&#10;&#13;&#10;                            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#13;&#10;                              &lt;Link&#13;&#10;                                href={`/details?id=${product.farmerId || product.farmer?.id}`}&#13;&#10;                                className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#13;&#10;                              &gt;&#13;&#10;                                &lt;i className=&quot;fas fa-external-link-alt mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                                View All Products from this Farmer&#13;&#10;                              &lt;/Link&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Related Products Section - Enhanced */}&#13;&#10;              {relatedProducts.length &gt; 0 &amp;&amp; (&#13;&#10;                &lt;div className=&quot;mt-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-lg border border-gray-100 dark:border-gray-700&quot;&gt;&#13;&#10;                  {/* Section Header */}&#13;&#10;                  &lt;div className=&quot;text-center mb-10&quot;&gt;&#13;&#10;                    &lt;div className=&quot;inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full mb-4 shadow-lg&quot;&gt;&#13;&#10;                      &lt;i className=&quot;fas fa-box-open text-2xl text-white&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#13;&#10;                      Related Products&#13;&#10;                    &lt;/h3&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-600 dark:text-gray-400 max-w-2xl mx-auto&quot;&gt;&#13;&#10;                      Discover similar high-quality products from our trusted&#13;&#10;                      farmers. Each item is carefully selected to meet our&#13;&#10;                      quality standards.&#13;&#10;                    &lt;/p&gt;&#13;&#10;                    &lt;div className=&quot;mt-4 flex items-center justify-center space-x-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                      &lt;i className=&quot;fas fa-leaf text-green-500&quot;&gt;&lt;/i&gt;&#13;&#10;                      &lt;span&gt;{relatedProducts.length} products found&lt;/span&gt;&#13;&#10;                      &lt;span&gt;•&lt;/span&gt;&#13;&#10;                      &lt;i className=&quot;fas fa-truck text-blue-500&quot;&gt;&lt;/i&gt;&#13;&#10;                      &lt;span&gt;Fast delivery available&lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Enhanced Product Grid */}&#13;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8&quot;&gt;&#13;&#10;                    {relatedProducts.map((relatedProduct, index) =&gt; (&#13;&#10;                      &lt;div&#13;&#10;                        key={relatedProduct._id}&#13;&#10;                        className=&quot;group transform transition-all duration-300 hover:-translate-y-2&quot;&#13;&#10;                        style={{ animationDelay: `${index * 100}ms` }}&#13;&#10;                      &gt;&#13;&#10;                        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-primary-200 dark:hover:border-primary-600 overflow-hidden&quot;&gt;&#13;&#10;                          {/* Product Image */}&#13;&#10;                          &lt;div className=&quot;relative aspect-square overflow-hidden&quot;&gt;&#13;&#10;                            &lt;Image&#13;&#10;                              src={&#13;&#10;                                relatedProduct.image ||&#13;&#10;                                relatedProduct.images?.[0] ||&#13;&#10;                                &quot;/placeholder-image.jpg&quot;&#13;&#10;                              }&#13;&#10;                              alt={relatedProduct.name}&#13;&#10;                              width={300}&#13;&#10;                              height={300}&#13;&#10;                              className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-500&quot;&#13;&#10;                            /&gt;&#13;&#10;&#13;&#10;                            {/* Product Badges */}&#13;&#10;                            &lt;div className=&quot;absolute top-3 left-3 flex flex-col space-y-2&quot;&gt;&#13;&#10;                              {relatedProduct.isOrganic &amp;&amp; (&#13;&#10;                                &lt;span className=&quot;bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#13;&#10;                                  Organic&#13;&#10;                                &lt;/span&gt;&#13;&#10;                              )}&#13;&#10;                              {relatedProduct.isFresh &amp;&amp; (&#13;&#10;                                &lt;span className=&quot;bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg&quot;&gt;&#13;&#10;                                  Fresh&#13;&#10;                                &lt;/span&gt;&#13;&#10;                              )}&#13;&#10;                            &lt;/div&gt;&#13;&#10;&#13;&#10;                            {/* Quick Actions Overlay */}&#13;&#10;                            &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center&quot;&gt;&#13;&#10;                              &lt;Link&#13;&#10;                                href={`/details?id=${relatedProduct._id}`}&#13;&#10;                                className=&quot;bg-white text-gray-900 px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition-colors transform hover:scale-105&quot;&#13;&#10;                              &gt;&#13;&#10;                                View Details&#13;&#10;                              &lt;/Link&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;&#13;&#10;                          {/* Product Info */}&#13;&#10;                          &lt;div className=&quot;p-6&quot;&gt;&#13;&#10;                            &lt;div className=&quot;mb-3&quot;&gt;&#13;&#10;                              &lt;h4 className=&quot;font-bold text-lg text-gray-900 dark:text-white line-clamp-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors&quot;&gt;&#13;&#10;                                {relatedProduct.name}&#13;&#10;                              &lt;/h4&gt;&#13;&#10;                              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 line-clamp-1&quot;&gt;&#13;&#10;                                by{&quot; &quot;}&#13;&#10;                                {relatedProduct.farmer?.name ||&#13;&#10;                                  relatedProduct.farmer?.farmName ||&#13;&#10;                                  &quot;Unknown Farmer&quot;}&#13;&#10;                              &lt;/p&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;&#13;&#10;                            {/* Rating */}&#13;&#10;                            &lt;div className=&quot;flex items-center space-x-1 mb-3&quot;&gt;&#13;&#10;                              &lt;StarRating&#13;&#10;                                rating={relatedProduct.averageRating || 0}&#13;&#10;                                size=&quot;sm&quot;&#13;&#10;                              /&gt;&#13;&#10;                              &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                                (&#13;&#10;                                {relatedProduct.reviewCount ||&#13;&#10;                                  relatedProduct.totalReviews ||&#13;&#10;                                  0}&#13;&#10;                                )&#13;&#10;                              &lt;/span&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;&#13;&#10;                            {/* Price and Stock */}&#13;&#10;                            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;                              &lt;div&gt;&#13;&#10;                                &lt;span className=&quot;text-xl font-bold text-primary-600 dark:text-primary-400&quot;&gt;&#13;&#10;                                  {formatPrice(relatedProduct.price || 0)}&#13;&#10;                                &lt;/span&gt;&#13;&#10;                                &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                                  /{relatedProduct.unit || &quot;kg&quot;}&#13;&#10;                                &lt;/span&gt;&#13;&#10;                              &lt;/div&gt;&#13;&#10;                              &lt;div className=&quot;text-right&quot;&gt;&#13;&#10;                                &lt;div&#13;&#10;                                  className={`text-xs font-medium ${&#13;&#10;                                    (relatedProduct.stock || 0) &gt; 0&#13;&#10;                                      ? &quot;text-green-600 dark:text-green-400&quot;&#13;&#10;                                      : &quot;text-red-600 dark:text-red-400&quot;&#13;&#10;                                  }`}&#13;&#10;                                &gt;&#13;&#10;                                  {(relatedProduct.stock || 0) &gt; 0&#13;&#10;                                    ? `${relatedProduct.stock} ${relatedProduct.unit || &quot;kg&quot;} left`&#13;&#10;                                    : &quot;Out of stock&quot;}&#13;&#10;                                &lt;/div&gt;&#13;&#10;                              &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;&#13;&#10;                            {/* Action Button */}&#13;&#10;                            &lt;Link&#13;&#10;                              href={`/details?id=${relatedProduct._id}`}&#13;&#10;                              className=&quot;w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-center block group-hover:shadow-lg transform group-hover:scale-[1.02]&quot;&#13;&#10;                            &gt;&#13;&#10;                              &lt;i className=&quot;fas fa-eye mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                              View Product&#13;&#10;                            &lt;/Link&gt;&#13;&#10;                          &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    ))}&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {/* Browse More Section */}&#13;&#10;                  &lt;div className=&quot;mt-12 text-center&quot;&gt;&#13;&#10;                    &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-8&quot;&gt;&#13;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#13;&#10;                        Looking for more products?&#13;&#10;                      &lt;/p&gt;&#13;&#10;                      &lt;Link&#13;&#10;                        href=&quot;/products&quot;&#13;&#10;                        className=&quot;inline-flex items-center bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300&quot;&#13;&#10;                      &gt;&#13;&#10;                        &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;                        Browse All Products&#13;&#10;                        &lt;i className=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;&#13;&#10;                      &lt;/Link&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              )}&#13;&#10;            &lt;/&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;      &lt;Footer /&gt;&#13;&#10;    &lt;/&gt;&#13;&#10;  );&#13;&#10;}&#13;&#10;&#13;&#10;export default function ProductDetails() {&#13;&#10;  return (&#13;&#10;    &lt;Suspense fallback={&lt;div&gt;Loading product details...&lt;/div&gt;}&gt;&#13;&#10;      &lt;ProductDetailsContent /&gt;&#13;&#10;    &lt;/Suspense&gt;&#13;&#10;  );&#13;&#10;}&#13;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/farmer-dashboard/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/farmer-dashboard/page.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        City&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.city}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;city&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        State/Province&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.state}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;state&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        ZIP/Postal Code&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.zipCode}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;zipCode&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Country&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={farmerData.contactInfo.address.country}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;country&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;&quot;&gt;Select Country&lt;/option&gt;&#10;                        &lt;option value=&quot;US&quot;&gt;United States&lt;/option&gt;&#10;                        &lt;option value=&quot;CA&quot;&gt;Canada&lt;/option&gt;&#10;                        &lt;option value=&quot;UK&quot;&gt;United Kingdom&lt;/option&gt;&#10;                        &lt;option value=&quot;AU&quot;&gt;Australia&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handleSaveChanges(&quot;contactInfo&quot;)}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Contact Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Settings Tab */}&#10;            {activeTab === &quot;settings&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Settings&#10;                &lt;/h3&gt;&#10;&#10;                {/* Notification Settings */}&#10;                &lt;div&gt;&#10;                  &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Notification Preferences&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.orderAlerts}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;orderAlerts&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        New order alerts&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.lowStockAlerts}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;lowStockAlerts&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Low stock alerts&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.customerMessages}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;customerMessages&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Customer messages&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.marketingUpdates}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;marketingUpdates&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Marketing updates&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Business Settings */}&#10;                &lt;div&gt;&#10;                  &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Business Settings&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.autoAcceptOrders}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;&quot;, &quot;autoAcceptOrders&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Auto-accept orders&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.showFarmLocation}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;&quot;, &quot;showFarmLocation&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Show farm location to customers&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handleSaveChanges(&quot;settings&quot;)}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Settings&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/forgot-password/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/forgot-password/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ForgotPassword() {&#10;  const [email, setEmail] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [success, setSuccess] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/auth/forgot-password&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ email }),&#10;      });&#10;&#10;      const data = await response.json();&#10;&#10;      if (response.ok) {&#10;        setSuccess(true);&#10;      } else {&#10;        setError(data.error || &quot;Failed to send reset email&quot;);&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;An error occurred. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;flex justify-center mb-6&quot;&gt;&#10;              &lt;div className=&quot;bg-green-500 p-3 rounded-full&quot;&gt;&#10;                &lt;i className=&quot;fas fa-key text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {success ? &quot;Check Your Email&quot; : &quot;Reset your password&quot;}&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;              {success&#10;                ? &quot;We've sent a password reset link to your email address&quot;&#10;                : &quot;Enter your email address and we'll send you a link to reset your password&quot;}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Reset Password Form */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;            {success ? (&#10;              &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;                &lt;div className=&quot;bg-green-50 dark:bg-green-900 border border-green-200 dark:border-green-700 rounded-lg p-4&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-check-circle text-green-500 mr-3 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-green-800 dark:text-green-200 font-medium&quot;&gt;&#10;                        Email sent successfully!&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-green-700 dark:text-green-300 text-sm mt-1&quot;&gt;&#10;                        Check your email for password reset instructions.&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Didn't receive the email? Check your spam folder or try again.&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; {&#10;                      setSuccess(false);&#10;                      setEmail(&quot;&quot;);&#10;                    }}&#10;                    className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                  &gt;&#10;                    Send Again&#10;                  &lt;/button&gt;&#10;                  &lt;Link&#10;                    href=&quot;/login&quot;&#10;                    className=&quot;flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-center&quot;&#10;                  &gt;&#10;                    Back to Login&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                {error &amp;&amp; (&#10;                  &lt;div className=&quot;bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-exclamation-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                    {error}&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;form onSubmit={handleSubmit} className=&quot;space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label&#10;                      htmlFor=&quot;email&quot;&#10;                      className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                    &gt;&#10;                      Email Address&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        id=&quot;email&quot;&#10;                        name=&quot;email&quot;&#10;                        type=&quot;email&quot;&#10;                        autoComplete=&quot;email&quot;&#10;                        required&#10;                        value={email}&#10;                        onChange={(e) =&gt; setEmail(e.target.value)}&#10;                        className=&quot;w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;john@example.com&quot;&#10;                      /&gt;&#10;                      &lt;i className=&quot;fas fa-envelope absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;button&#10;                    type=&quot;submit&quot;&#10;                    disabled={loading}&#10;                    className=&quot;w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition duration-200 transform hover:scale-105 disabled:opacity-50&quot;&#10;                  &gt;&#10;                    {loading ? (&#10;                      &lt;&gt;&#10;                        &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        Sending...&#10;                      &lt;/&gt;&#10;                    ) : (&#10;                      &lt;&gt;&#10;                        &lt;i className=&quot;fas fa-paper-plane mr-2&quot;&gt;&lt;/i&gt;&#10;                        Send Reset Link&#10;                      &lt;/&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                &lt;/form&gt;&#10;&#10;                {/* Back to Login Link */}&#10;                &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;                  &lt;Link&#10;                    href=&quot;/login&quot;&#10;                    className=&quot;inline-flex items-center text-sm text-green-600 hover:text-green-500 dark:text-green-400 dark:hover:text-green-300&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                    Back to login&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Additional Help */}&#10;          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900 p-4 rounded-lg&quot;&gt;&#10;            &lt;h3 className=&quot;text-sm font-medium text-blue-800 dark:text-blue-200 mb-2&quot;&gt;&#10;              &lt;i className=&quot;fas fa-info-circle mr-2&quot;&gt;&lt;/i&gt;&#10;              Need help?&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;text-xs text-blue-700 dark:text-blue-300 space-y-1&quot;&gt;&#10;              &lt;p&gt;&#10;                • Check your spam/junk folder if you don&amp;apos;t receive the&#10;                email&#10;              &lt;/p&gt;&#10;              &lt;p&gt;• Make sure you entered the correct email address&lt;/p&gt;&#10;              &lt;p&gt;• Contact support if you continue having issues&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ForgotPassword() {&#10;  const [email, setEmail] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [success, setSuccess] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/auth/forgot-password&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ email }),&#10;      });&#10;&#10;      const data = await response.json();&#10;&#10;      if (response.ok) {&#10;        setSuccess(true);&#10;      } else {&#10;        setError(data.error || &quot;Failed to send reset email&quot;);&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;An error occurred. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;flex justify-center mb-6&quot;&gt;&#10;              &lt;div className=&quot;bg-green-500 p-3 rounded-full&quot;&gt;&#10;                &lt;i className=&quot;fas fa-key text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              {success ? &quot;Check Your Email&quot; : &quot;Reset your password&quot;}&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;              {success&#10;                ? &quot;We've sent a password reset link to your email address&quot;&#10;                : &quot;Enter your email address and we'll send you a link to reset your password&quot;}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Reset Password Form */}&#10;          &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;            {success ? (&#10;              &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;                &lt;div className=&quot;bg-green-50 dark:bg-green-900 border border-green-200 dark:border-green-700 rounded-lg p-4&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-check-circle text-green-500 mr-3 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-green-800 dark:text-green-200 font-medium&quot;&gt;&#10;                        Email sent successfully!&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-green-700 dark:text-green-300 text-sm mt-1&quot;&gt;&#10;                        Check your email for password reset instructions.&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Didn&amp;apos;t receive the email? Check your spam folder or try again.&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; {&#10;                      setSuccess(false);&#10;                      setEmail(&quot;&quot;);&#10;                    }}&#10;                    className=&quot;flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                  &gt;&#10;                    Send Again&#10;                  &lt;/button&gt;&#10;                  &lt;Link&#10;                    href=&quot;/login&quot;&#10;                    className=&quot;flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-center&quot;&#10;                  &gt;&#10;                    Back to Login&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                {error &amp;&amp; (&#10;                  &lt;div className=&quot;bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-exclamation-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                    {error}&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;form onSubmit={handleSubmit} className=&quot;space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label&#10;                      htmlFor=&quot;email&quot;&#10;                      className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;                    &gt;&#10;                      Email Address&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        id=&quot;email&quot;&#10;                        name=&quot;email&quot;&#10;                        type=&quot;email&quot;&#10;                        autoComplete=&quot;email&quot;&#10;                        required&#10;                        value={email}&#10;                        onChange={(e) =&gt; setEmail(e.target.value)}&#10;                        className=&quot;w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 dark:bg-gray-700 dark:text-white&quot;&#10;                        placeholder=&quot;john@example.com&quot;&#10;                      /&gt;&#10;                      &lt;i className=&quot;fas fa-envelope absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;button&#10;                    type=&quot;submit&quot;&#10;                    disabled={loading}&#10;                    className=&quot;w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition duration-200 transform hover:scale-105 disabled:opacity-50&quot;&#10;                  &gt;&#10;                    {loading ? (&#10;                      &lt;&gt;&#10;                        &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                        Sending...&#10;                      &lt;/&gt;&#10;                    ) : (&#10;                      &lt;&gt;&#10;                        &lt;i className=&quot;fas fa-paper-plane mr-2&quot;&gt;&lt;/i&gt;&#10;                        Send Reset Link&#10;                      &lt;/&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                &lt;/form&gt;&#10;&#10;                {/* Back to Login Link */}&#10;                &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;                  &lt;Link&#10;                    href=&quot;/login&quot;&#10;                    className=&quot;inline-flex items-center text-sm text-green-600 hover:text-green-500 dark:text-green-400 dark:hover:text-green-300&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;                    Back to login&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Additional Help */}&#10;          &lt;div className=&quot;bg-blue-50 dark:bg-blue-900 p-4 rounded-lg&quot;&gt;&#10;            &lt;h3 className=&quot;text-sm font-medium text-blue-800 dark:text-blue-200 mb-2&quot;&gt;&#10;              &lt;i className=&quot;fas fa-info-circle mr-2&quot;&gt;&lt;/i&gt;&#10;              Need help?&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;text-xs text-blue-700 dark:text-blue-300 space-y-1&quot;&gt;&#10;              &lt;p&gt;&#10;                • Check your spam/junk folder if you don&amp;apos;t receive the&#10;                email&#10;              &lt;/p&gt;&#10;              &lt;p&gt;• Make sure you entered the correct email address&lt;/p&gt;&#10;              &lt;p&gt;• Contact support if you continue having issues&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/layout.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/layout.js" />
              <option name="originalContent" value="import localFont from &quot;next/font/local&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Providers from &quot;@/providers/Providers&quot;;&#10;import Navigation from &quot;@/components/Navigation&quot;;&#10;&#10;const geistSans = localFont({&#10;  src: &quot;./fonts/GeistVF.woff&quot;,&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;const geistMono = localFont({&#10;  src: &quot;./fonts/GeistMonoVF.woff&quot;,&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;&#10;export const metadata = {&#10;  title: &quot;FarmFresh - Local Farmer Booking&quot;,&#10;  description: &quot;Fresh Produce Direct from Farmers&quot;,&#10;};&#10;&#10;export default function RootLayout({ children, modal }) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot; className=&quot;scroll-smooth&quot;&gt;&#10;      &lt;head&gt;&#10;        &lt;link&#10;          href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&#10;          rel=&quot;stylesheet&quot;&#10;        /&gt;&#10;        {/* Blocking script to prevent flash of wrong theme */}&#10;        &lt;script&#10;          dangerouslySetInnerHTML={{&#10;            __html: `&#10;              (function() {&#10;                try {&#10;                  const savedTheme = localStorage.getItem('theme');&#10;                  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;&#10;                  &#10;                  if (savedTheme === 'dark' || (!savedTheme &amp;&amp; prefersDark)) {&#10;                    document.documentElement.classList.add('dark');&#10;                  }&#10;                } catch (e) {&#10;                  // Fallback to system preference on error&#10;                  try {&#10;                    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {&#10;                      document.documentElement.classList.add('dark');&#10;                    }&#10;                  } catch (e2) {&#10;                    // Do nothing if matchMedia is not supported&#10;                  }&#10;                }&#10;              })();&#10;            `,&#10;          }}&#10;        /&gt;&#10;      &lt;/head&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300`}&#10;      &gt;&#10;        &lt;Providers&gt;&#10;          &lt;Navigation /&gt;&#10;          {children}&#10;          {modal}&#10;        &lt;/Providers&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import localFont from &quot;next/font/local&quot;;&#10;import &quot;./globals.css&quot;;&#10;import Providers from &quot;@/providers/Providers&quot;;&#10;import Navigation from &quot;@/components/Navigation&quot;;&#10;&#10;const geistSans = localFont({&#10;  src: &quot;./fonts/GeistVF.woff&quot;,&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;const geistMono = localFont({&#10;  src: &quot;./fonts/GeistMonoVF.woff&quot;,&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  weight: &quot;100 900&quot;,&#10;});&#10;&#10;export const metadata = {&#10;  title: &quot;FarmFresh - Local Farmer Booking&quot;,&#10;  description: &quot;Fresh Produce Direct from Farmers&quot;,&#10;};&#10;&#10;export default function RootLayout({ children, modal }) {&#10;  return (&#10;    &lt;html lang=&quot;en&quot; className=&quot;scroll-smooth&quot; suppressHydrationWarning&gt;&#10;      &lt;head&gt;&#10;        &lt;link&#10;          href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&#10;          rel=&quot;stylesheet&quot;&#10;        /&gt;&#10;        {/* Blocking script to prevent flash of wrong theme */}&#10;        &lt;script&#10;          dangerouslySetInnerHTML={{&#10;            __html: `&#10;              (function() {&#10;                try {&#10;                  const savedTheme = localStorage.getItem('theme');&#10;                  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;&#10;                  &#10;                  if (savedTheme === 'dark' || (!savedTheme &amp;&amp; prefersDark)) {&#10;                    document.documentElement.classList.add('dark');&#10;                  }&#10;                } catch (e) {&#10;                  // Fallback to system preference on error&#10;                  try {&#10;                    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {&#10;                      document.documentElement.classList.add('dark');&#10;                    }&#10;                  } catch (e2) {&#10;                    // Do nothing if matchMedia is not supported&#10;                  }&#10;                }&#10;              })();&#10;            `,&#10;          }}&#10;        /&gt;&#10;      &lt;/head&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300`}&#10;      &gt;&#10;        &lt;Providers&gt;&#10;          &lt;Navigation /&gt;&#10;          {children}&#10;          {modal}&#10;        &lt;/Providers&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/login/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/login/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, Suspense } from &quot;react&quot;;&#10;import { useRouter, useSearchParams } from &quot;next/navigation&quot;;&#10;import { signIn } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;// Component that uses useSearchParams - must be wrapped in Suspense&#10;function LoginForm() {&#10;  const router = useRouter();&#10;  const searchParams = useSearchParams();&#10;  const [formData, setFormData] = useState({ email: &quot;&quot;, password: &quot;&quot; });&#10;  const [loading, setLoading] = useState(false);&#10;  const [googleLoading, setGoogleLoading] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [successMessage, setSuccessMessage] = useState(&quot;&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;    // Check for registration success message or auth errors&#10;    const message = searchParams.get(&quot;message&quot;);&#10;    const authError = searchParams.get(&quot;error&quot;);&#10;&#10;    if (message) {&#10;      setSuccessMessage(message);&#10;    }&#10;&#10;    if (authError) {&#10;      switch (authError) {&#10;        case &quot;OAuthAccountNotLinked&quot;:&#10;          setError(&#10;            &quot;This email is already registered with a different sign-in method. Please sign in with your original method or contact support.&quot;,&#10;          );&#10;          break;&#10;        case &quot;OAuthSignin&quot;:&#10;          setError(&quot;There was an error with Google sign-in. Please try again.&quot;);&#10;          break;&#10;        case &quot;OAuthCallback&quot;:&#10;          setError(&#10;            &quot;There was an error during authentication. Please try again.&quot;,&#10;          );&#10;          break;&#10;        case &quot;OAuthCreateAccount&quot;:&#10;          setError(&quot;Could not create account. Please try again.&quot;);&#10;          break;&#10;        case &quot;EmailCreateAccount&quot;:&#10;          setError(&quot;Could not create account with this email.&quot;);&#10;          break;&#10;        case &quot;Callback&quot;:&#10;          setError(&quot;Authentication callback error. Please try again.&quot;);&#10;          break;&#10;        default:&#10;          setError(&quot;An authentication error occurred. Please try again.&quot;);&#10;      }&#10;&#10;      // Clear the error from URL&#10;      const newUrl = window.location.pathname;&#10;      window.history.replaceState({}, &quot;&quot;, newUrl);&#10;    }&#10;&#10;    if (message &amp;&amp; !authError) {&#10;      // Clear the URL parameter after showing the message&#10;      const newUrl = window.location.pathname;&#10;      window.history.replaceState({}, &quot;&quot;, newUrl);&#10;    }&#10;  }, [searchParams]);&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    setSuccessMessage(&quot;&quot;); // Clear success message when attempting login&#10;&#10;    try {&#10;      const result = await signIn(&quot;credentials&quot;, {&#10;        email: formData.email,&#10;        password: formData.password,&#10;        redirect: false,&#10;      });&#10;&#10;      if (result?.error) {&#10;        setError(&quot;Invalid email or password&quot;);&#10;      } else {&#10;        // Redirect to home page after successful login&#10;        router.push(&quot;/&quot;);&#10;        router.refresh();&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;An error occurred. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleGoogleSignIn = async () =&gt; {&#10;    setGoogleLoading(true);&#10;    setError(&quot;&quot;);&#10;    setSuccessMessage(&quot;&quot;);&#10;&#10;    try {&#10;      const result = await signIn(&quot;google&quot;, {&#10;        callbackUrl: &quot;/&quot;,&#10;        redirect: false,&#10;      });&#10;&#10;      if (result?.error) {&#10;        setError(&quot;Google sign-in failed. Please try again.&quot;);&#10;      } else if (result?.ok) {&#10;        router.push(&quot;/&quot;);&#10;        router.refresh();&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;Google sign-in failed. Please try again.&quot;);&#10;    } finally {&#10;      setGoogleLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;      {error &amp;&amp; (&#10;        &lt;div className=&quot;bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;          {error}&#10;        &lt;/div&gt;&#10;      )}&#10;      {successMessage &amp;&amp; (&#10;        &lt;div className=&quot;bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;          {successMessage}&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-6&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;label&#10;            htmlFor=&quot;email&quot;&#10;            className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;          &gt;&#10;            Email Address&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              id=&quot;email&quot;&#10;              name=&quot;email&quot;&#10;              type=&quot;email&quot;&#10;              required&#10;              value={formData.email}&#10;              onChange={(e) =&gt;&#10;                setFormData({ ...formData, email: e.target.value })&#10;              }&#10;              className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;              placeholder=&quot;john@example.com&quot;&#10;            /&gt;&#10;            &lt;i className=&quot;fas fa-envelope absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div&gt;&#10;          &lt;label&#10;            htmlFor=&quot;password&quot;&#10;            className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;          &gt;&#10;            Password&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              id=&quot;password&quot;&#10;              name=&quot;password&quot;&#10;              type=&quot;password&quot;&#10;              required&#10;              value={formData.password}&#10;              onChange={(e) =&gt;&#10;                setFormData({ ...formData, password: e.target.value })&#10;              }&#10;              className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;              placeholder=&quot;••••••••&quot;&#10;            /&gt;&#10;            &lt;i className=&quot;fas fa-lock absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;label className=&quot;flex items-center&quot;&gt;&#10;            &lt;input&#10;              type=&quot;checkbox&quot;&#10;              className=&quot;h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded&quot;&#10;            /&gt;&#10;            &lt;span className=&quot;ml-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;              Remember me&#10;            &lt;/span&gt;&#10;          &lt;/label&gt;&#10;          &lt;Link&#10;            href=&quot;/forgot-password&quot;&#10;            className=&quot;text-sm text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300&quot;&#10;          &gt;&#10;            Forgot password?&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          disabled={loading}&#10;          className=&quot;w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg font-medium transition duration-200 transform hover:scale-105 disabled:opacity-50&quot;&#10;        &gt;&#10;          {loading ? (&#10;            &lt;&gt;&#10;              &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;              Signing in...&#10;            &lt;/&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;i className=&quot;fas fa-sign-in-alt mr-2&quot;&gt;&lt;/i&gt;&#10;              Sign In&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/button&gt;&#10;      &lt;/form&gt;&#10;&#10;      {/* Divider */}&#10;      &lt;div className=&quot;my-6&quot;&gt;&#10;        &lt;div className=&quot;relative&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;&#10;            &lt;div className=&quot;w-full border-t border-gray-300 dark:border-gray-600&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;&#10;            &lt;span className=&quot;px-2 bg-white dark:bg-gray-800 text-gray-500&quot;&gt;&#10;              Or continue with&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Google Sign In */}&#10;      &lt;button&#10;        type=&quot;button&quot;&#10;        onClick={handleGoogleSignIn}&#10;        disabled={googleLoading}&#10;        className=&quot;w-full bg-white border border-gray-300 dark:border-gray-600 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-3 px-4 rounded-lg font-medium hover:bg-gray-50 dark:hover:bg-gray-600 transition duration-200 disabled:opacity-50&quot;&#10;      &gt;&#10;        {googleLoading ? (&#10;          &lt;&gt;&#10;            &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;            Signing in with Google...&#10;          &lt;/&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;i className=&quot;fab fa-google mr-2 text-red-500&quot;&gt;&lt;/i&gt;&#10;            Continue with Google&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/button&gt;&#10;&#10;      {/* Sign Up Link */}&#10;      &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;          Don&amp;apos;t have an account?{&quot; &quot;}&#10;          &lt;Link&#10;            href=&quot;/register&quot;&#10;            className=&quot;font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300&quot;&#10;          &gt;&#10;            Sign up here&#10;          &lt;/Link&gt;&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;// Loading component for Suspense fallback&#10;function LoginFormSkeleton() {&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;      &lt;div className=&quot;space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;        &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default function Login() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;flex justify-center mb-6&quot;&gt;&#10;              &lt;div className=&quot;bg-primary-500 p-3 rounded-full&quot;&gt;&#10;                &lt;i className=&quot;fas fa-seedling text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              Welcome back&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;              Sign in to your FarmFresh account&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Login Form wrapped in Suspense */}&#10;          &lt;Suspense fallback={&lt;LoginFormSkeleton /&gt;}&gt;&#10;            &lt;LoginForm /&gt;&#10;          &lt;/Suspense&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, Suspense } from &quot;react&quot;;&#10;import { useRouter, useSearchParams } from &quot;next/navigation&quot;;&#10;import { signIn } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;// Force dynamic rendering for this page&#10;export const dynamic = 'force-dynamic';&#10;&#10;// Component that uses useSearchParams - must be wrapped in Suspense&#10;function LoginForm() {&#10;  const router = useRouter();&#10;  const searchParams = useSearchParams();&#10;  const [formData, setFormData] = useState({ email: &quot;&quot;, password: &quot;&quot; });&#10;  const [loading, setLoading] = useState(false);&#10;  const [googleLoading, setGoogleLoading] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [successMessage, setSuccessMessage] = useState(&quot;&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;    // Check for registration success message or auth errors&#10;    const message = searchParams.get(&quot;message&quot;);&#10;    const authError = searchParams.get(&quot;error&quot;);&#10;&#10;    if (message) {&#10;      setSuccessMessage(message);&#10;    }&#10;&#10;    if (authError) {&#10;      switch (authError) {&#10;        case &quot;OAuthAccountNotLinked&quot;:&#10;          setError(&#10;            &quot;This email is already registered with a different sign-in method. Please sign in with your original method or contact support.&quot;,&#10;          );&#10;          break;&#10;        case &quot;OAuthSignin&quot;:&#10;          setError(&quot;There was an error with Google sign-in. Please try again.&quot;);&#10;          break;&#10;        case &quot;OAuthCallback&quot;:&#10;          setError(&#10;            &quot;There was an error during authentication. Please try again.&quot;,&#10;          );&#10;          break;&#10;        case &quot;OAuthCreateAccount&quot;:&#10;          setError(&quot;Could not create account. Please try again.&quot;);&#10;          break;&#10;        case &quot;EmailCreateAccount&quot;:&#10;          setError(&quot;Could not create account with this email.&quot;);&#10;          break;&#10;        case &quot;Callback&quot;:&#10;          setError(&quot;Authentication callback error. Please try again.&quot;);&#10;          break;&#10;        default:&#10;          setError(&quot;An authentication error occurred. Please try again.&quot;);&#10;      }&#10;&#10;      // Clear the error from URL&#10;      const newUrl = window.location.pathname;&#10;      window.history.replaceState({}, &quot;&quot;, newUrl);&#10;    }&#10;&#10;    if (message &amp;&amp; !authError) {&#10;      // Clear the URL parameter after showing the message&#10;      const newUrl = window.location.pathname;&#10;      window.history.replaceState({}, &quot;&quot;, newUrl);&#10;    }&#10;  }, [searchParams]);&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    setSuccessMessage(&quot;&quot;); // Clear success message when attempting login&#10;&#10;    try {&#10;      const result = await signIn(&quot;credentials&quot;, {&#10;        email: formData.email,&#10;        password: formData.password,&#10;        redirect: false,&#10;      });&#10;&#10;      if (result?.error) {&#10;        setError(&quot;Invalid email or password&quot;);&#10;      } else {&#10;        // Redirect to home page after successful login&#10;        router.push(&quot;/&quot;);&#10;        router.refresh();&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;An error occurred. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleGoogleSignIn = async () =&gt; {&#10;    setGoogleLoading(true);&#10;    setError(&quot;&quot;);&#10;    setSuccessMessage(&quot;&quot;);&#10;&#10;    try {&#10;      const result = await signIn(&quot;google&quot;, {&#10;        callbackUrl: &quot;/&quot;,&#10;        redirect: false,&#10;      });&#10;&#10;      if (result?.error) {&#10;        setError(&quot;Google sign-in failed. Please try again.&quot;);&#10;      } else if (result?.ok) {&#10;        router.push(&quot;/&quot;);&#10;        router.refresh();&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;Google sign-in failed. Please try again.&quot;);&#10;    } finally {&#10;      setGoogleLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;      {error &amp;&amp; (&#10;        &lt;div className=&quot;bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;          {error}&#10;        &lt;/div&gt;&#10;      )}&#10;      {successMessage &amp;&amp; (&#10;        &lt;div className=&quot;bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;          {successMessage}&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-6&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;label&#10;            htmlFor=&quot;email&quot;&#10;            className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;          &gt;&#10;            Email Address&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              id=&quot;email&quot;&#10;              name=&quot;email&quot;&#10;              type=&quot;email&quot;&#10;              required&#10;              value={formData.email}&#10;              onChange={(e) =&gt;&#10;                setFormData({ ...formData, email: e.target.value })&#10;              }&#10;              className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;              placeholder=&quot;john@example.com&quot;&#10;            /&gt;&#10;            &lt;i className=&quot;fas fa-envelope absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div&gt;&#10;          &lt;label&#10;            htmlFor=&quot;password&quot;&#10;            className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&#10;          &gt;&#10;            Password&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              id=&quot;password&quot;&#10;              name=&quot;password&quot;&#10;              type=&quot;password&quot;&#10;              required&#10;              value={formData.password}&#10;              onChange={(e) =&gt;&#10;                setFormData({ ...formData, password: e.target.value })&#10;              }&#10;              className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;              placeholder=&quot;••••••••&quot;&#10;            /&gt;&#10;            &lt;i className=&quot;fas fa-lock absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;label className=&quot;flex items-center&quot;&gt;&#10;            &lt;input&#10;              type=&quot;checkbox&quot;&#10;              className=&quot;h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded&quot;&#10;            /&gt;&#10;            &lt;span className=&quot;ml-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;              Remember me&#10;            &lt;/span&gt;&#10;          &lt;/label&gt;&#10;          &lt;Link&#10;            href=&quot;/forgot-password&quot;&#10;            className=&quot;text-sm text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300&quot;&#10;          &gt;&#10;            Forgot password?&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          disabled={loading}&#10;          className=&quot;w-full bg-primary-600 hover:bg-primary-700 text-white py-3 px-4 rounded-lg font-medium transition duration-200 transform hover:scale-105 disabled:opacity-50&quot;&#10;        &gt;&#10;          {loading ? (&#10;            &lt;&gt;&#10;              &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;              Signing in...&#10;            &lt;/&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;i className=&quot;fas fa-sign-in-alt mr-2&quot;&gt;&lt;/i&gt;&#10;              Sign In&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/button&gt;&#10;      &lt;/form&gt;&#10;&#10;      {/* Divider */}&#10;      &lt;div className=&quot;my-6&quot;&gt;&#10;        &lt;div className=&quot;relative&quot;&gt;&#10;          &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;&#10;            &lt;div className=&quot;w-full border-t border-gray-300 dark:border-gray-600&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;&#10;            &lt;span className=&quot;px-2 bg-white dark:bg-gray-800 text-gray-500&quot;&gt;&#10;              Or continue with&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Google Sign In */}&#10;      &lt;button&#10;        type=&quot;button&quot;&#10;        onClick={handleGoogleSignIn}&#10;        disabled={googleLoading}&#10;        className=&quot;w-full bg-white border border-gray-300 dark:border-gray-600 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-3 px-4 rounded-lg font-medium hover:bg-gray-50 dark:hover:bg-gray-600 transition duration-200 disabled:opacity-50&quot;&#10;      &gt;&#10;        {googleLoading ? (&#10;          &lt;&gt;&#10;            &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;            Signing in with Google...&#10;          &lt;/&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;i className=&quot;fab fa-google mr-2 text-red-500&quot;&gt;&lt;/i&gt;&#10;            Continue with Google&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/button&gt;&#10;&#10;      {/* Sign Up Link */}&#10;      &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;          Don&amp;apos;t have an account?{&quot; &quot;}&#10;          &lt;Link&#10;            href=&quot;/register&quot;&#10;            className=&quot;font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300&quot;&#10;          &gt;&#10;            Sign up here&#10;          &lt;/Link&gt;&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;// Loading component for Suspense fallback&#10;function LoginFormSkeleton() {&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;      &lt;div className=&quot;space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;        &lt;div className=&quot;h-12 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default function Login() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;div className=&quot;flex justify-center mb-6&quot;&gt;&#10;              &lt;div className=&quot;bg-primary-500 p-3 rounded-full&quot;&gt;&#10;                &lt;i className=&quot;fas fa-seedling text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;              Welcome back&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;              Sign in to your FarmFresh account&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Login Form wrapped in Suspense */}&#10;          &lt;Suspense fallback={&lt;LoginFormSkeleton /&gt;}&gt;&#10;            &lt;LoginForm /&gt;&#10;          &lt;/Suspense&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/products/page-simple.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/products/page-simple.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 pt-20&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;text-center py-12&quot;&gt;&#10;            &lt;p className=&quot;text-red-600&quot;&gt;Error loading products: {error.message}&lt;/p&gt;&#10;            &lt;button&#10;              onClick={() =&gt; refetchProducts()}&#10;              className=&quot;mt-4 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600&quot;&#10;            &gt;&#10;              Try Again&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 pt-20&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;py-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-2&quot;&gt;All Products&lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;&#10;            Showing {displayProducts.length} products (sorted by newest first)&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={() =&gt; {&#10;              console.log(&quot; Manual refresh triggered&quot;);&#10;              productsCache.invalidateProducts();&#10;            }}&#10;            className=&quot;mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600&quot;&#10;          &gt;&#10;            Refresh Products&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Products Grid */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 pb-12&quot;&gt;&#10;          {displayProducts.map((product) =&gt; (&#10;            &lt;ProductCard key={product._id} product={product} /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {displayProducts.length === 0 &amp;&amp; (&#10;          &lt;div className=&quot;text-center py-12&quot;&gt;&#10;            &lt;p className=&quot;text-gray-500 text-lg&quot;&gt;No products available&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/products/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/products/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo, useCallback, Suspense } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;../../components/ProductCard&quot;;&#10;import Loading from &quot;../../components/Loading&quot;;&#10;import Footer from &quot;../../components/Footer&quot;;&#10;import { useUnifiedProductsData } from &quot;../../hooks/useUnifiedProductsData&quot;;&#10;import { useFarmersQuery } from &quot;../../hooks/useFarmersQuery&quot;;&#10;import { debounce } from &quot;../../utils/debounce&quot;;&#10;&#10;// Force dynamic rendering for this page&#10;export const dynamic = &quot;force-dynamic&quot;;&#10;&#10;// Component that uses useSearchParams - must be wrapped in Suspense&#10;function ProductsContent() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;&#10;  // Move constants outside component to prevent recreations&#10;  const CATEGORY_OPTIONS = [&#10;    &quot;All Categories&quot;,&#10;    &quot;Vegetables&quot;,&#10;    &quot;Fruits&quot;,&#10;    &quot;Grains&quot;,&#10;    &quot;Dairy&quot;,&#10;    &quot;Honey&quot;,&#10;    &quot;Herbs&quot;,&#10;  ];&#10;&#10;  const PRICE_RANGE_OPTIONS = [&#10;    { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;    { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;    { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;    { label: &quot;৳200 - ���500&quot;, min: 201, max: 500 },&#10;    { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;  ];&#10;&#10;  const TAG_OPTIONS = [&#10;    &quot;Organic&quot;,&#10;    &quot;Fresh&quot;,&#10;    &quot;Local&quot;,&#10;    &quot;Premium&quot;,&#10;    &quot;Seasonal&quot;,&#10;    &quot;Limited Stock&quot;,&#10;  ];&#10;&#10;  const ITEMS_PER_PAGE = 12;&#10;&#10;  // Filter states - Initialize from URL params&#10;  const [filters, setFilters] = useState(() =&gt; ({&#10;    searchTerm: searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;    selectedCategory: searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;    selectedPriceRanges: searchParams.get(&quot;priceRanges&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedRatings: searchParams.get(&quot;ratings&quot;)?.split(&quot;,&quot;).map(Number) || [],&#10;    selectedFarmers: searchParams.get(&quot;farmers&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedTags: searchParams.get(&quot;tags&quot;)?.split(&quot;,&quot;) || [],&#10;    priceRangeSlider: [&#10;      Number(searchParams.get(&quot;minPrice&quot;)) || 0,&#10;      Number(searchParams.get(&quot;maxPrice&quot;)) || 10000,&#10;    ],&#10;    sortBy: searchParams.get(&quot;sort&quot;) || &quot;newest&quot;,&#10;  }));&#10;&#10;  const [currentPage, setCurrentPage] = useState(&#10;    Number(searchParams.get(&quot;page&quot;)) || 1,&#10;  );&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;&#10;  // Use unified products data hook with same caching mechanism as dashboard&#10;  const {&#10;    products: allProducts,&#10;    isLoading: loading,&#10;    error,&#10;    refetch: refetchProducts,&#10;    refreshProducts,&#10;  } = useUnifiedProductsData(filters);&#10;&#10;  // Use React Query for farmers data&#10;  const { data: farmersData } = useFarmersQuery();&#10;&#10;  // Extract products and farmers from React Query data&#10;  const availableFarmers = useMemo(() =&gt; {&#10;    // Get farmers from the dedicated farmers query instead of product data&#10;    const farmers = farmersData?.farmers || [];&#10;&#10;    // Get unique farmer names from the farmers collection (fresh data)&#10;    const farmerNames = farmers&#10;      .map((farmer) =&gt; farmer.name)&#10;      .filter(Boolean)&#10;      .sort();&#10;&#10;    return farmerNames;&#10;  }, [farmersData]);&#10;&#10;  // Create a farmer lookup map for quick access&#10;  const farmerLookup = useMemo(() =&gt; {&#10;    const farmers = farmersData?.farmers || [];&#10;    const lookup = new Map();&#10;&#10;    // Create lookup by ID&#10;    farmers.forEach((farmer) =&gt; {&#10;      if (farmer._id) lookup.set(farmer._id, farmer);&#10;    });&#10;&#10;    // Also create lookup by email for additional matching&#10;    farmers.forEach((farmer) =&gt; {&#10;      if (farmer.email) lookup.set(farmer.email, farmer);&#10;    });&#10;&#10;    return lookup;&#10;  }, [farmersData]);&#10;&#10;  // Enhance products with fresh farmer data&#10;  const enhancedProducts = useMemo(() =&gt; {&#10;    return allProducts.map((product) =&gt; {&#10;      // Get all possible farmer identifiers from product&#10;      const productFarmerId =&#10;        product.farmer?.id || product.farmer?._id || product.farmerId;&#10;      const productFarmerEmail = product.farmer?.email || product.farmerEmail;&#10;      const productFarmerName = product.farmer?.name || product.farmerName;&#10;&#10;      // Look up fresh farmer data by ID first (most reliable)&#10;      let freshFarmer = null;&#10;      if (productFarmerId) {&#10;        freshFarmer = farmerLookup.get(productFarmerId);&#10;      }&#10;&#10;      // If no match by ID, try email&#10;      if (!freshFarmer &amp;&amp; productFarmerEmail) {&#10;        freshFarmer = farmerLookup.get(productFarmerEmail);&#10;      }&#10;&#10;      // If no match by ID or email, try finding by name (least reliable but necessary fallback)&#10;      if (!freshFarmer &amp;&amp; productFarmerName) {&#10;        const farmers = farmersData?.farmers || [];&#10;        freshFarmer = farmers.find(&#10;          (farmer) =&gt; farmer.name === productFarmerName,&#10;        );&#10;      }&#10;&#10;      // If we found fresh farmer data, enhance the product; otherwise keep original&#10;      if (freshFarmer) {&#10;        return {&#10;          ...product,&#10;          farmer: {&#10;            ...product.farmer,&#10;            name: freshFarmer.name,&#10;            email: freshFarmer.email,&#10;            phone: freshFarmer.phone,&#10;            id: freshFarmer._id,&#10;            _id: freshFarmer._id,&#10;          },&#10;          farmerName: freshFarmer.name,&#10;          farmerEmail: freshFarmer.email,&#10;          farmerId: freshFarmer._id, // Ensure farmerId is set&#10;        };&#10;      }&#10;&#10;      // No fresh farmer data found, return product with normalized farmer info&#10;      return {&#10;        ...product,&#10;        // Ensure farmerName is always available for display&#10;        farmerName:&#10;          productFarmerName ||&#10;          (typeof product.farmer === &quot;string&quot;&#10;            ? product.farmer&#10;            : &quot;Unknown Farmer&quot;),&#10;      };&#10;    });&#10;  }, [allProducts, farmerLookup, farmersData]);&#10;&#10;  // Listen for order completion events to refresh data - IMPROVED TO PREVENT RACE CONDITIONS&#10;  useEffect(() =&gt; {&#10;    const handleOrderComplete = (event) =&gt; {&#10;      const { orderId } = event.detail || {};&#10;      if (orderId) {&#10;        console.log(&quot; Order completed, refreshing product data&quot;);&#10;        // Longer delay to ensure backend has processed the update completely&#10;        setTimeout(() =&gt; {&#10;          farmersCache.invalidateFarmers();&#10;        }, 3000); // Increased to 3 seconds to prevent race conditions&#10;      }&#10;    };&#10;&#10;    const handleCartCheckout = (event) =&gt; {&#10;      console.log(&quot; Cart checkout completed, refreshing product data&quot;);&#10;      // Longer delay to ensure backend has processed the update completely&#10;      setTimeout(() =&gt; {&#10;        farmersCache.invalidateFarmers();&#10;      }, 3000); // Already correct at 3 seconds&#10;    };&#10;&#10;    // Listen for order completion events&#10;    window.addEventListener(&quot;orderCompleted&quot;, handleOrderComplete);&#10;    window.addEventListener(&quot;cartCheckoutCompleted&quot;, handleCartCheckout);&#10;&#10;    return () =&gt; {&#10;      window.removeEventListener(&quot;orderCompleted&quot;, handleOrderComplete);&#10;      window.removeEventListener(&quot;cartCheckoutCompleted&quot;, handleCartCheckout);&#10;    };&#10;  }, [farmersCache]);&#10;&#10;  // Memoized filtered and sorted products&#10;  const filteredProducts = useMemo(() =&gt; {&#10;    let filtered = [...enhancedProducts];&#10;&#10;    // Filter: Only show products that are available for purchase&#10;    // More flexible filtering to handle different status values and stock levels&#10;    filtered = filtered.filter((product) =&gt; {&#10;      // Don't show deleted products&#10;      if (product.status === &quot;deleted&quot;) return false;&#10;&#10;      // Don't show inactive products (if status is explicitly set to inactive)&#10;      if (product.status === &quot;inactive&quot;) return false;&#10;&#10;      // Show ALL products including stock-out ones&#10;      // Only exclude if stock is explicitly undefined/null AND status indicates unavailable&#10;      return true; // Show all active products regardless of stock level&#10;    });&#10;&#10;    // Apply search term filter&#10;    if (filters.searchTerm &amp;&amp; filters.searchTerm.trim()) {&#10;      const searchTerm = filters.searchTerm.toLowerCase().trim();&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return (&#10;          product.name?.toLowerCase().includes(searchTerm) ||&#10;          product.description?.toLowerCase().includes(searchTerm) ||&#10;          product.category?.toLowerCase().includes(searchTerm) ||&#10;          product.farmerName?.toLowerCase().includes(searchTerm)&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply category filter&#10;    if (&#10;      filters.selectedCategory &amp;&amp;&#10;      filters.selectedCategory !== &quot;All Categories&quot;&#10;    ) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return (&#10;          product.category?.toLowerCase() ===&#10;          filters.selectedCategory.toLowerCase()&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply price range checkboxes&#10;    if (filters.selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedPriceRanges.some((range) =&gt; {&#10;          const option = PRICE_RANGE_OPTIONS.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return (&#10;        price &gt;= filters.priceRangeSlider[0] &amp;&amp;&#10;        price &lt;= filters.priceRangeSlider[1]&#10;      );&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (filters.selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return filters.selectedRatings.some(&#10;          (rating) =&gt; productRating &gt;= rating,&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (filters.selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return filters.selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (filters.selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return (&#10;                product.isOrganic === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;))&#10;              );&#10;            case &quot;Fresh&quot;:&#10;              return (&#10;                product.isFresh === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;))&#10;              );&#10;            case &quot;Local&quot;:&#10;              return true;&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (filters.sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseFloat(b.averageRating) || 0) -&#10;            (parseFloat(a.averageRating) || 0),&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0),&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [enhancedProducts, filters]);&#10;&#10;  // Memoized pagination data&#10;  const paginationData = useMemo(() =&gt; {&#10;    const totalProducts = filteredProducts.length;&#10;    const totalPages = Math.ceil(totalProducts / ITEMS_PER_PAGE);&#10;    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;&#10;    const endIndex = startIndex + ITEMS_PER_PAGE;&#10;    const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;    return {&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage,&#10;        totalPages,&#10;        totalProducts,&#10;        hasNextPage: currentPage &lt; totalPages,&#10;        hasPrevPage: currentPage &gt; 1,&#10;      },&#10;    };&#10;  }, [filteredProducts, currentPage]);&#10;&#10;  // Update URL when filters change (with debouncing)&#10;  const updateURL = useCallback(&#10;    debounce(() =&gt; {&#10;      const params = new URLSearchParams();&#10;&#10;      // Only add non-default parameters to keep URLs clean&#10;      if (filters.searchTerm) params.set(&quot;search&quot;, filters.searchTerm);&#10;      if (filters.selectedCategory !== &quot;All Categories&quot;)&#10;        params.set(&quot;category&quot;, filters.selectedCategory);&#10;      if (filters.selectedPriceRanges.length &gt; 0)&#10;        params.set(&quot;priceRanges&quot;, filters.selectedPriceRanges.join(&quot;,&quot;));&#10;      if (filters.selectedRatings.length &gt; 0)&#10;        params.set(&quot;ratings&quot;, filters.selectedRatings.join(&quot;,&quot;));&#10;      if (filters.selectedFarmers.length &gt; 0)&#10;        params.set(&quot;farmers&quot;, filters.selectedFarmers.join(&quot;,&quot;));&#10;      if (filters.selectedTags.length &gt; 0)&#10;        params.set(&quot;tags&quot;, filters.selectedTags.join(&quot;,&quot;));&#10;      if (filters.priceRangeSlider[0] &gt; 0)&#10;        params.set(&quot;minPrice&quot;, filters.priceRangeSlider[0]);&#10;      if (filters.priceRangeSlider[1] &lt; 10000)&#10;        params.set(&quot;maxPrice&quot;, filters.priceRangeSlider[1]);&#10;      if (filters.sortBy !== &quot;newest&quot;) params.set(&quot;sort&quot;, filters.sortBy);&#10;      if (currentPage &gt; 1) params.set(&quot;page&quot;, currentPage);&#10;&#10;      const newURL = params.toString() ? `?${params.toString()}` : &quot;&quot;;&#10;      router.push(`/products${newURL}`, { scroll: false });&#10;    }, 300),&#10;    [filters, currentPage, router],&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    updateURL();&#10;  }, [updateURL]);&#10;&#10;  // Handle filter changes&#10;  const handleFilterChange = useCallback((filterType, value) =&gt; {&#10;    setFilters((prev) =&gt; {&#10;      const newFilters = { ...prev };&#10;&#10;      switch (filterType) {&#10;        case &quot;searchTerm&quot;:&#10;          newFilters.searchTerm = value;&#10;          break;&#10;        case &quot;category&quot;:&#10;          newFilters.selectedCategory = value;&#10;          break;&#10;        case &quot;priceRange&quot;:&#10;          if (newFilters.selectedPriceRanges.includes(value)) {&#10;            newFilters.selectedPriceRanges =&#10;              newFilters.selectedPriceRanges.filter((range) =&gt; range !== value);&#10;          } else {&#10;            newFilters.selectedPriceRanges = [&#10;              ...newFilters.selectedPriceRanges,&#10;              value,&#10;            ];&#10;          }&#10;          break;&#10;        case &quot;rating&quot;:&#10;          if (newFilters.selectedRatings.includes(value)) {&#10;            newFilters.selectedRatings = newFilters.selectedRatings.filter(&#10;              (rating) =&gt; rating !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedRatings = [...newFilters.selectedRatings, value];&#10;          }&#10;          break;&#10;        case &quot;farmer&quot;:&#10;          if (newFilters.selectedFarmers.includes(value)) {&#10;            newFilters.selectedFarmers = newFilters.selectedFarmers.filter(&#10;              (farmer) =&gt; farmer !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedFarmers = [...newFilters.selectedFarmers, value];&#10;          }&#10;          break;&#10;        case &quot;tag&quot;:&#10;          if (newFilters.selectedTags.includes(value)) {&#10;            newFilters.selectedTags = newFilters.selectedTags.filter(&#10;              (tag) =&gt; tag !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedTags = [...newFilters.selectedTags, value];&#10;          }&#10;          break;&#10;        case &quot;priceSlider&quot;:&#10;          newFilters.priceRangeSlider = value;&#10;          break;&#10;        case &quot;sortBy&quot;:&#10;          newFilters.sortBy = value;&#10;          break;&#10;      }&#10;&#10;      return newFilters;&#10;    });&#10;&#10;    // Reset to first page when filters change&#10;    if (filterType !== &quot;sortBy&quot;) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, []);&#10;&#10;  // Clear all filters&#10;  const clearAllFilters = useCallback(() =&gt; {&#10;    setFilters({&#10;      searchTerm: &quot;&quot;,&#10;      selectedCategory: &quot;All Categories&quot;,&#10;      selectedPriceRanges: [],&#10;      selectedRatings: [],&#10;      selectedFarmers: [],&#10;      selectedTags: [],&#10;      priceRangeSlider: [0, 10000],&#10;      sortBy: &quot;newest&quot;,&#10;    });&#10;    setCurrentPage(1);&#10;  }, []);&#10;&#10;  // Handle page changes&#10;  const handlePageChange = useCallback((page) =&gt; {&#10;    setCurrentPage(page);&#10;    window.scrollTo({ top: 0, behavior: &quot;smooth&quot; });&#10;  }, []);&#10;&#10;  // Refresh data&#10;  const refreshData = useCallback(() =&gt; {&#10;    refetchProducts();&#10;  }, [refetchProducts]);&#10;&#10;  // Get active filter count&#10;  const getActiveFilterCount = () =&gt; {&#10;    let count = 0;&#10;    if (filters.selectedCategory !== &quot;All Categories&quot;) count++;&#10;    if (filters.selectedPriceRanges.length &gt; 0) count++;&#10;    if (filters.selectedRatings.length &gt; 0) count++;&#10;    if (filters.selectedFarmers.length &gt; 0) count++;&#10;    if (filters.selectedTags.length &gt; 0) count++;&#10;    if (&#10;      filters.priceRangeSlider[0] !== 0 ||&#10;      filters.priceRangeSlider[1] !== 10000&#10;    )&#10;      count++;&#10;    return count;&#10;  };&#10;&#10;  // Handle error display&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle text-6xl text-red-500 mb-4&quot;&gt;&lt;/i&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Error Loading Products&#10;          &lt;/h3&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;            {error.message || &quot;Something went wrong while loading products&quot;}&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={() =&gt; refetchProducts()}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            Try Again&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Custom Loading Skeleton Components&#10;  const ProductCardSkeleton = ({ index }) =&gt; (&#10;    &lt;div&#10;      className=&quot;group bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700 relative&quot;&#10;      style={{&#10;        animationDelay: `${index * 150}ms`,&#10;        animation: &quot;fadeInUp 0.6s ease-out forwards&quot;,&#10;      }}&#10;    &gt;&#10;      {/* Shimmer effect overlay */}&#10;      &lt;div className=&quot;absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer&quot;&gt;&lt;/div&gt;&#10;&#10;      {/* Product Image Skeleton */}&#10;      &lt;div className=&quot;relative aspect-square bg-gradient-to-br from-gray-200 via-gray-300 to-gray-200 dark:from-gray-600 dark:via-gray-700 dark:to-gray-600 overflow-hidden&quot;&gt;&#10;        {/* Animated placeholder icons */}&#10;        &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;animate-bounce&quot;&gt;&#10;            &lt;i className=&quot;fas fa-seedling text-4xl text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {/* Floating particles effect */}&#10;        &lt;div className=&quot;absolute top-2 left-2 w-2 h-2 bg-green-400 rounded-full animate-ping opacity-60&quot;&gt;&lt;/div&gt;&#10;        &lt;div&#10;          className=&quot;absolute top-4 right-3 w-1.5 h-1.5 bg-yellow-400 rounded-full animate-pulse opacity-70&quot;&#10;          style={{ animationDelay: &quot;0.5s&quot; }}&#10;        &gt;&lt;/div&gt;&#10;        &lt;div&#10;          className=&quot;absolute bottom-3 left-4 w-1 h-1 bg-blue-400 rounded-full animate-bounce opacity-50&quot;&#10;          style={{ animationDelay: &quot;1s&quot; }}&#10;        &gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Content Skeleton */}&#10;      &lt;div className=&quot;p-6 space-y-4&quot;&gt;&#10;        {/* Category Badge */}&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;div className=&quot;h-6 w-20 bg-gradient-to-r from-green-200 to-green-300 dark:from-green-700 dark:to-green-600 rounded-full animate-pulse&quot;&gt;&lt;/div&gt;&#10;          &lt;div&#10;            className=&quot;h-5 w-12 bg-gradient-to-r from-blue-200 to-blue-300 dark:from-blue-700 dark:to-blue-600 rounded-full animate-pulse&quot;&#10;            style={{ animationDelay: &quot;0.2s&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;h-5 bg-gradient-to-r from-gray-300 via-gray-400 to-gray-300 dark:from-gray-600 dark:via-gray-500 dark:to-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;          &lt;div&#10;            className=&quot;h-4 w-3/4 bg-gradient-to-r from-gray-250 via-gray-350 to-gray-250 dark:from-gray-650 dark:via-gray-550 dark:to-gray-650 rounded animate-pulse&quot;&#10;            style={{ animationDelay: &quot;0.3s&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;div className=&quot;flex gap-1&quot;&gt;&#10;            {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;              &lt;div&#10;                key={star}&#10;                className=&quot;w-4 h-4 bg-yellow-200 dark:bg-yellow-700 rounded animate-pulse&quot;&#10;                style={{ animationDelay: `${star * 0.1}s` }}&#10;              &gt;&lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;          &lt;div&#10;            className=&quot;h-3 w-12 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&#10;            style={{ animationDelay: &quot;0.8s&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;            &lt;div className=&quot;h-7 w-24 bg-gradient-to-r from-primary-200 to-primary-300 dark:from-primary-700 dark:to-primary-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;            &lt;div&#10;              className=&quot;h-3 w-16 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&#10;              style={{ animationDelay: &quot;0.4s&quot; }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-right space-y-1&quot;&gt;&#10;            &lt;div&#10;              className=&quot;h-4 w-20 bg-green-200 dark:bg-green-700 rounded animate-pulse&quot;&#10;              style={{ animationDelay: &quot;0.6s&quot; }}&#10;            &gt;&lt;/div&gt;&#10;            &lt;div&#10;              className=&quot;h-3 w-14 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&#10;              style={{ animationDelay: &quot;0.7s&quot; }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Button */}&#10;        &lt;div&#10;          className=&quot;h-10 bg-gradient-to-r from-primary-300 via-primary-400 to-primary-300 dark:from-primary-600 dark:via-primary-700 dark:to-primary-600 rounded-lg animate-pulse&quot;&#10;          style={{ animationDelay: &quot;0.9s&quot; }}&#10;        &gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  const FilterSidebarSkeleton = () =&gt; (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 space-y-6&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div className=&quot;h-6 w-20 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;        &lt;div className=&quot;h-5 w-5 bg-primary-300 dark:bg-primary-600 rounded-full animate-pulse&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Filter Sections */}&#10;      {[1, 2, 3, 4, 5].map((section) =&gt; (&#10;        &lt;div&#10;          key={section}&#10;          className=&quot;space-y-3&quot;&#10;          style={{ animationDelay: `${section * 0.1}s` }}&#10;        &gt;&#10;          &lt;div className=&quot;flex items-center gap-2 animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;h-4 w-4 bg-primary-300 dark:bg-primary-600 rounded&quot;&gt;&lt;/div&gt;&#10;            &lt;div className=&quot;h-5 w-24 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-2 ml-2&quot;&gt;&#10;            {[1, 2, 3].map((item) =&gt; (&#10;              &lt;div&#10;                key={item}&#10;                className=&quot;flex items-center gap-2 animate-pulse&quot;&#10;                style={{ animationDelay: `${item * 0.05}s` }}&#10;              &gt;&#10;                &lt;div className=&quot;h-3 w-3 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-3 w-20 bg-gray-250 dark:bg-gray-650 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  const HeaderSkeleton = () =&gt; (&#10;    &lt;div className=&quot;bg-gradient-to-r from-primary-600 to-emerald-600 text-white py-12&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {/* Animated farm background */}&#10;        &lt;div className=&quot;absolute inset-0 opacity-10&quot;&gt;&#10;          &lt;div className=&quot;animate-float&quot; style={{ animationDelay: &quot;0s&quot; }}&gt;&#10;            &lt;i className=&quot;fas fa-tractor text-6xl absolute top-8 left-1/4&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;animate-float&quot; style={{ animationDelay: &quot;2s&quot; }}&gt;&#10;            &lt;i className=&quot;fas fa-leaf text-4xl absolute top-16 right-1/3&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;animate-float&quot; style={{ animationDelay: &quot;4s&quot; }}&gt;&#10;            &lt;i className=&quot;fas fa-seedling text-3xl absolute bottom-8 left-1/3&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;relative z-10&quot;&gt;&#10;          &lt;div className=&quot;h-10 w-64 bg-white/20 rounded-lg animate-pulse mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-6 w-96 bg-white/15 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;&#10;          {/* Search results skeleton */}&#10;          &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;h-4 w-48 bg-white/20 rounded&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-3 w-32 bg-white/15 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                &lt;div className=&quot;h-10 w-48 bg-white/20 rounded-lg&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-10 w-12 bg-white/15 rounded-lg&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  if (loading &amp;&amp; allProducts.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Custom CSS animations */}&#10;        &lt;style jsx&gt;{`&#10;          @keyframes fadeInUp {&#10;            from {&#10;              opacity: 0;&#10;              transform: translateY(30px);&#10;            }&#10;            to {&#10;              opacity: 1;&#10;              transform: translateY(0);&#10;            }&#10;          }&#10;&#10;          @keyframes shimmer {&#10;            0% {&#10;              transform: translateX(-100%);&#10;            }&#10;            100% {&#10;              transform: translateX(100%);&#10;            }&#10;          }&#10;&#10;          @keyframes float {&#10;            0%,&#10;            100% {&#10;              transform: translateY(0px);&#10;            }&#10;            50% {&#10;              transform: translateY(-20px);&#10;            }&#10;          }&#10;&#10;          .animate-shimmer {&#10;            animation: shimmer 2s infinite;&#10;          }&#10;&#10;          .animate-float {&#10;            animation: float 6s ease-in-out infinite;&#10;          }&#10;        `}&lt;/style&gt;&#10;&#10;        {/* Header Skeleton */}&#10;        &lt;HeaderSkeleton /&gt;&#10;&#10;        {/* Main Content */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle Skeleton */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;div className=&quot;w-full h-12 bg-white dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-600 animate-pulse&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Skeleton */}&#10;          &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;              &lt;div className=&quot;h-5 w-32 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;h-4 w-16 bg-primary-300 dark:bg-primary-600 rounded&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;              {[1, 2, 3, 4].map((item) =&gt; (&#10;                &lt;div&#10;                  key={item}&#10;                  className=&quot;h-6 w-20 bg-gradient-to-r from-primary-200 to-green-200 dark:from-primary-700 dark:to-green-700 rounded-full animate-pulse&quot;&#10;                  style={{ animationDelay: `${item * 0.1}s` }}&#10;                &gt;&lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar Skeleton */}&#10;            &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;              &lt;FilterSidebarSkeleton /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options Skeleton */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center gap-2 animate-pulse&quot;&gt;&#10;                    &lt;div className=&quot;h-4 w-4 bg-primary-400 rounded animate-bounce&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;h-5 w-24 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex items-center text-primary-600 animate-pulse&quot;&gt;&#10;                    &lt;div className=&quot;h-4 w-4 bg-primary-400 rounded-full animate-spin mr-2&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;h-4 w-20 bg-primary-300 rounded&quot;&gt;&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className=&quot;h-4 w-16 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;h-10 w-32 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid Skeleton */}&#10;              &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                {[...Array(9)].map((_, index) =&gt; (&#10;                  &lt;ProductCardSkeleton key={index} index={index} /&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;&#10;              {/* Pagination Skeleton */}&#10;              &lt;div className=&quot;flex justify-center items-center space-x-2 mt-8&quot;&gt;&#10;                &lt;div className=&quot;h-10 w-20 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;                  {[1, 2, 3, 4, 5].map((page) =&gt; (&#10;                    &lt;div&#10;                      key={page}&#10;                      className=&quot;h-10 w-10 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&#10;                      style={{ animationDelay: `${page * 0.1}s` }}&#10;                    &gt;&lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-10 w-16 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Products Header */}&#10;        &lt;div className=&quot;bg-primary-600 text-white py-12&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;Fresh Products&lt;/h1&gt;&#10;            &lt;p className=&quot;text-xl text-primary-100&quot;&gt;&#10;              Discover fresh, locally-sourced produce from our trusted farmers&#10;            &lt;/p&gt;&#10;&#10;            {/* Search Results Info */}&#10;            {(filters.searchTerm ||&#10;              filters.selectedCategory !== &quot;All Categories&quot;) &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between flex-wrap gap-2&quot;&gt;&#10;                  &lt;div&gt;&#10;                    {filters.searchTerm &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Search results for:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          &amp;quot;{filters.searchTerm}&amp;quot;&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    {filters.selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Category:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          {filters.selectedCategory}&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    &lt;p className=&quot;text-sm text-primary-200&quot;&gt;&#10;                      {paginationData.pagination.totalProducts} products found&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Search Bar in Results */}&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      className=&quot;px-4 py-2 rounded-lg text-gray-900 focus:outline-none&quot;&#10;                      value={filters.searchTerm}&#10;                      onChange={(e) =&gt;&#10;                        handleFilterChange(&quot;searchTerm&quot;, e.target.value)&#10;                      }&#10;                      onKeyPress={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; refetchProducts()}&#10;                    /&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; refetchProducts()}&#10;                      className=&quot;px-4 py-2 bg-primary-500 hover:bg-primary-400 rounded-lg transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filters and Products */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowMobileFilters(!showMobileFilters)}&#10;              className=&quot;w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-between&quot;&#10;            &gt;&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Filters&#10;                {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                    {getActiveFilterCount()}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/span&gt;&#10;              &lt;i&#10;                className={`fas fa-chevron-${showMobileFilters ? &quot;up&quot; : &quot;down&quot;}`}&#10;              &gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Summary */}&#10;          {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Active Filters ({getActiveFilterCount()})&#10;                &lt;/h4&gt;&#10;                &lt;button&#10;                  onClick={clearAllFilters}&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400&quot;&#10;                &gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {filters.selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200&quot;&gt;&#10;                    Category: {filters.selectedCategory}&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleFilterChange(&quot;category&quot;, &quot;All Categories&quot;)&#10;                      }&#10;                      className=&quot;ml-2 text-primary-600 hover:text-primary-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;                {filters.selectedPriceRanges.map((range) =&gt; (&#10;                  &lt;span&#10;                    key={range}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;                  &gt;&#10;                    {range}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;priceRange&quot;, range)}&#10;                      className=&quot;ml-2 text-green-600 hover:text-green-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedRatings.map((rating) =&gt; (&#10;                  &lt;span&#10;                    key={rating}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  &gt;&#10;                    {rating}+ Stars&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;rating&quot;, rating)}&#10;                      className=&quot;ml-2 text-yellow-600 hover:text-yellow-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedFarmers.map((farmer) =&gt; (&#10;                  &lt;span&#10;                    key={farmer}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&#10;                  &gt;&#10;                    {farmer}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;farmer&quot;, farmer)}&#10;                      className=&quot;ml-2 text-blue-600 hover:text-blue-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedTags.map((tag) =&gt; (&#10;                  &lt;span&#10;                    key={tag}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;&#10;                  &gt;&#10;                    {tag}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;tag&quot;, tag)}&#10;                      className=&quot;ml-2 text-purple-600 hover:text-purple-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {(filters.priceRangeSlider[0] !== 0 ||&#10;                  filters.priceRangeSlider[1] !== 10000) &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;                    ৳{filters.priceRangeSlider[0]} - ৳&#10;                    {filters.priceRangeSlider[1]}&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleFilterChange(&quot;priceSlider&quot;, [0, 10000])&#10;                      }&#10;                      className=&quot;ml-2 text-orange-600 hover:text-orange-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar */}&#10;            &lt;div&#10;              className={`lg:col-span-1 ${&#10;                showMobileFilters ? &quot;block&quot; : &quot;hidden lg:block&quot;&#10;              }`}&#10;            &gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sticky top-24&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Filters&#10;                  &lt;/h3&gt;&#10;                  {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                      {getActiveFilterCount()}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-th-large mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Category&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                    {CATEGORY_OPTIONS.map((category) =&gt; (&#10;                      &lt;label&#10;                        key={category}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;radio&quot;&#10;                          name=&quot;category&quot;&#10;                          checked={filters.selectedCategory === category}&#10;                          onChange={() =&gt;&#10;                            handleFilterChange(&quot;category&quot;, category)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {category}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Price Range (৳)&#10;                  &lt;/h4&gt;&#10;&#10;                  {/* Custom Price Range Slider */}&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={filters.priceRangeSlider[0]}&#10;                        onChange={(e) =&gt;&#10;                          handleFilterChange(&quot;priceSlider&quot;, [&#10;                            +e.target.value,&#10;                            filters.priceRangeSlider[1],&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={filters.priceRangeSlider[1]}&#10;                        onChange={(e) =&gt;&#10;                          handleFilterChange(&quot;priceSlider&quot;, [&#10;                            filters.priceRangeSlider[0],&#10;                            +e.target.value,&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;relative h-2 bg-gray-200 rounded-lg&quot;&gt;&#10;                        &lt;div&#10;                          className=&quot;absolute h-2 bg-primary-600 rounded-lg&quot;&#10;                          style={{&#10;                            left: `${(filters.priceRangeSlider[0] / 10000) * 100}%`,&#10;                            width: `${((filters.priceRangeSlider[1] - filters.priceRangeSlider[0]) / 10000) * 100}%`,&#10;                          }}&#10;                        &gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                      &lt;span&gt;��{filters.priceRangeSlider[0]}&lt;/span&gt;&#10;                      &lt;span&gt;৳{filters.priceRangeSlider[1]}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {PRICE_RANGE_OPTIONS.map((option) =&gt; (&#10;                      &lt;label&#10;                        key={option.label}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedPriceRanges.includes(&#10;                            option.label,&#10;                          )}&#10;                          onChange={() =&gt;&#10;                            handleFilterChange(&quot;priceRange&quot;, option.label)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {option.label}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Rating Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-star mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Rating&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {[5, 4, 3, 2, 1].map((rating) =&gt; (&#10;                      &lt;label&#10;                        key={rating}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedRatings.includes(rating)}&#10;                          onChange={() =&gt; handleFilterChange(&quot;rating&quot;, rating)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 flex items-center&quot;&gt;&#10;                          {[...Array(rating)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className=&quot;fas fa-star text-yellow-400 text-xs mr-1&quot;&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          {rating &lt; 5 &amp;&amp; &lt;span className=&quot;ml-1&quot;&gt;&amp; Up&lt;/span&gt;}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farmer Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-user mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                    {availableFarmers.length &gt; 0 ? (&#10;                      availableFarmers.map((farmer) =&gt; (&#10;                        &lt;label&#10;                          key={farmer}&#10;                          className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                        &gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            checked={filters.selectedFarmers.includes(farmer)}&#10;                            onChange={() =&gt;&#10;                              handleFilterChange(&quot;farmer&quot;, farmer)&#10;                            }&#10;                            className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                          /&gt;&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 truncate&quot;&gt;&#10;                            {farmer}&#10;                          &lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))&#10;                    ) : (&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 p-2&quot;&gt;&#10;                        Loading farmers...&#10;                      &lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tag Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-tags mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Tags&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {TAG_OPTIONS.map((tag) =&gt; (&#10;                      &lt;label&#10;                        key={tag}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedTags.includes(tag)}&#10;                          onChange={() =&gt; handleFilterChange(&quot;tag&quot;, tag)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {tag}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-4&quot;&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    disabled={getActiveFilterCount() === 0}&#10;                    className=&quot;w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-lg font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                    Clear All Filters&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    {paginationData.pagination.totalProducts} products&#10;                  &lt;/span&gt;&#10;                  {loading &amp;&amp; (&#10;                    &lt;div className=&quot;flex items-center text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span className=&quot;text-sm&quot;&gt;Loading...&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;label className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Sort by:&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.sortBy}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;sortBy&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                    &lt;option value=&quot;price-low&quot;&gt;Price: Low to High&lt;/option&gt;&#10;                    &lt;option value=&quot;price-high&quot;&gt;Price: High to Low&lt;/option&gt;&#10;                    &lt;option value=&quot;rating&quot;&gt;Highest Rated&lt;/option&gt;&#10;                    &lt;option value=&quot;popular&quot;&gt;Most Popular&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid */}&#10;              {loading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(9)].map((_, index) =&gt; (&#10;                    &lt;div&#10;                      key={index}&#10;                      className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden animate-pulse&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-full h-48 bg-gray-300 dark:bg-gray-600&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;p-6&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded mb-3 w-3/4&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded mb-4 w-1/2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : paginationData.products.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {paginationData.products.map((product, index) =&gt; (&#10;                      &lt;ProductCard&#10;                        key={`${product._id}-${product.farmerId || product.farmer?._id || &quot;unknown&quot;}-${index}`}&#10;                        product={product}&#10;                      /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Pagination Component */}&#10;                  {paginationData.pagination.totalPages &gt; 1 &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-center items-center gap-2 mt-8&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt;&#10;                          setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                        }&#10;                        disabled={!paginationData.pagination.hasPrevPage}&#10;                        className=&quot;px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                      &lt;/button&gt;&#10;&#10;                      {Array.from(&#10;                        { length: paginationData.pagination.totalPages },&#10;                        (_, i) =&gt; i + 1,&#10;                      ).map((page) =&gt; (&#10;                        &lt;button&#10;                          key={page}&#10;                          onClick={() =&gt; setCurrentPage(page)}&#10;                          className={`px-3 py-2 rounded-lg transition ${&#10;                            page === paginationData.pagination.currentPage&#10;                              ? &quot;bg-primary-500 text-white&quot;&#10;                              : &quot;border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                          }`}&#10;                        &gt;&#10;                          {page}&#10;                        &lt;/button&gt;&#10;                      ))}&#10;&#10;                      &lt;button&#10;                        onClick={() =&gt;&#10;                          setCurrentPage((prev) =&gt;&#10;                            Math.min(&#10;                              prev + 1,&#10;                              paginationData.pagination.totalPages,&#10;                            ),&#10;                          )&#10;                        }&#10;                        disabled={!paginationData.pagination.hasNextPage}&#10;                        className=&quot;px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No products found&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                    Try adjusting your search criteria or browse all products&#10;                  &lt;/p&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                  &gt;&#10;                    Browse All Products&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;&#10;// Main component&#10;export default function Products() {&#10;  return (&#10;    &lt;Suspense fallback={&lt;Loading /&gt;}&gt;&#10;      &lt;ProductsContent /&gt;&#10;    &lt;/Suspense&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo, useCallback, Suspense } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;../../components/ProductCard&quot;;&#10;import Loading from &quot;../../components/Loading&quot;;&#10;import Footer from &quot;../../components/Footer&quot;;&#10;import { useUnifiedProductsData } from &quot;../../hooks/useUnifiedProductsData&quot;;&#10;import { useFarmersQuery } from &quot;../../hooks/useFarmersQuery&quot;;&#10;import { debounce } from &quot;../../utils/debounce&quot;;&#10;&#10;// Force dynamic rendering for this page&#10;export const dynamic = &quot;force-dynamic&quot;;&#10;&#10;// Component that uses useSearchParams - must be wrapped in Suspense&#10;function ProductsContent() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;&#10;  // Move constants outside component to prevent recreations&#10;  const CATEGORY_OPTIONS = [&#10;    &quot;All Categories&quot;,&#10;    &quot;Vegetables&quot;,&#10;    &quot;Fruits&quot;,&#10;    &quot;Grains&quot;,&#10;    &quot;Dairy&quot;,&#10;    &quot;Honey&quot;,&#10;    &quot;Herbs&quot;,&#10;  ];&#10;&#10;  const PRICE_RANGE_OPTIONS = [&#10;    { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;    { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;    { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;    { label: &quot;৳200 - ���500&quot;, min: 201, max: 500 },&#10;    { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;  ];&#10;&#10;  const TAG_OPTIONS = [&#10;    &quot;Organic&quot;,&#10;    &quot;Fresh&quot;,&#10;    &quot;Local&quot;,&#10;    &quot;Premium&quot;,&#10;    &quot;Seasonal&quot;,&#10;    &quot;Limited Stock&quot;,&#10;  ];&#10;&#10;  const ITEMS_PER_PAGE = 12;&#10;&#10;  // Filter states - Initialize from URL params&#10;  const [filters, setFilters] = useState(() =&gt; ({&#10;    searchTerm: searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;    selectedCategory: searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;    selectedPriceRanges: searchParams.get(&quot;priceRanges&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedRatings: searchParams.get(&quot;ratings&quot;)?.split(&quot;,&quot;).map(Number) || [],&#10;    selectedFarmers: searchParams.get(&quot;farmers&quot;)?.split(&quot;,&quot;) || [],&#10;    selectedTags: searchParams.get(&quot;tags&quot;)?.split(&quot;,&quot;) || [],&#10;    priceRangeSlider: [&#10;      Number(searchParams.get(&quot;minPrice&quot;)) || 0,&#10;      Number(searchParams.get(&quot;maxPrice&quot;)) || 10000,&#10;    ],&#10;    sortBy: searchParams.get(&quot;sort&quot;) || &quot;newest&quot;,&#10;  }));&#10;&#10;  const [currentPage, setCurrentPage] = useState(&#10;    Number(searchParams.get(&quot;page&quot;)) || 1,&#10;  );&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;&#10;  // Use unified products data hook with same caching mechanism as dashboard&#10;  const {&#10;    products: allProducts,&#10;    isLoading: loading,&#10;    error,&#10;    refetch: refetchProducts,&#10;    refreshProducts,&#10;  } = useUnifiedProductsData(filters);&#10;&#10;  // Use React Query for farmers data&#10;  const { data: farmersData } = useFarmersQuery();&#10;&#10;  // Extract products and farmers from React Query data&#10;  const availableFarmers = useMemo(() =&gt; {&#10;    // Get farmers from the dedicated farmers query instead of product data&#10;    const farmers = farmersData?.farmers || [];&#10;&#10;    // Get unique farmer names from the farmers collection (fresh data)&#10;    const farmerNames = farmers&#10;      .map((farmer) =&gt; farmer.name)&#10;      .filter(Boolean)&#10;      .sort();&#10;&#10;    return farmerNames;&#10;  }, [farmersData]);&#10;&#10;  // Create a farmer lookup map for quick access&#10;  const farmerLookup = useMemo(() =&gt; {&#10;    const farmers = farmersData?.farmers || [];&#10;    const lookup = new Map();&#10;&#10;    // Create lookup by ID&#10;    farmers.forEach((farmer) =&gt; {&#10;      if (farmer._id) lookup.set(farmer._id, farmer);&#10;    });&#10;&#10;    // Also create lookup by email for additional matching&#10;    farmers.forEach((farmer) =&gt; {&#10;      if (farmer.email) lookup.set(farmer.email, farmer);&#10;    });&#10;&#10;    return lookup;&#10;  }, [farmersData]);&#10;&#10;  // Enhance products with fresh farmer data&#10;  const enhancedProducts = useMemo(() =&gt; {&#10;    return allProducts.map((product) =&gt; {&#10;      // Get all possible farmer identifiers from product&#10;      const productFarmerId =&#10;        product.farmer?.id || product.farmer?._id || product.farmerId;&#10;      const productFarmerEmail = product.farmer?.email || product.farmerEmail;&#10;      const productFarmerName = product.farmer?.name || product.farmerName;&#10;&#10;      // Look up fresh farmer data by ID first (most reliable)&#10;      let freshFarmer = null;&#10;      if (productFarmerId) {&#10;        freshFarmer = farmerLookup.get(productFarmerId);&#10;      }&#10;&#10;      // If no match by ID, try email&#10;      if (!freshFarmer &amp;&amp; productFarmerEmail) {&#10;        freshFarmer = farmerLookup.get(productFarmerEmail);&#10;      }&#10;&#10;      // If no match by ID or email, try finding by name (least reliable but necessary fallback)&#10;      if (!freshFarmer &amp;&amp; productFarmerName) {&#10;        const farmers = farmersData?.farmers || [];&#10;        freshFarmer = farmers.find(&#10;          (farmer) =&gt; farmer.name === productFarmerName,&#10;        );&#10;      }&#10;&#10;      // If we found fresh farmer data, enhance the product; otherwise keep original&#10;      if (freshFarmer) {&#10;        return {&#10;          ...product,&#10;          farmer: {&#10;            ...product.farmer,&#10;            name: freshFarmer.name,&#10;            email: freshFarmer.email,&#10;            phone: freshFarmer.phone,&#10;            id: freshFarmer._id,&#10;            _id: freshFarmer._id,&#10;          },&#10;          farmerName: freshFarmer.name,&#10;          farmerEmail: freshFarmer.email,&#10;          farmerId: freshFarmer._id, // Ensure farmerId is set&#10;        };&#10;      }&#10;&#10;      // No fresh farmer data found, return product with normalized farmer info&#10;      return {&#10;        ...product,&#10;        // Ensure farmerName is always available for display&#10;        farmerName:&#10;          productFarmerName ||&#10;          (typeof product.farmer === &quot;string&quot;&#10;            ? product.farmer&#10;            : &quot;Unknown Farmer&quot;),&#10;      };&#10;    });&#10;  }, [allProducts, farmerLookup, farmersData]);&#10;&#10;  // Listen for order completion events to refresh data - IMPROVED TO PREVENT RACE CONDITIONS&#10;  useEffect(() =&gt; {&#10;    const handleOrderComplete = (event) =&gt; {&#10;      const { orderId } = event.detail || {};&#10;      if (orderId) {&#10;        console.log(&quot; Order completed, refreshing product data&quot;);&#10;        // Longer delay to ensure backend has processed the update completely&#10;        setTimeout(() =&gt; {&#10;          refetchProducts();&#10;        }, 3000); // Increased to 3 seconds to prevent race conditions&#10;      }&#10;    };&#10;&#10;    const handleCartCheckout = (event) =&gt; {&#10;      console.log(&quot; Cart checkout completed, refreshing product data&quot;);&#10;      // Longer delay to ensure backend has processed the update completely&#10;      setTimeout(() =&gt; {&#10;        refetchProducts();&#10;      }, 3000); // Already correct at 3 seconds&#10;    };&#10;&#10;    // Listen for order completion events&#10;    window.addEventListener(&quot;orderCompleted&quot;, handleOrderComplete);&#10;    window.addEventListener(&quot;cartCheckoutCompleted&quot;, handleCartCheckout);&#10;&#10;    return () =&gt; {&#10;      window.removeEventListener(&quot;orderCompleted&quot;, handleOrderComplete);&#10;      window.removeEventListener(&quot;cartCheckoutCompleted&quot;, handleCartCheckout);&#10;    };&#10;  }, [refetchProducts]);&#10;&#10;  // Memoized filtered and sorted products&#10;  const filteredProducts = useMemo(() =&gt; {&#10;    let filtered = [...enhancedProducts];&#10;&#10;    // Filter: Only show products that are available for purchase&#10;    // More flexible filtering to handle different status values and stock levels&#10;    filtered = filtered.filter((product) =&gt; {&#10;      // Don't show deleted products&#10;      if (product.status === &quot;deleted&quot;) return false;&#10;&#10;      // Don't show inactive products (if status is explicitly set to inactive)&#10;      if (product.status === &quot;inactive&quot;) return false;&#10;&#10;      // Show ALL products including stock-out ones&#10;      // Only exclude if stock is explicitly undefined/null AND status indicates unavailable&#10;      return true; // Show all active products regardless of stock level&#10;    });&#10;&#10;    // Apply search term filter&#10;    if (filters.searchTerm &amp;&amp; filters.searchTerm.trim()) {&#10;      const searchTerm = filters.searchTerm.toLowerCase().trim();&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return (&#10;          product.name?.toLowerCase().includes(searchTerm) ||&#10;          product.description?.toLowerCase().includes(searchTerm) ||&#10;          product.category?.toLowerCase().includes(searchTerm) ||&#10;          product.farmerName?.toLowerCase().includes(searchTerm)&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply category filter&#10;    if (&#10;      filters.selectedCategory &amp;&amp;&#10;      filters.selectedCategory !== &quot;All Categories&quot;&#10;    ) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return (&#10;          product.category?.toLowerCase() ===&#10;          filters.selectedCategory.toLowerCase()&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply price range checkboxes&#10;    if (filters.selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedPriceRanges.some((range) =&gt; {&#10;          const option = PRICE_RANGE_OPTIONS.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return (&#10;        price &gt;= filters.priceRangeSlider[0] &amp;&amp;&#10;        price &lt;= filters.priceRangeSlider[1]&#10;      );&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (filters.selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return filters.selectedRatings.some(&#10;          (rating) =&gt; productRating &gt;= rating,&#10;        );&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (filters.selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return filters.selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (filters.selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return filters.selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return (&#10;                product.isOrganic === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;))&#10;              );&#10;            case &quot;Fresh&quot;:&#10;              return (&#10;                product.isFresh === true ||&#10;                (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;))&#10;              );&#10;            case &quot;Local&quot;:&#10;              return true;&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (filters.sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseFloat(b.averageRating) || 0) -&#10;            (parseFloat(a.averageRating) || 0),&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort(&#10;          (a, b) =&gt;&#10;            (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0),&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [enhancedProducts, filters]);&#10;&#10;  // Memoized pagination data&#10;  const paginationData = useMemo(() =&gt; {&#10;    const totalProducts = filteredProducts.length;&#10;    const totalPages = Math.ceil(totalProducts / ITEMS_PER_PAGE);&#10;    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;&#10;    const endIndex = startIndex + ITEMS_PER_PAGE;&#10;    const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;    return {&#10;      products: paginatedProducts,&#10;      pagination: {&#10;        currentPage,&#10;        totalPages,&#10;        totalProducts,&#10;        hasNextPage: currentPage &lt; totalPages,&#10;        hasPrevPage: currentPage &gt; 1,&#10;      },&#10;    };&#10;  }, [filteredProducts, currentPage]);&#10;&#10;  // Update URL when filters change (with debouncing)&#10;  const updateURL = useCallback(&#10;    debounce(() =&gt; {&#10;      const params = new URLSearchParams();&#10;&#10;      // Only add non-default parameters to keep URLs clean&#10;      if (filters.searchTerm) params.set(&quot;search&quot;, filters.searchTerm);&#10;      if (filters.selectedCategory !== &quot;All Categories&quot;)&#10;        params.set(&quot;category&quot;, filters.selectedCategory);&#10;      if (filters.selectedPriceRanges.length &gt; 0)&#10;        params.set(&quot;priceRanges&quot;, filters.selectedPriceRanges.join(&quot;,&quot;));&#10;      if (filters.selectedRatings.length &gt; 0)&#10;        params.set(&quot;ratings&quot;, filters.selectedRatings.join(&quot;,&quot;));&#10;      if (filters.selectedFarmers.length &gt; 0)&#10;        params.set(&quot;farmers&quot;, filters.selectedFarmers.join(&quot;,&quot;));&#10;      if (filters.selectedTags.length &gt; 0)&#10;        params.set(&quot;tags&quot;, filters.selectedTags.join(&quot;,&quot;));&#10;      if (filters.priceRangeSlider[0] &gt; 0)&#10;        params.set(&quot;minPrice&quot;, filters.priceRangeSlider[0]);&#10;      if (filters.priceRangeSlider[1] &lt; 10000)&#10;        params.set(&quot;maxPrice&quot;, filters.priceRangeSlider[1]);&#10;      if (filters.sortBy !== &quot;newest&quot;) params.set(&quot;sort&quot;, filters.sortBy);&#10;      if (currentPage &gt; 1) params.set(&quot;page&quot;, currentPage);&#10;&#10;      const newURL = params.toString() ? `?${params.toString()}` : &quot;&quot;;&#10;      router.push(`/products${newURL}`, { scroll: false });&#10;    }, 300),&#10;    [filters, currentPage, router],&#10;  );&#10;&#10;  useEffect(() =&gt; {&#10;    updateURL();&#10;  }, [updateURL]);&#10;&#10;  // Handle filter changes&#10;  const handleFilterChange = useCallback((filterType, value) =&gt; {&#10;    setFilters((prev) =&gt; {&#10;      const newFilters = { ...prev };&#10;&#10;      switch (filterType) {&#10;        case &quot;searchTerm&quot;:&#10;          newFilters.searchTerm = value;&#10;          break;&#10;        case &quot;category&quot;:&#10;          newFilters.selectedCategory = value;&#10;          break;&#10;        case &quot;priceRange&quot;:&#10;          if (newFilters.selectedPriceRanges.includes(value)) {&#10;            newFilters.selectedPriceRanges =&#10;              newFilters.selectedPriceRanges.filter((range) =&gt; range !== value);&#10;          } else {&#10;            newFilters.selectedPriceRanges = [&#10;              ...newFilters.selectedPriceRanges,&#10;              value,&#10;            ];&#10;          }&#10;          break;&#10;        case &quot;rating&quot;:&#10;          if (newFilters.selectedRatings.includes(value)) {&#10;            newFilters.selectedRatings = newFilters.selectedRatings.filter(&#10;              (rating) =&gt; rating !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedRatings = [...newFilters.selectedRatings, value];&#10;          }&#10;          break;&#10;        case &quot;farmer&quot;:&#10;          if (newFilters.selectedFarmers.includes(value)) {&#10;            newFilters.selectedFarmers = newFilters.selectedFarmers.filter(&#10;              (farmer) =&gt; farmer !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedFarmers = [...newFilters.selectedFarmers, value];&#10;          }&#10;          break;&#10;        case &quot;tag&quot;:&#10;          if (newFilters.selectedTags.includes(value)) {&#10;            newFilters.selectedTags = newFilters.selectedTags.filter(&#10;              (tag) =&gt; tag !== value,&#10;            );&#10;          } else {&#10;            newFilters.selectedTags = [...newFilters.selectedTags, value];&#10;          }&#10;          break;&#10;        case &quot;priceSlider&quot;:&#10;          newFilters.priceRangeSlider = value;&#10;          break;&#10;        case &quot;sortBy&quot;:&#10;          newFilters.sortBy = value;&#10;          break;&#10;      }&#10;&#10;      return newFilters;&#10;    });&#10;&#10;    // Reset to first page when filters change&#10;    if (filterType !== &quot;sortBy&quot;) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, []);&#10;&#10;  // Clear all filters&#10;  const clearAllFilters = useCallback(() =&gt; {&#10;    setFilters({&#10;      searchTerm: &quot;&quot;,&#10;      selectedCategory: &quot;All Categories&quot;,&#10;      selectedPriceRanges: [],&#10;      selectedRatings: [],&#10;      selectedFarmers: [],&#10;      selectedTags: [],&#10;      priceRangeSlider: [0, 10000],&#10;      sortBy: &quot;newest&quot;,&#10;    });&#10;    setCurrentPage(1);&#10;  }, []);&#10;&#10;  // Handle page changes&#10;  const handlePageChange = useCallback((page) =&gt; {&#10;    setCurrentPage(page);&#10;    window.scrollTo({ top: 0, behavior: &quot;smooth&quot; });&#10;  }, []);&#10;&#10;  // Refresh data&#10;  const refreshData = useCallback(() =&gt; {&#10;    refetchProducts();&#10;  }, [refetchProducts]);&#10;&#10;  // Get active filter count&#10;  const getActiveFilterCount = () =&gt; {&#10;    let count = 0;&#10;    if (filters.selectedCategory !== &quot;All Categories&quot;) count++;&#10;    if (filters.selectedPriceRanges.length &gt; 0) count++;&#10;    if (filters.selectedRatings.length &gt; 0) count++;&#10;    if (filters.selectedFarmers.length &gt; 0) count++;&#10;    if (filters.selectedTags.length &gt; 0) count++;&#10;    if (&#10;      filters.priceRangeSlider[0] !== 0 ||&#10;      filters.priceRangeSlider[1] !== 10000&#10;    )&#10;      count++;&#10;    return count;&#10;  };&#10;&#10;  // Handle error display&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle text-6xl text-red-500 mb-4&quot;&gt;&lt;/i&gt;&#10;          &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;            Error Loading Products&#10;          &lt;/h3&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;            {error.message || &quot;Something went wrong while loading products&quot;}&#10;          &lt;/p&gt;&#10;          &lt;button&#10;            onClick={() =&gt; refetchProducts()}&#10;            className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            Try Again&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Custom Loading Skeleton Components&#10;  const ProductCardSkeleton = ({ index }) =&gt; (&#10;    &lt;div&#10;      className=&quot;group bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700 relative&quot;&#10;      style={{&#10;        animationDelay: `${index * 150}ms`,&#10;        animation: &quot;fadeInUp 0.6s ease-out forwards&quot;,&#10;      }}&#10;    &gt;&#10;      {/* Shimmer effect overlay */}&#10;      &lt;div className=&quot;absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer&quot;&gt;&lt;/div&gt;&#10;&#10;      {/* Product Image Skeleton */}&#10;      &lt;div className=&quot;relative aspect-square bg-gradient-to-br from-gray-200 via-gray-300 to-gray-200 dark:from-gray-600 dark:via-gray-700 dark:to-gray-600 overflow-hidden&quot;&gt;&#10;        {/* Animated placeholder icons */}&#10;        &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;animate-bounce&quot;&gt;&#10;            &lt;i className=&quot;fas fa-seedling text-4xl text-gray-400 dark:text-gray-500&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {/* Floating particles effect */}&#10;        &lt;div className=&quot;absolute top-2 left-2 w-2 h-2 bg-green-400 rounded-full animate-ping opacity-60&quot;&gt;&lt;/div&gt;&#10;        &lt;div&#10;          className=&quot;absolute top-4 right-3 w-1.5 h-1.5 bg-yellow-400 rounded-full animate-pulse opacity-70&quot;&#10;          style={{ animationDelay: &quot;0.5s&quot; }}&#10;        &gt;&lt;/div&gt;&#10;        &lt;div&#10;          className=&quot;absolute bottom-3 left-4 w-1 h-1 bg-blue-400 rounded-full animate-bounce opacity-50&quot;&#10;          style={{ animationDelay: &quot;1s&quot; }}&#10;        &gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Content Skeleton */}&#10;      &lt;div className=&quot;p-6 space-y-4&quot;&gt;&#10;        {/* Category Badge */}&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;div className=&quot;h-6 w-20 bg-gradient-to-r from-green-200 to-green-300 dark:from-green-700 dark:to-green-600 rounded-full animate-pulse&quot;&gt;&lt;/div&gt;&#10;          &lt;div&#10;            className=&quot;h-5 w-12 bg-gradient-to-r from-blue-200 to-blue-300 dark:from-blue-700 dark:to-blue-600 rounded-full animate-pulse&quot;&#10;            style={{ animationDelay: &quot;0.2s&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Product Name */}&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;h-5 bg-gradient-to-r from-gray-300 via-gray-400 to-gray-300 dark:from-gray-600 dark:via-gray-500 dark:to-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;          &lt;div&#10;            className=&quot;h-4 w-3/4 bg-gradient-to-r from-gray-250 via-gray-350 to-gray-250 dark:from-gray-650 dark:via-gray-550 dark:to-gray-650 rounded animate-pulse&quot;&#10;            style={{ animationDelay: &quot;0.3s&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Rating */}&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;div className=&quot;flex gap-1&quot;&gt;&#10;            {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;              &lt;div&#10;                key={star}&#10;                className=&quot;w-4 h-4 bg-yellow-200 dark:bg-yellow-700 rounded animate-pulse&quot;&#10;                style={{ animationDelay: `${star * 0.1}s` }}&#10;              &gt;&lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;          &lt;div&#10;            className=&quot;h-3 w-12 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&#10;            style={{ animationDelay: &quot;0.8s&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Price */}&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;            &lt;div className=&quot;h-7 w-24 bg-gradient-to-r from-primary-200 to-primary-300 dark:from-primary-700 dark:to-primary-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;            &lt;div&#10;              className=&quot;h-3 w-16 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&#10;              style={{ animationDelay: &quot;0.4s&quot; }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-right space-y-1&quot;&gt;&#10;            &lt;div&#10;              className=&quot;h-4 w-20 bg-green-200 dark:bg-green-700 rounded animate-pulse&quot;&#10;              style={{ animationDelay: &quot;0.6s&quot; }}&#10;            &gt;&lt;/div&gt;&#10;            &lt;div&#10;              className=&quot;h-3 w-14 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&#10;              style={{ animationDelay: &quot;0.7s&quot; }}&#10;            &gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Button */}&#10;        &lt;div&#10;          className=&quot;h-10 bg-gradient-to-r from-primary-300 via-primary-400 to-primary-300 dark:from-primary-600 dark:via-primary-700 dark:to-primary-600 rounded-lg animate-pulse&quot;&#10;          style={{ animationDelay: &quot;0.9s&quot; }}&#10;        &gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  const FilterSidebarSkeleton = () =&gt; (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 space-y-6&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div className=&quot;h-6 w-20 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;        &lt;div className=&quot;h-5 w-5 bg-primary-300 dark:bg-primary-600 rounded-full animate-pulse&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Filter Sections */}&#10;      {[1, 2, 3, 4, 5].map((section) =&gt; (&#10;        &lt;div&#10;          key={section}&#10;          className=&quot;space-y-3&quot;&#10;          style={{ animationDelay: `${section * 0.1}s` }}&#10;        &gt;&#10;          &lt;div className=&quot;flex items-center gap-2 animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;h-4 w-4 bg-primary-300 dark:bg-primary-600 rounded&quot;&gt;&lt;/div&gt;&#10;            &lt;div className=&quot;h-5 w-24 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-2 ml-2&quot;&gt;&#10;            {[1, 2, 3].map((item) =&gt; (&#10;              &lt;div&#10;                key={item}&#10;                className=&quot;flex items-center gap-2 animate-pulse&quot;&#10;                style={{ animationDelay: `${item * 0.05}s` }}&#10;              &gt;&#10;                &lt;div className=&quot;h-3 w-3 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-3 w-20 bg-gray-250 dark:bg-gray-650 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  const HeaderSkeleton = () =&gt; (&#10;    &lt;div className=&quot;bg-gradient-to-r from-primary-600 to-emerald-600 text-white py-12&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {/* Animated farm background */}&#10;        &lt;div className=&quot;absolute inset-0 opacity-10&quot;&gt;&#10;          &lt;div className=&quot;animate-float&quot; style={{ animationDelay: &quot;0s&quot; }}&gt;&#10;            &lt;i className=&quot;fas fa-tractor text-6xl absolute top-8 left-1/4&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;animate-float&quot; style={{ animationDelay: &quot;2s&quot; }}&gt;&#10;            &lt;i className=&quot;fas fa-leaf text-4xl absolute top-16 right-1/3&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;animate-float&quot; style={{ animationDelay: &quot;4s&quot; }}&gt;&#10;            &lt;i className=&quot;fas fa-seedling text-3xl absolute bottom-8 left-1/3&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;relative z-10&quot;&gt;&#10;          &lt;div className=&quot;h-10 w-64 bg-white/20 rounded-lg animate-pulse mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-6 w-96 bg-white/15 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;&#10;          {/* Search results skeleton */}&#10;          &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;h-4 w-48 bg-white/20 rounded&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-3 w-32 bg-white/15 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                &lt;div className=&quot;h-10 w-48 bg-white/20 rounded-lg&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-10 w-12 bg-white/15 rounded-lg&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  if (loading &amp;&amp; allProducts.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Custom CSS animations */}&#10;        &lt;style jsx&gt;{`&#10;          @keyframes fadeInUp {&#10;            from {&#10;              opacity: 0;&#10;              transform: translateY(30px);&#10;            }&#10;            to {&#10;              opacity: 1;&#10;              transform: translateY(0);&#10;            }&#10;          }&#10;&#10;          @keyframes shimmer {&#10;            0% {&#10;              transform: translateX(-100%);&#10;            }&#10;            100% {&#10;              transform: translateX(100%);&#10;            }&#10;          }&#10;&#10;          @keyframes float {&#10;            0%,&#10;            100% {&#10;              transform: translateY(0px);&#10;            }&#10;            50% {&#10;              transform: translateY(-20px);&#10;            }&#10;          }&#10;&#10;          .animate-shimmer {&#10;            animation: shimmer 2s infinite;&#10;          }&#10;&#10;          .animate-float {&#10;            animation: float 6s ease-in-out infinite;&#10;          }&#10;        `}&lt;/style&gt;&#10;&#10;        {/* Header Skeleton */}&#10;        &lt;HeaderSkeleton /&gt;&#10;&#10;        {/* Main Content */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle Skeleton */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;div className=&quot;w-full h-12 bg-white dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-600 animate-pulse&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Skeleton */}&#10;          &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 animate-pulse&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;              &lt;div className=&quot;h-5 w-32 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;h-4 w-16 bg-primary-300 dark:bg-primary-600 rounded&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;              {[1, 2, 3, 4].map((item) =&gt; (&#10;                &lt;div&#10;                  key={item}&#10;                  className=&quot;h-6 w-20 bg-gradient-to-r from-primary-200 to-green-200 dark:from-primary-700 dark:to-green-700 rounded-full animate-pulse&quot;&#10;                  style={{ animationDelay: `${item * 0.1}s` }}&#10;                &gt;&lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar Skeleton */}&#10;            &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;              &lt;FilterSidebarSkeleton /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options Skeleton */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center gap-2 animate-pulse&quot;&gt;&#10;                    &lt;div className=&quot;h-4 w-4 bg-primary-400 rounded animate-bounce&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;h-5 w-24 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex items-center text-primary-600 animate-pulse&quot;&gt;&#10;                    &lt;div className=&quot;h-4 w-4 bg-primary-400 rounded-full animate-spin mr-2&quot;&gt;&lt;/div&gt;&#10;                    &lt;div className=&quot;h-4 w-20 bg-primary-300 rounded&quot;&gt;&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className=&quot;h-4 w-16 bg-gray-300 dark:bg-gray-600 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;h-10 w-32 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid Skeleton */}&#10;              &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                {[...Array(9)].map((_, index) =&gt; (&#10;                  &lt;ProductCardSkeleton key={index} index={index} /&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;&#10;              {/* Pagination Skeleton */}&#10;              &lt;div className=&quot;flex justify-center items-center space-x-2 mt-8&quot;&gt;&#10;                &lt;div className=&quot;h-10 w-20 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;                  {[1, 2, 3, 4, 5].map((page) =&gt; (&#10;                    &lt;div&#10;                      key={page}&#10;                      className=&quot;h-10 w-10 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&#10;                      style={{ animationDelay: `${page * 0.1}s` }}&#10;                    &gt;&lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-10 w-16 bg-gray-300 dark:bg-gray-600 rounded-lg animate-pulse&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Products Header */}&#10;        &lt;div className=&quot;bg-primary-600 text-white py-12&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;Fresh Products&lt;/h1&gt;&#10;            &lt;p className=&quot;text-xl text-primary-100&quot;&gt;&#10;              Discover fresh, locally-sourced produce from our trusted farmers&#10;            &lt;/p&gt;&#10;&#10;            {/* Search Results Info */}&#10;            {(filters.searchTerm ||&#10;              filters.selectedCategory !== &quot;All Categories&quot;) &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between flex-wrap gap-2&quot;&gt;&#10;                  &lt;div&gt;&#10;                    {filters.searchTerm &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Search results for:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          &amp;quot;{filters.searchTerm}&amp;quot;&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    {filters.selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Category:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          {filters.selectedCategory}&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    &lt;p className=&quot;text-sm text-primary-200&quot;&gt;&#10;                      {paginationData.pagination.totalProducts} products found&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Search Bar in Results */}&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      className=&quot;px-4 py-2 rounded-lg text-gray-900 focus:outline-none&quot;&#10;                      value={filters.searchTerm}&#10;                      onChange={(e) =&gt;&#10;                        handleFilterChange(&quot;searchTerm&quot;, e.target.value)&#10;                      }&#10;                      onKeyPress={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; refetchProducts()}&#10;                    /&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; refetchProducts()}&#10;                      className=&quot;px-4 py-2 bg-primary-500 hover:bg-primary-400 rounded-lg transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filters and Products */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowMobileFilters(!showMobileFilters)}&#10;              className=&quot;w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-between&quot;&#10;            &gt;&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Filters&#10;                {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                    {getActiveFilterCount()}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/span&gt;&#10;              &lt;i&#10;                className={`fas fa-chevron-${showMobileFilters ? &quot;up&quot; : &quot;down&quot;}`}&#10;              &gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Summary */}&#10;          {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Active Filters ({getActiveFilterCount()})&#10;                &lt;/h4&gt;&#10;                &lt;button&#10;                  onClick={clearAllFilters}&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400&quot;&#10;                &gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {filters.selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200&quot;&gt;&#10;                    Category: {filters.selectedCategory}&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleFilterChange(&quot;category&quot;, &quot;All Categories&quot;)&#10;                      }&#10;                      className=&quot;ml-2 text-primary-600 hover:text-primary-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;                {filters.selectedPriceRanges.map((range) =&gt; (&#10;                  &lt;span&#10;                    key={range}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;                  &gt;&#10;                    {range}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;priceRange&quot;, range)}&#10;                      className=&quot;ml-2 text-green-600 hover:text-green-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedRatings.map((rating) =&gt; (&#10;                  &lt;span&#10;                    key={rating}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  &gt;&#10;                    {rating}+ Stars&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;rating&quot;, rating)}&#10;                      className=&quot;ml-2 text-yellow-600 hover:text-yellow-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedFarmers.map((farmer) =&gt; (&#10;                  &lt;span&#10;                    key={farmer}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&#10;                  &gt;&#10;                    {farmer}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;farmer&quot;, farmer)}&#10;                      className=&quot;ml-2 text-blue-600 hover:text-blue-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {filters.selectedTags.map((tag) =&gt; (&#10;                  &lt;span&#10;                    key={tag}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;&#10;                  &gt;&#10;                    {tag}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFilterChange(&quot;tag&quot;, tag)}&#10;                      className=&quot;ml-2 text-purple-600 hover:text-purple-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {(filters.priceRangeSlider[0] !== 0 ||&#10;                  filters.priceRangeSlider[1] !== 10000) &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;                    ৳{filters.priceRangeSlider[0]} - ৳&#10;                    {filters.priceRangeSlider[1]}&#10;                    &lt;button&#10;                      onClick={() =&gt;&#10;                        handleFilterChange(&quot;priceSlider&quot;, [0, 10000])&#10;                      }&#10;                      className=&quot;ml-2 text-orange-600 hover:text-orange-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar */}&#10;            &lt;div&#10;              className={`lg:col-span-1 ${&#10;                showMobileFilters ? &quot;block&quot; : &quot;hidden lg:block&quot;&#10;              }`}&#10;            &gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sticky top-24&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Filters&#10;                  &lt;/h3&gt;&#10;                  {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                      {getActiveFilterCount()}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-th-large mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Category&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                    {CATEGORY_OPTIONS.map((category) =&gt; (&#10;                      &lt;label&#10;                        key={category}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;radio&quot;&#10;                          name=&quot;category&quot;&#10;                          checked={filters.selectedCategory === category}&#10;                          onChange={() =&gt;&#10;                            handleFilterChange(&quot;category&quot;, category)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {category}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Price Range (৳)&#10;                  &lt;/h4&gt;&#10;&#10;                  {/* Custom Price Range Slider */}&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={filters.priceRangeSlider[0]}&#10;                        onChange={(e) =&gt;&#10;                          handleFilterChange(&quot;priceSlider&quot;, [&#10;                            +e.target.value,&#10;                            filters.priceRangeSlider[1],&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={filters.priceRangeSlider[1]}&#10;                        onChange={(e) =&gt;&#10;                          handleFilterChange(&quot;priceSlider&quot;, [&#10;                            filters.priceRangeSlider[0],&#10;                            +e.target.value,&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;relative h-2 bg-gray-200 rounded-lg&quot;&gt;&#10;                        &lt;div&#10;                          className=&quot;absolute h-2 bg-primary-600 rounded-lg&quot;&#10;                          style={{&#10;                            left: `${(filters.priceRangeSlider[0] / 10000) * 100}%`,&#10;                            width: `${((filters.priceRangeSlider[1] - filters.priceRangeSlider[0]) / 10000) * 100}%`,&#10;                          }}&#10;                        &gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                      &lt;span&gt;��{filters.priceRangeSlider[0]}&lt;/span&gt;&#10;                      &lt;span&gt;৳{filters.priceRangeSlider[1]}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {PRICE_RANGE_OPTIONS.map((option) =&gt; (&#10;                      &lt;label&#10;                        key={option.label}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedPriceRanges.includes(&#10;                            option.label,&#10;                          )}&#10;                          onChange={() =&gt;&#10;                            handleFilterChange(&quot;priceRange&quot;, option.label)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {option.label}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Rating Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-star mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Rating&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {[5, 4, 3, 2, 1].map((rating) =&gt; (&#10;                      &lt;label&#10;                        key={rating}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedRatings.includes(rating)}&#10;                          onChange={() =&gt; handleFilterChange(&quot;rating&quot;, rating)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 flex items-center&quot;&gt;&#10;                          {[...Array(rating)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className=&quot;fas fa-star text-yellow-400 text-xs mr-1&quot;&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          {rating &lt; 5 &amp;&amp; &lt;span className=&quot;ml-1&quot;&gt;&amp; Up&lt;/span&gt;}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farmer Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-user mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                    {availableFarmers.length &gt; 0 ? (&#10;                      availableFarmers.map((farmer) =&gt; (&#10;                        &lt;label&#10;                          key={farmer}&#10;                          className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                        &gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            checked={filters.selectedFarmers.includes(farmer)}&#10;                            onChange={() =&gt;&#10;                              handleFilterChange(&quot;farmer&quot;, farmer)&#10;                            }&#10;                            className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                          /&gt;&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 truncate&quot;&gt;&#10;                            {farmer}&#10;                          &lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))&#10;                    ) : (&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 p-2&quot;&gt;&#10;                        Loading farmers...&#10;                      &lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tag Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-tags mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Tags&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {TAG_OPTIONS.map((tag) =&gt; (&#10;                      &lt;label&#10;                        key={tag}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={filters.selectedTags.includes(tag)}&#10;                          onChange={() =&gt; handleFilterChange(&quot;tag&quot;, tag)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {tag}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-4&quot;&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    disabled={getActiveFilterCount() === 0}&#10;                    className=&quot;w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-lg font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                    Clear All Filters&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    {paginationData.pagination.totalProducts} products&#10;                  &lt;/span&gt;&#10;                  {loading &amp;&amp; (&#10;                    &lt;div className=&quot;flex items-center text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span className=&quot;text-sm&quot;&gt;Loading...&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;label className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Sort by:&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.sortBy}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;sortBy&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                    &lt;option value=&quot;price-low&quot;&gt;Price: Low to High&lt;/option&gt;&#10;                    &lt;option value=&quot;price-high&quot;&gt;Price: High to Low&lt;/option&gt;&#10;                    &lt;option value=&quot;rating&quot;&gt;Highest Rated&lt;/option&gt;&#10;                    &lt;option value=&quot;popular&quot;&gt;Most Popular&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid */}&#10;              {loading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(9)].map((_, index) =&gt; (&#10;                    &lt;div&#10;                      key={index}&#10;                      className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden animate-pulse&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-full h-48 bg-gray-300 dark:bg-gray-600&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;p-6&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded mb-3 w-3/4&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded mb-4 w-1/2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : paginationData.products.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {paginationData.products.map((product, index) =&gt; (&#10;                      &lt;ProductCard&#10;                        key={`${product._id}-${product.farmerId || product.farmer?._id || &quot;unknown&quot;}-${index}`}&#10;                        product={product}&#10;                      /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Pagination Component */}&#10;                  {paginationData.pagination.totalPages &gt; 1 &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-center items-center gap-2 mt-8&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt;&#10;                          setCurrentPage((prev) =&gt; Math.max(prev - 1, 1))&#10;                        }&#10;                        disabled={!paginationData.pagination.hasPrevPage}&#10;                        className=&quot;px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-chevron-left&quot;&gt;&lt;/i&gt;&#10;                      &lt;/button&gt;&#10;&#10;                      {Array.from(&#10;                        { length: paginationData.pagination.totalPages },&#10;                        (_, i) =&gt; i + 1,&#10;                      ).map((page) =&gt; (&#10;                        &lt;button&#10;                          key={page}&#10;                          onClick={() =&gt; setCurrentPage(page)}&#10;                          className={`px-3 py-2 rounded-lg transition ${&#10;                            page === paginationData.pagination.currentPage&#10;                              ? &quot;bg-primary-500 text-white&quot;&#10;                              : &quot;border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                          }`}&#10;                        &gt;&#10;                          {page}&#10;                        &lt;/button&gt;&#10;                      ))}&#10;&#10;                      &lt;button&#10;                        onClick={() =&gt;&#10;                          setCurrentPage((prev) =&gt;&#10;                            Math.min(&#10;                              prev + 1,&#10;                              paginationData.pagination.totalPages,&#10;                            ),&#10;                          )&#10;                        }&#10;                        disabled={!paginationData.pagination.hasNextPage}&#10;                        className=&quot;px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;                      &gt;&#10;                        &lt;i className=&quot;fas fa-chevron-right&quot;&gt;&lt;/i&gt;&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No products found&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                    Try adjusting your search criteria or browse all products&#10;                  &lt;/p&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                  &gt;&#10;                    Browse All Products&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;&#10;// Main component&#10;export default function Products() {&#10;  return (&#10;    &lt;Suspense fallback={&lt;Loading /&gt;}&gt;&#10;      &lt;ProductsContent /&gt;&#10;    &lt;/Suspense&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/profile/farmer.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/profile/farmer.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useAuth } from &quot;../../contexts/AuthContext&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useTheme } from &quot;../../contexts/ThemeContext&quot;;&#10;&#10;export default function FarmerProfilePage() {&#10;  const { user, isAuthenticated, updateUser } = useAuth();&#10;  const { isDarkMode } = useTheme();&#10;  const router = useRouter();&#10;&#10;  const [activeTab, setActiveTab] = useState(&quot;personal&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [message, setMessage] = useState({ type: &quot;&quot;, text: &quot;&quot; });&#10;  const [profileData, setProfileData] = useState({&#10;    name: &quot;&quot;,&#10;    email: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    farmInfo: {&#10;      farmName: &quot;&quot;,&#10;      farmDescription: &quot;&quot;,&#10;      farmSize: &quot;&quot;,&#10;      farmType: &quot;&quot;,&#10;      certifications: [],&#10;      establishedYear: &quot;&quot;,&#10;      farmingMethods: [],&#10;    },&#10;    address: {&#10;      street: &quot;&quot;,&#10;      city: &quot;&quot;,&#10;      state: &quot;&quot;,&#10;      zipCode: &quot;&quot;,&#10;      country: &quot;&quot;,&#10;    },&#10;    businessInfo: {&#10;      businessLicense: &quot;&quot;,&#10;      taxId: &quot;&quot;,&#10;      deliveryRadius: &quot;&quot;,&#10;      minimumOrder: &quot;&quot;,&#10;      website: &quot;&quot;,&#10;      socialMedia: {&#10;        facebook: &quot;&quot;,&#10;        instagram: &quot;&quot;,&#10;        twitter: &quot;&quot;,&#10;      },&#10;    },&#10;    preferences: {&#10;      notifications: {&#10;        email: true,&#10;        sms: false,&#10;        orderUpdates: true,&#10;        lowStockAlerts: true,&#10;        customerMessages: true,&#10;        marketingUpdates: false,&#10;      },&#10;      language: &quot;en&quot;,&#10;      currency: &quot;USD&quot;,&#10;      autoAcceptOrders: false,&#10;      showFarmLocation: true,&#10;    },&#10;    security: {&#10;      currentPassword: &quot;&quot;,&#10;      newPassword: &quot;&quot;,&#10;      confirmPassword: &quot;&quot;,&#10;    },&#10;  });&#10;&#10;  // Redirect if not authenticated or not a farmer&#10;  useEffect(() =&gt; {&#10;    if (!isAuthenticated) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    // Check if user is a farmer, if not redirect to regular profile&#10;    if (user &amp;&amp; user.role !== &quot;farmer&quot;) {&#10;      router.push(&quot;/profile&quot;);&#10;      return;&#10;    }&#10;&#10;    // Initialize profile data with user data&#10;    if (user) {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        name: user.name || &quot;&quot;,&#10;        email: user.email || &quot;&quot;,&#10;        phone: user.phone || &quot;&quot;,&#10;        address: user.address || prev.address,&#10;        farmInfo: user.farmInfo || prev.farmInfo,&#10;        businessInfo: user.businessInfo || prev.businessInfo,&#10;        preferences: user.preferences || prev.preferences,&#10;      }));&#10;    }&#10;  }, [user, isAuthenticated, router]);&#10;&#10;  const handleInputChange = (field, value) =&gt; {&#10;    setProfileData((prev) =&gt; ({&#10;      ...prev,&#10;      [field]: value,&#10;    }));&#10;  };&#10;&#10;  const handleNestedChange = (section, subsection, field, value) =&gt; {&#10;    if (subsection) {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        [section]: {&#10;          ...prev[section],&#10;          [subsection]: {&#10;            ...prev[section][subsection],&#10;            [field]: value,&#10;          },&#10;        },&#10;      }));&#10;    } else {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        [section]: {&#10;          ...prev[section],&#10;          [field]: value,&#10;        },&#10;      }));&#10;    }&#10;  };&#10;&#10;  const handleArrayChange = (section, field, value) =&gt; {&#10;    const arrayValue = value.split(&quot;,&quot;).map(item =&gt; item.trim()).filter(item =&gt; item);&#10;    setProfileData((prev) =&gt; ({&#10;      ...prev,&#10;      [section]: {&#10;        ...prev[section],&#10;        [field]: arrayValue,&#10;      },&#10;    }));&#10;  };&#10;&#10;  const handlePersonalInfoUpdate = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setMessage({ type: &quot;&quot;, text: &quot;&quot; });&#10;&#10;      const response = await fetch(&quot;/api/auth/users&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          name: profileData.name,&#10;          phone: profileData.phone,&#10;          address: profileData.address,&#10;          farmInfo: profileData.farmInfo,&#10;          businessInfo: profileData.businessInfo,&#10;          preferences: profileData.preferences,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const updatedUser = await response.json();&#10;        updateUser(updatedUser.user);&#10;        setMessage({ type: &quot;success&quot;, text: &quot;Profile updated successfully!&quot; });&#10;&#10;        // Also update localStorage to persist data&#10;        localStorage.setItem(&#10;          &quot;farmfresh_user&quot;,&#10;          JSON.stringify(updatedUser.user),&#10;        );&#10;      } else {&#10;        const errorData = await response.json();&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: errorData.error || &quot;Failed to update profile&quot;,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      setMessage({&#10;        type: &quot;error&quot;,&#10;        text: &quot;An error occurred while updating profile&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handlePasswordChange = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setMessage({ type: &quot;&quot;, text: &quot;&quot; });&#10;&#10;      if (&#10;        profileData.security.newPassword !==&#10;        profileData.security.confirmPassword&#10;      ) {&#10;        setMessage({ type: &quot;error&quot;, text: &quot;New passwords don't match&quot; });&#10;        return;&#10;      }&#10;&#10;      if (profileData.security.newPassword.length &lt; 6) {&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: &quot;Password must be at least 6 characters long&quot;,&#10;        });&#10;        return;&#10;      }&#10;&#10;      const response = await fetch(&quot;/api/auth/users&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          currentPassword: profileData.security.currentPassword,&#10;          newPassword: profileData.security.newPassword,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setMessage({ type: &quot;success&quot;, text: &quot;Password updated successfully!&quot; });&#10;        setProfileData((prev) =&gt; ({&#10;          ...prev,&#10;          security: {&#10;            currentPassword: &quot;&quot;,&#10;            newPassword: &quot;&quot;,&#10;            confirmPassword: &quot;&quot;,&#10;          },&#10;        }));&#10;      } else {&#10;        const errorData = await response.json();&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: errorData.error || &quot;Failed to update password&quot;,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      setMessage({&#10;        type: &quot;error&quot;,&#10;        text: &quot;An error occurred while updating password&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const tabs = [&#10;    { id: &quot;personal&quot;, label: &quot;Personal Info&quot;, icon: &quot;fas fa-user&quot; },&#10;    { id: &quot;farm&quot;, label: &quot;Farm Info&quot;, icon: &quot;fas fa-seedling&quot; },&#10;    { id: &quot;business&quot;, label: &quot;Business&quot;, icon: &quot;fas fa-building&quot; },&#10;    { id: &quot;address&quot;, label: &quot;Address&quot;, icon: &quot;fas fa-map-marker-alt&quot; },&#10;    { id: &quot;preferences&quot;, label: &quot;Preferences&quot;, icon: &quot;fas fa-cog&quot; },&#10;    { id: &quot;security&quot;, label: &quot;Security&quot;, icon: &quot;fas fa-shield-alt&quot; },&#10;  ];&#10;&#10;  if (!isAuthenticated) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;            Farmer Profile Settings&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Manage your farmer account settings and farm information&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm&quot;&gt;&#10;          {/* Tab Navigation */}&#10;          &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;nav className=&quot;flex space-x-8 px-6 overflow-x-auto&quot;&gt;&#10;              {tabs.map((tab) =&gt; (&#10;                &lt;button&#10;                  key={tab.id}&#10;                  onClick={() =&gt; setActiveTab(tab.id)}&#10;                  className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 whitespace-nowrap ${&#10;                    activeTab === tab.id&#10;                      ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                      : &quot;border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;i className={tab.icon}&gt;&lt;/i&gt;&#10;                  &lt;span&gt;{tab.label}&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              ))}&#10;            &lt;/nav&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Tab Content */}&#10;          &lt;div className=&quot;p-6&quot;&gt;&#10;            {message.text &amp;&amp; (&#10;              &lt;div&#10;                className={`mb-4 p-4 rounded-md ${&#10;                  message.type === &quot;success&quot;&#10;                    ? &quot;bg-green-50 dark:bg-green-900 text-green-700 dark:text-green-300 border border-green-200 dark:border-green-800&quot;&#10;                    : &quot;bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 border border-red-200 dark:border-red-800&quot;&#10;                }`}&#10;              &gt;&#10;                {message.text}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Personal Information Tab */}&#10;            {activeTab === &quot;personal&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Personal Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Full Name&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.name}&#10;                      onChange={(e) =&gt;&#10;                        handleInputChange(&quot;name&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Email Address&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;email&quot;&#10;                      value={profileData.email}&#10;                      disabled&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-gray-50 dark:bg-gray-600 text-gray-500 dark:text-gray-400&quot;&#10;                    /&gt;&#10;                    &lt;p className=&quot;mt-1 text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      Email cannot be changed&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Phone Number&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;tel&quot;&#10;                      value={profileData.phone}&#10;                      onChange={(e) =&gt;&#10;                        handleInputChange(&quot;phone&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Changes&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Farm Information Tab */}&#10;            {activeTab === &quot;farm&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Farm Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Name *&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.farmName}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmName&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Green Valley Farm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Type&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={profileData.farmInfo.farmType}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmType&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select Farm Type&lt;/option&gt;&#10;                      &lt;option value=&quot;organic&quot;&gt;Organic Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;conventional&quot;&gt;Conventional Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;hydroponic&quot;&gt;Hydroponic Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;greenhouse&quot;&gt;Greenhouse Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;mixed&quot;&gt;Mixed Farm&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Size (acres)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.farmInfo.farmSize}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmSize&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;10&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Established Year&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.farmInfo.establishedYear}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;establishedYear&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;2020&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Description&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={profileData.farmInfo.farmDescription}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmDescription&quot;, e.target.value)&#10;                      }&#10;                      rows={4}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Tell customers about your farm, your farming philosophy, and what makes your products special...&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Certifications (comma-separated)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.certifications.join(&quot;, &quot;)}&#10;                      onChange={(e) =&gt;&#10;                        handleArrayChange(&quot;farmInfo&quot;, &quot;certifications&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Organic Certified, Non-GMO, USDA Organic&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farming Methods (comma-separated)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.farmingMethods.join(&quot;, &quot;)}&#10;                      onChange={(e) =&gt;&#10;                        handleArrayChange(&quot;farmInfo&quot;, &quot;farmingMethods&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Sustainable, Pesticide-free, Crop Rotation&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Farm Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Business Information Tab */}&#10;            {activeTab === &quot;business&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Business Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Business License&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.businessInfo.businessLicense}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;businessLicense&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Tax ID&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.businessInfo.taxId}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;taxId&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Delivery Radius (miles)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.businessInfo.deliveryRadius}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;deliveryRadius&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;25&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Minimum Order ($)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.businessInfo.minimumOrder}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;minimumOrder&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;25&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Website&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.website}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;website&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://yourfarm.com&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Social Media */}&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Facebook&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.facebook}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;facebook&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://facebook.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Instagram&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.instagram}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;instagram&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://instagram.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Twitter&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.twitter}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;twitter&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://twitter.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Business Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Address Tab */}&#10;            {activeTab === &quot;address&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Farm Address&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Street Address&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.street}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;street&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      City&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.city}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;city&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      State/Province&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.state}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;state&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      ZIP/Postal Code&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.zipCode}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;zipCode&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Country&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={profileData.address.country}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;country&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select Country&lt;/option&gt;&#10;                      &lt;option value=&quot;US&quot;&gt;United States&lt;/option&gt;&#10;                      &lt;option value=&quot;CA&quot;&gt;Canada&lt;/option&gt;&#10;                      &lt;option value=&quot;UK&quot;&gt;United Kingdom&lt;/option&gt;&#10;                      &lt;option value=&quot;AU&quot;&gt;Australia&lt;/option&gt;&#10;                      &lt;option value=&quot;DE&quot;&gt;Germany&lt;/option&gt;&#10;                      &lt;option value=&quot;FR&quot;&gt;France&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Address&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Preferences Tab */}&#10;            {activeTab === &quot;preferences&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Preferences&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Notification Preferences&#10;                    &lt;/h4&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.email}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;email&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Email notifications&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.sms}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;sms&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          SMS notifications&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.orderUpdates}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;orderUpdates&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Order status updates&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.lowStockAlerts}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;lowStockAlerts&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Low stock alerts&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.customerMessages}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;customerMessages&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Customer messages&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.marketingUpdates}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;marketingUpdates&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Marketing updates&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Business Preferences&#10;                    &lt;/h4&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.autoAcceptOrders}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;autoAcceptOrders&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Auto-accept orders&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.showFarmLocation}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;showFarmLocation&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Show farm location to customers&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Language&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={profileData.preferences.language}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;language&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;&#10;                        &lt;option value=&quot;es&quot;&gt;Spanish&lt;/option&gt;&#10;                        &lt;option value=&quot;fr&quot;&gt;French&lt;/option&gt;&#10;                        &lt;option value=&quot;de&quot;&gt;German&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Currency&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={profileData.preferences.currency}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;currency&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;USD&quot;&gt;USD ($)&lt;/option&gt;&#10;                        &lt;option value=&quot;EUR&quot;&gt;EUR (€)&lt;/option&gt;&#10;                        &lt;option value=&quot;GBP&quot;&gt;GBP (£)&lt;/option&gt;&#10;                        &lt;option value=&quot;CAD&quot;&gt;CAD ($)&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Preferences&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Security Tab */}&#10;            {activeTab === &quot;security&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Security Settings&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;max-w-md space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Current Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.currentPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;currentPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      New Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.newPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;newPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Confirm New Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.confirmPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;confirmPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;button&#10;                    onClick={handlePasswordChange}&#10;                    disabled={loading}&#10;                    className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    {loading ? &quot;Updating...&quot; : &quot;Update Password&quot;}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/reset-password/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/reset-password/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter, useSearchParams } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ResetPassword() {&#10;  const router = useRouter();&#10;  const searchParams = useSearchParams();&#10;  const token = searchParams.get(&quot;token&quot;);&#10;&#10;  const [formData, setFormData] = useState({&#10;    password: &quot;&quot;,&#10;    confirmPassword: &quot;&quot;,&#10;  });&#10;  const [loading, setLoading] = useState(false);&#10;  const [success, setSuccess] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [tokenValidated, setTokenValidated] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    // Only set error if we're sure there's no token in URL&#10;    if (!token) {&#10;      setError(&#10;        &quot;This page requires a reset token. Please use the reset link from your email.&quot;,&#10;      );&#10;    } else {&#10;      // Reset error when we have a token&#10;      setError(&quot;&quot;);&#10;      setTokenValidated(true);&#10;    }&#10;  }, [token]);&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;&#10;    if (!token) {&#10;      setError(&quot;No reset token available&quot;);&#10;      setLoading(false);&#10;      return;&#10;    }&#10;&#10;    if (formData.password !== formData.confirmPassword) {&#10;      setError(&quot;Passwords do not match&quot;);&#10;      setLoading(false);&#10;      return;&#10;    }&#10;&#10;    if (formData.password.length &lt; 6) {&#10;      setError(&quot;Password must be at least 6 characters long&quot;);&#10;      setLoading(false);&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/auth/reset-password&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          token,&#10;          password: formData.password,&#10;          confirmPassword: formData.confirmPassword,&#10;        }),&#10;      });&#10;&#10;      const data = await response.json();&#10;&#10;      if (response.ok) {&#10;        setSuccess(true);&#10;        setTimeout(() =&gt; {&#10;          router.push(&quot;/login&quot;);&#10;        }, 3000);&#10;      } else {&#10;        setError(data.error || &quot;Failed to reset password&quot;);&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;An error occurred. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;flex justify-center mb-6&quot;&gt;&#10;            &lt;div className=&quot;bg-primary-500 p-3 rounded-full&quot;&gt;&#10;              &lt;i className=&quot;fas fa-key text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;            {success ? &quot;Password Reset Successful&quot; : &quot;Reset Your Password&quot;}&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;            {success&#10;              ? &quot;Your password has been reset successfully&quot;&#10;              : &quot;Enter your new password below&quot;}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;          {success ? (&#10;            &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;              &lt;div className=&quot;bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg&quot;&gt;&#10;                &lt;i className=&quot;fas fa-check-circle text-xl mb-2&quot;&gt;&lt;/i&gt;&#10;                &lt;p&gt;Your password has been reset successfully!&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                You will be redirected to the login page in a few seconds...&#10;              &lt;/p&gt;&#10;              &lt;Link&#10;                href=&quot;/login&quot;&#10;                className=&quot;inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors&quot;&#10;              &gt;&#10;                Go to Login&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              {error &amp;&amp; (&#10;                &lt;div className=&quot;bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-exclamation-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                  {error}&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              &lt;form onSubmit={handleSubmit} className=&quot;space-y-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;&#10;                    New Password&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      required&#10;                      minLength={6}&#10;                      value={formData.password}&#10;                      onChange={(e) =&gt;&#10;                        setFormData({ ...formData, password: e.target.value })&#10;                      }&#10;                      className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;••••••••&quot;&#10;                    /&gt;&#10;                    &lt;i className=&quot;fas fa-lock absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;&#10;                    Confirm New Password&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      required&#10;                      minLength={6}&#10;                      value={formData.confirmPassword}&#10;                      onChange={(e) =&gt;&#10;                        setFormData({&#10;                          ...formData,&#10;                          confirmPassword: e.target.value,&#10;                        })&#10;                      }&#10;                      className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;••••••••&quot;&#10;                    /&gt;&#10;                    &lt;i className=&quot;fas fa-lock absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  type=&quot;submit&quot;&#10;                  disabled={loading || !token}&#10;                  className=&quot;w-full bg-primary-600 text-white py-3 px-4 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-200 transition duration-200 disabled:opacity-50&quot;&#10;                &gt;&#10;                  {loading ? (&#10;                    &lt;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      Resetting Password...&#10;                    &lt;/&gt;&#10;                  ) : (&#10;                    &quot;Reset Password&quot;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/form&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;Link&#10;            href=&quot;/login&quot;&#10;            className=&quot;text-primary-600 hover:text-primary-500 text-sm font-medium&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-arrow-left mr-1&quot;&gt;&lt;/i&gt;&#10;            Back to Login&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, Suspense } from &quot;react&quot;;&#10;import { useRouter, useSearchParams } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;// Force dynamic rendering for this page&#10;export const dynamic = 'force-dynamic';&#10;&#10;// Component that uses useSearchParams - must be wrapped in Suspense&#10;function ResetPasswordForm() {&#10;  const router = useRouter();&#10;  const searchParams = useSearchParams();&#10;  const token = searchParams.get(&quot;token&quot;);&#10;&#10;  const [formData, setFormData] = useState({&#10;    password: &quot;&quot;,&#10;    confirmPassword: &quot;&quot;,&#10;  });&#10;  const [loading, setLoading] = useState(false);&#10;  const [success, setSuccess] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [tokenValidated, setTokenValidated] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    // Only set error if we're sure there's no token in URL&#10;    if (!token) {&#10;      setError(&#10;        &quot;This page requires a reset token. Please use the reset link from your email.&quot;,&#10;      );&#10;    } else {&#10;      // Reset error when we have a token&#10;      setError(&quot;&quot;);&#10;      setTokenValidated(true);&#10;    }&#10;  }, [token]);&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;&#10;    if (!token) {&#10;      setError(&quot;No reset token available&quot;);&#10;      setLoading(false);&#10;      return;&#10;    }&#10;&#10;    if (formData.password !== formData.confirmPassword) {&#10;      setError(&quot;Passwords do not match&quot;);&#10;      setLoading(false);&#10;      return;&#10;    }&#10;&#10;    if (formData.password.length &lt; 6) {&#10;      setError(&quot;Password must be at least 6 characters long&quot;);&#10;      setLoading(false);&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/auth/reset-password&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          token,&#10;          password: formData.password,&#10;          confirmPassword: formData.confirmPassword,&#10;        }),&#10;      });&#10;&#10;      const data = await response.json();&#10;&#10;      if (response.ok) {&#10;        setSuccess(true);&#10;        setTimeout(() =&gt; {&#10;          router.push(&quot;/login&quot;);&#10;        }, 3000);&#10;      } else {&#10;        setError(data.error || &quot;Failed to reset password&quot;);&#10;      }&#10;    } catch (error) {&#10;      setError(&quot;An error occurred. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-md w-full space-y-8&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;flex justify-center mb-6&quot;&gt;&#10;            &lt;div className=&quot;bg-primary-500 p-3 rounded-full&quot;&gt;&#10;              &lt;i className=&quot;fas fa-key text-white text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;            {success ? &quot;Password Reset Successful&quot; : &quot;Reset Your Password&quot;}&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;            {success&#10;              ? &quot;Your password has been reset successfully&quot;&#10;              : &quot;Enter your new password below&quot;}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 py-8 px-6 shadow-xl rounded-2xl&quot;&gt;&#10;          {success ? (&#10;            &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;              &lt;div className=&quot;bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg&quot;&gt;&#10;                &lt;i className=&quot;fas fa-check-circle text-xl mb-2&quot;&gt;&lt;/i&gt;&#10;                &lt;p&gt;Your password has been reset successfully!&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                You will be redirected to the login page in a few seconds...&#10;              &lt;/p&gt;&#10;              &lt;Link&#10;                href=&quot;/login&quot;&#10;                className=&quot;inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors&quot;&#10;              &gt;&#10;                Go to Login&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              {error &amp;&amp; (&#10;                &lt;div className=&quot;bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-exclamation-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                  {error}&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              &lt;form onSubmit={handleSubmit} className=&quot;space-y-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;&#10;                    New Password&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      required&#10;                      minLength={6}&#10;                      value={formData.password}&#10;                      onChange={(e) =&gt;&#10;                        setFormData({ ...formData, password: e.target.value })&#10;                      }&#10;                      className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;••••••••&quot;&#10;                    /&gt;&#10;                    &lt;i className=&quot;fas fa-lock absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1&quot;&gt;&#10;                    Confirm New Password&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      required&#10;                      minLength={6}&#10;                      value={formData.confirmPassword}&#10;                      onChange={(e) =&gt;&#10;                        setFormData({&#10;                          ...formData,&#10;                          confirmPassword: e.target.value,&#10;                        })&#10;                      }&#10;                      className=&quot;w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;••••••••&quot;&#10;                    /&gt;&#10;                    &lt;i className=&quot;fas fa-lock absolute left-3 top-3.5 text-gray-400&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  type=&quot;submit&quot;&#10;                  disabled={loading || !token}&#10;                  className=&quot;w-full bg-primary-600 text-white py-3 px-4 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-200 transition duration-200 disabled:opacity-50&quot;&#10;                &gt;&#10;                  {loading ? (&#10;                    &lt;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      Resetting Password...&#10;                    &lt;/&gt;&#10;                  ) : (&#10;                    &quot;Reset Password&quot;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/form&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;Link&#10;            href=&quot;/login&quot;&#10;            className=&quot;text-primary-600 hover:text-primary-500 text-sm font-medium&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-arrow-left mr-1&quot;&gt;&lt;/i&gt;&#10;            Back to Login&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default function ResetPassword() {&#10;  return (&#10;    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;&#10;      &lt;ResetPasswordForm /&gt;&#10;    &lt;/Suspense&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/success/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/success/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function Success() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const { data: session } = useSession();&#10;  const orderId = searchParams.get(&quot;orderId&quot;);&#10;&#10;  // Initialize with data from sessionStorage if available, otherwise use placeholder&#10;  const [order, setOrder] = useState(() =&gt; {&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      try {&#10;        const pendingOrder = sessionStorage.getItem(&quot;pendingOrder&quot;);&#10;        if (pendingOrder) {&#10;          const parsedOrder = JSON.parse(pendingOrder);&#10;          // Clean up sessionStorage after retrieving&#10;          sessionStorage.removeItem(&quot;pendingOrder&quot;);&#10;          return parsedOrder;&#10;        }&#10;      } catch (e) {&#10;        console.warn(&quot;Could not retrieve order from sessionStorage:&quot;, e);&#10;      }&#10;    }&#10;&#10;    // Fallback placeholder&#10;    return {&#10;      orderNumber: orderId || &quot;LOADING...&quot;,&#10;      createdAt: new Date().toISOString(),&#10;      paymentMethod: &quot;Processing...&quot;,&#10;      status: &quot;confirmed&quot;,&#10;      deliveryAddress: {&#10;        name: &quot;Loading...&quot;,&#10;        address: &quot;Fetching address details...&quot;,&#10;        city: &quot;&quot;,&#10;        phone: &quot;&quot;,&#10;      },&#10;      items: [],&#10;      subtotal: 0,&#10;      deliveryFee: 0,&#10;      serviceFee: 0,&#10;      total: 0,&#10;    };&#10;  });&#10;&#10;  const [isLoadingDetails, setIsLoadingDetails] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (orderId) {&#10;      // Only fetch if we don't have complete order data&#10;      if (!order.orderId || order.orderNumber === &quot;LOADING...&quot;) {&#10;        setIsLoadingDetails(true);&#10;        fetchOrderDetails();&#10;      }&#10;    } else {&#10;      router.push(&quot;/&quot;);&#10;    }&#10;  }, [orderId, router]);&#10;&#10;  const fetchOrderDetails = async () =&gt; {&#10;    try {&#10;      const response = await fetch(`/api/orders/${orderId}`);&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setOrder(data.order);&#10;&#10;        // Dispatch order completion event for automatic purchase count updates&#10;        if (data.order &amp;&amp; data.order.items) {&#10;          console.log(&#10;            &quot; Order details loaded, dispatching completion event:&quot;,&#10;            {&#10;              orderId: data.order._id || orderId,&#10;              items: data.order.items,&#10;            },&#10;          );&#10;&#10;          window.dispatchEvent(&#10;            new CustomEvent(&quot;orderCompleted&quot;, {&#10;              detail: {&#10;                orderId: data.order._id || orderId,&#10;                items: data.order.items.map((item) =&gt; ({&#10;                  productId: item.productId || item._id,&#10;                  quantity: item.quantity,&#10;                })),&#10;              },&#10;            }),&#10;          );&#10;        }&#10;      } else {&#10;        console.error(&quot;Failed to fetch order details&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching order details:&quot;, error);&#10;    } finally {&#10;      setIsLoadingDetails(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const downloadInvoice = async () =&gt; {&#10;    try {&#10;      // Get the order number safely with fallback&#10;      const orderNumber =&#10;        order?.orderNumber || order?._id || orderId || `ORDER-${Date.now()}`;&#10;&#10;      const response = await fetch(`/api/orders/${orderId}/invoice`, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;          Accept: &quot;application/json&quot;,&#10;        },&#10;      });&#10;&#10;      if (response.ok) {&#10;        const { invoiceData } = await response.json();&#10;&#10;        // Generate PDF using jsPDF&#10;        await generatePDFInvoice(invoiceData, orderNumber);&#10;&#10;        // Show success message&#10;        alert(&quot;Invoice PDF downloaded successfully!&quot;);&#10;      } else {&#10;        console.error(&quot;Invoice API failed, using fallback&quot;);&#10;        // Fallback: Generate simple invoice using browser print&#10;        generateSimpleInvoice();&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error downloading invoice:&quot;, error);&#10;      generateSimpleInvoice();&#10;    }&#10;  };&#10;&#10;  const generatePDFInvoice = async (invoiceData, orderNumber) =&gt; {&#10;    try {&#10;      // Dynamic import for client-side only&#10;      const { jsPDF } = await import(&quot;jspdf&quot;);&#10;&#10;      const doc = new jsPDF();&#10;      const pageWidth = doc.internal.pageSize.width;&#10;      const pageHeight = doc.internal.pageSize.height;&#10;      let yPosition = 20;&#10;&#10;      // Helper function to add text with automatic line breaks&#10;      const addWrappedText = (text, x, y, maxWidth, fontSize = 10) =&gt; {&#10;        doc.setFontSize(fontSize);&#10;        const lines = doc.splitTextToSize(text, maxWidth);&#10;        doc.text(lines, x, y);&#10;        return y + lines.length * fontSize * 0.5;&#10;      };&#10;&#10;      // Header - Company Logo and Info&#10;      doc.setFontSize(24);&#10;      doc.setTextColor(34, 197, 94); // Green color&#10;      doc.text(&quot; FarmFresh&quot;, 20, yPosition);&#10;&#10;      yPosition += 8;&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(&quot;Connecting You with Local Farmers&quot;, 20, yPosition);&#10;&#10;      yPosition += 15;&#10;      doc.setFontSize(20);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot;INVOICE&quot;, pageWidth / 2, yPosition, { align: &quot;center&quot; });&#10;&#10;      // Line separator&#10;      yPosition += 10;&#10;      doc.setDrawColor(34, 197, 94);&#10;      doc.setLineWidth(2);&#10;      doc.line(20, yPosition, pageWidth - 20, yPosition);&#10;&#10;      yPosition += 15;&#10;&#10;      // Company Information&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot;FarmFresh Ltd.&quot;, 20, yPosition);&#10;      yPosition += 6;&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(invoiceData.company.address, 20, yPosition);&#10;      yPosition += 5;&#10;      doc.text(invoiceData.company.city, 20, yPosition);&#10;      yPosition += 5;&#10;      doc.text(`Phone: ${invoiceData.company.phone}`, 20, yPosition);&#10;      yPosition += 5;&#10;      doc.text(`Email: ${invoiceData.company.email}`, 20, yPosition);&#10;&#10;      yPosition += 15;&#10;&#10;      // Order Information - Two columns&#10;      const leftColumnX = 20;&#10;      const rightColumnX = pageWidth / 2 + 10;&#10;&#10;      // Left column - Delivery Address&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot; Delivery Address&quot;, leftColumnX, yPosition);&#10;      yPosition += 8;&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(&#10;        invoiceData.order.deliveryAddress?.name || &quot;N/A&quot;,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;      yPosition += 5;&#10;      doc.text(&#10;        invoiceData.order.deliveryAddress?.address || &quot;N/A&quot;,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;      yPosition += 5;&#10;      doc.text(&#10;        invoiceData.order.deliveryAddress?.city || &quot;N/A&quot;,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;      yPosition += 5;&#10;      doc.text(&#10;        `Phone: ${invoiceData.order.deliveryAddress?.phone || &quot;N/A&quot;}`,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;&#10;      // Right column - Order Information&#10;      let rightYPosition = yPosition - 23;&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot; Order Information&quot;, rightColumnX, rightYPosition);&#10;      rightYPosition += 8;&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(`Order #: ${orderNumber}`, rightColumnX, rightYPosition);&#10;      rightYPosition += 5;&#10;      doc.text(&#10;        `Date: ${new Date(&#10;          invoiceData.order.createdAt || Date.now(),&#10;        ).toLocaleDateString(&quot;en-GB&quot;)}`,&#10;        rightColumnX,&#10;        rightYPosition,&#10;      );&#10;      rightYPosition += 5;&#10;      doc.text(&#10;        `Payment: ${invoiceData.order.paymentMethod || &quot;Credit Card&quot;}`,&#10;        rightColumnX,&#10;        rightYPosition,&#10;      );&#10;      rightYPosition += 5;&#10;      doc.text(&#10;        `Status: ${invoiceData.order.status || &quot;confirmed&quot;}`,&#10;        rightColumnX,&#10;        rightYPosition,&#10;      );&#10;&#10;      yPosition += 20;&#10;&#10;      // Items Table Header&#10;      yPosition += 10;&#10;      doc.setFillColor(34, 197, 94);&#10;      doc.rect(20, yPosition - 5, pageWidth - 40, 10, &quot;F&quot;);&#10;&#10;      doc.setTextColor(255, 255, 255);&#10;      doc.setFontSize(10);&#10;      doc.text(&quot;Product&quot;, 25, yPosition);&#10;      doc.text(&quot;Farmer&quot;, 80, yPosition);&#10;      doc.text(&quot;Qty&quot;, 120, yPosition);&#10;      doc.text(&quot;Unit Price&quot;, 140, yPosition);&#10;      doc.text(&quot;Total&quot;, 170, yPosition);&#10;&#10;      yPosition += 10;&#10;&#10;      // Items Table Body&#10;      doc.setTextColor(0, 0, 0);&#10;      const items = invoiceData.order.items || [];&#10;&#10;      items.forEach((item, index) =&gt; {&#10;        if (yPosition &gt; pageHeight - 40) {&#10;          doc.addPage();&#10;          yPosition = 20;&#10;        }&#10;&#10;        // Alternate row colors&#10;        if (index % 2 === 0) {&#10;          doc.setFillColor(248, 249, 250);&#10;          doc.rect(20, yPosition - 5, pageWidth - 40, 8, &quot;F&quot;);&#10;        }&#10;&#10;        doc.setTextColor(0, 0, 0);&#10;        doc.text(item.productName || item.name || &quot;Product&quot;, 25, yPosition);&#10;        doc.text(&#10;          item.farmerName || item.farmer?.name || &quot;Local Farmer&quot;,&#10;          80,&#10;          yPosition,&#10;        );&#10;        doc.text(String(item.quantity || 1), 120, yPosition);&#10;        doc.text(formatPrice(item.price || 0), 140, yPosition);&#10;        doc.text(&#10;          formatPrice((item.price || 0) * (item.quantity || 1)),&#10;          170,&#10;          yPosition,&#10;        );&#10;&#10;        yPosition += 8;&#10;      });&#10;&#10;      // Total Section&#10;      yPosition += 10;&#10;      const totalsX = pageWidth - 80;&#10;&#10;      doc.setDrawColor(200, 200, 200);&#10;      doc.line(totalsX - 20, yPosition, pageWidth - 20, yPosition);&#10;      yPosition += 8;&#10;&#10;      doc.setFontSize(10);&#10;      doc.text(&quot;Subtotal:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.subtotal || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;      yPosition += 6;&#10;&#10;      doc.text(&quot;Delivery Fee:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.deliveryFee || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;      yPosition += 6;&#10;&#10;      doc.text(&quot;Service Fee:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.serviceFee || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;      yPosition += 8;&#10;&#10;      // Total line&#10;      doc.setDrawColor(34, 197, 94);&#10;      doc.setLineWidth(1);&#10;      doc.line(totalsX - 20, yPosition, pageWidth - 20, yPosition);&#10;      yPosition += 8;&#10;&#10;      doc.setFontSize(12);&#10;      doc.setFont(undefined, &quot;bold&quot;);&#10;      doc.text(&quot;Total Amount:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.total || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;&#10;      // Footer&#10;      yPosition += 20;&#10;      doc.setFont(undefined, &quot;normal&quot;);&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      const footerText =&#10;        &quot;Thank you for choosing FarmFresh! Supporting local farmers, delivering fresh produce to your doorstep.&quot;;&#10;      addWrappedText(footerText, 20, yPosition, pageWidth - 40, 10);&#10;&#10;      yPosition += 15;&#10;      doc.setFontSize(8);&#10;      doc.text(&#10;        &quot;This is a computer-generated invoice. No signature required.&quot;,&#10;        pageWidth / 2,&#10;        yPosition,&#10;        {&#10;          align: &quot;center&quot;,&#10;        },&#10;      );&#10;&#10;      // Save the PDF&#10;      doc.save(`invoice-${orderNumber}.pdf`);&#10;    } catch (error) {&#10;      console.error(&quot;Error generating PDF:&quot;, error);&#10;      // Fallback to simple invoice&#10;      generateSimpleInvoice();&#10;    }&#10;  };&#10;&#10;  const generateSimpleInvoice = () =&gt; {&#10;    // Get the order number safely with fallback&#10;    const orderNumber =&#10;      order?.orderNumber || order?._id || orderId || `ORDER-${Date.now()}`;&#10;&#10;    const invoiceWindow = window.open(&quot;&quot;, &quot;_blank&quot;);&#10;    const invoiceContent = `&#10;      &lt;!DOCTYPE html&gt;&#10;      &lt;html&gt;&#10;        &lt;head&gt;&#10;          &lt;title&gt;Invoice - ${orderNumber}&lt;/title&gt;&#10;          &lt;style&gt;&#10;            body { font-family: Arial, sans-serif; margin: 20px; }&#10;            .header { text-align: center; margin-bottom: 30px; }&#10;            .company-info { margin-bottom: 20px; }&#10;            .order-info { display: flex; justify-content: space-between; margin-bottom: 30px; }&#10;            .items-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }&#10;            .items-table th, .items-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }&#10;            .items-table th { background-color: #f2f2f2; }&#10;            .total-section { text-align: right; }&#10;            .total-row { font-weight: bold; }&#10;          &lt;/style&gt;&#10;        &lt;/head&gt;&#10;        &lt;body&gt;&#10;          &lt;div class=&quot;header&quot;&gt;&#10;            &lt;h1&gt;FarmFresh&lt;/h1&gt;&#10;            &lt;p&gt;Local Farmer Booking Platform&lt;/p&gt;&#10;            &lt;h2&gt;INVOICE&lt;/h2&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div class=&quot;company-info&quot;&gt;&#10;            &lt;strong&gt;FarmFresh Ltd.&lt;/strong&gt;&lt;br&gt;&#10;            123 Agriculture Street&lt;br&gt;&#10;            Dhaka, Bangladesh&lt;br&gt;&#10;            Phone: +880-1234-567890&lt;br&gt;&#10;            Email: info@farmfresh.com&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div class=&quot;order-info&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;strong&gt;Bill To:&lt;/strong&gt;&lt;br&gt;&#10;              ${order.deliveryAddress.name}&lt;br&gt;&#10;              ${order.deliveryAddress.address}&lt;br&gt;&#10;              ${order.deliveryAddress.city}&lt;br&gt;&#10;              Phone: ${order.deliveryAddress.phone}&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;strong&gt;Order Details:&lt;/strong&gt;&lt;br&gt;&#10;              Order #: ${order.orderNumber}&lt;br&gt;&#10;              Date: ${new Date(order.createdAt).toLocaleDateString()}&lt;br&gt;&#10;              Payment Method: ${order.paymentMethod}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;table class=&quot;items-table&quot;&gt;&#10;            &lt;thead&gt;&#10;              &lt;tr&gt;&#10;                &lt;th&gt;Product&lt;/th&gt;&#10;                &lt;th&gt;Farmer&lt;/th&gt;&#10;                &lt;th&gt;Quantity&lt;/th&gt;&#10;                &lt;th&gt;Unit Price&lt;/th&gt;&#10;                &lt;th&gt;Total&lt;/th&gt;&#10;              &lt;/tr&gt;&#10;            &lt;/thead&gt;&#10;            &lt;tbody&gt;&#10;              ${order.items&#10;                .map(&#10;                  (item) =&gt; `&#10;                &lt;tr&gt;&#10;                  &lt;td&gt;${item.productName}&lt;/td&gt;&#10;                  &lt;td&gt;${item.farmerName}&lt;/td&gt;&#10;                  &lt;td&gt;${item.quantity}&lt;/td&gt;&#10;                  &lt;td&gt;${formatPrice(item.price)}&lt;/td&gt;&#10;                  &lt;td&gt;${formatPrice(item.price * item.quantity)}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              `,&#10;                )&#10;                .join(&quot;&quot;)}&#10;            &lt;/tbody&gt;&#10;          &lt;/table&gt;&#10;          &#10;          &lt;div class=&quot;total-section&quot;&gt;&#10;            &lt;p&gt;Subtotal: ${formatPrice(order.subtotal)}&lt;/p&gt;&#10;            &lt;p&gt;Delivery Fee: ${formatPrice(order.deliveryFee)}&lt;/p&gt;&#10;            &lt;p&gt;Service Fee: ${formatPrice(order.serviceFee)}&lt;/p&gt;&#10;            &lt;p class=&quot;total-row&quot;&gt;Total: ${formatPrice(order.total)}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;p style=&quot;margin-top: 30px; text-align: center; color: #666;&quot;&gt;&#10;            Thank you for choosing FarmFresh!&#10;          &lt;/p&gt;&#10;        &lt;/body&gt;&#10;      &lt;/html&gt;&#10;    `;&#10;&#10;    invoiceWindow.document.write(invoiceContent);&#10;    invoiceWindow.document.close();&#10;    invoiceWindow.print();&#10;  };&#10;&#10;  const copyOrderNumber = () =&gt; {&#10;    navigator.clipboard.writeText(order.orderNumber).then(() =&gt; {&#10;      alert(&quot;Order number copied to clipboard!&quot;);&#10;    });&#10;  };&#10;&#10;  if (!order) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle text-6xl text-gray-400 mb-6&quot;&gt;&lt;/i&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            Order Not Found&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;            The requested order could not be found.&#10;          &lt;/p&gt;&#10;          &lt;Link&#10;            href=&quot;/&quot;&#10;            className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-8 py-3 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            Go Home&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16&quot;&gt;&#10;        {/* Success Icon and Message */}&#10;        &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;          &lt;div className=&quot;mx-auto flex items-center justify-center h-24 w-24 rounded-full bg-green-100 dark:bg-green-900 mb-6&quot;&gt;&#10;            &lt;i className=&quot;fas fa-check text-4xl text-green-600 dark:text-green-400&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h1 className=&quot;text-4xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            Payment Successful!&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-xl text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;            Thank you for your order&#10;          &lt;/p&gt;&#10;          &lt;div className=&quot;flex items-center justify-center space-x-2&quot;&gt;&#10;            &lt;p className=&quot;text-gray-500 dark:text-gray-500&quot;&gt;&#10;              Order #{order.orderNumber}&#10;            &lt;/p&gt;&#10;            &lt;button&#10;              onClick={copyOrderNumber}&#10;              className=&quot;text-primary-600 hover:text-primary-700 text-sm&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-copy&quot;&gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Order Details Card */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 mb-8&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;            Order Details&#10;          &lt;/h2&gt;&#10;&#10;          {/* Order Info */}&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-8&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                Order Information&#10;              &lt;/h3&gt;&#10;              &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Order Number:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  {order.orderNumber}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Order Date:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  {new Date(order.createdAt).toLocaleDateString()}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Payment Method:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  {order.paymentMethod}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Status:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  &lt;span className=&quot;ml-2 px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full text-xs&quot;&gt;&#10;                    {order.status}&#10;                  &lt;/span&gt;&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                Delivery Address&#10;              &lt;/h3&gt;&#10;              &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  {order.deliveryAddress.name}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;{order.deliveryAddress.address}&lt;/p&gt;&#10;                &lt;p&gt;&#10;                  {order.deliveryAddress.city}{&quot; &quot;}&#10;                  {order.deliveryAddress.postalCode}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;Phone: {order.deliveryAddress.phone}&lt;/p&gt;&#10;                {order.deliveryAddress.instructions &amp;&amp; (&#10;                  &lt;p className=&quot;mt-2 italic&quot;&gt;&#10;                    Instructions: {order.deliveryAddress.instructions}&#10;                  &lt;/p&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Order Items */}&#10;          &lt;div className=&quot;mb-8&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Order Items&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full&quot;&gt;&#10;                &lt;thead&gt;&#10;                  &lt;tr className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;th className=&quot;text-left py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Product&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-left py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Farmer&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-center py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Quantity&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-right py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Unit Price&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-right py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Total&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody&gt;&#10;                  {order.items.map((item, index) =&gt; (&#10;                    &lt;tr&#10;                      key={index}&#10;                      className=&quot;border-b border-gray-100 dark:border-gray-700&quot;&#10;                    &gt;&#10;                      &lt;td className=&quot;py-4 px-4&quot;&gt;&#10;                        &lt;div className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.productName}&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {item.farmerName}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-center text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {item.quantity}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-right text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {formatPrice(item.price)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-right font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                        {formatPrice(item.price * item.quantity)}&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Payment Summary */}&#10;          &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-6&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Payment Summary&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-2 max-w-sm ml-auto&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Subtotal:&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                  {formatPrice(order.subtotal)}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Delivery Fee:&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                  {formatPrice(order.deliveryFee)}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Service Fee:&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                  {formatPrice(order.serviceFee)}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-2&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between font-bold text-lg&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;Total:&lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(order.total)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Email Confirmation Notice */}&#10;        &lt;div className=&quot;bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-700 rounded-lg p-4 mb-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-envelope text-blue-600 dark:text-blue-400 mr-3&quot;&gt;&lt;/i&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                Email Confirmation Sent&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                We&amp;apos;ve sent your order confirmation and receipt to your&#10;                email address.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-4&quot;&gt;&#10;          &lt;button&#10;            onClick={downloadInvoice}&#10;            className=&quot;flex items-center justify-center px-6 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;            Download Invoice&#10;          &lt;/button&gt;&#10;&#10;          &lt;Link&#10;            href=&quot;/bookings&quot;&#10;            className=&quot;flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-list mr-2&quot;&gt;&lt;/i&gt;&#10;            View All Orders&#10;          &lt;/Link&gt;&#10;&#10;          &lt;Link&#10;            href=&quot;/products&quot;&#10;            className=&quot;flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;            Continue Shopping&#10;          &lt;/Link&gt;&#10;&#10;          &lt;Link&#10;            href=&quot;/&quot;&#10;            className=&quot;flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-home mr-2&quot;&gt;&lt;/i&gt;&#10;            Back to Home&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* What's Next Section */}&#10;        &lt;div className=&quot;mt-12 bg-gray-100 dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            What happens next?&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;              &lt;div className=&quot;flex-shrink-0 w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold&quot;&gt;&#10;                1&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Order Confirmation&#10;                &lt;/h4&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Farmers will confirm your order within 2 hours&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;              &lt;div className=&quot;flex-shrink-0 w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold&quot;&gt;&#10;                2&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Preparation&#10;                &lt;/h4&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Fresh products will be prepared for delivery&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;              &lt;div className=&quot;flex-shrink-0 w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold&quot;&gt;&#10;                3&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Delivery&#10;                &lt;/h4&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Your order will be delivered within 24 hours&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, Suspense } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;// Force dynamic rendering for this page&#10;export const dynamic = 'force-dynamic';&#10;&#10;// Component that uses useSearchParams - must be wrapped in Suspense&#10;function SuccessContent() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const { data: session } = useSession();&#10;  const orderId = searchParams.get(&quot;orderId&quot;);&#10;&#10;  // Initialize with data from sessionStorage if available, otherwise use placeholder&#10;  const [order, setOrder] = useState(() =&gt; {&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      try {&#10;        const pendingOrder = sessionStorage.getItem(&quot;pendingOrder&quot;);&#10;        if (pendingOrder) {&#10;          const parsedOrder = JSON.parse(pendingOrder);&#10;          // Clean up sessionStorage after retrieving&#10;          sessionStorage.removeItem(&quot;pendingOrder&quot;);&#10;          return parsedOrder;&#10;        }&#10;      } catch (e) {&#10;        console.warn(&quot;Could not retrieve order from sessionStorage:&quot;, e);&#10;      }&#10;    }&#10;&#10;    // Fallback placeholder&#10;    return {&#10;      orderNumber: orderId || &quot;LOADING...&quot;,&#10;      createdAt: new Date().toISOString(),&#10;      paymentMethod: &quot;Processing...&quot;,&#10;      status: &quot;confirmed&quot;,&#10;      deliveryAddress: {&#10;        name: &quot;Loading...&quot;,&#10;        address: &quot;Fetching address details...&quot;,&#10;        city: &quot;&quot;,&#10;        phone: &quot;&quot;,&#10;      },&#10;      items: [],&#10;      subtotal: 0,&#10;      deliveryFee: 0,&#10;      serviceFee: 0,&#10;      total: 0,&#10;    };&#10;  });&#10;&#10;  const [isLoadingDetails, setIsLoadingDetails] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    if (orderId) {&#10;      // Only fetch if we don't have complete order data&#10;      if (!order.orderId || order.orderNumber === &quot;LOADING...&quot;) {&#10;        setIsLoadingDetails(true);&#10;        fetchOrderDetails();&#10;      }&#10;    } else {&#10;      router.push(&quot;/&quot;);&#10;    }&#10;  }, [orderId, router]);&#10;&#10;  const fetchOrderDetails = async () =&gt; {&#10;    try {&#10;      const response = await fetch(`/api/orders/${orderId}`);&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        setOrder(data.order);&#10;&#10;        // Dispatch order completion event for automatic purchase count updates&#10;        if (data.order &amp;&amp; data.order.items) {&#10;          console.log(&#10;            &quot; Order details loaded, dispatching completion event:&quot;,&#10;            {&#10;              orderId: data.order._id || orderId,&#10;              items: data.order.items,&#10;            },&#10;          );&#10;&#10;          window.dispatchEvent(&#10;            new CustomEvent(&quot;orderCompleted&quot;, {&#10;              detail: {&#10;                orderId: data.order._id || orderId,&#10;                items: data.order.items.map((item) =&gt; ({&#10;                  productId: item.productId || item._id,&#10;                  quantity: item.quantity,&#10;                })),&#10;              },&#10;            }),&#10;          );&#10;        }&#10;      } else {&#10;        console.error(&quot;Failed to fetch order details&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching order details:&quot;, error);&#10;    } finally {&#10;      setIsLoadingDetails(false);&#10;    }&#10;  };&#10;&#10;  const formatPrice = (price) =&gt; {&#10;    return new Intl.NumberFormat(&quot;en-BD&quot;, {&#10;      style: &quot;currency&quot;,&#10;      currency: &quot;BDT&quot;,&#10;      minimumFractionDigits: 0,&#10;    }).format(price);&#10;  };&#10;&#10;  const downloadInvoice = async () =&gt; {&#10;    try {&#10;      // Get the order number safely with fallback&#10;      const orderNumber =&#10;        order?.orderNumber || order?._id || orderId || `ORDER-${Date.now()}`;&#10;&#10;      const response = await fetch(`/api/orders/${orderId}/invoice`, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;          Accept: &quot;application/json&quot;,&#10;        },&#10;      });&#10;&#10;      if (response.ok) {&#10;        const { invoiceData } = await response.json();&#10;&#10;        // Generate PDF using jsPDF&#10;        await generatePDFInvoice(invoiceData, orderNumber);&#10;&#10;        // Show success message&#10;        alert(&quot;Invoice PDF downloaded successfully!&quot;);&#10;      } else {&#10;        console.error(&quot;Invoice API failed, using fallback&quot;);&#10;        // Fallback: Generate simple invoice using browser print&#10;        generateSimpleInvoice();&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error downloading invoice:&quot;, error);&#10;      generateSimpleInvoice();&#10;    }&#10;  };&#10;&#10;  const generatePDFInvoice = async (invoiceData, orderNumber) =&gt; {&#10;    try {&#10;      // Dynamic import for client-side only&#10;      const { jsPDF } = await import(&quot;jspdf&quot;);&#10;&#10;      const doc = new jsPDF();&#10;      const pageWidth = doc.internal.pageSize.width;&#10;      const pageHeight = doc.internal.pageSize.height;&#10;      let yPosition = 20;&#10;&#10;      // Helper function to add text with automatic line breaks&#10;      const addWrappedText = (text, x, y, maxWidth, fontSize = 10) =&gt; {&#10;        doc.setFontSize(fontSize);&#10;        const lines = doc.splitTextToSize(text, maxWidth);&#10;        doc.text(lines, x, y);&#10;        return y + lines.length * fontSize * 0.5;&#10;      };&#10;&#10;      // Header - Company Logo and Info&#10;      doc.setFontSize(24);&#10;      doc.setTextColor(34, 197, 94); // Green color&#10;      doc.text(&quot; FarmFresh&quot;, 20, yPosition);&#10;&#10;      yPosition += 8;&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(&quot;Connecting You with Local Farmers&quot;, 20, yPosition);&#10;&#10;      yPosition += 15;&#10;      doc.setFontSize(20);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot;INVOICE&quot;, pageWidth / 2, yPosition, { align: &quot;center&quot; });&#10;&#10;      // Line separator&#10;      yPosition += 10;&#10;      doc.setDrawColor(34, 197, 94);&#10;      doc.setLineWidth(2);&#10;      doc.line(20, yPosition, pageWidth - 20, yPosition);&#10;&#10;      yPosition += 15;&#10;&#10;      // Company Information&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot;FarmFresh Ltd.&quot;, 20, yPosition);&#10;      yPosition += 6;&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(invoiceData.company.address, 20, yPosition);&#10;      yPosition += 5;&#10;      doc.text(invoiceData.company.city, 20, yPosition);&#10;      yPosition += 5;&#10;      doc.text(`Phone: ${invoiceData.company.phone}`, 20, yPosition);&#10;      yPosition += 5;&#10;      doc.text(`Email: ${invoiceData.company.email}`, 20, yPosition);&#10;&#10;      yPosition += 15;&#10;&#10;      // Order Information - Two columns&#10;      const leftColumnX = 20;&#10;      const rightColumnX = pageWidth / 2 + 10;&#10;&#10;      // Left column - Delivery Address&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot; Delivery Address&quot;, leftColumnX, yPosition);&#10;      yPosition += 8;&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(&#10;        invoiceData.order.deliveryAddress?.name || &quot;N/A&quot;,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;      yPosition += 5;&#10;      doc.text(&#10;        invoiceData.order.deliveryAddress?.address || &quot;N/A&quot;,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;      yPosition += 5;&#10;      doc.text(&#10;        invoiceData.order.deliveryAddress?.city || &quot;N/A&quot;,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;      yPosition += 5;&#10;      doc.text(&#10;        `Phone: ${invoiceData.order.deliveryAddress?.phone || &quot;N/A&quot;}`,&#10;        leftColumnX,&#10;        yPosition,&#10;      );&#10;&#10;      // Right column - Order Information&#10;      let rightYPosition = yPosition - 23;&#10;      doc.setFontSize(12);&#10;      doc.setTextColor(0, 0, 0);&#10;      doc.text(&quot; Order Information&quot;, rightColumnX, rightYPosition);&#10;      rightYPosition += 8;&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      doc.text(`Order #: ${orderNumber}`, rightColumnX, rightYPosition);&#10;      rightYPosition += 5;&#10;      doc.text(&#10;        `Date: ${new Date(&#10;          invoiceData.order.createdAt || Date.now(),&#10;        ).toLocaleDateString(&quot;en-GB&quot;)}`,&#10;        rightColumnX,&#10;        rightYPosition,&#10;      );&#10;      rightYPosition += 5;&#10;      doc.text(&#10;        `Payment: ${invoiceData.order.paymentMethod || &quot;Credit Card&quot;}`,&#10;        rightColumnX,&#10;        rightYPosition,&#10;      );&#10;      rightYPosition += 5;&#10;      doc.text(&#10;        `Status: ${invoiceData.order.status || &quot;confirmed&quot;}`,&#10;        rightColumnX,&#10;        rightYPosition,&#10;      );&#10;&#10;      yPosition += 20;&#10;&#10;      // Items Table Header&#10;      yPosition += 10;&#10;      doc.setFillColor(34, 197, 94);&#10;      doc.rect(20, yPosition - 5, pageWidth - 40, 10, &quot;F&quot;);&#10;&#10;      doc.setTextColor(255, 255, 255);&#10;      doc.setFontSize(10);&#10;      doc.text(&quot;Product&quot;, 25, yPosition);&#10;      doc.text(&quot;Farmer&quot;, 80, yPosition);&#10;      doc.text(&quot;Qty&quot;, 120, yPosition);&#10;      doc.text(&quot;Unit Price&quot;, 140, yPosition);&#10;      doc.text(&quot;Total&quot;, 170, yPosition);&#10;&#10;      yPosition += 10;&#10;&#10;      // Items Table Body&#10;      doc.setTextColor(0, 0, 0);&#10;      const items = invoiceData.order.items || [];&#10;&#10;      items.forEach((item, index) =&gt; {&#10;        if (yPosition &gt; pageHeight - 40) {&#10;          doc.addPage();&#10;          yPosition = 20;&#10;        }&#10;&#10;        // Alternate row colors&#10;        if (index % 2 === 0) {&#10;          doc.setFillColor(248, 249, 250);&#10;          doc.rect(20, yPosition - 5, pageWidth - 40, 8, &quot;F&quot;);&#10;        }&#10;&#10;        doc.setTextColor(0, 0, 0);&#10;        doc.text(item.productName || item.name || &quot;Product&quot;, 25, yPosition);&#10;        doc.text(&#10;          item.farmerName || item.farmer?.name || &quot;Local Farmer&quot;,&#10;          80,&#10;          yPosition,&#10;        );&#10;        doc.text(String(item.quantity || 1), 120, yPosition);&#10;        doc.text(formatPrice(item.price || 0), 140, yPosition);&#10;        doc.text(&#10;          formatPrice((item.price || 0) * (item.quantity || 1)),&#10;          170,&#10;          yPosition,&#10;        );&#10;&#10;        yPosition += 8;&#10;      });&#10;&#10;      // Total Section&#10;      yPosition += 10;&#10;      const totalsX = pageWidth - 80;&#10;&#10;      doc.setDrawColor(200, 200, 200);&#10;      doc.line(totalsX - 20, yPosition, pageWidth - 20, yPosition);&#10;      yPosition += 8;&#10;&#10;      doc.setFontSize(10);&#10;      doc.text(&quot;Subtotal:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.subtotal || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;      yPosition += 6;&#10;&#10;      doc.text(&quot;Delivery Fee:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.deliveryFee || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;      yPosition += 6;&#10;&#10;      doc.text(&quot;Service Fee:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.serviceFee || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;      yPosition += 8;&#10;&#10;      // Total line&#10;      doc.setDrawColor(34, 197, 94);&#10;      doc.setLineWidth(1);&#10;      doc.line(totalsX - 20, yPosition, pageWidth - 20, yPosition);&#10;      yPosition += 8;&#10;&#10;      doc.setFontSize(12);&#10;      doc.setFont(undefined, &quot;bold&quot;);&#10;      doc.text(&quot;Total Amount:&quot;, totalsX - 20, yPosition);&#10;      doc.text(&#10;        formatPrice(invoiceData.order.total || 0),&#10;        totalsX + 20,&#10;        yPosition,&#10;      );&#10;&#10;      // Footer&#10;      yPosition += 20;&#10;      doc.setFont(undefined, &quot;normal&quot;);&#10;      doc.setFontSize(10);&#10;      doc.setTextColor(102, 102, 102);&#10;      const footerText =&#10;        &quot;Thank you for choosing FarmFresh! Supporting local farmers, delivering fresh produce to your doorstep.&quot;;&#10;      addWrappedText(footerText, 20, yPosition, pageWidth - 40, 10);&#10;&#10;      yPosition += 15;&#10;      doc.setFontSize(8);&#10;      doc.text(&#10;        &quot;This is a computer-generated invoice. No signature required.&quot;,&#10;        pageWidth / 2,&#10;        yPosition,&#10;        {&#10;          align: &quot;center&quot;,&#10;        },&#10;      );&#10;&#10;      // Save the PDF&#10;      doc.save(`invoice-${orderNumber}.pdf`);&#10;    } catch (error) {&#10;      console.error(&quot;Error generating PDF:&quot;, error);&#10;      // Fallback to simple invoice&#10;      generateSimpleInvoice();&#10;    }&#10;  };&#10;&#10;  const generateSimpleInvoice = () =&gt; {&#10;    // Get the order number safely with fallback&#10;    const orderNumber =&#10;      order?.orderNumber || order?._id || orderId || `ORDER-${Date.now()}`;&#10;&#10;    const invoiceWindow = window.open(&quot;&quot;, &quot;_blank&quot;);&#10;    const invoiceContent = `&#10;      &lt;!DOCTYPE html&gt;&#10;      &lt;html&gt;&#10;        &lt;head&gt;&#10;          &lt;title&gt;Invoice - ${orderNumber}&lt;/title&gt;&#10;          &lt;style&gt;&#10;            body { font-family: Arial, sans-serif; margin: 20px; }&#10;            .header { text-align: center; margin-bottom: 30px; }&#10;            .company-info { margin-bottom: 20px; }&#10;            .order-info { display: flex; justify-content: space-between; margin-bottom: 30px; }&#10;            .items-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }&#10;            .items-table th, .items-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }&#10;            .items-table th { background-color: #f2f2f2; }&#10;            .total-section { text-align: right; }&#10;            .total-row { font-weight: bold; }&#10;          &lt;/style&gt;&#10;        &lt;/head&gt;&#10;        &lt;body&gt;&#10;          &lt;div class=&quot;header&quot;&gt;&#10;            &lt;h1&gt;FarmFresh&lt;/h1&gt;&#10;            &lt;p&gt;Local Farmer Booking Platform&lt;/p&gt;&#10;            &lt;h2&gt;INVOICE&lt;/h2&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div class=&quot;company-info&quot;&gt;&#10;            &lt;strong&gt;FarmFresh Ltd.&lt;/strong&gt;&lt;br&gt;&#10;            123 Agriculture Street&lt;br&gt;&#10;            Dhaka, Bangladesh&lt;br&gt;&#10;            Phone: +880-1234-567890&lt;br&gt;&#10;            Email: info@farmfresh.com&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div class=&quot;order-info&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;strong&gt;Bill To:&lt;/strong&gt;&lt;br&gt;&#10;              ${order.deliveryAddress.name}&lt;br&gt;&#10;              ${order.deliveryAddress.address}&lt;br&gt;&#10;              ${order.deliveryAddress.city}&lt;br&gt;&#10;              Phone: ${order.deliveryAddress.phone}&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;strong&gt;Order Details:&lt;/strong&gt;&lt;br&gt;&#10;              Order #: ${order.orderNumber}&lt;br&gt;&#10;              Date: ${new Date(order.createdAt).toLocaleDateString()}&lt;br&gt;&#10;              Payment Method: ${order.paymentMethod}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;table class=&quot;items-table&quot;&gt;&#10;            &lt;thead&gt;&#10;              &lt;tr&gt;&#10;                &lt;th&gt;Product&lt;/th&gt;&#10;                &lt;th&gt;Farmer&lt;/th&gt;&#10;                &lt;th&gt;Quantity&lt;/th&gt;&#10;                &lt;th&gt;Unit Price&lt;/th&gt;&#10;                &lt;th&gt;Total&lt;/th&gt;&#10;              &lt;/tr&gt;&#10;            &lt;/thead&gt;&#10;            &lt;tbody&gt;&#10;              ${order.items&#10;                .map(&#10;                  (item) =&gt; `&#10;                &lt;tr&gt;&#10;                  &lt;td&gt;${item.productName}&lt;/td&gt;&#10;                  &lt;td&gt;${item.farmerName}&lt;/td&gt;&#10;                  &lt;td&gt;${item.quantity}&lt;/td&gt;&#10;                  &lt;td&gt;${formatPrice(item.price)}&lt;/td&gt;&#10;                  &lt;td&gt;${formatPrice(item.price * item.quantity)}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              `,&#10;                )&#10;                .join(&quot;&quot;)}&#10;            &lt;/tbody&gt;&#10;          &lt;/table&gt;&#10;          &#10;          &lt;div class=&quot;total-section&quot;&gt;&#10;            &lt;p&gt;Subtotal: ${formatPrice(order.subtotal)}&lt;/p&gt;&#10;            &lt;p&gt;Delivery Fee: ${formatPrice(order.deliveryFee)}&lt;/p&gt;&#10;            &lt;p&gt;Service Fee: ${formatPrice(order.serviceFee)}&lt;/p&gt;&#10;            &lt;p class=&quot;total-row&quot;&gt;Total: ${formatPrice(order.total)}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;p style=&quot;margin-top: 30px; text-align: center; color: #666;&quot;&gt;&#10;            Thank you for choosing FarmFresh!&#10;          &lt;/p&gt;&#10;        &lt;/body&gt;&#10;      &lt;/html&gt;&#10;    `;&#10;&#10;    invoiceWindow.document.write(invoiceContent);&#10;    invoiceWindow.document.close();&#10;    invoiceWindow.print();&#10;  };&#10;&#10;  const copyOrderNumber = () =&gt; {&#10;    navigator.clipboard.writeText(order.orderNumber).then(() =&gt; {&#10;      alert(&quot;Order number copied to clipboard!&quot;);&#10;    });&#10;  };&#10;&#10;  if (!order) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-exclamation-triangle text-6xl text-gray-400 mb-6&quot;&gt;&lt;/i&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            Order Not Found&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-8&quot;&gt;&#10;            The requested order could not be found.&#10;          &lt;/p&gt;&#10;          &lt;Link&#10;            href=&quot;/&quot;&#10;            className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-8 py-3 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            Go Home&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16&quot;&gt;&#10;        {/* Success Icon and Message */}&#10;        &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;          &lt;div className=&quot;mx-auto flex items-center justify-center h-24 w-24 rounded-full bg-green-100 dark:bg-green-900 mb-6&quot;&gt;&#10;            &lt;i className=&quot;fas fa-check text-4xl text-green-600 dark:text-green-400&quot;&gt;&lt;/i&gt;&#10;          &lt;/div&gt;&#10;          &lt;h1 className=&quot;text-4xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            Payment Successful!&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-xl text-gray-600 dark:text-gray-400 mb-2&quot;&gt;&#10;            Thank you for your order&#10;          &lt;/p&gt;&#10;          &lt;div className=&quot;flex items-center justify-center space-x-2&quot;&gt;&#10;            &lt;p className=&quot;text-gray-500 dark:text-gray-500&quot;&gt;&#10;              Order #{order.orderNumber}&#10;            &lt;/p&gt;&#10;            &lt;button&#10;              onClick={copyOrderNumber}&#10;              className=&quot;text-primary-600 hover:text-primary-700 text-sm&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-copy&quot;&gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Order Details Card */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 mb-8&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;            Order Details&#10;          &lt;/h2&gt;&#10;&#10;          {/* Order Info */}&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6 mb-8&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                Order Information&#10;              &lt;/h3&gt;&#10;              &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Order Number:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  {order.orderNumber}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Order Date:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  {new Date(order.createdAt).toLocaleDateString()}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Payment Method:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  {order.paymentMethod}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;&#10;                  &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                    Status:&#10;                  &lt;/span&gt;{&quot; &quot;}&#10;                  &lt;span className=&quot;ml-2 px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full text-xs&quot;&gt;&#10;                    {order.status}&#10;                  &lt;/span&gt;&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                Delivery Address&#10;              &lt;/h3&gt;&#10;              &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                &lt;p className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  {order.deliveryAddress.name}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;{order.deliveryAddress.address}&lt;/p&gt;&#10;                &lt;p&gt;&#10;                  {order.deliveryAddress.city}{&quot; &quot;}&#10;                  {order.deliveryAddress.postalCode}&#10;                &lt;/p&gt;&#10;                &lt;p&gt;Phone: {order.deliveryAddress.phone}&lt;/p&gt;&#10;                {order.deliveryAddress.instructions &amp;&amp; (&#10;                  &lt;p className=&quot;mt-2 italic&quot;&gt;&#10;                    Instructions: {order.deliveryAddress.instructions}&#10;                  &lt;/p&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Order Items */}&#10;          &lt;div className=&quot;mb-8&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Order Items&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full&quot;&gt;&#10;                &lt;thead&gt;&#10;                  &lt;tr className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                    &lt;th className=&quot;text-left py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Product&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-left py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Farmer&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-center py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Quantity&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-right py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Unit Price&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;text-right py-3 px-4 font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      Total&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody&gt;&#10;                  {order.items.map((item, index) =&gt; (&#10;                    &lt;tr&#10;                      key={index}&#10;                      className=&quot;border-b border-gray-100 dark:border-gray-700&quot;&#10;                    &gt;&#10;                      &lt;td className=&quot;py-4 px-4&quot;&gt;&#10;                        &lt;div className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.productName}&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {item.farmerName}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-center text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {item.quantity}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-right text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {formatPrice(item.price)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;py-4 px-4 text-right font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                        {formatPrice(item.price * item.quantity)}&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Payment Summary */}&#10;          &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-6&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;              Payment Summary&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-2 max-w-sm ml-auto&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Subtotal:&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                  {formatPrice(order.subtotal)}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Delivery Fee:&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                  {formatPrice(order.deliveryFee)}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Service Fee:&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                  {formatPrice(order.serviceFee)}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-2&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between font-bold text-lg&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;Total:&lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-900 dark:text-white&quot;&gt;&#10;                    {formatPrice(order.total)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Email Confirmation Notice */}&#10;        &lt;div className=&quot;bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-700 rounded-lg p-4 mb-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;i className=&quot;fas fa-envelope text-blue-600 dark:text-blue-400 mr-3&quot;&gt;&lt;/i&gt;&#10;            &lt;div&gt;&#10;              &lt;p className=&quot;font-medium text-blue-900 dark:text-blue-100&quot;&gt;&#10;                Email Confirmation Sent&#10;              &lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-blue-700 dark:text-blue-300&quot;&gt;&#10;                We&amp;apos;ve sent your order confirmation and receipt to your&#10;                email address.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-4&quot;&gt;&#10;          &lt;button&#10;            onClick={downloadInvoice}&#10;            className=&quot;flex items-center justify-center px-6 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-download mr-2&quot;&gt;&lt;/i&gt;&#10;            Download Invoice&#10;          &lt;/button&gt;&#10;&#10;          &lt;Link&#10;            href=&quot;/bookings&quot;&#10;            className=&quot;flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-list mr-2&quot;&gt;&lt;/i&gt;&#10;            View All Orders&#10;          &lt;/Link&gt;&#10;&#10;          &lt;Link&#10;            href=&quot;/products&quot;&#10;            className=&quot;flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-shopping-bag mr-2&quot;&gt;&lt;/i&gt;&#10;            Continue Shopping&#10;          &lt;/Link&gt;&#10;&#10;          &lt;Link&#10;            href=&quot;/&quot;&#10;            className=&quot;flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg font-medium transition&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-home mr-2&quot;&gt;&lt;/i&gt;&#10;            Back to Home&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* What's Next Section */}&#10;        &lt;div className=&quot;mt-12 bg-gray-100 dark:bg-gray-800 rounded-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            What happens next?&#10;          &lt;/h3&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;              &lt;div className=&quot;flex-shrink-0 w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold&quot;&gt;&#10;                1&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Order Confirmation&#10;                &lt;/h4&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Farmers will confirm your order within 2 hours&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;              &lt;div className=&quot;flex-shrink-0 w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold&quot;&gt;&#10;                2&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Preparation&#10;                &lt;/h4&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Fresh products will be prepared for delivery&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;              &lt;div className=&quot;flex-shrink-0 w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold&quot;&gt;&#10;                3&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Delivery&#10;                &lt;/h4&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  Your order will be delivered within 24 hours&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;// Loading component for Suspense fallback&#10;function SuccessPageSkeleton() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16&quot;&gt;&#10;        &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;          &lt;div className=&quot;mx-auto flex items-center justify-center h-24 w-24 rounded-full bg-gray-200 dark:bg-gray-700 mb-6 animate-pulse&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-8 bg-gray-200 dark:bg-gray-700 rounded w-64 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded w-48 mx-auto&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8&quot;&gt;&#10;          &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div className=&quot;h-6 bg-gray-200 dark:bg-gray-700 rounded w-48&quot;&gt;&lt;/div&gt;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;h-4 bg-gray-200 dark:bg-gray-700 rounded&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default function Success() {&#10;  return (&#10;    &lt;Suspense fallback={&lt;SuccessPageSkeleton /&gt;}&gt;&#10;      &lt;SuccessContent /&gt;&#10;    &lt;/Suspense&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-farmer-methods.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-farmer-methods.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function checkFarmerFarmingMethods() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; CHECKING FARMERS' FARMING METHODS\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get all farmers&#10;    console.log(&quot;1.  CHECKING ALL FARMERS FOR FARMING METHODS:&quot;);&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;&#10;    console.log(`Total farmers found: ${allFarmers.length}\n`);&#10;&#10;    const farmersWithMethods = [];&#10;    const farmersWithoutMethods = [];&#10;&#10;    allFarmers.forEach(farmer =&gt; {&#10;      const hasFarmingMethods = farmer.farmingMethods &amp;&amp; &#10;                               Array.isArray(farmer.farmingMethods) &amp;&amp; &#10;                               farmer.farmingMethods.length &gt; 0;&#10;&#10;      if (hasFarmingMethods) {&#10;        farmersWithMethods.push(farmer);&#10;      } else {&#10;        farmersWithoutMethods.push(farmer);&#10;      }&#10;    });&#10;&#10;    // Show farmers WITH farming methods&#10;    console.log(`2. ✅ FARMERS WITH FARMING METHODS (${farmersWithMethods.length}):`);&#10;    farmersWithMethods.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer._id}):`);&#10;      console.log(`  Email: ${farmer.email}`);&#10;      console.log(`  Farm: ${farmer.farmName || 'N/A'}`);&#10;      console.log(`  Farming Methods: [${farmer.farmingMethods.join(', ')}]`);&#10;      console.log(`  Method Count: ${farmer.farmingMethods.length}`);&#10;      console.log('');&#10;    });&#10;&#10;    // Show farmers WITHOUT farming methods&#10;    console.log(`3. ❌ FARMERS WITHOUT FARMING METHODS (${farmersWithoutMethods.length}):`);&#10;    farmersWithoutMethods.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer._id}):`);&#10;      console.log(`  Email: ${farmer.email}`);&#10;      console.log(`  Farm: ${farmer.farmName || 'N/A'}`);&#10;      console.log(`  Farming Methods: ${farmer.farmingMethods || 'undefined'}`);&#10;      console.log('');&#10;    });&#10;&#10;    // Check for different data patterns&#10;    console.log(&quot;4.  DETAILED FARMING METHODS ANALYSIS:&quot;);&#10;    &#10;    const methodCounts = {};&#10;    const uniqueMethods = new Set();&#10;&#10;    farmersWithMethods.forEach(farmer =&gt; {&#10;      farmer.farmingMethods.forEach(method =&gt; {&#10;        uniqueMethods.add(method);&#10;        methodCounts[method] = (methodCounts[method] || 0) + 1;&#10;      });&#10;    });&#10;&#10;    console.log(&quot;Unique farming methods found:&quot;);&#10;    Array.from(uniqueMethods).sort().forEach(method =&gt; {&#10;      console.log(`  - &quot;${method}&quot; (used by ${methodCounts[method]} farmer(s))`);&#10;    });&#10;&#10;    // Check for empty arrays or null values&#10;    console.log(&quot;\n5.  CHECKING FOR EDGE CASES:&quot;);&#10;    &#10;    const emptyArrayFarmers = allFarmers.filter(farmer =&gt; &#10;      farmer.farmingMethods &amp;&amp; &#10;      Array.isArray(farmer.farmingMethods) &amp;&amp; &#10;      farmer.farmingMethods.length === 0&#10;    );&#10;    &#10;    const nullMethodsFarmers = allFarmers.filter(farmer =&gt; &#10;      farmer.farmingMethods === null&#10;    );&#10;    &#10;    const undefinedMethodsFarmers = allFarmers.filter(farmer =&gt; &#10;      farmer.farmingMethods === undefined&#10;    );&#10;&#10;    console.log(`Farmers with empty farming methods array: ${emptyArrayFarmers.length}`);&#10;    emptyArrayFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name} (${farmer._id}): []`);&#10;    });&#10;&#10;    console.log(`Farmers with null farming methods: ${nullMethodsFarmers.length}`);&#10;    nullMethodsFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name} (${farmer._id}): null`);&#10;    });&#10;&#10;    console.log(`Farmers with undefined farming methods: ${undefinedMethodsFarmers.length}`);&#10;    undefinedMethodsFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name} (${farmer._id}): undefined`);&#10;    });&#10;&#10;    // Check if any farmers have farming methods in their products instead&#10;    console.log(&quot;\n6.  CHECKING PRODUCTS FOR FARMING METHODS:&quot;);&#10;    &#10;    const productsWithMethods = await db.collection(&quot;products&quot;).find({&#10;      farmingMethods: { $exists: true, $ne: null }&#10;    }).toArray();&#10;&#10;    console.log(`Products with farming methods: ${productsWithMethods.length}`);&#10;    productsWithMethods.forEach(product =&gt; {&#10;      console.log(`  - ${product.name} (Farmer: ${product.farmerName || product.farmer?.name}):`);&#10;      console.log(`    Methods: ${product.farmingMethods}`);&#10;    });&#10;&#10;    // Summary statistics&#10;    console.log(&quot;\n7.  SUMMARY STATISTICS:&quot;);&#10;    console.log(`Total Farmers: ${allFarmers.length}`);&#10;    console.log(`Farmers with farming methods: ${farmersWithMethods.length} (${((farmersWithMethods.length/allFarmers.length)*100).toFixed(1)}%)`);&#10;    console.log(`Farmers without farming methods: ${farmersWithoutMethods.length} (${((farmersWithoutMethods.length/allFarmers.length)*100).toFixed(1)}%)`);&#10;    console.log(`Total unique farming methods: ${uniqueMethods.size}`);&#10;    console.log(`Most common farming method: ${Object.entries(methodCounts).sort((a,b) =&gt; b[1] - a[1])[0]?.[0] || 'None'}`);&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;checkFarmerFarmingMethods().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-nested-farming-methods.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-nested-farming-methods.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function checkNestedFarmingMethods() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; CHECKING NESTED FARMING METHODS DATA\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get all farmers and check nested farmInfo.farmingMethods&#10;    console.log(&quot;1.  CHECKING farmer.farmInfo.farmingMethods:&quot;);&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;&#10;    const farmersWithNestedMethods = [];&#10;    const farmersWithoutNestedMethods = [];&#10;&#10;    allFarmers.forEach(farmer =&gt; {&#10;      const hasNestedMethods = farmer.farmInfo?.farmingMethods &amp;&amp; &#10;                              Array.isArray(farmer.farmInfo.farmingMethods) &amp;&amp; &#10;                              farmer.farmInfo.farmingMethods.length &gt; 0;&#10;&#10;      if (hasNestedMethods) {&#10;        farmersWithNestedMethods.push(farmer);&#10;      } else {&#10;        farmersWithoutNestedMethods.push(farmer);&#10;      }&#10;&#10;      // Log all farmers and their nested structure&#10;      console.log(`- ${farmer.name || 'unnamed'} (${farmer._id}):`);&#10;      console.log(`  farmInfo exists: ${!!farmer.farmInfo}`);&#10;      if (farmer.farmInfo) {&#10;        console.log(`  farmInfo.farmingMethods: ${farmer.farmInfo.farmingMethods || 'undefined'}`);&#10;        console.log(`  farmInfo keys: [${Object.keys(farmer.farmInfo).join(', ')}]`);&#10;      }&#10;      console.log('');&#10;    });&#10;&#10;    // Show farmers WITH nested farming methods&#10;    console.log(`\n2. ✅ FARMERS WITH NESTED FARMING METHODS (${farmersWithNestedMethods.length}):`);&#10;    farmersWithNestedMethods.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer._id}):`);&#10;      console.log(`  farmInfo.farmingMethods: [${farmer.farmInfo.farmingMethods.join(', ')}]`);&#10;      console.log('');&#10;    });&#10;&#10;    // Check for other farmInfo fields that might contain farming data&#10;    console.log(&quot;3.  CHECKING OTHER FARMINFO FIELDS:&quot;);&#10;    allFarmers.forEach(farmer =&gt; {&#10;      if (farmer.farmInfo &amp;&amp; Object.keys(farmer.farmInfo).length &gt; 0) {&#10;        console.log(`- ${farmer.name} (${farmer._id}) farmInfo contains:`);&#10;        Object.entries(farmer.farmInfo).forEach(([key, value]) =&gt; {&#10;          console.log(`  ${key}: ${Array.isArray(value) ? `[${value.join(', ')}]` : value}`);&#10;        });&#10;        console.log('');&#10;      }&#10;    });&#10;&#10;    // Check if any farmers have hardcoded methods in the profile calculation&#10;    console.log(&quot;4.  CHECKING FOR PATTERNS IN FARMER DATA:&quot;);&#10;    &#10;    // Look for farmers who might have specializations that could be used as farming methods&#10;    const farmersWithSpecializations = allFarmers.filter(farmer =&gt; &#10;      farmer.specializations &amp;&amp; Array.isArray(farmer.specializations) &amp;&amp; farmer.specializations.length &gt; 0&#10;    );&#10;&#10;    console.log(`Farmers with specializations: ${farmersWithSpecializations.length}`);&#10;    farmersWithSpecializations.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name}: [${farmer.specializations.join(', ')}]`);&#10;    });&#10;&#10;    // Check for any farming-related fields&#10;    console.log(&quot;\n5.  CHECKING ALL FARMER FIELDS FOR FARMING-RELATED DATA:&quot;);&#10;    allFarmers.forEach(farmer =&gt; {&#10;      const allFields = Object.keys(farmer);&#10;      const farmingFields = allFields.filter(field =&gt; &#10;        field.toLowerCase().includes('farm') || &#10;        field.toLowerCase().includes('method') || &#10;        field.toLowerCase().includes('practice') ||&#10;        field.toLowerCase().includes('organic') ||&#10;        field.toLowerCase().includes('sustainable')&#10;      );&#10;      &#10;      if (farmingFields.length &gt; 0) {&#10;        console.log(`- ${farmer.name} has farming-related fields: [${farmingFields.join(', ')}]`);&#10;        farmingFields.forEach(field =&gt; {&#10;          const value = farmer[field];&#10;          console.log(`  ${field}: ${Array.isArray(value) ? `[${value.join(', ')}]` : value}`);&#10;        });&#10;        console.log('');&#10;      }&#10;    });&#10;&#10;    // Summary&#10;    console.log(&quot;6.  SUMMARY:&quot;);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Farmers with farmInfo: ${allFarmers.filter(f =&gt; f.farmInfo).length}`);&#10;    console.log(`Farmers with farmInfo.farmingMethods: ${farmersWithNestedMethods.length}`);&#10;    console.log(`Farmers with specializations: ${farmersWithSpecializations.length}`);&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;checkNestedFarmingMethods().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/clear-products-cache.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/clear-products-cache.js" />
              <option name="originalContent" value="&#10;        &quot; Manual cache clear: The cache will expire automatically in 5 minutes&quot;,&#10;      );&#10;    }&#10;&#10;    console.log(&quot;\n✅ Cache clearing process completed&quot;);&#10;    console.log(&#10;      &quot; If the issue persists, wait 5 minutes for cache TTL to expire or restart the Next.js server&quot;,&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot; Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;clearCacheAndVerify().catch(console.error);&#10;" />
              <option name="updatedContent" value="// Clear products cache to fix Green Beans display issue&#10;// This script will clear the response cache and force fresh data fetch&#10;&#10;const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;// Use local MongoDB connection like the other debug files&#10;const MONGODB_URI = &quot;mongodb://localhost:27017/farmfresh&quot;;&#10;&#10;async function clearCacheAndVerify() {&#10;  console.log(&quot; Clearing products cache and verifying data...&quot;);&#10;&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;✅ Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Check current Green Beans data&#10;    console.log(&quot;\n CHECKING CURRENT GREEN BEANS DATA:&quot;);&#10;    const greenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;,&#10;    });&#10;&#10;    if (greenBeans) {&#10;      console.log(&quot;Product Name:&quot;, greenBeans.name);&#10;      console.log(&quot;farmerId:&quot;, greenBeans.farmerId);&#10;      console.log(&quot;farmerEmail:&quot;, greenBeans.farmerEmail);&#10;      console.log(&quot;farmerName:&quot;, greenBeans.farmerName);&#10;      console.log(&quot;Embedded farmer._id:&quot;, greenBeans.farmer?._id);&#10;      console.log(&quot;Embedded farmer.name:&quot;, greenBeans.farmer?.name);&#10;      console.log(&quot;Embedded farmer.email:&quot;, greenBeans.farmer?.email);&#10;    } else {&#10;      console.log(&quot;❌ Green Beans not found&quot;);&#10;    }&#10;&#10;    // Check Mostafa's current products&#10;    console.log(&quot;\n MOSTAFA'S CURRENT PRODUCTS:&quot;);&#10;    const mostafaProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: &quot;farmer_006&quot; },&#10;          { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;          { farmerName: &quot;Mostafa Kabir&quot; },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${mostafaProducts.length} products for Mostafa Kabir:`);&#10;    mostafaProducts.forEach((product) =&gt; {&#10;      console.log(`- ${product.name} (farmerId: ${product.farmerId})`);&#10;    });&#10;&#10;    // Check Mizanur's current products&#10;    console.log(&quot;\n MIZANUR'S CURRENT PRODUCTS:&quot;);&#10;    const mizanurProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: &quot;farmer_005&quot; },&#10;          { &quot;farmer._id&quot;: &quot;farmer_005&quot; },&#10;          { farmerName: &quot;Mizanur Rahman&quot; },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${mizanurProducts.length} products for Mizanur Rahman:`);&#10;    mizanurProducts.forEach((product) =&gt; {&#10;      console.log(`- ${product.name} (farmerId: ${product.farmerId})`);&#10;    });&#10;&#10;    // Make HTTP request to clear API cache&#10;    console.log(&quot;\n Clearing API cache...&quot;);&#10;    try {&#10;      // This will trigger a fresh database query and clear the response cache&#10;      const response = await fetch(&#10;        &quot;http://localhost:3000/api/products?clearCache=true&amp;limit=1000&quot;,&#10;        {&#10;          headers: {&#10;            &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;            Pragma: &quot;no-cache&quot;,&#10;          },&#10;        },&#10;      );&#10;&#10;      if (response.ok) {&#10;        console.log(&quot;✅ API cache cleared successfully&quot;);&#10;      } else {&#10;        console.log(&quot;⚠️  API cache clear request failed:&quot;, response.status);&#10;      }&#10;    } catch (error) {&#10;      console.log(&#10;        &quot;⚠️  Could not clear API cache via HTTP (server may be down):&quot;,&#10;        error.message,&#10;      );&#10;      console.log(&#10;        &quot; Manual cache clear: The cache will expire automatically in 5 minutes&quot;,&#10;      );&#10;    }&#10;&#10;    console.log(&quot;\n✅ Cache clearing process completed&quot;);&#10;    console.log(&#10;      &quot; If the issue persists, wait 5 minutes for cache TTL to expire or restart the Next.js server&quot;,&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot; Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;clearCacheAndVerify().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/AnalyticsLoadingSkeleton.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/AnalyticsLoadingSkeleton.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;export default function AnalyticsLoadingSkeleton() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-br from-gray-50 via-green-50 to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;      {/* Custom CSS animations for analytics */}&#10;      &lt;style jsx&gt;{`&#10;        @keyframes analyticsShimmer {&#10;          0% {&#10;            transform: translateX(-100%);&#10;          }&#10;          100% {&#10;            transform: translateX(100%);&#10;          }&#10;        }&#10;&#10;        @keyframes chartPulse {&#10;          0%,&#10;          100% {&#10;            opacity: 0.4;&#10;          }&#10;          50% {&#10;            opacity: 0.8;&#10;          }&#10;        }&#10;&#10;        @keyframes cardFloat {&#10;          0%,&#10;          100% {&#10;            transform: translateY(0px);&#10;          }&#10;          50% {&#10;            transform: translateY(-5px);&#10;          }&#10;        }&#10;&#10;        .animate-analytics-shimmer {&#10;          animation: analyticsShimmer 2s infinite;&#10;        }&#10;&#10;        .animate-chart-pulse {&#10;          animation: chartPulse 2s ease-in-out infinite;&#10;        }&#10;&#10;        .animate-card-float {&#10;          animation: cardFloat 3s ease-in-out infinite;&#10;        }&#10;      `}&lt;/style&gt;&#10;&#10;      {/* Enhanced Header Skeleton */}&#10;      &lt;div className=&quot;bg-white dark:bg-gray-800 shadow-2xl border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;div className=&quot;h-12 bg-gradient-to-r from-gray-300 to-gray-400 dark:from-gray-600 dark:to-gray-500 rounded-xl w-96 animate-chart-pulse mb-2&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;h-5 bg-gray-200 dark:bg-gray-600 rounded w-80 animate-pulse&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;              {/* Chart Type Selector Skeleton */}&#10;              &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                {[1, 2, 3, 4].map((i) =&gt; (&#10;                  &lt;div&#10;                    key={i}&#10;                    className=&quot;h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-20 animate-pulse&quot;&#10;                    style={{ animationDelay: `${i * 100}ms` }}&#10;                  &gt;&lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;&#10;              {/* Time Range Selector Skeleton */}&#10;              &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                {[1, 2, 3, 4, 5].map((i) =&gt; (&#10;                  &lt;div&#10;                    key={i}&#10;                    className=&quot;h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-16 animate-pulse&quot;&#10;                    style={{ animationDelay: `${i * 80}ms` }}&#10;                  &gt;&lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8&quot;&gt;&#10;        {/* Summary Cards Skeleton */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6&quot;&gt;&#10;          {[&#10;            {&#10;              color: &quot;from-green-50 to-green-100&quot;,&#10;              darkColor: &quot;dark:from-green-900/20 dark:to-green-800/20&quot;,&#10;              borderColor: &quot;border-green-200 dark:border-green-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-blue-50 to-blue-100&quot;,&#10;              darkColor: &quot;dark:from-blue-900/20 dark:to-blue-800/20&quot;,&#10;              borderColor: &quot;border-blue-200 dark:border-blue-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-purple-50 to-purple-100&quot;,&#10;              darkColor: &quot;dark:from-purple-900/20 dark:to-purple-800/20&quot;,&#10;              borderColor: &quot;border-purple-200 dark:border-purple-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-orange-50 to-orange-100&quot;,&#10;              darkColor: &quot;dark:from-orange-900/20 dark:to-orange-800/20&quot;,&#10;              borderColor: &quot;border-orange-200 dark:border-orange-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-pink-50 to-pink-100&quot;,&#10;              darkColor: &quot;dark:from-pink-900/20 dark:to-pink-800/20&quot;,&#10;              borderColor: &quot;border-pink-200 dark:border-pink-700&quot;,&#10;            },&#10;          ].map((card, i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className={`bg-gradient-to-br ${card.color} ${card.darkColor} rounded-3xl p-6 shadow-xl border ${card.borderColor} animate-card-float`}&#10;              style={{ animationDelay: `${i * 200}ms` }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded w-20 mb-3 animate-pulse&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;h-8 bg-gray-400 dark:bg-gray-500 rounded w-16 mb-2 animate-chart-pulse&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded w-24 animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;p-4 bg-gray-200 dark:bg-gray-700 rounded-2xl&quot;&gt;&#10;                  &lt;div className=&quot;w-6 h-6 bg-gray-400 dark:bg-gray-500 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {/* Charts Grid Skeleton */}&#10;        &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;          {[1, 2, 3, 4].map((i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className=&quot;bg-white dark:bg-gray-800 rounded-3xl p-6 shadow-2xl border border-gray-200 dark:border-gray-700 animate-card-float&quot;&#10;              style={{ animationDelay: `${i * 150}ms` }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-center mb-6&quot;&gt;&#10;                &lt;div className=&quot;w-6 h-6 bg-gray-400 dark:bg-gray-500 rounded mr-3 animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded w-48 animate-pulse&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;relative h-96 bg-gray-100 dark:bg-gray-700 rounded-2xl overflow-hidden&quot;&gt;&#10;                {/* Chart skeleton with animated elements */}&#10;                &lt;div className=&quot;absolute inset-0 flex items-end justify-around p-4&quot;&gt;&#10;                  {[...Array(8)].map((_, j) =&gt; (&#10;                    &lt;div&#10;                      key={j}&#10;                      className=&quot;bg-gray-300 dark:bg-gray-600 rounded-t animate-chart-pulse&quot;&#10;                      style={{&#10;                        height: `${Math.random() * 60 + 20}%`,&#10;                        width: &quot;8%&quot;,&#10;                        animationDelay: `${j * 100}ms`,&#10;                      }}&#10;                    &gt;&lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;                {/* Shimmer overlay */}&#10;                &lt;div className=&quot;absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-analytics-shimmer&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;export default function AnalyticsLoadingSkeleton() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-br from-gray-50 via-green-50 to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;      {/* Custom CSS animations for analytics */}&#10;      &lt;style jsx&gt;{`&#10;        @keyframes analyticsShimmer {&#10;          0% {&#10;            transform: translateX(-100%);&#10;          }&#10;          100% {&#10;            transform: translateX(100%);&#10;          }&#10;        }&#10;&#10;        @keyframes chartPulse {&#10;          0%,&#10;          100% {&#10;            opacity: 0.4;&#10;          }&#10;          50% {&#10;            opacity: 0.8;&#10;          }&#10;        }&#10;&#10;        @keyframes cardFloat {&#10;          0%,&#10;          100% {&#10;            transform: translateY(0px);&#10;          }&#10;          50% {&#10;            transform: translateY(-5px);&#10;          }&#10;        }&#10;&#10;        .animate-analytics-shimmer {&#10;          animation: analyticsShimmer 2s infinite;&#10;        }&#10;&#10;        .animate-chart-pulse {&#10;          animation: chartPulse 2s ease-in-out infinite;&#10;        }&#10;&#10;        .animate-card-float {&#10;          animation: cardFloat 3s ease-in-out infinite;&#10;        }&#10;      `}&lt;/style&gt;&#10;&#10;      {/* Enhanced Header Skeleton */}&#10;      &lt;div className=&quot;bg-white dark:bg-gray-800 shadow-2xl border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;div className=&quot;h-12 bg-gradient-to-r from-gray-300 to-gray-400 dark:from-gray-600 dark:to-gray-500 rounded-xl w-96 animate-chart-pulse mb-2&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;h-5 bg-gray-200 dark:bg-gray-600 rounded w-80 animate-pulse&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;              {/* Chart Type Selector Skeleton */}&#10;              &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                {[1, 2, 3, 4].map((i) =&gt; (&#10;                  &lt;div&#10;                    key={i}&#10;                    className=&quot;h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-20 animate-pulse&quot;&#10;                    style={{ animationDelay: `${i * 100}ms` }}&#10;                  &gt;&lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;&#10;              {/* Time Range Selector Skeleton */}&#10;              &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                {[1, 2, 3, 4, 5].map((i) =&gt; (&#10;                  &lt;div&#10;                    key={i}&#10;                    className=&quot;h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-16 animate-pulse&quot;&#10;                    style={{ animationDelay: `${i * 80}ms` }}&#10;                  &gt;&lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8&quot;&gt;&#10;        {/* Summary Cards Skeleton */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6&quot;&gt;&#10;          {[&#10;            {&#10;              color: &quot;from-green-50 to-green-100&quot;,&#10;              darkColor: &quot;dark:from-green-900/20 dark:to-green-800/20&quot;,&#10;              borderColor: &quot;border-green-200 dark:border-green-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-blue-50 to-blue-100&quot;,&#10;              darkColor: &quot;dark:from-blue-900/20 dark:to-blue-800/20&quot;,&#10;              borderColor: &quot;border-blue-200 dark:border-blue-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-purple-50 to-purple-100&quot;,&#10;              darkColor: &quot;dark:from-purple-900/20 dark:to-purple-800/20&quot;,&#10;              borderColor: &quot;border-purple-200 dark:border-purple-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-orange-50 to-orange-100&quot;,&#10;              darkColor: &quot;dark:from-orange-900/20 dark:to-orange-800/20&quot;,&#10;              borderColor: &quot;border-orange-200 dark:border-orange-700&quot;,&#10;            },&#10;            {&#10;              color: &quot;from-pink-50 to-pink-100&quot;,&#10;              darkColor: &quot;dark:from-pink-900/20 dark:to-pink-800/20&quot;,&#10;              borderColor: &quot;border-pink-200 dark:border-pink-700&quot;,&#10;            },&#10;          ].map((card, i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className={`bg-gradient-to-br ${card.color} ${card.darkColor} rounded-3xl p-6 shadow-xl border ${card.borderColor} animate-card-float`}&#10;              style={{ animationDelay: `${i * 200}ms` }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded w-20 mb-3 animate-pulse&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;h-8 bg-gray-400 dark:bg-gray-500 rounded w-16 mb-2 animate-chart-pulse&quot;&gt;&lt;/div&gt;&#10;                  &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded w-24 animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;p-4 bg-gray-200 dark:bg-gray-700 rounded-2xl&quot;&gt;&#10;                  &lt;div className=&quot;w-6 h-6 bg-gray-400 dark:bg-gray-500 rounded animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {/* Charts Grid Skeleton */}&#10;        &lt;div className=&quot;grid grid-cols-1 xl:grid-cols-2 gap-8&quot;&gt;&#10;          {[1, 2, 3, 4].map((i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className=&quot;bg-white dark:bg-gray-800 rounded-3xl p-6 shadow-2xl border border-gray-200 dark:border-gray-700 animate-card-float&quot;&#10;              style={{ animationDelay: `${i * 150}ms` }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-center mb-6&quot;&gt;&#10;                &lt;div className=&quot;w-6 h-6 bg-gray-400 dark:bg-gray-500 rounded mr-3 animate-pulse&quot;&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded w-48 animate-pulse&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;relative h-96 bg-gray-100 dark:bg-gray-700 rounded-2xl overflow-hidden&quot;&gt;&#10;                {/* Chart skeleton with fixed heights to prevent hydration mismatch */}&#10;                &lt;div className=&quot;absolute inset-0 flex items-end justify-around p-4&quot;&gt;&#10;                  {[65, 45, 80, 35, 55, 40, 70, 50].map((height, j) =&gt; (&#10;                    &lt;div&#10;                      key={j}&#10;                      className=&quot;bg-gray-300 dark:bg-gray-600 rounded-t animate-chart-pulse&quot;&#10;                      style={{&#10;                        height: `${height}%`,&#10;                        width: &quot;8%&quot;,&#10;                        animationDelay: `${j * 100}ms`,&#10;                      }}&#10;                    &gt;&lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;                {/* Shimmer overlay */}&#10;                &lt;div className=&quot;absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-analytics-shimmer&quot;&gt;&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/FarmerProfileView.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/FarmerProfileView.js" />
              <option name="originalContent" value="import Link from &quot;next/link&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;&#10;const FarmerProfileView = ({ farmer, farmerProducts }) =&gt; (&#10;  &lt;&gt;&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;{farmer.name}&lt;/h1&gt;&#10;              &lt;p className=&quot;text-green-100 mb-4&quot;&gt;{farmer.email}&lt;/p&gt;&#10;              &lt;div className=&quot;flex items-center space-x-4 text-sm&quot;&gt;&#10;                &lt;span className=&quot;flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-map-marker-alt mr-1&quot;&gt;&lt;/i&gt;&#10;                  {farmer.location || &quot;Location not specified&quot;}&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;flex items-center&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-phone mr-1&quot;&gt;&lt;/i&gt;&#10;                  {farmer.phone || &quot;Phone not specified&quot;}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-right&quot;&gt;&#10;              &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#10;                Products Available&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold&quot;&gt;{farmerProducts.length}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#10;            Products from {farmer.name}&#10;          &lt;/h2&gt;&#10;&#10;          {farmerProducts.length &gt; 0 ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6&quot;&gt;&#10;              {farmerProducts.map((product) =&gt; (&#10;                &lt;ProductCard key={product._id} product={product} /&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;text-center py-12 bg-white dark:bg-gray-800 rounded-2xl shadow-lg&quot;&gt;&#10;              &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                &lt;i className=&quot;fas fa-seedling text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                No Products Available&#10;              &lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                This farmer hasn&amp;apos;t listed any products yet.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;Link&#10;            href=&quot;/products&quot;&#10;            className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#10;          &gt;&#10;            &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#10;            Browse All Products&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;Footer /&gt;&#10;  &lt;/&gt;&#10;);&#10;&#10;export default FarmerProfileView;&#10;" />
              <option name="updatedContent" value="import Link from &quot;next/link&quot;;&#13;&#10;import Footer from &quot;@/components/Footer&quot;;&#13;&#10;import ProductCard from &quot;./ProductCard&quot;;&#13;&#10;&#13;&#10;const FarmerProfileView = ({ farmer, farmerProducts }) =&gt; (&#13;&#10;  &lt;&gt;&#13;&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#13;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#13;&#10;        &lt;div className=&quot;bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl shadow-lg p-8 mb-8 text-white&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;            &lt;div&gt;&#13;&#10;              &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;{farmer.name}&lt;/h1&gt;&#13;&#10;              &lt;p className=&quot;text-green-100 mb-4&quot;&gt;{farmer.email}&lt;/p&gt;&#13;&#10;              &lt;div className=&quot;flex items-center space-x-4 text-sm&quot;&gt;&#13;&#10;                &lt;span className=&quot;flex items-center&quot;&gt;&#13;&#10;                  &lt;i className=&quot;fas fa-map-marker-alt mr-1&quot;&gt;&lt;/i&gt;&#13;&#10;                  {farmer.location || &quot;Location not specified&quot;}&#13;&#10;                &lt;/span&gt;&#13;&#10;                &lt;span className=&quot;flex items-center&quot;&gt;&#13;&#10;                  &lt;i className=&quot;fas fa-phone mr-1&quot;&gt;&lt;/i&gt;&#13;&#10;                  {farmer.phone || &quot;Phone not specified&quot;}&#13;&#10;                &lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className=&quot;text-right&quot;&gt;&#13;&#10;              &lt;div className=&quot;text-sm text-green-100 mb-1&quot;&gt;&#13;&#10;                Products Available&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;text-2xl font-bold&quot;&gt;{farmerProducts.length}&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#13;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 dark:text-white mb-6&quot;&gt;&#13;&#10;            Products from {farmer.name}&#13;&#10;          &lt;/h2&gt;&#13;&#10;&#13;&#10;          {farmerProducts.length &gt; 0 ? (&#13;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6&quot;&gt;&#13;&#10;              {farmerProducts.map((product) =&gt; (&#13;&#10;                &lt;ProductCard key={product._id} product={product} /&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          ) : (&#13;&#10;            &lt;div className=&quot;text-center py-12 bg-white dark:bg-gray-800 rounded-2xl shadow-lg&quot;&gt;&#13;&#10;              &lt;div className=&quot;w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#13;&#10;                &lt;i className=&quot;fas fa-seedling text-2xl text-gray-400&quot;&gt;&lt;/i&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white mb-2&quot;&gt;&#13;&#10;                No Products Available&#13;&#10;              &lt;/h3&gt;&#13;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#13;&#10;                This farmer hasn&amp;apos;t listed any products yet.&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;          &lt;Link&#13;&#10;            href=&quot;/products&quot;&#13;&#10;            className=&quot;inline-flex items-center text-primary-600 hover:text-primary-700 font-medium&quot;&#13;&#10;          &gt;&#13;&#10;            &lt;i className=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;&#13;&#10;            Browse All Products&#13;&#10;          &lt;/Link&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;    &lt;Footer /&gt;&#13;&#10;  &lt;/&gt;&#13;&#10;);&#13;&#10;&#13;&#10;export default FarmerProfileView;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Navigation.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Navigation.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useAuth } from &quot;@/contexts/AuthContext&quot;;&#10;import { useTheme } from &quot;@/contexts/ThemeContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useMessaging } from &quot;@/contexts/MessagingContext&quot;;&#10;import { signOut } from &quot;next-auth/react&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { usePathname, useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function Navigation() {&#10;  const { user, isAuthenticated, logout, updateUser } = useAuth();&#10;  const { isDarkMode, toggleDarkMode, isLoaded } = useTheme();&#10;  const { favorites } = useFavorites();&#10;  const { cartItems, cartCount } = useCart();&#10;  const { totalUnreadCount } = useMessaging();&#10;  const [showUserMenu, setShowUserMenu] = useState(false);&#10;  const [updatedUserName, setUpdatedUserName] = useState(user?.name || &quot;&quot;);&#10;  const [isMounted, setIsMounted] = useState(false);&#10;  const pathname = usePathname();&#10;  const router = useRouter();&#10;&#10;  // Prevent hydration mismatch by only rendering theme-dependent content after mount&#10;  useEffect(() =&gt; {&#10;    setIsMounted(true);&#10;  }, []);&#10;&#10;  // Fetch updated name from the database for farmers&#10;  useEffect(() =&gt; {&#10;    async function fetchUpdatedUserName() {&#10;      if (!user?.email || user?.userType !== &quot;farmer&quot;) return;&#10;&#10;      try {&#10;        console.log(&quot;Navigation: Fetching updated name for:&quot;, user.email);&#10;&#10;        // Fetch the latest farmer data with cache busting&#10;        const response = await fetch(&#10;          `/api/farmers?email=${encodeURIComponent(user.email)}&amp;exactMatch=true&amp;_t=${Date.now()}`,&#10;          {&#10;            headers: {&#10;              &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;              Pragma: &quot;no-cache&quot;,&#10;            },&#10;            cache: &quot;no-store&quot;,&#10;          },&#10;        );&#10;&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;&#10;          if (data &amp;&amp; data.farmers &amp;&amp; data.farmers.length &gt; 0) {&#10;            // Find the farmer with the matching email&#10;            const farmer = data.farmers.find((f) =&gt; f.email === user.email);&#10;            if (farmer &amp;&amp; farmer.name !== user.name) {&#10;              console.log(&#10;                &quot;Navigation: Updating user name from&quot;,&#10;                user.name,&#10;                &quot;to&quot;,&#10;                farmer.name,&#10;              );&#10;              setUpdatedUserName(farmer.name);&#10;&#10;              // Also update the Auth context&#10;              updateUser({&#10;                ...user,&#10;                name: farmer.name,&#10;              });&#10;            }&#10;          }&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Navigation: Error fetching updated name:&quot;, error);&#10;      }&#10;    }&#10;&#10;    fetchUpdatedUserName();&#10;  }, [user?.email, user?.userType]);&#10;&#10;  // Pages that should have simplified navigation (no search/cart)&#10;  const simplifiedPages = [&#10;    &quot;/login&quot;,&#10;    &quot;/register&quot;,&#10;    &quot;/forgot-password&quot;,&#10;    &quot;/reset-password&quot;,&#10;    &quot;/cart&quot;,&#10;    &quot;/create&quot;,&#10;    &quot;/manage&quot;,&#10;    &quot;/payment&quot;,&#10;    &quot;/bookings&quot;,&#10;    &quot;/farmer-orders&quot;,&#10;    &quot;/review&quot;,&#10;  ];&#10;&#10;  // Details page gets minimal navigation (only logo + dark mode)&#10;  const isDetailsPage = pathname === &quot;/details&quot;;&#10;  const isFarmersPage = pathname === &quot;/farmers&quot;;&#10;  const shouldShowSearchAndCart =&#10;    !simplifiedPages.includes(pathname) &amp;&amp; !isDetailsPage;&#10;  const shouldShowNavLinks = !isDetailsPage;&#10;  const shouldShowUserAuth = !isDetailsPage;&#10;&#10;  // Different search placeholders based on page&#10;  const getSearchPlaceholder = () =&gt; {&#10;    if (isFarmersPage) {&#10;      return &quot;Search farmers...&quot;;&#10;    }&#10;    return &quot;Search products...&quot;;&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    try {&#10;      // Close the user menu first&#10;      setShowUserMenu(false);&#10;&#10;      // Clear any existing modals or intercepted routes by going to home first&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Small delay to ensure navigation completes before sign out&#10;      await new Promise((resolve) =&gt; setTimeout(resolve, 100));&#10;&#10;      // Sign out from NextAuth and clear context&#10;      await signOut({ redirect: false });&#10;      logout();&#10;&#10;      // Ensure we stay on home page and refresh&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Force a hard refresh to clear any modal states&#10;      window.location.href = &quot;/&quot;;&#10;    } catch (error) {&#10;      console.error(&quot;Logout error:&quot;, error);&#10;      // Even if there's an error, still redirect to home&#10;      window.location.href = &quot;/&quot;;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;nav className=&quot;bg-white dark:bg-gray-800 shadow-lg sticky top-0 z-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center h-16&quot;&gt;&#10;          {/* Logo */}&#10;          &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;bg-primary-500 p-2 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-seedling text-white text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                FarmFresh&#10;              &lt;/h1&gt;&#10;              &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                Local Farmer Booking&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Link&gt;&#10;&#10;          {/* Search Bar (conditional) */}&#10;          {shouldShowSearchAndCart &amp;&amp; (&#10;            &lt;div className=&quot;hidden md:flex flex-1 max-w-lg mx-8&quot;&gt;&#10;              &lt;div className=&quot;relative w-full&quot;&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  placeholder={getSearchPlaceholder()}&#10;                  className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Navigation Links (conditional) */}&#10;          {shouldShowNavLinks &amp;&amp; (&#10;            &lt;div className=&quot;hidden lg:flex items-center space-x-8&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/products&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/products&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Products&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/farmers&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/farmers&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Farmers&#10;              &lt;/Link&gt;&#10;&#10;              {/* Show different menu items based on user type */}&#10;              {isAuthenticated &amp;&amp; user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;Link&#10;                    href=&quot;/create&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/create&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Add Product&#10;                  &lt;/Link&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/manage&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Manage Products&#10;                  &lt;/Link&gt;&#10;                &lt;/&gt;&#10;              )}&#10;&#10;              {/* Show My Orders for regular users */}&#10;              {isAuthenticated &amp;&amp; user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                &lt;Link&#10;                  href=&quot;/bookings&quot;&#10;                  className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                    pathname === &quot;/bookings&quot;&#10;                      ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  My Orders&#10;                &lt;/Link&gt;&#10;              )}&#10;&#10;              &lt;Link&#10;                href=&quot;/about&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/about&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                About&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Right side icons and user menu */}&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            {/* Cart and Favorites (only for authenticated users and not on simplified pages) */}&#10;            {shouldShowSearchAndCart &amp;&amp; isAuthenticated &amp;&amp; (&#10;              &lt;&gt;&#10;                {/* Messages */}&#10;                &lt;Link&#10;                  href=&quot;/messages&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                  title=&quot;Messages&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-envelope text-xl&quot;&gt;&lt;/i&gt;&#10;                  {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;&#10;                &lt;Link&#10;                  href=&quot;/favorites&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-heart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {favorites.length &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {favorites.length}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;                &lt;Link&#10;                  href=&quot;/cart&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-shopping-cart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {cartCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {cartCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Dark mode toggle */}&#10;            &lt;button&#10;              onClick={toggleDarkMode}&#10;              className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;              title={&#10;                isMounted &amp;&amp; isLoaded&#10;                  ? isDarkMode&#10;                    ? &quot;Switch to light mode&quot;&#10;                    : &quot;Switch to dark mode&quot;&#10;                  : &quot;Toggle theme&quot;&#10;              }&#10;            &gt;&#10;              {isMounted &amp;&amp; isLoaded ? (&#10;                isDarkMode ? (&#10;                  &lt;i className=&quot;fas fa-sun text-xl&quot;&gt;&lt;/i&gt;&#10;                ) : (&#10;                  &lt;i className=&quot;fas fa-moon text-xl&quot;&gt;&lt;/i&gt;&#10;                )&#10;              ) : (&#10;                &lt;i className=&quot;fas fa-moon text-xl&quot;&gt;&lt;/i&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            {/* User Authentication (conditional) */}&#10;            {shouldShowUserAuth &amp;&amp; (&#10;              &lt;&gt;&#10;                {isAuthenticated ? (&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setShowUserMenu(!showUserMenu)}&#10;                      className=&quot;flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                        &lt;span className=&quot;text-white text-sm font-medium&quot;&gt;&#10;                          {user?.name?.charAt(0)?.toUpperCase() || &quot;U&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;hidden md:block&quot;&gt;{user?.name}&lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-chevron-down text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;&#10;                    {/* User Dropdown Menu */}&#10;                    {showUserMenu &amp;&amp; (&#10;                      &lt;div className=&quot;absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-2&quot;&gt;&#10;                        &lt;div className=&quot;px-4 py-2 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                            {user?.name}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {user?.email}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-primary-600 dark:text-primary-400 capitalize&quot;&gt;&#10;                            {user?.userType || &quot;User&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Farmer-specific menu items */}&#10;                        {user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/farmer-orders&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              Order Management&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/create&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                              Add Product&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/manage&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#10;                              Manage Products&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Regular user menu items */}&#10;                        {user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/bookings&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              My Orders&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/favorites&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-heart mr-2&quot;&gt;&lt;/i&gt;&#10;                              Favorites&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/cart&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                              Cart&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/cart&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-shopping-cart mr-2&quot;&gt;&lt;/i&gt;&#10;                              Cart&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Common menu items */}&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 mt-2 pt-2&quot;&gt;&#10;                          &lt;Link&#10;                            href=&quot;/messages&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-envelope mr-2&quot;&gt;&lt;/i&gt;&#10;                            Messages&#10;                            {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                              &lt;span className=&quot;ml-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center inline-flex&quot;&gt;&#10;                                {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                              &lt;/span&gt;&#10;                            )}&#10;                          &lt;/Link&gt;&#10;                          &lt;Link&#10;                            href=&quot;/profile&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-user mr-2&quot;&gt;&lt;/i&gt;&#10;                            Profile Settings&#10;                          &lt;/Link&gt;&#10;                          &lt;button&#10;                            onClick={handleLogout}&#10;                            className=&quot;w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-sign-out-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                            Logout&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;Link&#10;                      href=&quot;/login&quot;&#10;                      className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;                      Login&#10;                    &lt;/Link&gt;&#10;                    &lt;Link&#10;                      href=&quot;/register&quot;&#10;                      className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg transition&quot;&#10;                    &gt;&#10;                      Sign Up&#10;                    &lt;/Link&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Mobile menu button */}&#10;            &lt;button className=&quot;lg:hidden text-gray-700 dark:text-gray-300&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bars text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useAuth } from &quot;@/contexts/AuthContext&quot;;&#10;import { useTheme } from &quot;@/contexts/ThemeContext&quot;;&#10;import { useFavorites } from &quot;@/contexts/FavoritesContext&quot;;&#10;import { useCart } from &quot;@/contexts/CartContext&quot;;&#10;import { useMessaging } from &quot;@/contexts/MessagingContext&quot;;&#10;import { signOut } from &quot;next-auth/react&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { usePathname, useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function Navigation() {&#10;  const { user, isAuthenticated, logout, updateUser } = useAuth();&#10;  const { isDarkMode, toggleDarkMode, isLoaded } = useTheme();&#10;  const { favorites } = useFavorites();&#10;  const { cartItems, cartCount } = useCart();&#10;  const { totalUnreadCount } = useMessaging();&#10;  const [showUserMenu, setShowUserMenu] = useState(false);&#10;  const [updatedUserName, setUpdatedUserName] = useState(user?.name || &quot;&quot;);&#10;  const [isMounted, setIsMounted] = useState(false);&#10;  const pathname = usePathname();&#10;  const router = useRouter();&#10;&#10;  // Prevent hydration mismatch by only rendering theme-dependent content after mount&#10;  useEffect(() =&gt; {&#10;    setIsMounted(true);&#10;  }, []);&#10;&#10;  // Fetch updated name from the database for farmers&#10;  useEffect(() =&gt; {&#10;    async function fetchUpdatedUserName() {&#10;      if (!user?.email || user?.userType !== &quot;farmer&quot;) return;&#10;&#10;      try {&#10;        console.log(&quot;Navigation: Fetching updated name for:&quot;, user.email);&#10;&#10;        // Fetch the latest farmer data with cache busting&#10;        const response = await fetch(&#10;          `/api/farmers?email=${encodeURIComponent(user.email)}&amp;exactMatch=true&amp;_t=${Date.now()}`,&#10;          {&#10;            headers: {&#10;              &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;              Pragma: &quot;no-cache&quot;,&#10;            },&#10;            cache: &quot;no-store&quot;,&#10;          },&#10;        );&#10;&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;&#10;          if (data &amp;&amp; data.farmers &amp;&amp; data.farmers.length &gt; 0) {&#10;            // Find the farmer with the matching email&#10;            const farmer = data.farmers.find((f) =&gt; f.email === user.email);&#10;            if (farmer &amp;&amp; farmer.name !== user.name) {&#10;              console.log(&#10;                &quot;Navigation: Updating user name from&quot;,&#10;                user.name,&#10;                &quot;to&quot;,&#10;                farmer.name,&#10;              );&#10;              setUpdatedUserName(farmer.name);&#10;&#10;              // Also update the Auth context&#10;              updateUser({&#10;                ...user,&#10;                name: farmer.name,&#10;              });&#10;            }&#10;          }&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Navigation: Error fetching updated name:&quot;, error);&#10;      }&#10;    }&#10;&#10;    fetchUpdatedUserName();&#10;  }, [user?.email, user?.userType]);&#10;&#10;  // Pages that should have simplified navigation (no search/cart)&#10;  const simplifiedPages = [&#10;    &quot;/login&quot;,&#10;    &quot;/register&quot;,&#10;    &quot;/forgot-password&quot;,&#10;    &quot;/reset-password&quot;,&#10;    &quot;/cart&quot;,&#10;    &quot;/create&quot;,&#10;    &quot;/manage&quot;,&#10;    &quot;/payment&quot;,&#10;    &quot;/bookings&quot;,&#10;    &quot;/farmer-orders&quot;,&#10;    &quot;/review&quot;,&#10;  ];&#10;&#10;  // Details page gets minimal navigation (only logo + dark mode)&#10;  const isDetailsPage = pathname === &quot;/details&quot;;&#10;  const isFarmersPage = pathname === &quot;/farmers&quot;;&#10;  const shouldShowSearchAndCart =&#10;    !simplifiedPages.includes(pathname) &amp;&amp; !isDetailsPage;&#10;  const shouldShowNavLinks = !isDetailsPage;&#10;  const shouldShowUserAuth = !isDetailsPage;&#10;&#10;  // Different search placeholders based on page&#10;  const getSearchPlaceholder = () =&gt; {&#10;    if (isFarmersPage) {&#10;      return &quot;Search farmers...&quot;;&#10;    }&#10;    return &quot;Search products...&quot;;&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    try {&#10;      // Close the user menu first&#10;      setShowUserMenu(false);&#10;&#10;      // Clear any existing modals or intercepted routes by going to home first&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Small delay to ensure navigation completes before sign out&#10;      await new Promise((resolve) =&gt; setTimeout(resolve, 100));&#10;&#10;      // Sign out from NextAuth and clear context&#10;      await signOut({ redirect: false });&#10;      logout();&#10;&#10;      // Ensure we stay on home page and refresh&#10;      router.replace(&quot;/&quot;);&#10;&#10;      // Force a hard refresh to clear any modal states&#10;      window.location.href = &quot;/&quot;;&#10;    } catch (error) {&#10;      console.error(&quot;Logout error:&quot;, error);&#10;      // Even if there's an error, still redirect to home&#10;      window.location.href = &quot;/&quot;;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;nav className=&quot;bg-white dark:bg-gray-800 shadow-lg sticky top-0 z-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center h-16&quot;&gt;&#10;          {/* Logo */}&#10;          &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;bg-primary-500 p-2 rounded-lg&quot;&gt;&#10;              &lt;i className=&quot;fas fa-seedling text-white text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                FarmFresh&#10;              &lt;/h1&gt;&#10;              &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                Local Farmer Booking&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Link&gt;&#10;&#10;          {/* Search Bar (conditional) */}&#10;          {shouldShowSearchAndCart &amp;&amp; (&#10;            &lt;div className=&quot;hidden md:flex flex-1 max-w-lg mx-8&quot;&gt;&#10;              &lt;div className=&quot;relative w-full&quot;&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  placeholder={getSearchPlaceholder()}&#10;                  className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                /&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-gray-400&quot;&gt;&lt;/i&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Navigation Links (conditional) */}&#10;          {shouldShowNavLinks &amp;&amp; (&#10;            &lt;div className=&quot;hidden lg:flex items-center space-x-8&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/products&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/products&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Products&#10;              &lt;/Link&gt;&#10;              &lt;Link&#10;                href=&quot;/farmers&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/farmers&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                Farmers&#10;              &lt;/Link&gt;&#10;&#10;              {/* Show different menu items based on user type */}&#10;              {isAuthenticated &amp;&amp; user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;Link&#10;                    href=&quot;/create&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/create&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Add Product&#10;                  &lt;/Link&gt;&#10;                  &lt;Link&#10;                    href=&quot;/manage&quot;&#10;                    className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                      pathname === &quot;/manage&quot;&#10;                        ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                        : &quot;&quot;&#10;                    }`}&#10;                  &gt;&#10;                    Manage Products&#10;                  &lt;/Link&gt;&#10;                &lt;/&gt;&#10;              )}&#10;&#10;              {/* Show My Orders for regular users */}&#10;              {isAuthenticated &amp;&amp; user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                &lt;Link&#10;                  href=&quot;/bookings&quot;&#10;                  className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                    pathname === &quot;/bookings&quot;&#10;                      ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  My Orders&#10;                &lt;/Link&gt;&#10;              )}&#10;&#10;              &lt;Link&#10;                href=&quot;/about&quot;&#10;                className={`text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition ${&#10;                  pathname === &quot;/about&quot;&#10;                    ? &quot;text-primary-600 dark:text-primary-400&quot;&#10;                    : &quot;&quot;&#10;                }`}&#10;              &gt;&#10;                About&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Right side icons and user menu */}&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            {/* Cart and Favorites (only for authenticated users and not on simplified pages) */}&#10;            {shouldShowSearchAndCart &amp;&amp; isAuthenticated &amp;&amp; (&#10;              &lt;&gt;&#10;                {/* Messages */}&#10;                &lt;Link&#10;                  href=&quot;/messages&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                  title=&quot;Messages&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-envelope text-xl&quot;&gt;&lt;/i&gt;&#10;                  {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;&#10;                &lt;Link&#10;                  href=&quot;/favorites&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;far fa-heart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {favorites.length &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {favorites.length}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;                &lt;Link&#10;                  href=&quot;/cart&quot;&#10;                  className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition relative&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-shopping-cart text-xl&quot;&gt;&lt;/i&gt;&#10;                  {cartCount &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center&quot;&gt;&#10;                      {cartCount}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Dark mode toggle */}&#10;            &lt;button&#10;              onClick={toggleDarkMode}&#10;              className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;              title={&#10;                isMounted &amp;&amp; isLoaded&#10;                  ? isDarkMode&#10;                    ? &quot;Switch to light mode&quot;&#10;                    : &quot;Switch to dark mode&quot;&#10;                  : &quot;Toggle theme&quot;&#10;              }&#10;            &gt;&#10;              {isMounted &amp;&amp; isLoaded ? (&#10;                isDarkMode ? (&#10;                  &lt;i className=&quot;fas fa-sun text-xl&quot;&gt;&lt;/i&gt;&#10;                ) : (&#10;                  &lt;i className=&quot;fas fa-moon text-xl&quot;&gt;&lt;/i&gt;&#10;                )&#10;              ) : (&#10;                &lt;i className=&quot;fas fa-moon text-xl&quot;&gt;&lt;/i&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;&#10;            {/* User Authentication (conditional) */}&#10;            {shouldShowUserAuth &amp;&amp; (&#10;              &lt;&gt;&#10;                {isAuthenticated ? (&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setShowUserMenu(!showUserMenu)}&#10;                      className=&quot;flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                        &lt;span className=&quot;text-white text-sm font-medium&quot;&gt;&#10;                          {user?.name?.charAt(0)?.toUpperCase() || &quot;U&quot;}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;span className=&quot;hidden md:block&quot;&gt;{user?.name}&lt;/span&gt;&#10;                      &lt;i className=&quot;fas fa-chevron-down text-sm&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;&#10;                    {/* User Dropdown Menu */}&#10;                    {showUserMenu &amp;&amp; (&#10;                      &lt;div className=&quot;absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-2&quot;&gt;&#10;                        &lt;div className=&quot;px-4 py-2 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                            {user?.name}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                            {user?.email}&#10;                          &lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-primary-600 dark:text-primary-400 capitalize&quot;&gt;&#10;                            {user?.userType || &quot;User&quot;}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Farmer-specific menu items */}&#10;                        {user?.userType === &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/farmer-orders&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-clipboard-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              Order Management&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/create&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                              Add Product&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/manage&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-cog mr-2&quot;&gt;&lt;/i&gt;&#10;                              Manage Products&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Regular user menu items */}&#10;                        {user?.userType !== &quot;farmer&quot; &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;Link&#10;                              href=&quot;/bookings&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-list mr-2&quot;&gt;&lt;/i&gt;&#10;                              My Orders&#10;                            &lt;/Link&gt;&#10;                            &lt;Link&#10;                              href=&quot;/analytics&quot;&#10;                              className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                              onClick={() =&gt; setShowUserMenu(false)}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-chart-bar mr-2&quot;&gt;&lt;/i&gt;&#10;                              Analytics&#10;                            &lt;/Link&gt;&#10;                          &lt;/&gt;&#10;                        )}&#10;&#10;                        {/* Common menu items */}&#10;                        &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 mt-2 pt-2&quot;&gt;&#10;                          &lt;Link&#10;                            href=&quot;/messages&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-envelope mr-2&quot;&gt;&lt;/i&gt;&#10;                            Messages&#10;                            {totalUnreadCount &gt; 0 &amp;&amp; (&#10;                              &lt;span className=&quot;ml-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center inline-flex&quot;&gt;&#10;                                {totalUnreadCount &gt; 9 ? &quot;9+&quot; : totalUnreadCount}&#10;                              &lt;/span&gt;&#10;                            )}&#10;                          &lt;/Link&gt;&#10;                          &lt;Link&#10;                            href=&quot;/profile&quot;&#10;                            className=&quot;block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                            onClick={() =&gt; setShowUserMenu(false)}&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-user mr-2&quot;&gt;&lt;/i&gt;&#10;                            Profile Settings&#10;                          &lt;/Link&gt;&#10;                          &lt;button&#10;                            onClick={handleLogout}&#10;                            className=&quot;w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                          &gt;&#10;                            &lt;i className=&quot;fas fa-sign-out-alt mr-2&quot;&gt;&lt;/i&gt;&#10;                            Logout&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;Link&#10;                      href=&quot;/login&quot;&#10;                      className=&quot;text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition&quot;&#10;                    &gt;&#10;                      Login&#10;                    &lt;/Link&gt;&#10;                    &lt;Link&#10;                      href=&quot;/register&quot;&#10;                      className=&quot;bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg transition&quot;&#10;                    &gt;&#10;                      Sign Up&#10;                    &lt;/Link&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;&#10;            {/* Mobile menu button */}&#10;            &lt;button className=&quot;lg:hidden text-gray-700 dark:text-gray-300&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bars text-xl&quot;&gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/correct-dill-oregano-ownership.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/correct-dill-oregano-ownership.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function correctDillOreganoOwnership() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; CORRECTING DILL AND OREGANO OWNERSHIP\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Get Chashi Jashim's farmer data&#10;    console.log(&quot;1.  GETTING CHASHI JASHIM'S FARMER DATA:&quot;);&#10;    const chashiJashim = await db.collection(&quot;farmers&quot;).findOne({&#10;      _id: new ObjectId(&quot;688b3f4f37eade0f39f64de2&quot;)&#10;    });&#10;&#10;    if (!chashiJashim) {&#10;      console.log(&quot;❌ Chashi Jashim farmer not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(`- ID: ${chashiJashim._id}`);&#10;    console.log(`- Name: ${chashiJashim.name}`);&#10;    console.log(`- Email: ${chashiJashim.email}`);&#10;&#10;    // 2. Get Ayesha Siddika's farmer data&#10;    console.log(&quot;\n2.  GETTING AYESHA SIDDIKA'S FARMER DATA:&quot;);&#10;    const ayesha = await db.collection(&quot;farmers&quot;).findOne({&#10;      _id: &quot;farmer_008&quot;&#10;    });&#10;&#10;    console.log(`- ID: ${ayesha._id}`);&#10;    console.log(`- Name: ${ayesha.name}`);&#10;    console.log(`- Email: ${ayesha.email}`);&#10;&#10;    // 3. Check current state before correction&#10;    console.log(&quot;\n3.  CURRENT STATE BEFORE CORRECTION:&quot;);&#10;    &#10;    const ayeshaProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    console.log(`Ayesha currently has ${ayeshaProducts.length} products:`);&#10;    ayeshaProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    const chashiProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: chashiJashim._id.toString() },&#10;        { farmerId: new ObjectId(chashiJashim._id) }&#10;      ]&#10;    }).toArray();&#10;    &#10;    console.log(`Chashi Jashim currently has ${chashiProducts.length} products:`);&#10;    chashiProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // 4. Move Dill and Oregano to Chashi Jashim&#10;    console.log(&quot;\n4.  MOVING DILL AND OREGANO TO CHASHI JASHIM...&quot;);&#10;    &#10;    const productsToMove = [&quot;Dill&quot;, &quot;Oregano&quot;];&#10;    &#10;    for (const productName of productsToMove) {&#10;      console.log(`\nMoving ${productName}...`);&#10;      &#10;      const updateData = {&#10;        // Set top-level fields to Chashi Jashim&#10;        farmerId: chashiJashim._id.toString(),&#10;        farmerName: chashiJashim.name,&#10;        farmerEmail: chashiJashim.email,&#10;        &#10;        // Set embedded farmer object to Chashi Jashim&#10;        farmer: {&#10;          _id: chashiJashim._id.toString(),&#10;          name: chashiJashim.name,&#10;          email: chashiJashim.email,&#10;          farmName: chashiJashim.farmName,&#10;          location: chashiJashim.location,&#10;          phone: chashiJashim.phone,&#10;          specializations: chashiJashim.specializations || [],&#10;          farmingMethods: chashiJashim.farmingMethods || [],&#10;          verified: chashiJashim.verified || false&#10;        },&#10;        &#10;        // Update timestamp&#10;        updatedAt: new Date()&#10;      };&#10;&#10;      const result = await db.collection(&quot;products&quot;).updateOne(&#10;        { name: productName },&#10;        { $set: updateData }&#10;      );&#10;&#10;      console.log(`  ✅ Updated ${productName}: ${result.modifiedCount} document(s) modified`);&#10;    }&#10;&#10;    // 5. Verify the correction&#10;    console.log(&quot;\n5.  VERIFYING CORRECTION:&quot;);&#10;    &#10;    const updatedAyeshaProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    console.log(`Ayesha now has ${updatedAyeshaProducts.length} products (should be 3):`);&#10;    updatedAyeshaProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    const updatedChashiProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: chashiJashim._id.toString()&#10;    }).toArray();&#10;    &#10;    console.log(`Chashi Jashim now has ${updatedChashiProducts.length} products:`);&#10;    updatedChashiProducts.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // 6. Test frontend queries for both farmers&#10;    console.log(&quot;\n6.  TESTING FRONTEND QUERIES:&quot;);&#10;    &#10;    // Test Ayesha's query&#10;    const ayeshaFrontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_008&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_008&quot; },&#10;        { farmerName: &quot;Ayesha Siddika&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Ayesha's frontend query finds ${ayeshaFrontendQuery.length} products:`);&#10;    ayeshaFrontendQuery.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // Test Chashi Jashim's query&#10;    const chashiFrontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: chashiJashim._id.toString() },&#10;        { &quot;farmer._id&quot;: chashiJashim._id.toString() },&#10;        { farmerName: &quot;chashi jashim&quot; },&#10;        { &quot;farmer.name&quot;: &quot;chashi jashim&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Chashi Jashim's frontend query finds ${chashiFrontendQuery.length} products:`);&#10;    chashiFrontendQuery.forEach(p =&gt; console.log(`  - ${p.name}`));&#10;&#10;    // 7. Final consistency check&#10;    console.log(&quot;\n7. ✅ FINAL CONSISTENCY CHECK:&quot;);&#10;    &#10;    const allProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { name: &quot;Dill&quot; },&#10;        { name: &quot;Oregano&quot; },&#10;        { name: &quot;Guava&quot; },&#10;        { name: &quot;Fresh Bananas&quot; },&#10;        { name: &quot;Forest Honey&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    allProducts.forEach(p =&gt; {&#10;      const isConsistent = &#10;        p.farmerId === p.farmer?._id &amp;&amp;&#10;        p.farmerName === p.farmer?.name &amp;&amp;&#10;        p.farmerEmail === p.farmer?.email;&#10;      &#10;      console.log(`${p.name}: ${isConsistent ? '✅ Consistent' : '❌ Inconsistent'}`);&#10;      console.log(`  Owner: ${p.farmerName} (${p.farmerId})`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;correctDillOreganoOwnership().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-ayesha-siddika.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-ayesha-siddika.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function debugAyeshaSiddika() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; DEBUGGING AYESHA SIDDIKA'S PRODUCT COUNT ISSUE\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Find Ayesha Siddika's farmer data&#10;    console.log(&quot;1.  CHECKING AYESHA SIDDIKA'S FARMER DATA:&quot;);&#10;    const ayesha = await db.collection(&quot;farmers&quot;).findOne({&#10;      $or: [&#10;        { _id: &quot;farmer_008&quot; },&#10;        { name: &quot;Ayesha Siddika&quot; },&#10;        { name: /ayesha.*siddika/i }&#10;      ]&#10;    });&#10;&#10;    if (ayesha) {&#10;      console.log(`- ID: ${ayesha._id}`);&#10;      console.log(`- Name: ${ayesha.name}`);&#10;      console.log(`- Email: ${ayesha.email}`);&#10;      console.log(`- Farm: ${ayesha.farmName}`);&#10;    } else {&#10;      console.log(&quot;❌ Ayesha Siddika farmer not found!&quot;);&#10;    }&#10;&#10;    // 2. Check ALL products for Ayesha Siddika using different criteria&#10;    console.log(&quot;\n2.  CHECKING ALL PRODUCTS FOR AYESHA SIDDIKA:&quot;);&#10;    &#10;    const ayeshaByFarmerId = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    const ayeshaByEmbeddedId = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer._id&quot;: &quot;farmer_008&quot;&#10;    }).toArray();&#10;    &#10;    const ayeshaByName = await db.collection(&quot;products&quot;).find({&#10;      farmerName: &quot;Ayesha Siddika&quot;&#10;    }).toArray();&#10;    &#10;    const ayeshaByEmbeddedName = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot;&#10;    }).toArray();&#10;&#10;    console.log(`- By farmerId (farmer_008): ${ayeshaByFarmerId.length} products`);&#10;    ayeshaByFarmerId.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;    &#10;    console.log(`- By embedded farmer._id (farmer_008): ${ayeshaByEmbeddedId.length} products`);&#10;    ayeshaByEmbeddedId.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;    &#10;    console.log(`- By farmerName (Ayesha Siddika): ${ayeshaByName.length} products`);&#10;    ayeshaByName.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;    &#10;    console.log(`- By embedded farmer.name (Ayesha Siddika): ${ayeshaByEmbeddedName.length} products`);&#10;    ayeshaByEmbeddedName.forEach(p =&gt; console.log(`  * ${p.name} (status: ${p.status})`));&#10;&#10;    // 3. Check products that have inconsistent data related to Ayesha&#10;    console.log(&quot;\n3.  CHECKING FOR DATA INCONSISTENCIES RELATED TO AYESHA:&quot;);&#10;    const inconsistentProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        // Products where farmerId is farmer_008 but embedded farmer data doesn't match&#10;        {&#10;          farmerId: &quot;farmer_008&quot;,&#10;          &quot;farmer.name&quot;: { $ne: &quot;Ayesha Siddika&quot; }&#10;        },&#10;        // Products where farmerName is Ayesha but farmerId doesn't match&#10;        {&#10;          farmerName: &quot;Ayesha Siddika&quot;,&#10;          farmerId: { $ne: &quot;farmer_008&quot; }&#10;        },&#10;        // Products where embedded farmer name mentions other farmers but top-level has Ayesha&#10;        {&#10;          $or: [&#10;            { farmerId: &quot;farmer_008&quot; },&#10;            { farmerName: &quot;Ayesha Siddika&quot; }&#10;          ],&#10;          &quot;farmer.name&quot;: { $exists: true, $ne: &quot;Ayesha Siddika&quot; }&#10;        }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Found ${inconsistentProducts.length} products with inconsistent data:`);&#10;    inconsistentProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // 4. Create a comprehensive query like the frontend would use for Ayesha&#10;    console.log(&quot;\n4.  SIMULATING FRONTEND QUERY FOR AYESHA:&quot;);&#10;    const frontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_008&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_008&quot; },&#10;        { farmerName: &quot;Ayesha Siddika&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Frontend-style query found ${frontendQuery.length} products:`);&#10;    frontendQuery.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (farmerId: ${p.farmerId}, farmerName: ${p.farmerName}, status: ${p.status})`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // 5. Check products that might have &quot;chashi jashim&quot; in embedded data&#10;    console.log(&quot;\n5.  CHECKING PRODUCTS WITH 'CHASHI JASHIM' IN EMBEDDED DATA:&quot;);&#10;    const chashiJashimProducts = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: /chashi.*jashim/i&#10;    }).toArray();&#10;&#10;    console.log(`Found ${chashiJashimProducts.length} products with 'chashi jashim' in embedded farmer.name:`);&#10;    chashiJashimProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;debugAyeshaSiddika().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-farmer-products-issue.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-farmer-products-issue.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;async function debugFarmerProductsIssue() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; DEBUGGING MOSTAFA KABIR'S PRODUCT COUNT ISSUE\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Check current Green Beans data&#10;    console.log(&quot;1.  CHECKING GREEN BEANS CURRENT ASSIGNMENT:&quot;);&#10;    const greenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;&#10;    });&#10;    &#10;    if (greenBeans) {&#10;      console.log(`- Product: ${greenBeans.name}`);&#10;      console.log(`- farmerId: ${greenBeans.farmerId}`);&#10;      console.log(`- farmerName: ${greenBeans.farmerName}`);&#10;      console.log(`- farmerEmail: ${greenBeans.farmerEmail}`);&#10;      console.log(`- Embedded farmer._id: ${greenBeans.farmer?._id}`);&#10;      console.log(`- Embedded farmer.name: ${greenBeans.farmer?.name}`);&#10;      console.log(`- Status: ${greenBeans.status}`);&#10;    }&#10;&#10;    // 2. Check ALL products for Mostafa Kabir using different criteria&#10;    console.log(&quot;\n2.  CHECKING ALL PRODUCTS FOR MOSTAFA KABIR:&quot;);&#10;    &#10;    const mostafaByFarmerId = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_006&quot;&#10;    }).toArray();&#10;    &#10;    const mostafaByEmbeddedId = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer._id&quot;: &quot;farmer_006&quot;&#10;    }).toArray();&#10;    &#10;    const mostafaByName = await db.collection(&quot;products&quot;).find({&#10;      farmerName: &quot;Mostafa Kabir&quot;&#10;    }).toArray();&#10;    &#10;    const mostafaByEmbeddedName = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot;&#10;    }).toArray();&#10;&#10;    console.log(`- By farmerId (farmer_006): ${mostafaByFarmerId.length} products`);&#10;    mostafaByFarmerId.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;    &#10;    console.log(`- By embedded farmer._id (farmer_006): ${mostafaByEmbeddedId.length} products`);&#10;    mostafaByEmbeddedId.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;    &#10;    console.log(`- By farmerName (Mostafa Kabir): ${mostafaByName.length} products`);&#10;    mostafaByName.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;    &#10;    console.log(`- By embedded farmer.name (Mostafa Kabir): ${mostafaByEmbeddedName.length} products`);&#10;    mostafaByEmbeddedName.forEach(p =&gt; console.log(`  * ${p.name}`));&#10;&#10;    // 3. Check products that might still have mixed data&#10;    console.log(&quot;\n3.  CHECKING FOR DATA INCONSISTENCIES:&quot;);&#10;    const inconsistentProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        // Products where top-level and embedded farmer data don't match&#10;        {&#10;          $and: [&#10;            { farmerId: { $exists: true } },&#10;            { &quot;farmer._id&quot;: { $exists: true } },&#10;            { $expr: { $ne: [&quot;$farmerId&quot;, &quot;$farmer._id&quot;] } }&#10;          ]&#10;        },&#10;        // Products where farmer names don't match&#10;        {&#10;          $and: [&#10;            { farmerName: { $exists: true } },&#10;            { &quot;farmer.name&quot;: { $exists: true } },&#10;            { $expr: { $ne: [&quot;$farmerName&quot;, &quot;$farmer.name&quot;] } }&#10;          ]&#10;        }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Found ${inconsistentProducts.length} products with inconsistent farmer data:`);&#10;    inconsistentProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // 4. Create a comprehensive query like the frontend would use&#10;    console.log(&quot;\n4.  SIMULATING FRONTEND QUERY FOR MOSTAFA:&quot;);&#10;    const frontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_006&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;        { farmerName: &quot;Mostafa Kabir&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Frontend-style query found ${frontendQuery.length} products:`);&#10;    frontendQuery.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (farmerId: ${p.farmerId}, status: ${p.status})`);&#10;    });&#10;&#10;    // 5. Check if there are deleted or inactive products being counted&#10;    console.log(&quot;\n5.  CHECKING PRODUCT STATUS:&quot;);&#10;    const activeProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_006&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;        { farmerName: &quot;Mostafa Kabir&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot; }&#10;      ],&#10;      status: { $nin: [&quot;deleted&quot;, &quot;inactive&quot;] }&#10;    }).toArray();&#10;&#10;    console.log(`Active products for Mostafa: ${activeProducts.length}`);&#10;    activeProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (status: ${p.status})`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;debugFarmerProductsIssue().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-fatema-data.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-fatema-data.js" />
              <option name="originalContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;// MongoDB connection string - update this if needed&#10;const MONGODB_URI =&#10;  process.env.MONGODB_URI ||&#10;  &quot;mongodb+srv://admin:admin123@cluster0.mongodb.net/farmfresh?retryWrites=true&amp;w=majority&quot;;&#10;&#10;async function debugFatemaData() {&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;✅ Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Find Fatema Begum farmer data&#10;    console.log(&quot;\n Searching for Fatema Begum farmer...&quot;);&#10;    const farmers = await db&#10;      .collection(&quot;farmers&quot;)&#10;      .find({&#10;        $or: [{ name: /fatema/i }, { name: /begum/i }, { email: /fatema/i }],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${farmers.length} farmers matching &quot;Fatema&quot;:`);&#10;    farmers.forEach((farmer, index) =&gt; {&#10;      console.log(`\n${index + 1}. Farmer:`, {&#10;        _id: farmer._id,&#10;        name: farmer.name,&#10;        email: farmer.email,&#10;        userId: farmer.userId,&#10;        createdAt: farmer.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find all products associated with Fatema Begum&#10;    console.log(&quot;\n Searching for products associated with Fatema Begum...&quot;);&#10;&#10;    // Search by different possible farmer identifiers&#10;    const farmerIds = farmers.map((f) =&gt; f._id);&#10;    const farmerEmails = farmers.map((f) =&gt; f.email).filter(Boolean);&#10;    const farmerNames = farmers.map((f) =&gt; f.name).filter(Boolean);&#10;&#10;    const products = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: { $in: farmerIds } },&#10;          { farmerEmail: { $in: farmerEmails } },&#10;          { farmerName: { $in: farmerNames } },&#10;          { &quot;farmer.id&quot;: { $in: farmerIds.map(String) } },&#10;          { &quot;farmer.email&quot;: { $in: farmerEmails } },&#10;          { &quot;farmer.name&quot;: { $in: farmerNames } },&#10;          // Also search by product name for Sweet Corn&#10;          { name: /sweet.*corn/i },&#10;          { name: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${products.length} products:`);&#10;    products.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        price: product.price,&#10;        stock: product.stock,&#10;        status: product.status,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        createdAt: product.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find orders containing these products&#10;    console.log(&quot;\n Searching for orders containing these products...&quot;);&#10;&#10;    const productIds = products.map((p) =&gt; p._id.toString());&#10;    const productNames = products.map((p) =&gt; p.name);&#10;&#10;    const orders = await db&#10;      .collection(&quot;orders&quot;)&#10;      .find({&#10;        $or: [&#10;          { &quot;items.productId&quot;: { $in: productIds } },&#10;          { &quot;items.product._id&quot;: { $in: productIds } },&#10;          { &quot;items.product.name&quot;: { $in: productNames } },&#10;          { &quot;items.name&quot;: { $in: productNames } },&#10;          // Direct search for corn orders&#10;          { &quot;items.name&quot;: /corn/i },&#10;          { &quot;items.product.name&quot;: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${orders.length} orders with these products:`);&#10;    orders.forEach((order, index) =&gt; {&#10;      console.log(`\n${index + 1}. Order:`, {&#10;        _id: order._id,&#10;        customerName: order.customerName,&#10;        status: order.status,&#10;        total: order.total,&#10;        farmerSubtotal: order.farmerSubtotal,&#10;        createdAt: order.createdAt,&#10;        items: order.items?.map((item) =&gt; ({&#10;          productId: item.productId,&#10;          name: item.name,&#10;          quantity: item.quantity,&#10;          price: item.price,&#10;          product: item.product&#10;            ? {&#10;                _id: item.product._id,&#10;                name: item.product.name,&#10;                farmerId: item.product.farmerId,&#10;                farmerEmail: item.product.farmerEmail,&#10;              }&#10;            : null,&#10;        })),&#10;      });&#10;    });&#10;&#10;    // Check for any corn-related products regardless of farmer&#10;    console.log(&quot;\n All corn products in database:&quot;);&#10;    const allCornProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        name: /corn/i,&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${allCornProducts.length} corn products:`);&#10;    allCornProducts.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Corn Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        status: product.status,&#10;      });&#10;    });&#10;&#10;    // Summary&#10;    console.log(&quot;\n SUMMARY:&quot;);&#10;    console.log(`- Farmers found: ${farmers.length}`);&#10;    console.log(`- Products found: ${products.length}`);&#10;    console.log(`- Orders found: ${orders.length}`);&#10;    console.log(`- Total corn products: ${allCornProducts.length}`);&#10;&#10;    // Check for data inconsistencies&#10;    console.log(&quot;\n⚠️  POTENTIAL ISSUES:&quot;);&#10;&#10;    products.forEach((product) =&gt; {&#10;      const issues = [];&#10;&#10;      if (&#10;        !product.farmerId &amp;&amp;&#10;        !product.farmerEmail &amp;&amp;&#10;        !product.farmerName &amp;&amp;&#10;        !product.farmer&#10;      ) {&#10;        issues.push(&quot;No farmer identification&quot;);&#10;      }&#10;&#10;      if (product.farmer &amp;&amp; (!product.farmerId || !product.farmerEmail)) {&#10;        issues.push(&quot;Farmer object exists but missing farmerId/farmerEmail&quot;);&#10;      }&#10;&#10;      if (&#10;        product.category &amp;&amp;&#10;        ![&quot;Vegetables&quot;, &quot;Fruits&quot;, &quot;Grains&quot;, &quot;Dairy&quot;, &quot;Honey&quot;, &quot;Herbs&quot;].includes(&#10;          product.category,&#10;        )&#10;      ) {&#10;        issues.push(`Unusual category: ${product.category}`);&#10;      }&#10;&#10;      if (issues.length &gt; 0) {&#10;        console.log(`\n- Product &quot;${product.name}&quot; (${product._id}):`, issues);&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n✅ Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;// Run the debug script&#10;debugFatemaData().catch(console.error);&#10;" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;require(&quot;dotenv&quot;).config(); // Load environment variables&#10;&#10;// Try to get MongoDB URI from environment variables first&#10;const MONGODB_URI =&#10;  process.env.MONGODB_URI ||&#10;  process.env.MONGODB_URL ||&#10;  process.env.DATABASE_URL ||&#10;  &quot;mongodb://localhost:27017/farmfresh&quot;; // Fallback to local MongoDB&#10;&#10;async function debugFatemaData() {&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;✅ Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Find Fatema Begum farmer data&#10;    console.log(&quot;\n Searching for Fatema Begum farmer...&quot;);&#10;    const farmers = await db&#10;      .collection(&quot;farmers&quot;)&#10;      .find({&#10;        $or: [{ name: /fatema/i }, { name: /begum/i }, { email: /fatema/i }],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${farmers.length} farmers matching &quot;Fatema&quot;:`);&#10;    farmers.forEach((farmer, index) =&gt; {&#10;      console.log(`\n${index + 1}. Farmer:`, {&#10;        _id: farmer._id,&#10;        name: farmer.name,&#10;        email: farmer.email,&#10;        userId: farmer.userId,&#10;        createdAt: farmer.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find all products associated with Fatema Begum&#10;    console.log(&quot;\n Searching for products associated with Fatema Begum...&quot;);&#10;&#10;    // Search by different possible farmer identifiers&#10;    const farmerIds = farmers.map((f) =&gt; f._id);&#10;    const farmerEmails = farmers.map((f) =&gt; f.email).filter(Boolean);&#10;    const farmerNames = farmers.map((f) =&gt; f.name).filter(Boolean);&#10;&#10;    const products = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        $or: [&#10;          { farmerId: { $in: farmerIds } },&#10;          { farmerEmail: { $in: farmerEmails } },&#10;          { farmerName: { $in: farmerNames } },&#10;          { &quot;farmer.id&quot;: { $in: farmerIds.map(String) } },&#10;          { &quot;farmer.email&quot;: { $in: farmerEmails } },&#10;          { &quot;farmer.name&quot;: { $in: farmerNames } },&#10;          // Also search by product name for Sweet Corn&#10;          { name: /sweet.*corn/i },&#10;          { name: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${products.length} products:`);&#10;    products.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        price: product.price,&#10;        stock: product.stock,&#10;        status: product.status,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        createdAt: product.createdAt,&#10;      });&#10;    });&#10;&#10;    // Find orders containing these products&#10;    console.log(&quot;\n Searching for orders containing these products...&quot;);&#10;&#10;    const productIds = products.map((p) =&gt; p._id.toString());&#10;    const productNames = products.map((p) =&gt; p.name);&#10;&#10;    const orders = await db&#10;      .collection(&quot;orders&quot;)&#10;      .find({&#10;        $or: [&#10;          { &quot;items.productId&quot;: { $in: productIds } },&#10;          { &quot;items.product._id&quot;: { $in: productIds } },&#10;          { &quot;items.product.name&quot;: { $in: productNames } },&#10;          { &quot;items.name&quot;: { $in: productNames } },&#10;          // Direct search for corn orders&#10;          { &quot;items.name&quot;: /corn/i },&#10;          { &quot;items.product.name&quot;: /corn/i },&#10;        ],&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`\nFound ${orders.length} orders with these products:`);&#10;    orders.forEach((order, index) =&gt; {&#10;      console.log(`\n${index + 1}. Order:`, {&#10;        _id: order._id,&#10;        customerName: order.customerName,&#10;        status: order.status,&#10;        total: order.total,&#10;        farmerSubtotal: order.farmerSubtotal,&#10;        createdAt: order.createdAt,&#10;        items: order.items?.map((item) =&gt; ({&#10;          productId: item.productId,&#10;          name: item.name,&#10;          quantity: item.quantity,&#10;          price: item.price,&#10;          product: item.product&#10;            ? {&#10;                _id: item.product._id,&#10;                name: item.product.name,&#10;                farmerId: item.product.farmerId,&#10;                farmerEmail: item.product.farmerEmail,&#10;              }&#10;            : null,&#10;        })),&#10;      });&#10;    });&#10;&#10;    // Check for any corn-related products regardless of farmer&#10;    console.log(&quot;\n All corn products in database:&quot;);&#10;    const allCornProducts = await db&#10;      .collection(&quot;products&quot;)&#10;      .find({&#10;        name: /corn/i,&#10;      })&#10;      .toArray();&#10;&#10;    console.log(`Found ${allCornProducts.length} corn products:`);&#10;    allCornProducts.forEach((product, index) =&gt; {&#10;      console.log(`\n${index + 1}. Corn Product:`, {&#10;        _id: product._id,&#10;        name: product.name,&#10;        category: product.category,&#10;        farmerId: product.farmerId,&#10;        farmerEmail: product.farmerEmail,&#10;        farmerName: product.farmerName,&#10;        farmer: product.farmer,&#10;        status: product.status,&#10;      });&#10;    });&#10;&#10;    // Summary&#10;    console.log(&quot;\n SUMMARY:&quot;);&#10;    console.log(`- Farmers found: ${farmers.length}`);&#10;    console.log(`- Products found: ${products.length}`);&#10;    console.log(`- Orders found: ${orders.length}`);&#10;    console.log(`- Total corn products: ${allCornProducts.length}`);&#10;&#10;    // Check for data inconsistencies&#10;    console.log(&quot;\n⚠️  POTENTIAL ISSUES:&quot;);&#10;&#10;    products.forEach((product) =&gt; {&#10;      const issues = [];&#10;&#10;      if (&#10;        !product.farmerId &amp;&amp;&#10;        !product.farmerEmail &amp;&amp;&#10;        !product.farmerName &amp;&amp;&#10;        !product.farmer&#10;      ) {&#10;        issues.push(&quot;No farmer identification&quot;);&#10;      }&#10;&#10;      if (product.farmer &amp;&amp; (!product.farmerId || !product.farmerEmail)) {&#10;        issues.push(&quot;Farmer object exists but missing farmerId/farmerEmail&quot;);&#10;      }&#10;&#10;      if (&#10;        product.category &amp;&amp;&#10;        ![&quot;Vegetables&quot;, &quot;Fruits&quot;, &quot;Grains&quot;, &quot;Dairy&quot;, &quot;Honey&quot;, &quot;Herbs&quot;].includes(&#10;          product.category,&#10;        )&#10;      ) {&#10;        issues.push(`Unusual category: ${product.category}`);&#10;      }&#10;&#10;      if (issues.length &gt; 0) {&#10;        console.log(`\n- Product &quot;${product.name}&quot; (${product._id}):`, issues);&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n✅ Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;// Run the debug script&#10;debugFatemaData().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-hardcoded-farmer-status.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-hardcoded-farmer-status.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;debugHardcodedFarmerProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/farming-methods-section-corrected.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/farming-methods-section-corrected.txt" />
              <option name="updatedContent" value="                {/* Farming Methods Showcase - Updated to use database data */}&#10;                {farmer.farmInfo?.farmingMethods &amp;&amp; farmer.farmInfo.farmingMethods.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mb-12&quot;&gt;&#10;                    &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;                      &lt;h3 className=&quot;text-3xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                         Our Farming Philosophy&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        Sustainable and innovative agricultural practices&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                      {farmer.farmInfo.farmingMethods.map((method, index) =&gt; {&#10;                        const config = methodConfig[method] || {&#10;                          icon: &quot;fas fa-tractor&quot;,&#10;                          color: &quot;text-gray-600 dark:text-gray-400&quot;,&#10;                          description: &quot;Specialized farming technique&quot;,&#10;                        };&#10;&#10;                        return (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;group relative overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-8 shadow-lg hover:shadow-2xl transition-all duration-500 border-t-4 border-green-500&quot;&#10;                          &gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-green-50/50 to-emerald-50/50 dark:from-green-900/10 dark:to-emerald-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;relative z-10 text-center&quot;&gt;&#10;                              &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300&quot;&gt;&#10;                                &lt;i&#10;                                  className={`${config.icon} text-4xl ${config.color}`}&#10;                                &gt;&lt;/i&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;h4 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-3&quot;&gt;&#10;                                {method}&#10;                              &lt;/h4&gt;&#10;                              &lt;p className=&quot;text-gray-600 dark:text-gray-400 leading-relaxed&quot;&gt;&#10;                                {config.description}&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        );&#10;                      })}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-ayesha-siddika-products.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-ayesha-siddika-products.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixAyeshaSiddikaProducts() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING AYESHA SIDDIKA'S PRODUCT DATA INCONSISTENCIES\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Get Ayesha Siddika's correct farmer data&#10;    console.log(&quot;1.  GETTING AYESHA SIDDIKA'S CORRECT DATA:&quot;);&#10;    const ayesha = await db.collection(&quot;farmers&quot;).findOne({&#10;      _id: &quot;farmer_008&quot;&#10;    });&#10;&#10;    if (!ayesha) {&#10;      console.log(&quot;❌ Ayesha Siddika farmer not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(`- ID: ${ayesha._id}`);&#10;    console.log(`- Name: ${ayesha.name}`);&#10;    console.log(`- Email: ${ayesha.email}`);&#10;    console.log(`- Farm: ${ayesha.farmName}`);&#10;&#10;    // Find the problematic products (Dill and Oregano)&#10;    console.log(&quot;\n2.  FINDING PROBLEMATIC PRODUCTS:&quot;);&#10;    const problematicProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;,&#10;      farmerName: &quot;Ayesha Siddika&quot;,&#10;      &quot;farmer.name&quot;: &quot;chashi jashim&quot;&#10;    }).toArray();&#10;&#10;    console.log(`Found ${problematicProducts.length} products with inconsistent data:`);&#10;    problematicProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Current top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Current embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    // Fix each problematic product&#10;    console.log(&quot;\n3.  FIXING EMBEDDED FARMER DATA...&quot;);&#10;    &#10;    for (const product of problematicProducts) {&#10;      console.log(`\nFixing ${product.name}...`);&#10;      &#10;      const updateData = {&#10;        // Ensure top-level fields are correct&#10;        farmerId: ayesha._id,&#10;        farmerName: ayesha.name,&#10;        farmerEmail: ayesha.email,&#10;        &#10;        // Fix the embedded farmer object&#10;        farmer: {&#10;          _id: ayesha._id,&#10;          name: ayesha.name,&#10;          email: ayesha.email,&#10;          farmName: ayesha.farmName,&#10;          location: ayesha.location,&#10;          phone: ayesha.phone,&#10;          specializations: ayesha.specializations || [],&#10;          farmingMethods: ayesha.farmingMethods || [],&#10;          verified: ayesha.verified || false&#10;        },&#10;        &#10;        // Update timestamp&#10;        updatedAt: new Date()&#10;      };&#10;&#10;      const result = await db.collection(&quot;products&quot;).updateOne(&#10;        { _id: product._id },&#10;        { $set: updateData }&#10;      );&#10;&#10;      console.log(`  ✅ Updated ${product.name}: ${result.modifiedCount} document(s) modified`);&#10;    }&#10;&#10;    // Verify the fixes&#10;    console.log(&quot;\n4.  VERIFYING FIXES:&quot;);&#10;    &#10;    const updatedProducts = await db.collection(&quot;products&quot;).find({&#10;      farmerId: &quot;farmer_008&quot;&#10;    }).toArray();&#10;&#10;    console.log(`\nAyesha Siddika now has ${updatedProducts.length} products with consistent data:`);&#10;    updatedProducts.forEach(p =&gt; {&#10;      const isConsistent = &#10;        p.farmerId === p.farmer?._id &amp;&amp;&#10;        p.farmerName === p.farmer?.name &amp;&amp;&#10;        p.farmerEmail === p.farmer?.email;&#10;      &#10;      console.log(`- ${p.name} ${isConsistent ? '✅' : '❌'}`);&#10;      if (!isConsistent) {&#10;        console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;        console.log(`  Embedded: farmer._id=${p.farmer?._id}, farmer.name=${p.farmer?.name}`);&#10;      }&#10;    });&#10;&#10;    // Final test: Simulate frontend query&#10;    console.log(&quot;\n5.  FINAL TEST - SIMULATING FRONTEND QUERY:&quot;);&#10;    const frontendQuery = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_008&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_008&quot; },&#10;        { farmerName: &quot;Ayesha Siddika&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Ayesha Siddika&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Frontend query now finds ${frontendQuery.length} products for Ayesha Siddika:`);&#10;    frontendQuery.forEach(p =&gt; {&#10;      console.log(`- ${p.name} (status: ${p.status})`);&#10;    });&#10;&#10;    // Check if there are still any products with &quot;chashi jashim&quot;&#10;    console.log(&quot;\n6.  CHECKING FOR REMAINING 'CHASHI JASHIM' ISSUES:&quot;);&#10;    const chashiProducts = await db.collection(&quot;products&quot;).find({&#10;      &quot;farmer.name&quot;: /chashi.*jashim/i&#10;    }).toArray();&#10;&#10;    console.log(`Found ${chashiProducts.length} products still with 'chashi jashim':`);&#10;    chashiProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}:`);&#10;      console.log(`  Top-level: farmerId=${p.farmerId}, farmerName=${p.farmerName}`);&#10;      console.log(`  Embedded: farmer.name=${p.farmer?.name}`);&#10;    });&#10;&#10;    if (chashiProducts.length &gt; 0) {&#10;      console.log(&quot;\n NOTE: These products may need manual review to determine correct farmer assignment.&quot;);&#10;    }&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixAyeshaSiddikaProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-green-beans-embedded-farmer.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-green-beans-embedded-farmer.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixGreenBeansEmbeddedFarmer() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING GREEN BEANS EMBEDDED FARMER DATA\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // Find Green Beans product&#10;    const greenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;&#10;    });&#10;&#10;    if (!greenBeans) {&#10;      console.log(&quot;❌ Green Beans product not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(&quot; CURRENT GREEN BEANS DATA:&quot;);&#10;    console.log(`- farmerId: ${greenBeans.farmerId}`);&#10;    console.log(`- farmerName: ${greenBeans.farmerName}`);&#10;    console.log(`- farmerEmail: ${greenBeans.farmerEmail}`);&#10;    console.log(`- Embedded farmer._id: ${greenBeans.farmer?._id}`);&#10;    console.log(`- Embedded farmer.name: ${greenBeans.farmer?.name}`);&#10;    console.log(`- Embedded farmer.email: ${greenBeans.farmer?.email}`);&#10;&#10;    // Get Mizanur Rahman's correct data&#10;    console.log(&quot;\n GETTING MIZANUR RAHMAN'S DATA:&quot;);&#10;    const mizanur = await db.collection(&quot;farmers&quot;).findOne({&#10;      $or: [&#10;        { _id: &quot;farmer_005&quot; },&#10;        { email: &quot;mizanur.rahman@farmfresh.com&quot; },&#10;        { name: &quot;Mizanur Rahman&quot; }&#10;      ]&#10;    });&#10;&#10;    if (!mizanur) {&#10;      console.log(&quot;❌ Mizanur Rahman farmer not found!&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(`- Mizanur's ID: ${mizanur._id}`);&#10;    console.log(`- Mizanur's Name: ${mizanur.name}`);&#10;    console.log(`- Mizanur's Email: ${mizanur.email}`);&#10;    console.log(`- Mizanur's Farm: ${mizanur.farmName}`);&#10;&#10;    // Update Green Beans with complete and consistent farmer data&#10;    console.log(&quot;\n UPDATING GREEN BEANS WITH CONSISTENT FARMER DATA...&quot;);&#10;    &#10;    const updateData = {&#10;      // Top-level fields (should already be correct but ensure consistency)&#10;      farmerId: mizanur._id,&#10;      farmerName: mizanur.name,&#10;      farmerEmail: mizanur.email,&#10;      &#10;      // Fix the embedded farmer object&#10;      farmer: {&#10;        _id: mizanur._id,&#10;        name: mizanur.name,&#10;        email: mizanur.email,&#10;        farmName: mizanur.farmName,&#10;        location: mizanur.location,&#10;        phone: mizanur.phone,&#10;        specializations: mizanur.specializations || [],&#10;        farmingMethods: mizanur.farmingMethods || [],&#10;        verified: mizanur.verified || false&#10;      },&#10;      &#10;      // Update timestamp&#10;      updatedAt: new Date()&#10;    };&#10;&#10;    const result = await db.collection(&quot;products&quot;).updateOne(&#10;      { name: &quot;Green Beans&quot; },&#10;      { $set: updateData }&#10;    );&#10;&#10;    console.log(`✅ Update result: ${result.modifiedCount} documents modified`);&#10;&#10;    // Verify the update&#10;    console.log(&quot;\n VERIFYING UPDATED GREEN BEANS DATA:&quot;);&#10;    const updatedGreenBeans = await db.collection(&quot;products&quot;).findOne({&#10;      name: &quot;Green Beans&quot;&#10;    });&#10;&#10;    console.log(`- farmerId: ${updatedGreenBeans.farmerId}`);&#10;    console.log(`- farmerName: ${updatedGreenBeans.farmerName}`);&#10;    console.log(`- farmerEmail: ${updatedGreenBeans.farmerEmail}`);&#10;    console.log(`- Embedded farmer._id: ${updatedGreenBeans.farmer?._id}`);&#10;    console.log(`- Embedded farmer.name: ${updatedGreenBeans.farmer?.name}`);&#10;    console.log(`- Embedded farmer.email: ${updatedGreenBeans.farmer?.email}`);&#10;&#10;    // Check consistency&#10;    const isConsistent = &#10;      updatedGreenBeans.farmerId === updatedGreenBeans.farmer._id &amp;&amp;&#10;      updatedGreenBeans.farmerName === updatedGreenBeans.farmer.name &amp;&amp;&#10;      updatedGreenBeans.farmerEmail === updatedGreenBeans.farmer.email;&#10;&#10;    console.log(`\nData is consistent: ${isConsistent ? '✅' : '❌'}`);&#10;&#10;    // Final verification: Check Mostafa's products&#10;    console.log(&quot;\n FINAL VERIFICATION - MOSTAFA'S PRODUCTS:&quot;);&#10;    const mostafaProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_006&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_006&quot; },&#10;        { farmerName: &quot;Mostafa Kabir&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mostafa Kabir&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Mostafa Kabir now has ${mostafaProducts.length} products:`);&#10;    mostafaProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}`);&#10;    });&#10;&#10;    // Check Mizanur's products&#10;    console.log(&quot;\n MIZANUR'S PRODUCTS:&quot;);&#10;    const mizanurProducts = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { farmerId: &quot;farmer_005&quot; },&#10;        { &quot;farmer._id&quot;: &quot;farmer_005&quot; },&#10;        { farmerName: &quot;Mizanur Rahman&quot; },&#10;        { &quot;farmer.name&quot;: &quot;Mizanur Rahman&quot; }&#10;      ]&#10;    }).toArray();&#10;&#10;    console.log(`Mizanur Rahman now has ${mizanurProducts.length} products:`);&#10;    mizanurProducts.forEach(p =&gt; {&#10;      console.log(`- ${p.name}`);&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixGreenBeansEmbeddedFarmer().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-remaining-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-remaining-farmers.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixRemainingFarmers() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING REMAINING 3 FARMERS WITHOUT FARMING METHODS\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // The 3 farmers that failed in the previous script&#10;    const remainingFarmers = [&#10;      {&#10;        id: &quot;688b5723287e9adbc28801dc&quot;,&#10;        name: &quot;unnamed&quot;,&#10;        methods: [&quot;Sustainable&quot;, &quot;Traditional&quot;]&#10;      },&#10;      {&#10;        id: &quot;689054bb0f308009e3dd8225&quot;, &#10;        name: &quot;sharif hossain&quot;,&#10;        methods: [&quot;Free-range&quot;, &quot;Animal Welfare&quot;, &quot;Sustainable&quot;]&#10;      },&#10;      {&#10;        id: &quot;6898578b2fcd466685f715f5&quot;,&#10;        name: &quot;kashem ali&quot;, &#10;        methods: [&quot;Traditional&quot;, &quot;Grain Cultivation&quot;, &quot;Sustainable&quot;]&#10;      }&#10;    ];&#10;&#10;    console.log(&quot;1.  REMAINING FARMERS TO FIX:&quot;);&#10;    remainingFarmers.forEach(farmer =&gt; {&#10;      console.log(`- ${farmer.name} (${farmer.id}): [${farmer.methods.join(', ')}]`);&#10;    });&#10;&#10;    console.log(&quot;\n2.  UPDATING REMAINING FARMERS...&quot;);&#10;&#10;    let successCount = 0;&#10;&#10;    for (const farmer of remainingFarmers) {&#10;      try {&#10;        console.log(`\nFixing ${farmer.name} (${farmer.id})...`);&#10;&#10;        // Check current farmer state&#10;        const currentFarmer = await db.collection(&quot;farmers&quot;).findOne({&#10;          _id: new ObjectId(farmer.id)&#10;        });&#10;&#10;        if (!currentFarmer) {&#10;          console.log(`  ❌ Farmer not found`);&#10;          continue;&#10;        }&#10;&#10;        let updateData;&#10;&#10;        if (currentFarmer.farmInfo) {&#10;          // farmInfo exists, just update the farmingMethods field&#10;          updateData = {&#10;            $set: {&#10;              &quot;farmInfo.farmingMethods&quot;: farmer.methods,&#10;              updatedAt: new Date()&#10;            }&#10;          };&#10;          console.log(`   Updating existing farmInfo...`);&#10;        } else {&#10;          // farmInfo doesn't exist, create it&#10;          updateData = {&#10;            $set: {&#10;              farmInfo: {&#10;                farmName: currentFarmer.farmName || `Farm ${farmer.id}`,&#10;                farmDescription: &quot;&quot;,&#10;                farmSize: currentFarmer.farmSize || null,&#10;                farmType: &quot;Mixed Farming&quot;,&#10;                certifications: [],&#10;                establishedYear: null,&#10;                farmingMethods: farmer.methods&#10;              },&#10;              updatedAt: new Date()&#10;            }&#10;          };&#10;          console.log(`   Creating new farmInfo...`);&#10;        }&#10;&#10;        const result = await db.collection(&quot;farmers&quot;).updateOne(&#10;          { _id: new ObjectId(farmer.id) },&#10;          updateData&#10;        );&#10;&#10;        if (result.modifiedCount &gt; 0) {&#10;          console.log(`  ✅ Successfully updated!`);&#10;          successCount++;&#10;        } else {&#10;          console.log(`  ⚠️  No changes made`);&#10;        }&#10;&#10;      } catch (error) {&#10;        console.log(`  ❌ Error updating ${farmer.name}: ${error.message}`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;\n3.  FINAL VERIFICATION...&quot;);&#10;&#10;    // Check all farmers now&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;    &#10;    const farmersWithMethods = allFarmers.filter(farmer =&gt; &#10;      farmer.farmInfo?.farmingMethods &amp;&amp; &#10;      Array.isArray(farmer.farmInfo.farmingMethods) &amp;&amp; &#10;      farmer.farmInfo.farmingMethods.length &gt; 0&#10;    );&#10;&#10;    const farmersWithoutMethods = allFarmers.filter(farmer =&gt; &#10;      !farmer.farmInfo?.farmingMethods || &#10;      !Array.isArray(farmer.farmInfo.farmingMethods) || &#10;      farmer.farmInfo.farmingMethods.length === 0&#10;    );&#10;&#10;    console.log(`\n4.  FINAL RESULTS:`);&#10;    console.log(`✅ Total farmers with farming methods: ${farmersWithMethods.length}`);&#10;    &#10;    console.log(`\n✅ All farmers with methods:`);&#10;    farmersWithMethods.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer.name || 'unnamed'}: [${farmer.farmInfo.farmingMethods.join(', ')}]`);&#10;    });&#10;&#10;    if (farmersWithoutMethods.length &gt; 0) {&#10;      console.log(`\n❌ Farmers still without methods: ${farmersWithoutMethods.length}`);&#10;      farmersWithoutMethods.forEach(farmer =&gt; {&#10;        console.log(`  - ${farmer.name || 'unnamed'} (${farmer._id})`);&#10;      });&#10;    }&#10;&#10;    console.log(`\n5.  SUMMARY:`);&#10;    console.log(`Total farmers: ${allFarmers.length}`);&#10;    console.log(`Successfully fixed: ${successCount}`);&#10;    console.log(`Farmers with methods: ${farmersWithMethods.length} (${((farmersWithMethods.length/allFarmers.length)*100).toFixed(1)}%)`);&#10;&#10;    if (farmersWithMethods.length === allFarmers.length) {&#10;      console.log(`\n PERFECT! ALL ${allFarmers.length} FARMERS NOW HAVE FARMING METHODS!`);&#10;      console.log(` Every farmer profile page will now show specific farming methods!`);&#10;    }&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixRemainingFarmers().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-sweet-corn-order.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-sweet-corn-order.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;fixSweetCornOrderIssue().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-undefined-status.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-undefined-status.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;async function fixUndefinedProductStatuses() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;  &#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; FIXING UNDEFINED PRODUCT STATUSES\n&quot;);&#10;    &#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    // Find all products with undefined status&#10;    const productsWithUndefinedStatus = await db.collection(&quot;products&quot;).find({&#10;      $or: [&#10;        { status: { $exists: false } },&#10;        { status: undefined },&#10;        { status: null }&#10;      ]&#10;    }).toArray();&#10;    &#10;    console.log(` Found ${productsWithUndefinedStatus.length} products with undefined status:`);&#10;    &#10;    if (productsWithUndefinedStatus.length === 0) {&#10;      console.log(&quot;✅ No products found with undefined status!&quot;);&#10;      return;&#10;    }&#10;    &#10;    // Show the products that will be fixed&#10;    productsWithUndefinedStatus.forEach((product, index) =&gt; {&#10;      console.log(`${index + 1}. &quot;${product.name}&quot; by ${product.farmerName} (${product.farmerId})`);&#10;      console.log(`   - Current status: ${product.status} (type: ${typeof product.status})`);&#10;    });&#10;    &#10;    // Ask for confirmation (in a real scenario, you'd want this)&#10;    console.log(`\n Updating all ${productsWithUndefinedStatus.length} products to status &quot;active&quot;...`);&#10;    &#10;    // Update all products with undefined status to &quot;active&quot;&#10;    const updateResult = await db.collection(&quot;products&quot;).updateMany(&#10;      {&#10;        $or: [&#10;          { status: { $exists: false } },&#10;          { status: undefined },&#10;          { status: null }&#10;        ]&#10;      },&#10;      {&#10;        $set: {&#10;          status: &quot;active&quot;,&#10;          updatedAt: new Date()&#10;        }&#10;      }&#10;    );&#10;    &#10;    console.log(`✅ Updated ${updateResult.modifiedCount} products successfully!`);&#10;    &#10;    // Verify the fix&#10;    const verifyCount = await db.collection(&quot;products&quot;).countDocuments({&#10;      $or: [&#10;        { status: { $exists: false } },&#10;        { status: undefined },&#10;        { status: null }&#10;      ]&#10;    });&#10;    &#10;    console.log(`\n Verification: ${verifyCount} products still have undefined status`);&#10;    &#10;    // Show updated status distribution&#10;    const statusCounts = await db.collection(&quot;products&quot;).aggregate([&#10;      {&#10;        $group: {&#10;          _id: &quot;$status&quot;,&#10;          count: { $sum: 1 }&#10;        }&#10;      }&#10;    ]).toArray();&#10;    &#10;    console.log(`\n UPDATED STATUS DISTRIBUTION:`);&#10;    statusCounts.forEach(({ _id, count }) =&gt; {&#10;      console.log(`   - &quot;${_id}&quot;: ${count} products`);&#10;    });&#10;    &#10;    console.log(`\n WHAT THIS FIXES:`);&#10;    console.log(`✅ Active products will now show &quot;Pause/Deactivate&quot; button instead of &quot;Activate&quot;`);&#10;    console.log(`✅ Products will behave correctly when toggling status`);&#10;    console.log(`✅ Status filtering will work properly in the manage page`);&#10;    &#10;    console.log(`\n NEXT STEPS:`);&#10;    console.log(`1. Refresh your farmer manage page`);&#10;    console.log(`2. Check that active products now show &quot;Pause&quot; button`);&#10;    console.log(`3. Test status toggle functionality`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n✅ Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;fixUndefinedProductStatuses().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/investigate-dill-oregano.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/investigate-dill-oregano.js" />
              <option name="updatedContent" value="const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function investigateDillOreganoOwnership() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017/farmfresh&quot;);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot; INVESTIGATING DILL AND OREGANO OWNERSHIP\n&quot;);&#10;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;&#10;    // 1. Check current state of Dill and Oregano&#10;    console.log(&quot;1.  CHECKING CURRENT DILL AND OREGANO DATA:&quot;);&#10;    &#10;    const dill = await db.collection(&quot;products&quot;).findOne({ name: &quot;Dill&quot; });&#10;    const oregano = await db.collection(&quot;products&quot;).findOne({ name: &quot;Oregano&quot; });&#10;&#10;    if (dill) {&#10;      console.log(&quot;DILL:&quot;);&#10;      console.log(`  Top-level: farmerId=${dill.farmerId}, farmerName=${dill.farmerName}, farmerEmail=${dill.farmerEmail}`);&#10;      console.log(`  Embedded: farmer._id=${dill.farmer?._id}, farmer.name=${dill.farmer?.name}, farmer.email=${dill.farmer?.email}`);&#10;    }&#10;&#10;    if (oregano) {&#10;      console.log(&quot;OREGANO:&quot;);&#10;      console.log(`  Top-level: farmerId=${oregano.farmerId}, farmerName=${oregano.farmerName}, farmerEmail=${oregano.farmerEmail}`);&#10;      console.log(`  Embedded: farmer._id=${oregano.farmer?._id}, farmer.name=${oregano.farmer?.name}, farmer.email=${oregano.farmer?.email}`);&#10;    }&#10;&#10;    // 2. Check if there's a &quot;chashi jashim&quot; farmer&#10;    console.log(&quot;\n2.  CHECKING FOR 'CHASHI JASHIM' FARMER:&quot;);&#10;    const chashiFarmer = await db.collection(&quot;farmers&quot;).findOne({&#10;      name: /chashi.*jashim/i&#10;    });&#10;&#10;    if (chashiFarmer) {&#10;      console.log(&quot;Found Chashi Jashim farmer:&quot;);&#10;      console.log(`  ID: ${chashiFarmer._id}`);&#10;      console.log(`  Name: ${chashiFarmer.name}`);&#10;      console.log(`  Email: ${chashiFarmer.email}`);&#10;    } else {&#10;      console.log(&quot;❌ No 'Chashi Jashim' farmer found in farmers collection&quot;);&#10;    }&#10;&#10;    // 3. Check all farmers to see who might be the correct owner&#10;    console.log(&quot;\n3.  CHECKING ALL FARMERS:&quot;);&#10;    const allFarmers = await db.collection(&quot;farmers&quot;).find({}).toArray();&#10;    &#10;    console.log(&quot;Available farmers:&quot;);&#10;    allFarmers.forEach(farmer =&gt; {&#10;      console.log(`  - ${farmer._id}: ${farmer.name} (${farmer.email})`);&#10;    });&#10;&#10;    // 4. Check if Dill/Oregano appear in any farmer's product history or orders&#10;    console.log(&quot;\n4.  CHECKING PRODUCT HISTORY IN ORDERS:&quot;);&#10;    &#10;    const ordersWithDill = await db.collection(&quot;orders&quot;).find({&#10;      &quot;items.productName&quot;: &quot;Dill&quot;&#10;    }).toArray();&#10;    &#10;    const ordersWithOregano = await db.collection(&quot;orders&quot;).find({&#10;      &quot;items.productName&quot;: &quot;Oregano&quot;&#10;    }).toArray();&#10;&#10;    console.log(`Found ${ordersWithDill.length} orders with Dill`);&#10;    ordersWithDill.slice(0, 3).forEach(order =&gt; {&#10;      const dillItem = order.items.find(item =&gt; item.productName === &quot;Dill&quot;);&#10;      console.log(`  Order ${order._id}: farmerId=${dillItem?.farmerId}, farmerName=${dillItem?.farmerName}`);&#10;    });&#10;&#10;    console.log(`Found ${ordersWithOregano.length} orders with Oregano`);&#10;    ordersWithOregano.slice(0, 3).forEach(order =&gt; {&#10;      const oreganoItem = order.items.find(item =&gt; item.productName === &quot;Oregano&quot;);&#10;      console.log(`  Order ${order._id}: farmerId=${oreganoItem?.farmerId}, farmerName=${oreganoItem?.farmerName}`);&#10;    });&#10;&#10;    // 5. Check creation/modification history if available&#10;    console.log(&quot;\n5.  CHECKING CREATION/MODIFICATION DATES:&quot;);&#10;    &#10;    if (dill) {&#10;      console.log(`Dill created: ${dill.createdAt}, updated: ${dill.updatedAt}`);&#10;    }&#10;    if (oregano) {&#10;      console.log(`Oregano created: ${oregano.createdAt}, updated: ${oregano.updatedAt}`);&#10;    }&#10;&#10;    // 6. Current product counts per farmer&#10;    console.log(&quot;\n6.  CURRENT PRODUCT COUNTS PER FARMER:&quot;);&#10;    &#10;    for (const farmer of allFarmers) {&#10;      const productCount = await db.collection(&quot;products&quot;).countDocuments({&#10;        $or: [&#10;          { farmerId: farmer._id },&#10;          { &quot;farmer._id&quot;: farmer._id }&#10;        ]&#10;      });&#10;      &#10;      if (productCount &gt; 0) {&#10;        console.log(`  ${farmer.name} (${farmer._id}): ${productCount} products`);&#10;      }&#10;    }&#10;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;    console.log(&quot;\n Database connection closed&quot;);&#10;  }&#10;}&#10;&#10;investigateDillOreganoOwnership().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/next.config.mjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/next.config.mjs" />
              <option name="originalContent" value="/** @type {import('next').NextConfig} */&#10;const nextConfig = {&#10;  images: {&#10;    remotePatterns: [&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;images.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;plus.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;    ],&#10;  },&#10;  // Increase API payload size limit to handle multiple compressed images&#10;  api: {&#10;    bodyParser: {&#10;      sizeLimit: &quot;50mb&quot;,&#10;    },&#10;  },&#10;  // Handle large request bodies in the new App Router&#10;  experimental: {&#10;    serverComponentsExternalPackages: [],&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;  // Suppress hydration warnings in development&#10;  reactStrictMode: true,&#10;  onDemandEntries: {&#10;    // period (in ms) where the server will keep pages in the buffer&#10;    maxInactiveAge: 25 * 1000,&#10;    // number of pages that should be kept simultaneously without being disposed&#10;    pagesBufferLength: 2,&#10;  },&#10;  // Custom webpack config to suppress hydration warnings&#10;  webpack: (config, { dev, isServer }) =&gt; {&#10;    if (dev &amp;&amp; !isServer) {&#10;      const originalEntry = config.entry;&#10;      config.entry = async () =&gt; {&#10;        const entries = await originalEntry();&#10;        if (entries['main.js'] &amp;&amp; !entries['main.js'].includes('./utils/suppress-hydration-warnings.js')) {&#10;          entries['main.js'].unshift('./utils/suppress-hydration-warnings.js');&#10;        }&#10;        return entries;&#10;      };&#10;    }&#10;    return config;&#10;  },&#10;};&#10;&#10;export default nextConfig;&#10;" />
              <option name="updatedContent" value="/** @type {import('next').NextConfig} */&#10;const nextConfig = {&#10;  images: {&#10;    remotePatterns: [&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;images.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;      {&#10;        protocol: &quot;https&quot;,&#10;        hostname: &quot;plus.unsplash.com&quot;,&#10;        port: &quot;&quot;,&#10;        pathname: &quot;/**&quot;,&#10;      },&#10;    ],&#10;  },&#10;  // Move serverComponentsExternalPackages out of experimental for Next.js 15&#10;  serverExternalPackages: [],&#10;};&#10;&#10;export default nextConfig;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/create-farmer-users.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/create-farmer-users.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;const bcrypt = require(&quot;bcryptjs&quot;);&#10;&#10;// MongoDB connection string - update this with your actual connection string&#10;const MONGODB_URI = process.env.MONGODB_URI || &quot;mongodb://localhost:27017&quot;;&#10;const DB_NAME = &quot;farmfresh&quot;;&#10;&#10;// Default password for all farmers (you can change this)&#10;const DEFAULT_PASSWORD = &quot;farmer123&quot;;&#10;&#10;// Hardcoded farmers data - this should match the structure of your farmer documents&#10;const hardcodedFarmers = [&#10;  {&#10;    _id: &quot;farmer_001&quot;,&#10;    name: &quot;Abdul Rahman&quot;,&#10;    email: &quot;abdul.rahman@farmfresh.com&quot;,&#10;    phone: &quot;+880 1712 345678&quot;,&#10;    location: &quot;Rajshahi, Bangladesh&quot;,&#10;    farmName: &quot;Farm 001&quot;,&#10;    specializations: [&quot;Grains&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_002&quot;,&#10;    name: &quot;Sufia Begum&quot;,&#10;    email: &quot;sufia.begum@farmfresh.com&quot;,&#10;    phone: &quot;+880 1818 901234&quot;,&#10;    location: &quot;Sylhet, Bangladesh&quot;,&#10;    farmName: &quot;Farm 002&quot;,&#10;    specializations: [&quot;Fruits&quot;, &quot;Herbs&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_003&quot;,&#10;    name: &quot;Fatema Begum&quot;,&#10;    email: &quot;fatema.begum@farmfresh.com&quot;,&#10;    phone: &quot;+880 1813 456789&quot;,&#10;    location: &quot;Dhaka, Bangladesh&quot;,&#10;    farmName: &quot;Farm 003&quot;,&#10;    specializations: [&quot;Vegetables&quot;, &quot;Fruits&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_004&quot;,&#10;    name: &quot;Ibrahim Khalil&quot;,&#10;    email: &quot;ibrahim.khalil@farmfresh.com&quot;,&#10;    phone: &quot;+880 1717 890123&quot;,&#10;    location: &quot;Barishal, Bangladesh&quot;,&#10;    farmName: &quot;Farm 004&quot;,&#10;    specializations: [&quot;Fruits&quot;, &quot;Dairy&quot;, &quot;Herbs&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_005&quot;,&#10;    name: &quot;Mizanur Rahman&quot;,&#10;    email: &quot;mizanur.rahman@farmfresh.com&quot;,&#10;    phone: &quot;+880 1521 234567&quot;,&#10;    location: &quot;Tangail, Bangladesh&quot;,&#10;    farmName: &quot;Farm 005&quot;,&#10;    specializations: [&quot;Dairy&quot;, &quot;Vegetables&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_006&quot;,&#10;    name: &quot;Mostafa Kamal&quot;,&#10;    email: &quot;mostafa.kamal@farmfresh.com&quot;,&#10;    phone: &quot;+880 1521 234567&quot;,&#10;    location: &quot;Gazipur, Bangladesh&quot;,&#10;    farmName: &quot;Farm 006&quot;,&#10;    specializations: [&quot;Vegetables&quot;, &quot;Dairy&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_007&quot;,&#10;    name: &quot;Rubina Akter&quot;,&#10;    email: &quot;rubina.akter@farmfresh.com&quot;,&#10;    phone: &quot;+880 1420 123456&quot;,&#10;    location: &quot;Netrokona, Bangladesh&quot;,&#10;    farmName: &quot;Farm 007&quot;,&#10;    specializations: [&quot;Herbs&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_008&quot;,&#10;    name: &quot;Ayesha Siddika&quot;,&#10;    email: &quot;ayesha.siddika@farmfresh.com&quot;,&#10;    phone: &quot;+880 1515 678901&quot;,&#10;    location: &quot;Khulna, Bangladesh&quot;,&#10;    farmName: &quot;Farm 008&quot;,&#10;    specializations: [&quot;Fruits&quot;, &quot;Honey&quot;],&#10;  },&#10;  {&#10;    _id: &quot;farmer_009&quot;,&#10;    name: &quot;Khanzad Ali&quot;,&#10;    email: &quot;khanzad.ali@farmfresh.com&quot;,&#10;    phone: &quot;+880 1919 012345&quot;,&#10;    location: &quot;Sylhet, Bangladesh&quot;,&#10;    farmName: &quot;Farm 009&quot;,&#10;    specializations: [&quot;Honey&quot;, &quot;Vegetables&quot;],&#10;  },&#10;];&#10;&#10;// Function to create farmer users&#10;async function createFarmerUsers() {&#10;  const client = new MongoClient(MONGODB_URI);&#10;&#10;  try {&#10;    await client.connect();&#10;    console.log(&quot;Connected to MongoDB&quot;);&#10;&#10;    const db = client.db(DB_NAME);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;&#10;    // Hash the default password&#10;    const hashedPassword = await bcrypt.hash(DEFAULT_PASSWORD, 12);&#10;&#10;    for (const farmer of hardcodedFarmers) {&#10;      try {&#10;        // Check if user already exists&#10;        const existingUser = await usersCollection.findOne({&#10;          email: farmer.email,&#10;        });&#10;&#10;        if (existingUser) {&#10;          console.log(&#10;            `User already exists for ${farmer.name} (${farmer.email})`,&#10;          );&#10;          continue;&#10;        }&#10;&#10;        // Split name into first and last name&#10;        const nameParts = farmer.name.split(&quot; &quot;);&#10;        const firstName = nameParts[0];&#10;        const lastName = nameParts.slice(1).join(&quot; &quot;) || &quot;&quot;;&#10;&#10;        // Create user document&#10;        const userData = {&#10;          _id: farmer._id, // Use the same ID as the farmer&#10;          firstName: firstName,&#10;          lastName: lastName,&#10;          name: farmer.name,&#10;          email: farmer.email,&#10;          phone: farmer.phone,&#10;          address: farmer.location,&#10;          bio: &quot;&quot;,&#10;          password: hashedPassword,&#10;          userType: &quot;farmer&quot;,&#10;          provider: &quot;credentials&quot;,&#10;          emailVerified: true, // Set to true for these hardcoded farmers&#10;          farmDetails: {&#10;            farmName: farmer.farmName,&#10;            specialization: farmer.specializations,&#10;            farmSize: null,&#10;            farmSizeUnit: &quot;acres&quot;,&#10;          },&#10;          profilePicture: null,&#10;          createdAt: new Date(),&#10;          updatedAt: new Date(),&#10;        };&#10;&#10;        // Insert user&#10;        await usersCollection.insertOne(userData);&#10;        console.log(&#10;          `Created user account for ${farmer.name} (${farmer.email})`,&#10;        );&#10;      } catch (error) {&#10;        console.error(`Error creating user for ${farmer.name}:`, error);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;\nFarmer user creation completed!&quot;);&#10;    console.log(`Default password for all farmers: ${DEFAULT_PASSWORD}`);&#10;    console.log(&#10;      &quot;\nYou can now login with any of these farmer accounts using their email and the default password.&quot;,&#10;    );&#10;  } catch (error) {&#10;    console.error(&quot;Error connecting to MongoDB:&quot;, error);&#10;  } finally {&#10;    await client.close();&#10;  }&#10;}&#10;&#10;// Run the script&#10;createFarmerUsers().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/migrate-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/migrate-farmers.js" />
              <option name="updatedContent" value="// Script to migrate farmers from users collection to farmers collection&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function migrateFarmers() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;✅ Migration completed!&quot;);&#10;    &#10;    // Show final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    console.log(` Total farmers in collection: ${totalFarmers}`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Migration error:&quot;, error);&#10;  }&#10;}&#10;&#10;migrateFarmers();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js" />
              <option name="updatedContent" value="// MongoDB Atlas Performance Optimization Script&#10;// Run this script to create optimized indexes for better Atlas performance&#10;&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function createAtlasOptimizedIndexes() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log(&quot; Starting MongoDB Atlas index optimization...&quot;);&#10;&#10;    // Products Collection - Optimized for products page performance&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    console.log(&quot; Optimizing products collection indexes...&quot;);&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, category: 1, featured: 1, createdAt: -1 },&#10;      { name: &quot;products_main_query_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, featured: 1, averageRating: -1 },&#10;      { name: &quot;products_featured_rating_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, price: 1 },&#10;      { name: &quot;products_price_filter_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, purchaseCount: -1 },&#10;      { name: &quot;products_popularity_idx&quot;, background: true }&#10;    );&#10;&#10;    // Orders Collection - Optimized for farmer dashboard and orders pages&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    console.log(&quot; Optimizing orders collection indexes...&quot;);&#10;    &#10;    // Critical farmer query indexes&#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_orders_main_idx&quot;, background: true }&#10;    );&#10;    &#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_email_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Customer order indexes&#10;    await ordersCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;customer_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Status filtering&#10;    await ordersCollection.createIndex(&#10;      { status: 1, createdAt: -1 },&#10;      { name: &quot;status_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Reviews Collection - For faster review loading&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    console.log(&quot;⭐ Optimizing reviews collection indexes...&quot;);&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { productId: 1, createdAt: -1 },&#10;      { name: &quot;product_reviews_idx&quot;, background: true }&#10;    );&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_product_review_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    // Favorites Collection - For user favorites&#10;    const favoritesCollection = db.collection(&quot;favorites&quot;);&#10;    console.log(&quot;❤️ Optimizing favorites collection indexes...&quot;);&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_favorites_idx&quot;, background: true, unique: true }&#10;    );&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;user_favorites_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Carts Collection - For cart operations&#10;    const cartsCollection = db.collection(&quot;carts&quot;);&#10;    console.log(&quot; Optimizing carts collection indexes...&quot;);&#10;    &#10;    await cartsCollection.createIndex(&#10;      { userId: 1 },&#10;      { name: &quot;user_cart_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    console.log(&quot;✅ Atlas optimization complete!&quot;);&#10;    console.log(&quot; Performance improvements applied for:&quot;);&#10;    console.log(&quot;   • Products page - faster filtering and sorting&quot;);&#10;    console.log(&quot;   • Farmer dashboard - optimized order queries&quot;);&#10;    console.log(&quot;   • Farmer orders page - improved farmer-specific queries&quot;);&#10;    console.log(&quot;   • Reviews and favorites - faster user interactions&quot;);&#10;    &#10;    return true;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error optimizing indexes:&quot;, error);&#10;    return false;&#10;  }&#10;}&#10;&#10;// Atlas-specific query optimization hints&#10;async function optimizeAtlasQueries() {&#10;  console.log(&quot; Applying Atlas-specific optimizations...&quot;);&#10;  &#10;  const client = await clientPromise;&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;  &#10;  // Enable collection-level read preferences for better performance&#10;  const collections = ['products', 'orders', 'reviews', 'favorites', 'carts'];&#10;  &#10;  for (const collectionName of collections) {&#10;    const collection = db.collection(collectionName);&#10;    &#10;    // Set read preference to secondary for read-heavy operations&#10;    collection.readPreference = 'secondaryPreferred';&#10;    &#10;    console.log(` Optimized read preference for ${collectionName}`);&#10;  }&#10;  &#10;  console.log(&quot;✅ Query optimizations applied!&quot;);&#10;}&#10;&#10;// Main execution function&#10;async function main() {&#10;  console.log(&quot; MongoDB Atlas Performance Optimization&quot;);&#10;  console.log(&quot;=========================================&quot;);&#10;  &#10;  const indexSuccess = await createAtlasOptimizedIndexes();&#10;  &#10;  if (indexSuccess) {&#10;    await optimizeAtlasQueries();&#10;    console.log(&quot; Your FarmFresh app is now optimized for Atlas!&quot;);&#10;    console.log(&quot; Expected performance improvements:&quot;);&#10;    console.log(&quot;   • Products page: 60-80% faster&quot;);&#10;    console.log(&quot;   • Farmer dashboard: 70-90% faster&quot;); &#10;    console.log(&quot;   • Order queries: 50-70% faster&quot;);&#10;  } else {&#10;    console.log(&quot;❌ Optimization failed. Check your MongoDB connection.&quot;);&#10;  }&#10;}&#10;&#10;// Run if called directly&#10;if (import.meta.url === `file://${process.argv[1]}`) {&#10;  main().catch(console.error);&#10;}&#10;&#10;export { createAtlasOptimizedIndexes, optimizeAtlasQueries };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/specialization-card.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/specialization-card.txt" />
              <option name="updatedContent" value="{/* Dynamic Farm Specializations Card */}&#10;&lt;div className=&quot;group relative overflow-hidden rounded-3xl bg-gradient-to-br from-emerald-50 via-teal-50 to-cyan-50 dark:from-emerald-900/20 dark:via-teal-900/20 dark:to-cyan-900/20 p-8 hover:shadow-2xl transition-all duration-700 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;  &lt;div className=&quot;absolute inset-0 bg-gradient-to-br from-emerald-400/10 to-teal-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500&quot;&gt;&lt;/div&gt;&#10;  &lt;div className=&quot;absolute top-4 right-4 w-16 h-16 bg-emerald-100 dark:bg-emerald-800/30 rounded-full opacity-20 group-hover:scale-150 group-hover:rotate-180 transition-all duration-700&quot;&gt;&lt;/div&gt;&#10;  &lt;div className=&quot;relative z-10&quot;&gt;&#10;    &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;      &lt;div className=&quot;w-16 h-16 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center transform group-hover:rotate-12 transition-transform duration-500 shadow-lg&quot;&gt;&#10;        &lt;i className=&quot;fas fa-spa text-2xl text-white&quot;&gt;&lt;/i&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-right&quot;&gt;&#10;        &lt;div className=&quot;text-4xl font-bold text-emerald-600 dark:text-emerald-400 mb-1&quot;&gt;&#10;          {farmer.specializations?.length || stats.categories?.length || 3}&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;text-emerald-500 dark:text-emerald-300 text-sm font-medium&quot;&gt;&#10;          Specializations&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div className=&quot;space-y-3&quot;&gt;&#10;      &lt;div className=&quot;text-center&quot;&gt;&#10;        &lt;div className=&quot;flex flex-wrap gap-1 justify-center mb-3&quot;&gt;&#10;          {(farmer.specializations?.slice(0, 3) || stats.categories?.slice(0, 3) || ['Organic', 'Fresh', 'Quality']).map((spec, index) =&gt; {&#10;            const icons = {&#10;              'Grains': 'fas fa-seedling',&#10;              'Fruits': 'fas fa-apple-alt',&#10;              'Vegetables': 'fas fa-carrot',&#10;              'Herbs': 'fas fa-leaf',&#10;              'Honey': 'fas fa-bug',&#10;              'Dairy': 'fas fa-glass-whiskey',&#10;              'Organic': 'fas fa-leaf',&#10;              'Fresh': 'fas fa-sun',&#10;              'Quality': 'fas fa-star'&#10;            };&#10;            const colors = ['text-emerald-500', 'text-teal-500', 'text-cyan-500'];&#10;            return (&#10;              &lt;div key={index} className=&quot;flex items-center bg-white/70 dark:bg-emerald-900/30 rounded-full px-2 py-1&quot;&gt;&#10;                &lt;i className={`${icons[spec] || 'fas fa-spa'} ${colors[index % 3]} text-xs mr-1`}&gt;&lt;/i&gt;&#10;                &lt;span className=&quot;text-xs font-medium text-gray-700 dark:text-gray-300&quot;&gt;{spec}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;        &lt;div className=&quot;flex-1 h-2 bg-emerald-100 dark:bg-emerald-900/30 rounded-full overflow-hidden&quot;&gt;&#10;          &lt;div&#10;            className=&quot;h-full bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full animate-pulse&quot;&#10;            style={{ width: &quot;90%&quot; }}&#10;          &gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;span className=&quot;text-xs text-emerald-600 dark:text-emerald-400 font-medium&quot;&gt;&#10;          Expert&#10;        &lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-center text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;        Premium farm specialties&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test-db-connection.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test-db-connection.js" />
              <option name="updatedContent" value="const { MongoClient } = require(&quot;mongodb&quot;);&#10;&#10;// Simple test script to debug Fatema Begum's data&#10;async function testConnection() {&#10;  // Try different connection strings&#10;  const connectionStrings = [&#10;    &quot;mongodb://localhost:27017/farmfresh&quot;,&#10;    &quot;mongodb://127.0.0.1:27017/farmfresh&quot;,&#10;    process.env.MONGODB_URI,&#10;    process.env.DATABASE_URL&#10;  ].filter(Boolean);&#10;&#10;  for (const uri of connectionStrings) {&#10;    console.log(`\n Trying connection: ${uri.replace(/\/\/[^:]*:[^@]*@/, '//***:***@')}`);&#10;    &#10;    try {&#10;      const client = new MongoClient(uri, {&#10;        serverSelectionTimeoutMS: 5000,&#10;        connectTimeoutMS: 5000,&#10;      });&#10;      &#10;      await client.connect();&#10;      console.log(&quot;✅ Connected successfully!&quot;);&#10;      &#10;      const db = client.db(&quot;farmfresh&quot;);&#10;      &#10;      // Test basic queries&#10;      const farmersCount = await db.collection(&quot;farmers&quot;).countDocuments();&#10;      const productsCount = await db.collection(&quot;products&quot;).countDocuments();&#10;      const ordersCount = await db.collection(&quot;orders&quot;).countDocuments();&#10;      &#10;      console.log(` Database stats: ${farmersCount} farmers, ${productsCount} products, ${ordersCount} orders`);&#10;      &#10;      // Search for Fatema specifically&#10;      const fatemaFarmers = await db.collection(&quot;farmers&quot;).find({ &#10;        name: /fatema.*begum/i &#10;      }).toArray();&#10;      &#10;      console.log(`\n‍ Found ${fatemaFarmers.length} Fatema Begum farmers:`);&#10;      fatemaFarmers.forEach(f =&gt; {&#10;        console.log(`- ${f.name} (${f.email}) ID: ${f._id}`);&#10;      });&#10;      &#10;      // Search for corn products&#10;      const cornProducts = await db.collection(&quot;products&quot;).find({ &#10;        name: /corn/i &#10;      }).toArray();&#10;      &#10;      console.log(`\n Found ${cornProducts.length} corn products:`);&#10;      cornProducts.forEach(p =&gt; {&#10;        console.log(`- &quot;${p.name}&quot; by ${p.farmerName || p.farmerEmail || 'Unknown'} (Category: ${p.category})`);&#10;        console.log(`  ID: ${p._id}, Farmer ID: ${p.farmerId}`);&#10;      });&#10;      &#10;      // Search for orders with corn&#10;      const cornOrders = await db.collection(&quot;orders&quot;).find({&#10;        &quot;items.name&quot;: /corn/i&#10;      }).toArray();&#10;      &#10;      console.log(`\n Found ${cornOrders.length} orders with corn:`);&#10;      cornOrders.forEach(o =&gt; {&#10;        console.log(`- Order ${o._id} by ${o.customerName} (${o.status})`);&#10;        o.items.forEach(item =&gt; {&#10;          if (/corn/i.test(item.name)) {&#10;            console.log(`  * ${item.name} x${item.quantity} - ৳${item.price}`);&#10;          }&#10;        });&#10;      });&#10;      &#10;      await client.close();&#10;      return; // Exit on first successful connection&#10;      &#10;    } catch (error) {&#10;      console.log(`❌ Failed: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log(&quot;\n❌ All connection attempts failed!&quot;);&#10;}&#10;&#10;testConnection().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/utils/suppress-hydration-warnings.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/utils/suppress-hydration-warnings.js" />
              <option name="updatedContent" value="// Suppress hydration warnings in development&#10;if (typeof window !== 'undefined' &amp;&amp; process.env.NODE_ENV === 'development') {&#10;  const originalError = console.error;&#10;  console.error = (...args) =&gt; {&#10;    const message = args[0];&#10;    &#10;    // Suppress hydration mismatch warnings&#10;    if (&#10;      typeof message === 'string' &amp;&amp;&#10;      (message.includes('hydrated but some attributes') ||&#10;       message.includes('Warning: Text content did not match') ||&#10;       message.includes('Warning: Prop `className` did not match') ||&#10;       message.includes('Hydration failed because the initial UI does not match'))&#10;    ) {&#10;      return;&#10;    }&#10;    &#10;    // Let other errors through&#10;    originalError.apply(console, args);&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>