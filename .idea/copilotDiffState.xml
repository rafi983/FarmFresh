<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/products/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/products/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect, useCallback } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;&#10;export default function Products() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const [products, setProducts] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [categories, setCategories] = useState([]);&#10;  const [pagination, setPagination] = useState({});&#10;&#10;  // Search and filter states&#10;  const [searchTerm, setSearchTerm] = useState(&#10;    searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;  );&#10;  const [selectedCategory, setSelectedCategory] = useState(&#10;    searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;  );&#10;  const [selectedPriceRanges, setSelectedPriceRanges] = useState([]);&#10;  const [selectedRatings, setSelectedRatings] = useState([]);&#10;  const [selectedFarmers, setSelectedFarmers] = useState([]);&#10;  const [selectedTags, setSelectedTags] = useState([]);&#10;  const [priceRangeSlider, setPriceRangeSlider] = useState([0, 10000]);&#10;  const [sortBy, setSortBy] = useState(&quot;newest&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;  const [availableFarmers, setAvailableFarmers] = useState([]);&#10;&#10;  const categoryOptions = [&#10;    &quot;All Categories&quot;,&#10;    &quot;Vegetables&quot;,&#10;    &quot;Fruits&quot;,&#10;    &quot;Grains&quot;,&#10;    &quot;Dairy&quot;,&#10;    &quot;Honey&quot;,&#10;    &quot;Herbs&quot;,&#10;  ];&#10;&#10;  const priceRangeOptions = [&#10;    { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;    { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;    { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;    { label: &quot;৳200 - ৳500&quot;, min: 201, max: 500 },&#10;    { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;  ];&#10;&#10;  const tagOptions = [&#10;    &quot;Organic&quot;,&#10;    &quot;Fresh&quot;,&#10;    &quot;Local&quot;,&#10;    &quot;Premium&quot;,&#10;    &quot;Seasonal&quot;,&#10;    &quot;Limited Stock&quot;,&#10;  ];&#10;&#10;  const applyFilters = useCallback((products) =&gt; {&#10;    let filtered = [...products];&#10;&#10;    // Apply price range checkboxes&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedPriceRanges.some((range) =&gt; {&#10;          const option = priceRangeOptions.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider (always apply)&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return price &gt;= priceRangeSlider[0] &amp;&amp; price &lt;= priceRangeSlider[1];&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return selectedRatings.some((rating) =&gt; productRating &gt;= rating);&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return product.isOrganic === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;));&#10;            case &quot;Fresh&quot;:&#10;              return product.isFresh === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;));&#10;            case &quot;Local&quot;:&#10;              return true; // Assuming all products are local&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseFloat(b.averageRating) || 0) - (parseFloat(a.averageRating) || 0)&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0)&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [selectedPriceRanges, priceRangeSlider, selectedRatings, selectedFarmers, selectedTags, sortBy]);&#10;&#10;  const fetchProducts = useCallback(async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const params = new URLSearchParams();&#10;      if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;      if (selectedCategory !== &quot;All Categories&quot;)&#10;        params.append(&quot;category&quot;, selectedCategory);&#10;      params.append(&quot;limit&quot;, &quot;1000&quot;);&#10;      params.append(&quot;sortBy&quot;, sortBy);&#10;&#10;      const response = await fetch(`/api/products?${params}`);&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        let allProducts = data.products || [];&#10;&#10;        // Apply client-side filters&#10;        let filteredProducts = applyFilters(allProducts);&#10;&#10;        // Apply pagination&#10;        const itemsPerPage = 12;&#10;        const startIndex = (currentPage - 1) * itemsPerPage;&#10;        const endIndex = startIndex + itemsPerPage;&#10;        const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;        setProducts(paginatedProducts);&#10;        setPagination({&#10;          currentPage: currentPage,&#10;          totalPages: Math.ceil(filteredProducts.length / itemsPerPage),&#10;          totalProducts: filteredProducts.length,&#10;          hasNextPage: currentPage &lt; Math.ceil(filteredProducts.length / itemsPerPage),&#10;          hasPrevPage: currentPage &gt; 1,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [searchTerm, selectedCategory, sortBy, currentPage, applyFilters]);&#10;&#10;  const fetchAvailableFarmers = async () =&gt; {&#10;    try {&#10;      const farmers = [];&#10;&#10;      // Fetch from products API to get farmers&#10;      try {&#10;        const response = await fetch(&quot;/api/products?limit=1000&quot;);&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;          const uniqueFarmers = [...new Set(&#10;            data.products&#10;              .map(p =&gt; p.farmer?.name || p.farmerName)&#10;              .filter(Boolean)&#10;          )];&#10;          farmers.push(...uniqueFarmers);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching farmers:&quot;, error);&#10;      }&#10;&#10;      // Sort and set farmers&#10;      farmers.sort();&#10;      setAvailableFarmers(farmers);&#10;    } catch (error) {&#10;      console.error(&quot;Error in fetchAvailableFarmers:&quot;, error);&#10;      setAvailableFarmers([]);&#10;    }&#10;  };&#10;&#10;  // Create debounced fetch function after fetchProducts is defined&#10;  const debouncedFetchProducts = useCallback(&#10;    debounce(() =&gt; {&#10;      fetchProducts();&#10;    }, 300),&#10;    [fetchProducts]&#10;  );&#10;&#10;  // Main effect for triggering product fetch&#10;  useEffect(() =&gt; {&#10;    fetchProducts();&#10;  }, [fetchProducts]);&#10;&#10;  // Separate useEffect for fetching farmers (only once)&#10;  useEffect(() =&gt; {&#10;    fetchAvailableFarmers();&#10;  }, []);&#10;&#10;  // Update states from URL params&#10;  useEffect(() =&gt; {&#10;    const newSearchTerm = searchParams.get(&quot;search&quot;) || &quot;&quot;;&#10;    const newCategory = searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;;&#10;&#10;    setSearchTerm(newSearchTerm);&#10;    setSelectedCategory(newCategory);&#10;&#10;    // Restore price ranges from URL&#10;    const priceRanges = searchParams.get(&quot;priceRanges&quot;);&#10;    if (priceRanges) {&#10;      setSelectedPriceRanges(priceRanges.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedPriceRanges([]);&#10;    }&#10;&#10;    // Restore ratings from URL&#10;    const ratings = searchParams.get(&quot;ratings&quot;);&#10;    if (ratings) {&#10;      setSelectedRatings(ratings.split(&quot;,&quot;).map(Number));&#10;    } else {&#10;      setSelectedRatings([]);&#10;    }&#10;&#10;    // Restore farmers from URL&#10;    const farmers = searchParams.get(&quot;farmers&quot;);&#10;    if (farmers) {&#10;      setSelectedFarmers(farmers.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedFarmers([]);&#10;    }&#10;&#10;    // Restore tags from URL&#10;    const tags = searchParams.get(&quot;tags&quot;);&#10;    if (tags) {&#10;      setSelectedTags(tags.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedTags([]);&#10;    }&#10;&#10;    // Restore price range slider from URL&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;);&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;);&#10;    if (minPrice &amp;&amp; maxPrice) {&#10;      setPriceRangeSlider([Number(minPrice), Number(maxPrice)]);&#10;    } else {&#10;      setPriceRangeSlider([0, 10000]);&#10;    }&#10;&#10;    // Restore sort option from URL&#10;    setSortBy(searchParams.get(&quot;sort&quot;) || &quot;newest&quot;);&#10;&#10;    // Restore page from URL&#10;    setCurrentPage(Number(searchParams.get(&quot;page&quot;)) || 1);&#10;  }, [searchParams]);&#10;&#10;  // Handle search functionality&#10;  const handleSearch = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;    router.push(`/products?${params.toString()}`);&#10;    setCurrentPage(1);&#10;    fetchProducts();&#10;  };&#10;&#10;  const handleKeyPress = (e) =&gt; {&#10;    if (e.key === &quot;Enter&quot;) {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  const handleCategoryChange = (category) =&gt; {&#10;    setSelectedCategory(category);&#10;    setCurrentPage(1);&#10;    // Don't call updateURL here - let the useEffect handle it&#10;  };&#10;&#10;  const handlePriceRangeChange = (range) =&gt; {&#10;    const newPriceRanges = selectedPriceRanges.includes(range)&#10;      ? selectedPriceRanges.filter((r) =&gt; r !== range)&#10;      : [...selectedPriceRanges, range];&#10;&#10;    setSelectedPriceRanges(newPriceRanges);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedPriceRanges: newPriceRanges,&#10;    });&#10;  };&#10;&#10;  const handleRatingChange = (rating) =&gt; {&#10;    const newRatings = selectedRatings.includes(rating)&#10;      ? selectedRatings.filter((r) =&gt; r !== rating)&#10;      : [...selectedRatings, rating];&#10;&#10;    setSelectedRatings(newRatings);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedRatings: newRatings,&#10;    });&#10;  };&#10;&#10;  const handleFarmerChange = (farmer) =&gt; {&#10;    const newFarmers = selectedFarmers.includes(farmer)&#10;      ? selectedFarmers.filter((f) =&gt; f !== farmer)&#10;      : [...selectedFarmers, farmer];&#10;&#10;    setSelectedFarmers(newFarmers);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedFarmers: newFarmers,&#10;    });&#10;  };&#10;&#10;  const handleTagChange = (tag) =&gt; {&#10;    const newTags = selectedTags.includes(tag)&#10;      ? selectedTags.filter((t) =&gt; t !== tag)&#10;      : [...selectedTags, tag];&#10;&#10;    setSelectedTags(newTags);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedTags: newTags,&#10;    });&#10;  };&#10;&#10;  const handlePriceSliderChange = (newPriceRange) =&gt; {&#10;    setPriceRangeSlider(newPriceRange);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      priceRangeSlider: newPriceRange,&#10;    });&#10;  };&#10;&#10;  const handleSortChange = (newSort) =&gt; {&#10;    setSortBy(newSort);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      sortBy: newSort,&#10;    });&#10;  };&#10;&#10;  const clearAllFilters = () =&gt; {&#10;    setSelectedCategory(&quot;All Categories&quot;);&#10;    setSearchTerm(&quot;&quot;);&#10;    setSelectedPriceRanges([]);&#10;    setSelectedRatings([]);&#10;    setSelectedFarmers([]);&#10;    setSelectedTags([]);&#10;    setPriceRangeSlider([0, 10000]);&#10;    setCurrentPage(1);&#10;    updateURL();&#10;  };&#10;&#10;  const updateURL = () =&gt; {&#10;    const params = new URLSearchParams();&#10;&#10;    // Add search term&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;&#10;    // Add category&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;&#10;    // Add price ranges&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, selectedPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (selectedRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, selectedRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (selectedFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, selectedFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (selectedTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, selectedTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, priceRangeSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, priceRangeSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (sortBy !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, sortBy);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPage &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPage);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const updateURLWithFilters = (overrides = {}) =&gt; {&#10;    console.log(&quot; updateURLWithFilters called with overrides:&quot;, overrides);&#10;&#10;    const params = new URLSearchParams();&#10;&#10;    // Use current state values or overrides&#10;    const currentSearchTerm =&#10;      overrides.searchTerm !== undefined ? overrides.searchTerm : searchTerm;&#10;    const currentCategory =&#10;      overrides.selectedCategory !== undefined&#10;        ? overrides.selectedCategory&#10;        : selectedCategory;&#10;    const currentPriceRanges =&#10;      overrides.selectedPriceRanges !== undefined&#10;        ? overrides.selectedPriceRanges&#10;        : selectedPriceRanges;&#10;    const currentRatings =&#10;      overrides.selectedRatings !== undefined&#10;        ? overrides.selectedRatings&#10;        : selectedRatings;&#10;    const currentFarmers =&#10;      overrides.selectedFarmers !== undefined&#10;        ? overrides.selectedFarmers&#10;        : selectedFarmers;&#10;    const currentTags =&#10;      overrides.selectedTags !== undefined&#10;        ? overrides.selectedTags&#10;        : selectedTags;&#10;    const currentPriceSlider =&#10;      overrides.priceRangeSlider !== undefined&#10;        ? overrides.priceRangeSlider&#10;        : priceRangeSlider;&#10;    const currentSort =&#10;      overrides.sortBy !== undefined ? overrides.sortBy : sortBy;&#10;    const currentPageNumber =&#10;      overrides.currentPage !== undefined ? overrides.currentPage : 1; // Reset to page 1 for filters&#10;&#10;    console.log(&quot; Final values to use:&quot;, {&#10;      currentSearchTerm,&#10;      currentCategory,&#10;      currentPriceRanges,&#10;      currentRatings,&#10;      currentFarmers,&#10;      currentTags,&#10;      currentPriceSlider,&#10;      currentSort,&#10;      currentPageNumber,&#10;    });&#10;&#10;    // Add search term&#10;    if (currentSearchTerm) params.append(&quot;search&quot;, currentSearchTerm);&#10;&#10;    // Add category&#10;    if (currentCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, currentCategory);&#10;&#10;    // Add price ranges&#10;    if (currentPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, currentPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (currentRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, currentRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (currentFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, currentFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (currentTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, currentTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (currentPriceSlider[0] !== 0 || currentPriceSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, currentPriceSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, currentPriceSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (currentSort !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, currentSort);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPageNumber &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPageNumber);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    console.log(&quot; Generated URL with filters:&quot;, newURL);&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const handlePageChange = (page) =&gt; {&#10;    console.log(&quot; Page change clicked:&quot;, page);&#10;    setCurrentPage(page);&#10;    // Update URL immediately for page changes&#10;    updateURLWithFilters({&#10;      currentPage: page,&#10;    });&#10;  };&#10;&#10;  const getActiveFilterCount = () =&gt; {&#10;    let count = 0;&#10;    if (selectedCategory !== &quot;All Categories&quot;) count++;&#10;    if (selectedPriceRanges.length &gt; 0) count++;&#10;    if (selectedRatings.length &gt; 0) count++;&#10;    if (selectedFarmers.length &gt; 0) count++;&#10;    if (selectedTags.length &gt; 0) count++;&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) count++;&#10;    return count;&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Products Header */}&#10;        &lt;div className=&quot;bg-primary-600 text-white py-12&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;Fresh Products&lt;/h1&gt;&#10;            &lt;p className=&quot;text-xl text-primary-100&quot;&gt;&#10;              Discover fresh, locally-sourced produce from our trusted farmers&#10;            &lt;/p&gt;&#10;&#10;            {/* Search Results Info */}&#10;            {(searchTerm || selectedCategory !== &quot;All Categories&quot;) &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between flex-wrap gap-2&quot;&gt;&#10;                  &lt;div&gt;&#10;                    {searchTerm &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Search results for:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          &quot;{searchTerm}&quot;&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Category:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          {selectedCategory}&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    &lt;p className=&quot;text-sm text-primary-200&quot;&gt;&#10;                      {pagination.totalProducts} products found&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Search Bar in Results */}&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      className=&quot;px-4 py-2 rounded-lg text-gray-900 focus:outline-none&quot;&#10;                      value={searchTerm}&#10;                      onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                      onKeyPress={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; handleSearch()}&#10;                    /&gt;&#10;                    &lt;button&#10;                      onClick={handleSearch}&#10;                      className=&quot;px-4 py-2 bg-primary-500 hover:bg-primary-400 rounded-lg transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filters and Products */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowMobileFilters(!showMobileFilters)}&#10;              className=&quot;w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-between&quot;&#10;            &gt;&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Filters&#10;                {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                    {getActiveFilterCount()}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/span&gt;&#10;              &lt;i&#10;                className={`fas fa-chevron-${showMobileFilters ? &quot;up&quot; : &quot;down&quot;}`}&#10;              &gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Summary */}&#10;          {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Active Filters ({getActiveFilterCount()})&#10;                &lt;/h4&gt;&#10;                &lt;button&#10;                  onClick={clearAllFilters}&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400&quot;&#10;                &gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200&quot;&gt;&#10;                    Category: {selectedCategory}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleCategoryChange(&quot;All Categories&quot;)}&#10;                      className=&quot;ml-2 text-primary-600 hover:text-primary-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;                {selectedPriceRanges.map((range) =&gt; (&#10;                  &lt;span&#10;                    key={range}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;                  &gt;&#10;                    {range}&#10;                    &lt;button&#10;                      onClick={() =&gt; handlePriceRangeChange(range)}&#10;                      className=&quot;ml-2 text-green-600 hover:text-green-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedRatings.map((rating) =&gt; (&#10;                  &lt;span&#10;                    key={rating}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  &gt;&#10;                    {rating}+ Stars&#10;                    &lt;button&#10;                      onClick={() =&gt; handleRatingChange(rating)}&#10;                      className=&quot;ml-2 text-yellow-600 hover:text-yellow-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedFarmers.map((farmer) =&gt; (&#10;                  &lt;span&#10;                    key={farmer}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&#10;                  &gt;&#10;                    {farmer}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFarmerChange(farmer)}&#10;                      className=&quot;ml-2 text-blue-600 hover:text-blue-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedTags.map((tag) =&gt; (&#10;                  &lt;span&#10;                    key={tag}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;&#10;                  &gt;&#10;                    {tag}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleTagChange(tag)}&#10;                      className=&quot;ml-2 text-purple-600 hover:text-purple-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {(priceRangeSlider[0] !== 0 ||&#10;                  priceRangeSlider[1] !== 10000) &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;                    ৳{priceRangeSlider[0]} - ৳{priceRangeSlider[1]}&#10;                    &lt;button&#10;                      onClick={() =&gt; setPriceRangeSlider([0, 10000])}&#10;                      className=&quot;ml-2 text-orange-600 hover:text-orange-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar */}&#10;            &lt;div&#10;              className={`lg:col-span-1 ${showMobileFilters ? &quot;block&quot; : &quot;hidden lg:block&quot;}`}&#10;            &gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sticky top-24&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Filters&#10;                  &lt;/h3&gt;&#10;                  {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                      {getActiveFilterCount()}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-th-large mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Category&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                    {categoryOptions.map((category) =&gt; (&#10;                      &lt;label&#10;                        key={category}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;radio&quot;&#10;                          name=&quot;category&quot;&#10;                          checked={selectedCategory === category}&#10;                          onChange={() =&gt; handleCategoryChange(category)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {category}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Price Range (৳)&#10;                  &lt;/h4&gt;&#10;&#10;                  {/* Custom Price Range Slider */}&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[0]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            +e.target.value,&#10;                            priceRangeSlider[1],&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[1]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            priceRangeSlider[0],&#10;                            +e.target.value,&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;relative h-2 bg-gray-200 rounded-lg&quot;&gt;&#10;                        &lt;div&#10;                          className=&quot;absolute h-2 bg-primary-600 rounded-lg&quot;&#10;                          style={{&#10;                            left: `${(priceRangeSlider[0] / 10000) * 100}%`,&#10;                            width: `${((priceRangeSlider[1] - priceRangeSlider[0]) / 10000) * 100}%`,&#10;                          }}&#10;                        &gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[0]}&lt;/span&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[1]}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {priceRangeOptions.map((option) =&gt; (&#10;                      &lt;label&#10;                        key={option.label}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedPriceRanges.includes(option.label)}&#10;                          onChange={() =&gt; handlePriceRangeChange(option.label)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {option.label}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Rating Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-star mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Rating&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {[5, 4, 3, 2, 1].map((rating) =&gt; (&#10;                      &lt;label&#10;                        key={rating}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedRatings.includes(rating)}&#10;                          onChange={() =&gt; handleRatingChange(rating)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 flex items-center&quot;&gt;&#10;                          {[...Array(rating)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className=&quot;fas fa-star text-yellow-400 text-xs mr-1&quot;&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          {rating &lt; 5 &amp;&amp; &lt;span className=&quot;ml-1&quot;&gt;&amp; Up&lt;/span&gt;}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farmer Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-user mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                    {availableFarmers.length &gt; 0 ? (&#10;                      availableFarmers.map((farmer) =&gt; (&#10;                        &lt;label&#10;                          key={farmer}&#10;                          className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                        &gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            checked={selectedFarmers.includes(farmer)}&#10;                            onChange={() =&gt; handleFarmerChange(farmer)}&#10;                            className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                          /&gt;&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 truncate&quot;&gt;&#10;                            {farmer}&#10;                          &lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))&#10;                    ) : (&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 p-2&quot;&gt;&#10;                        Loading farmers...&#10;                      &lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tag Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-tags mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Tags&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {tagOptions.map((tag) =&gt; (&#10;                      &lt;label&#10;                        key={tag}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedTags.includes(tag)}&#10;                          onChange={() =&gt; handleTagChange(tag)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {tag}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-4&quot;&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    disabled={getActiveFilterCount() === 0}&#10;                    className=&quot;w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-lg font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                    Clear All Filters&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    {pagination.totalProducts} products&#10;                  &lt;/span&gt;&#10;                  {loading &amp;&amp; (&#10;                    &lt;div className=&quot;flex items-center text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span className=&quot;text-sm&quot;&gt;Loading...&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;label className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Sort by:&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={sortBy}&#10;                    onChange={(e) =&gt; handleSortChange(e.target.value)}&#10;                    className=&quot;border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                    &lt;option value=&quot;price-low&quot;&gt;Price: Low to High&lt;/option&gt;&#10;                    &lt;option value=&quot;price-high&quot;&gt;Price: High to Low&lt;/option&gt;&#10;                    &lt;option value=&quot;rating&quot;&gt;Highest Rated&lt;/option&gt;&#10;                    &lt;option value=&quot;popular&quot;&gt;Most Popular&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid */}&#10;              {loading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(9)].map((_, index) =&gt; (&#10;                    &lt;div&#10;                      key={index}&#10;                      className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden animate-pulse&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-full h-48 bg-gray-300 dark:bg-gray-600&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;p-6&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded mb-3 w-3/4&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded mb-4 w-1/2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : products.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {products.map((product) =&gt; (&#10;                      &lt;ProductCard key={product._id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Pagination */}&#10;                  {pagination.totalPages &gt; 1 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-8 flex justify-center&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;                          disabled={!pagination.hasPrevPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Previous&#10;                        &lt;/button&gt;&#10;&#10;                        {[...Array(Math.min(5, pagination.totalPages))].map(&#10;                          (_, index) =&gt; {&#10;                            const pageNum = index + 1;&#10;                            return (&#10;                              &lt;button&#10;                                key={pageNum}&#10;                                onClick={() =&gt; handlePageChange(pageNum)}&#10;                                className={`px-3 py-2 border rounded-lg ${&#10;                                  currentPage === pageNum&#10;                                    ? &quot;bg-primary-600 text-white border-primary-600&quot;&#10;                                    : &quot;border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                                }`}&#10;                              &gt;&#10;                                {pageNum}&#10;                              &lt;/button&gt;&#10;                            );&#10;                          },&#10;                        )}&#10;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage + 1)}&#10;                          disabled={!pagination.hasNextPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Next&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No products found&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                    Try adjusting your search criteria or browse all products&#10;                  &lt;/p&gt;&#10;                  &lt;Link&#10;                    href=&quot;/products&quot;&#10;                    className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                  &gt;&#10;                    Browse All Products&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { useState, useEffect, useCallback } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import ProductCard from &quot;@/components/ProductCard&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { debounce } from &quot;@/utils/debounce&quot;;&#10;&#10;export default function Products() {&#10;  const searchParams = useSearchParams();&#10;  const router = useRouter();&#10;  const [products, setProducts] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [categories, setCategories] = useState([]);&#10;  const [pagination, setPagination] = useState({});&#10;&#10;  // Search and filter states&#10;  const [searchTerm, setSearchTerm] = useState(&#10;    searchParams.get(&quot;search&quot;) || &quot;&quot;,&#10;  );&#10;  const [selectedCategory, setSelectedCategory] = useState(&#10;    searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;,&#10;  );&#10;  const [selectedPriceRanges, setSelectedPriceRanges] = useState([]);&#10;  const [selectedRatings, setSelectedRatings] = useState([]);&#10;  const [selectedFarmers, setSelectedFarmers] = useState([]);&#10;  const [selectedTags, setSelectedTags] = useState([]);&#10;  const [priceRangeSlider, setPriceRangeSlider] = useState([0, 10000]);&#10;  const [sortBy, setSortBy] = useState(&quot;newest&quot;);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [showMobileFilters, setShowMobileFilters] = useState(false);&#10;  const [availableFarmers, setAvailableFarmers] = useState([]);&#10;&#10;  const categoryOptions = [&#10;    &quot;All Categories&quot;,&#10;    &quot;Vegetables&quot;,&#10;    &quot;Fruits&quot;,&#10;    &quot;Grains&quot;,&#10;    &quot;Dairy&quot;,&#10;    &quot;Honey&quot;,&#10;    &quot;Herbs&quot;,&#10;  ];&#10;&#10;  const priceRangeOptions = [&#10;    { label: &quot;Under ৳50&quot;, min: 0, max: 49 },&#10;    { label: &quot;৳50 - ৳100&quot;, min: 50, max: 100 },&#10;    { label: &quot;৳100 - ৳200&quot;, min: 101, max: 200 },&#10;    { label: &quot;৳200 - ৳500&quot;, min: 201, max: 500 },&#10;    { label: &quot;Above ৳500&quot;, min: 501, max: 9999 },&#10;  ];&#10;&#10;  const tagOptions = [&#10;    &quot;Organic&quot;,&#10;    &quot;Fresh&quot;,&#10;    &quot;Local&quot;,&#10;    &quot;Premium&quot;,&#10;    &quot;Seasonal&quot;,&#10;    &quot;Limited Stock&quot;,&#10;  ];&#10;&#10;  const applyFilters = useCallback((products) =&gt; {&#10;    let filtered = [...products];&#10;&#10;    // Apply price range checkboxes&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedPriceRanges.some((range) =&gt; {&#10;          const option = priceRangeOptions.find((opt) =&gt; opt.label === range);&#10;          const price = parseFloat(product.price) || 0;&#10;          return price &gt;= option.min &amp;&amp; price &lt;= option.max;&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply price range slider (always apply)&#10;    filtered = filtered.filter((product) =&gt; {&#10;      const price = parseFloat(product.price) || 0;&#10;      return price &gt;= priceRangeSlider[0] &amp;&amp; price &lt;= priceRangeSlider[1];&#10;    });&#10;&#10;    // Apply rating filters&#10;    if (selectedRatings.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const productRating = parseFloat(product.averageRating) || 0;&#10;        return selectedRatings.some((rating) =&gt; productRating &gt;= rating);&#10;      });&#10;    }&#10;&#10;    // Apply farmer filters&#10;    if (selectedFarmers.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        const farmerName = product.farmer?.name || product.farmerName || &quot;&quot;;&#10;        return selectedFarmers.includes(farmerName);&#10;      });&#10;    }&#10;&#10;    // Apply tag filters&#10;    if (selectedTags.length &gt; 0) {&#10;      filtered = filtered.filter((product) =&gt; {&#10;        return selectedTags.some((tag) =&gt; {&#10;          switch (tag) {&#10;            case &quot;Organic&quot;:&#10;              return product.isOrganic === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;organic&quot;));&#10;            case &quot;Fresh&quot;:&#10;              return product.isFresh === true ||&#10;                     (product.tags &amp;&amp; product.tags.includes(&quot;fresh&quot;));&#10;            case &quot;Local&quot;:&#10;              return true; // Assuming all products are local&#10;            case &quot;Premium&quot;:&#10;              return parseFloat(product.price) &gt; 200;&#10;            case &quot;Seasonal&quot;:&#10;              return parseInt(product.stock) &lt; 100;&#10;            case &quot;Limited Stock&quot;:&#10;              return parseInt(product.stock) &lt; 50;&#10;            default:&#10;              return product.tags &amp;&amp; product.tags.includes(tag.toLowerCase());&#10;          }&#10;        });&#10;      });&#10;    }&#10;&#10;    // Apply sorting&#10;    switch (sortBy) {&#10;      case &quot;price-low&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));&#10;        break;&#10;      case &quot;price-high&quot;:&#10;        filtered.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));&#10;        break;&#10;      case &quot;rating&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseFloat(b.averageRating) || 0) - (parseFloat(a.averageRating) || 0)&#10;        );&#10;        break;&#10;      case &quot;popular&quot;:&#10;        filtered.sort((a, b) =&gt;&#10;          (parseInt(b.purchaseCount) || 0) - (parseInt(a.purchaseCount) || 0)&#10;        );&#10;        break;&#10;      case &quot;newest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(b.createdAt) - new Date(a.createdAt));&#10;        break;&#10;      case &quot;oldest&quot;:&#10;        filtered.sort((a, b) =&gt; new Date(a.createdAt) - new Date(b.createdAt));&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;&#10;    return filtered;&#10;  }, [selectedPriceRanges, priceRangeSlider, selectedRatings, selectedFarmers, selectedTags, sortBy]);&#10;&#10;  const fetchProducts = useCallback(async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const params = new URLSearchParams();&#10;      if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;      if (selectedCategory !== &quot;All Categories&quot;)&#10;        params.append(&quot;category&quot;, selectedCategory);&#10;      params.append(&quot;limit&quot;, &quot;1000&quot;);&#10;      params.append(&quot;sortBy&quot;, sortBy);&#10;&#10;      const response = await fetch(`/api/products?${params}`);&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        let allProducts = data.products || [];&#10;&#10;        // Apply client-side filters&#10;        let filteredProducts = applyFilters(allProducts);&#10;&#10;        // Apply pagination&#10;        const itemsPerPage = 12;&#10;        const startIndex = (currentPage - 1) * itemsPerPage;&#10;        const endIndex = startIndex + itemsPerPage;&#10;        const paginatedProducts = filteredProducts.slice(startIndex, endIndex);&#10;&#10;        setProducts(paginatedProducts);&#10;        setPagination({&#10;          currentPage: currentPage,&#10;          totalPages: Math.ceil(filteredProducts.length / itemsPerPage),&#10;          totalProducts: filteredProducts.length,&#10;          hasNextPage: currentPage &lt; Math.ceil(filteredProducts.length / itemsPerPage),&#10;          hasPrevPage: currentPage &gt; 1,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, [searchTerm, selectedCategory, sortBy, currentPage, applyFilters]);&#10;&#10;  const fetchAvailableFarmers = async () =&gt; {&#10;    try {&#10;      const farmers = [];&#10;&#10;      // Fetch from products API to get farmers&#10;      try {&#10;        const response = await fetch(&quot;/api/products?limit=1000&quot;);&#10;        if (response.ok) {&#10;          const data = await response.json();&#10;          const uniqueFarmers = [...new Set(&#10;            data.products&#10;              .map(p =&gt; p.farmer?.name || p.farmerName)&#10;              .filter(Boolean)&#10;          )];&#10;          farmers.push(...uniqueFarmers);&#10;        }&#10;      } catch (error) {&#10;        console.error(&quot;Error fetching farmers:&quot;, error);&#10;      }&#10;&#10;      // Sort and set farmers&#10;      farmers.sort();&#10;      setAvailableFarmers(farmers);&#10;    } catch (error) {&#10;      console.error(&quot;Error in fetchAvailableFarmers:&quot;, error);&#10;      setAvailableFarmers([]);&#10;    }&#10;  };&#10;&#10;  // Create debounced fetch function after fetchProducts is defined&#10;  const debouncedFetchProducts = useCallback(&#10;    debounce(() =&gt; {&#10;      fetchProducts();&#10;    }, 300),&#10;    [fetchProducts]&#10;  );&#10;&#10;  // Main effect for triggering product fetch&#10;  useEffect(() =&gt; {&#10;    fetchProducts();&#10;  }, [fetchProducts]);&#10;&#10;  // Separate useEffect for fetching farmers (only once)&#10;  useEffect(() =&gt; {&#10;    fetchAvailableFarmers();&#10;  }, []);&#10;&#10;  // Update states from URL params&#10;  useEffect(() =&gt; {&#10;    const newSearchTerm = searchParams.get(&quot;search&quot;) || &quot;&quot;;&#10;    const newCategory = searchParams.get(&quot;category&quot;) || &quot;All Categories&quot;;&#10;&#10;    setSearchTerm(newSearchTerm);&#10;    setSelectedCategory(newCategory);&#10;&#10;    // Restore price ranges from URL&#10;    const priceRanges = searchParams.get(&quot;priceRanges&quot;);&#10;    if (priceRanges) {&#10;      setSelectedPriceRanges(priceRanges.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedPriceRanges([]);&#10;    }&#10;&#10;    // Restore ratings from URL&#10;    const ratings = searchParams.get(&quot;ratings&quot;);&#10;    if (ratings) {&#10;      setSelectedRatings(ratings.split(&quot;,&quot;).map(Number));&#10;    } else {&#10;      setSelectedRatings([]);&#10;    }&#10;&#10;    // Restore farmers from URL&#10;    const farmers = searchParams.get(&quot;farmers&quot;);&#10;    if (farmers) {&#10;      setSelectedFarmers(farmers.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedFarmers([]);&#10;    }&#10;&#10;    // Restore tags from URL&#10;    const tags = searchParams.get(&quot;tags&quot;);&#10;    if (tags) {&#10;      setSelectedTags(tags.split(&quot;,&quot;));&#10;    } else {&#10;      setSelectedTags([]);&#10;    }&#10;&#10;    // Restore price range slider from URL&#10;    const minPrice = searchParams.get(&quot;minPrice&quot;);&#10;    const maxPrice = searchParams.get(&quot;maxPrice&quot;);&#10;    if (minPrice &amp;&amp; maxPrice) {&#10;      setPriceRangeSlider([Number(minPrice), Number(maxPrice)]);&#10;    } else {&#10;      setPriceRangeSlider([0, 10000]);&#10;    }&#10;&#10;    // Restore sort option from URL&#10;    setSortBy(searchParams.get(&quot;sort&quot;) || &quot;newest&quot;);&#10;&#10;    // Restore page from URL&#10;    setCurrentPage(Number(searchParams.get(&quot;page&quot;)) || 1);&#10;  }, [searchParams]);&#10;&#10;  // Handle search functionality&#10;  const handleSearch = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;    router.push(`/products?${params.toString()}`);&#10;    setCurrentPage(1);&#10;    fetchProducts();&#10;  };&#10;&#10;  const handleKeyPress = (e) =&gt; {&#10;    if (e.key === &quot;Enter&quot;) {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  const handleCategoryChange = (category) =&gt; {&#10;    setSelectedCategory(category);&#10;    setCurrentPage(1);&#10;    &#10;    // Immediate URL update like other filters&#10;    updateURLWithFilters({&#10;      selectedCategory: category,&#10;    });&#10;  };&#10;&#10;  const handlePriceRangeChange = (range) =&gt; {&#10;    const newPriceRanges = selectedPriceRanges.includes(range)&#10;      ? selectedPriceRanges.filter((r) =&gt; r !== range)&#10;      : [...selectedPriceRanges, range];&#10;&#10;    setSelectedPriceRanges(newPriceRanges);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedPriceRanges: newPriceRanges,&#10;    });&#10;  };&#10;&#10;  const handleRatingChange = (rating) =&gt; {&#10;    const newRatings = selectedRatings.includes(rating)&#10;      ? selectedRatings.filter((r) =&gt; r !== rating)&#10;      : [...selectedRatings, rating];&#10;&#10;    setSelectedRatings(newRatings);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedRatings: newRatings,&#10;    });&#10;  };&#10;&#10;  const handleFarmerChange = (farmer) =&gt; {&#10;    const newFarmers = selectedFarmers.includes(farmer)&#10;      ? selectedFarmers.filter((f) =&gt; f !== farmer)&#10;      : [...selectedFarmers, farmer];&#10;&#10;    setSelectedFarmers(newFarmers);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedFarmers: newFarmers,&#10;    });&#10;  };&#10;&#10;  const handleTagChange = (tag) =&gt; {&#10;    const newTags = selectedTags.includes(tag)&#10;      ? selectedTags.filter((t) =&gt; t !== tag)&#10;      : [...selectedTags, tag];&#10;&#10;    setSelectedTags(newTags);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      selectedTags: newTags,&#10;    });&#10;  };&#10;&#10;  const handlePriceSliderChange = (newPriceRange) =&gt; {&#10;    setPriceRangeSlider(newPriceRange);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      priceRangeSlider: newPriceRange,&#10;    });&#10;  };&#10;&#10;  const handleSortChange = (newSort) =&gt; {&#10;    setSortBy(newSort);&#10;    setCurrentPage(1);&#10;&#10;    // Immediate URL update&#10;    updateURLWithFilters({&#10;      sortBy: newSort,&#10;    });&#10;  };&#10;&#10;  const clearAllFilters = () =&gt; {&#10;    setSelectedCategory(&quot;All Categories&quot;);&#10;    setSearchTerm(&quot;&quot;);&#10;    setSelectedPriceRanges([]);&#10;    setSelectedRatings([]);&#10;    setSelectedFarmers([]);&#10;    setSelectedTags([]);&#10;    setPriceRangeSlider([0, 10000]);&#10;    setCurrentPage(1);&#10;    updateURL();&#10;  };&#10;&#10;  const updateURL = () =&gt; {&#10;    const params = new URLSearchParams();&#10;&#10;    // Add search term&#10;    if (searchTerm) params.append(&quot;search&quot;, searchTerm);&#10;&#10;    // Add category&#10;    if (selectedCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, selectedCategory);&#10;&#10;    // Add price ranges&#10;    if (selectedPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, selectedPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (selectedRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, selectedRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (selectedFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, selectedFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (selectedTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, selectedTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, priceRangeSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, priceRangeSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (sortBy !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, sortBy);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPage &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPage);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const updateURLWithFilters = (overrides = {}) =&gt; {&#10;    console.log(&quot; updateURLWithFilters called with overrides:&quot;, overrides);&#10;&#10;    const params = new URLSearchParams();&#10;&#10;    // Use current state values or overrides&#10;    const currentSearchTerm =&#10;      overrides.searchTerm !== undefined ? overrides.searchTerm : searchTerm;&#10;    const currentCategory =&#10;      overrides.selectedCategory !== undefined&#10;        ? overrides.selectedCategory&#10;        : selectedCategory;&#10;    const currentPriceRanges =&#10;      overrides.selectedPriceRanges !== undefined&#10;        ? overrides.selectedPriceRanges&#10;        : selectedPriceRanges;&#10;    const currentRatings =&#10;      overrides.selectedRatings !== undefined&#10;        ? overrides.selectedRatings&#10;        : selectedRatings;&#10;    const currentFarmers =&#10;      overrides.selectedFarmers !== undefined&#10;        ? overrides.selectedFarmers&#10;        : selectedFarmers;&#10;    const currentTags =&#10;      overrides.selectedTags !== undefined&#10;        ? overrides.selectedTags&#10;        : selectedTags;&#10;    const currentPriceSlider =&#10;      overrides.priceRangeSlider !== undefined&#10;        ? overrides.priceRangeSlider&#10;        : priceRangeSlider;&#10;    const currentSort =&#10;      overrides.sortBy !== undefined ? overrides.sortBy : sortBy;&#10;    const currentPageNumber =&#10;      overrides.currentPage !== undefined ? overrides.currentPage : 1; // Reset to page 1 for filters&#10;&#10;    console.log(&quot; Final values to use:&quot;, {&#10;      currentSearchTerm,&#10;      currentCategory,&#10;      currentPriceRanges,&#10;      currentRatings,&#10;      currentFarmers,&#10;      currentTags,&#10;      currentPriceSlider,&#10;      currentSort,&#10;      currentPageNumber,&#10;    });&#10;&#10;    // Add search term&#10;    if (currentSearchTerm) params.append(&quot;search&quot;, currentSearchTerm);&#10;&#10;    // Add category&#10;    if (currentCategory !== &quot;All Categories&quot;)&#10;      params.append(&quot;category&quot;, currentCategory);&#10;&#10;    // Add price ranges&#10;    if (currentPriceRanges.length &gt; 0) {&#10;      params.append(&quot;priceRanges&quot;, currentPriceRanges.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add ratings&#10;    if (currentRatings.length &gt; 0) {&#10;      params.append(&quot;ratings&quot;, currentRatings.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add farmers&#10;    if (currentFarmers.length &gt; 0) {&#10;      params.append(&quot;farmers&quot;, currentFarmers.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add tags&#10;    if (currentTags.length &gt; 0) {&#10;      params.append(&quot;tags&quot;, currentTags.join(&quot;,&quot;));&#10;    }&#10;&#10;    // Add price range slider&#10;    if (currentPriceSlider[0] !== 0 || currentPriceSlider[1] !== 10000) {&#10;      params.append(&quot;minPrice&quot;, currentPriceSlider[0]);&#10;      params.append(&quot;maxPrice&quot;, currentPriceSlider[1]);&#10;    }&#10;&#10;    // Add sort option&#10;    if (currentSort !== &quot;newest&quot;) {&#10;      params.append(&quot;sort&quot;, currentSort);&#10;    }&#10;&#10;    // Add current page if not first page&#10;    if (currentPageNumber &gt; 1) {&#10;      params.append(&quot;page&quot;, currentPageNumber);&#10;    }&#10;&#10;    const newURL = `/products${params.toString() ? `?${params.toString()}` : &quot;&quot;}`;&#10;    console.log(&quot; Generated URL with filters:&quot;, newURL);&#10;    router.push(newURL, { shallow: true });&#10;  };&#10;&#10;  const handlePageChange = (page) =&gt; {&#10;    console.log(&quot; Page change clicked:&quot;, page);&#10;    setCurrentPage(page);&#10;    // Update URL immediately for page changes&#10;    updateURLWithFilters({&#10;      currentPage: page,&#10;    });&#10;  };&#10;&#10;  const getActiveFilterCount = () =&gt; {&#10;    let count = 0;&#10;    if (selectedCategory !== &quot;All Categories&quot;) count++;&#10;    if (selectedPriceRanges.length &gt; 0) count++;&#10;    if (selectedRatings.length &gt; 0) count++;&#10;    if (selectedFarmers.length &gt; 0) count++;&#10;    if (selectedTags.length &gt; 0) count++;&#10;    if (priceRangeSlider[0] !== 0 || priceRangeSlider[1] !== 10000) count++;&#10;    return count;&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900&quot;&gt;&#10;        {/* Products Header */}&#10;        &lt;div className=&quot;bg-primary-600 text-white py-12&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;Fresh Products&lt;/h1&gt;&#10;            &lt;p className=&quot;text-xl text-primary-100&quot;&gt;&#10;              Discover fresh, locally-sourced produce from our trusted farmers&#10;            &lt;/p&gt;&#10;&#10;            {/* Search Results Info */}&#10;            {(searchTerm || selectedCategory !== &quot;All Categories&quot;) &amp;&amp; (&#10;              &lt;div className=&quot;mt-6 p-4 bg-primary-700 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between flex-wrap gap-2&quot;&gt;&#10;                  &lt;div&gt;&#10;                    {searchTerm &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Search results for:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          &quot;{searchTerm}&quot;&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                      &lt;p className=&quot;text-primary-100&quot;&gt;&#10;                        Category:{&quot; &quot;}&#10;                        &lt;span className=&quot;font-semibold text-white&quot;&gt;&#10;                          {selectedCategory}&#10;                        &lt;/span&gt;&#10;                      &lt;/p&gt;&#10;                    )}&#10;                    &lt;p className=&quot;text-sm text-primary-200&quot;&gt;&#10;                      {pagination.totalProducts} products found&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Search Bar in Results */}&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      className=&quot;px-4 py-2 rounded-lg text-gray-900 focus:outline-none&quot;&#10;                      value={searchTerm}&#10;                      onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                      onKeyPress={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; handleSearch()}&#10;                    /&gt;&#10;                    &lt;button&#10;                      onClick={handleSearch}&#10;                      className=&quot;px-4 py-2 bg-primary-500 hover:bg-primary-400 rounded-lg transition&quot;&#10;                    &gt;&#10;                      &lt;i className=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filters and Products */}&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;          {/* Mobile Filter Toggle */}&#10;          &lt;div className=&quot;lg:hidden mb-6&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowMobileFilters(!showMobileFilters)}&#10;              className=&quot;w-full bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 flex items-center justify-between&quot;&#10;            &gt;&#10;              &lt;span className=&quot;flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-filter mr-2&quot;&gt;&lt;/i&gt;&#10;                Filters&#10;                {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                    {getActiveFilterCount()}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/span&gt;&#10;              &lt;i&#10;                className={`fas fa-chevron-${showMobileFilters ? &quot;up&quot; : &quot;down&quot;}`}&#10;              &gt;&lt;/i&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Active Filters Summary */}&#10;          {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Active Filters ({getActiveFilterCount()})&#10;                &lt;/h4&gt;&#10;                &lt;button&#10;                  onClick={clearAllFilters}&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400&quot;&#10;                &gt;&#10;                  Clear All&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {selectedCategory !== &quot;All Categories&quot; &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200&quot;&gt;&#10;                    Category: {selectedCategory}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleCategoryChange(&quot;All Categories&quot;)}&#10;                      className=&quot;ml-2 text-primary-600 hover:text-primary-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;                {selectedPriceRanges.map((range) =&gt; (&#10;                  &lt;span&#10;                    key={range}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200&quot;&#10;                  &gt;&#10;                    {range}&#10;                    &lt;button&#10;                      onClick={() =&gt; handlePriceRangeChange(range)}&#10;                      className=&quot;ml-2 text-green-600 hover:text-green-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedRatings.map((rating) =&gt; (&#10;                  &lt;span&#10;                    key={rating}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200&quot;&#10;                  &gt;&#10;                    {rating}+ Stars&#10;                    &lt;button&#10;                      onClick={() =&gt; handleRatingChange(rating)}&#10;                      className=&quot;ml-2 text-yellow-600 hover:text-yellow-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedFarmers.map((farmer) =&gt; (&#10;                  &lt;span&#10;                    key={farmer}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200&quot;&#10;                  &gt;&#10;                    {farmer}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleFarmerChange(farmer)}&#10;                      className=&quot;ml-2 text-blue-600 hover:text-blue-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {selectedTags.map((tag) =&gt; (&#10;                  &lt;span&#10;                    key={tag}&#10;                    className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200&quot;&#10;                  &gt;&#10;                    {tag}&#10;                    &lt;button&#10;                      onClick={() =&gt; handleTagChange(tag)}&#10;                      className=&quot;ml-2 text-purple-600 hover:text-purple-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {(priceRangeSlider[0] !== 0 ||&#10;                  priceRangeSlider[1] !== 10000) &amp;&amp; (&#10;                  &lt;span className=&quot;inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200&quot;&gt;&#10;                    ৳{priceRangeSlider[0]} - ৳{priceRangeSlider[1]}&#10;                    &lt;button&#10;                      onClick={() =&gt; setPriceRangeSlider([0, 10000])}&#10;                      className=&quot;ml-2 text-orange-600 hover:text-orange-800&quot;&#10;                    &gt;&#10;                      ×&#10;                    &lt;/button&gt;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;            {/* Filters Sidebar */}&#10;            &lt;div&#10;              className={`lg:col-span-1 ${showMobileFilters ? &quot;block&quot; : &quot;hidden lg:block&quot;}`}&#10;            &gt;&#10;              &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sticky top-24&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Filters&#10;                  &lt;/h3&gt;&#10;                  {getActiveFilterCount() &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;bg-primary-600 text-white text-xs px-2 py-1 rounded-full&quot;&gt;&#10;                      {getActiveFilterCount()}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-th-large mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Category&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                    {categoryOptions.map((category) =&gt; (&#10;                      &lt;label&#10;                        key={category}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;radio&quot;&#10;                          name=&quot;category&quot;&#10;                          checked={selectedCategory === category}&#10;                          onChange={() =&gt; handleCategoryChange(category)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {category}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-dollar-sign mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Price Range (৳)&#10;                  &lt;/h4&gt;&#10;&#10;                  {/* Custom Price Range Slider */}&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[0]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            +e.target.value,&#10;                            priceRangeSlider[1],&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;range&quot;&#10;                        min=&quot;0&quot;&#10;                        max=&quot;10000&quot;&#10;                        step=&quot;10&quot;&#10;                        value={priceRangeSlider[1]}&#10;                        onChange={(e) =&gt;&#10;                          handlePriceSliderChange([&#10;                            priceRangeSlider[0],&#10;                            +e.target.value,&#10;                          ])&#10;                        }&#10;                        className=&quot;absolute w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;relative h-2 bg-gray-200 rounded-lg&quot;&gt;&#10;                        &lt;div&#10;                          className=&quot;absolute h-2 bg-primary-600 rounded-lg&quot;&#10;                          style={{&#10;                            left: `${(priceRangeSlider[0] / 10000) * 100}%`,&#10;                            width: `${((priceRangeSlider[1] - priceRangeSlider[0]) / 10000) * 100}%`,&#10;                          }}&#10;                        &gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-2&quot;&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[0]}&lt;/span&gt;&#10;                      &lt;span&gt;৳{priceRangeSlider[1]}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {priceRangeOptions.map((option) =&gt; (&#10;                      &lt;label&#10;                        key={option.label}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedPriceRanges.includes(option.label)}&#10;                          onChange={() =&gt; handlePriceRangeChange(option.label)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {option.label}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Rating Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-star mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Rating&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {[5, 4, 3, 2, 1].map((rating) =&gt; (&#10;                      &lt;label&#10;                        key={rating}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedRatings.includes(rating)}&#10;                          onChange={() =&gt; handleRatingChange(rating)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 flex items-center&quot;&gt;&#10;                          {[...Array(rating)].map((_, i) =&gt; (&#10;                            &lt;i&#10;                              key={i}&#10;                              className=&quot;fas fa-star text-yellow-400 text-xs mr-1&quot;&#10;                            &gt;&lt;/i&gt;&#10;                          ))}&#10;                          {rating &lt; 5 &amp;&amp; &lt;span className=&quot;ml-1&quot;&gt;&amp; Up&lt;/span&gt;}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Farmer Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-user mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Farmer&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                    {availableFarmers.length &gt; 0 ? (&#10;                      availableFarmers.map((farmer) =&gt; (&#10;                        &lt;label&#10;                          key={farmer}&#10;                          className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                        &gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            checked={selectedFarmers.includes(farmer)}&#10;                            onChange={() =&gt; handleFarmerChange(farmer)}&#10;                            className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                          /&gt;&#10;                          &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300 truncate&quot;&gt;&#10;                            {farmer}&#10;                          &lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))&#10;                    ) : (&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400 p-2&quot;&gt;&#10;                        Loading farmers...&#10;                      &lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tag Filter */}&#10;                &lt;div className=&quot;mb-6&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white mb-3 flex items-center&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-tags mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    Tags&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {tagOptions.map((tag) =&gt; (&#10;                      &lt;label&#10;                        key={tag}&#10;                        className=&quot;flex items-center hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded cursor-pointer&quot;&#10;                      &gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={selectedTags.includes(tag)}&#10;                          onChange={() =&gt; handleTagChange(tag)}&#10;                          className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          {tag}&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;div className=&quot;border-t border-gray-200 dark:border-gray-700 pt-4&quot;&gt;&#10;                  &lt;button&#10;                    onClick={clearAllFilters}&#10;                    disabled={getActiveFilterCount() === 0}&#10;                    className=&quot;w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-lg font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                    Clear All Filters&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Products Grid */}&#10;            &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;              {/* Sort and View Options */}&#10;              &lt;div className=&quot;flex items-center justify-between mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-box mr-2 text-primary-600&quot;&gt;&lt;/i&gt;&#10;                    {pagination.totalProducts} products&#10;                  &lt;/span&gt;&#10;                  {loading &amp;&amp; (&#10;                    &lt;div className=&quot;flex items-center text-primary-600&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                      &lt;span className=&quot;text-sm&quot;&gt;Loading...&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;label className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Sort by:&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={sortBy}&#10;                    onChange={(e) =&gt; handleSortChange(e.target.value)}&#10;                    className=&quot;border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;newest&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;oldest&quot;&gt;Oldest First&lt;/option&gt;&#10;                    &lt;option value=&quot;price-low&quot;&gt;Price: Low to High&lt;/option&gt;&#10;                    &lt;option value=&quot;price-high&quot;&gt;Price: High to Low&lt;/option&gt;&#10;                    &lt;option value=&quot;rating&quot;&gt;Highest Rated&lt;/option&gt;&#10;                    &lt;option value=&quot;popular&quot;&gt;Most Popular&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Products Grid */}&#10;              {loading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(9)].map((_, index) =&gt; (&#10;                    &lt;div&#10;                      key={index}&#10;                      className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden animate-pulse&quot;&#10;                    &gt;&#10;                      &lt;div className=&quot;w-full h-48 bg-gray-300 dark:bg-gray-600&quot;&gt;&lt;/div&gt;&#10;                      &lt;div className=&quot;p-6&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-300 dark:bg-gray-600 rounded mb-3 w-3/4&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-6 bg-gray-300 dark:bg-gray-600 rounded mb-4 w-1/2&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-300 dark:bg-gray-600 rounded&quot;&gt;&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : products.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {products.map((product) =&gt; (&#10;                      &lt;ProductCard key={product._id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Pagination */}&#10;                  {pagination.totalPages &gt; 1 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-8 flex justify-center&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;                          disabled={!pagination.hasPrevPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Previous&#10;                        &lt;/button&gt;&#10;&#10;                        {[...Array(Math.min(5, pagination.totalPages))].map(&#10;                          (_, index) =&gt; {&#10;                            const pageNum = index + 1;&#10;                            return (&#10;                              &lt;button&#10;                                key={pageNum}&#10;                                onClick={() =&gt; handlePageChange(pageNum)}&#10;                                className={`px-3 py-2 border rounded-lg ${&#10;                                  currentPage === pageNum&#10;                                    ? &quot;bg-primary-600 text-white border-primary-600&quot;&#10;                                    : &quot;border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                                }`}&#10;                              &gt;&#10;                                {pageNum}&#10;                              &lt;/button&gt;&#10;                            );&#10;                          },&#10;                        )}&#10;&#10;                        &lt;button&#10;                          onClick={() =&gt; handlePageChange(currentPage + 1)}&#10;                          disabled={!pagination.hasNextPage}&#10;                          className=&quot;px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700&quot;&#10;                        &gt;&#10;                          Next&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;i className=&quot;fas fa-search text-6xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                    No products found&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-4&quot;&gt;&#10;                    Try adjusting your search criteria or browse all products&#10;                  &lt;/p&gt;&#10;                  &lt;Link&#10;                    href=&quot;/products&quot;&#10;                    className=&quot;inline-block bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition&quot;&#10;                  &gt;&#10;                    Browse All Products&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/NavigationTabs.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/NavigationTabs.js" />
              <option name="originalContent" value="// components/dashboard/NavigationTabs.js&#10;export default function NavigationTabs({ activeTab, setActiveTab, productsCount, ordersCount }) {&#10;    const tabs = [&#10;        { id: &quot;dashboard&quot;, label: &quot;Dashboard&quot;, icon: &quot;fas fa-chart-line&quot; },&#10;        {&#10;            id: &quot;products&quot;,&#10;            label: &quot;Products&quot;,&#10;            icon: &quot;fas fa-box&quot;,&#10;            count: productsCount&#10;        },&#10;        {&#10;            id: &quot;orders&quot;,&#10;            label: &quot;Orders&quot;,&#10;            icon: &quot;fas fa-clipboard-list&quot;,&#10;            count: ordersCount&#10;        },&#10;        { id: &quot;analytics&quot;, label: &quot;Analytics&quot;, icon: &quot;fas fa-chart-bar&quot; },&#10;        { id: &quot;settings&quot;, label: &quot;Settings&quot;, icon: &quot;fas fa-cog&quot; }&#10;    ];&#10;&#10;    return (&#10;        &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;nav className=&quot;-mb-px flex space-x-8&quot;&gt;&#10;                {tabs.map((tab) =&gt; (&#10;                    &lt;button&#10;                        key={tab.id}&#10;                        onClick={() =&gt; setActiveTab(tab.id)}&#10;                        className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${&#10;                            activeTab === tab.id&#10;                                ? &quot;border-green-500 text-green-600 dark:text-green-400&quot;&#10;                                : &quot;border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                        }`}&#10;                    &gt;&#10;                        &lt;i className={`${tab.icon} mr-2`}&gt;&lt;/i&gt;&#10;                        {tab.label}&#10;                        {tab.count !== undefined &amp;&amp; (&#10;                            &lt;span className=&quot;ml-2 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-0.5 rounded-full text-xs&quot;&gt;&#10;                {tab.count}&#10;              &lt;/span&gt;&#10;                        )}&#10;                    &lt;/button&gt;&#10;                ))}&#10;            &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="// components/dashboard/NavigationTabs.js&#10;export default function NavigationTabs({ activeTab, setActiveTab, productsCount, ordersCount }) {&#10;    const tabs = [&#10;        { id: &quot;dashboard&quot;, label: &quot;Dashboard&quot;, icon: &quot;fas fa-chart-line&quot; },&#10;        {&#10;            id: &quot;products&quot;,&#10;            label: &quot;Products&quot;,&#10;            icon: &quot;fas fa-box&quot;,&#10;            count: productsCount&#10;        },&#10;        {&#10;            id: &quot;orders&quot;,&#10;            label: &quot;Orders&quot;,&#10;            icon: &quot;fas fa-clipboard-list&quot;,&#10;            count: ordersCount&#10;        },&#10;        { id: &quot;analytics&quot;, label: &quot;Analytics&quot;, icon: &quot;fas fa-chart-bar&quot; },&#10;        { id: &quot;settings&quot;, label: &quot;Settings&quot;, icon: &quot;fas fa-cog&quot; }&#10;    ];&#10;&#10;    return (&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;                    {tabs.map((tab) =&gt; (&#10;                        &lt;button&#10;                            key={tab.id}&#10;                            onClick={() =&gt; setActiveTab(tab.id)}&#10;                            className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${&#10;                                activeTab === tab.id&#10;                                    ? &quot;border-green-500 text-green-600 dark:text-green-400&quot;&#10;                                    : &quot;border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                            }`}&#10;                        &gt;&#10;                            &lt;i className={`${tab.icon} mr-2`}&gt;&lt;/i&gt;&#10;                            {tab.label}&#10;                            {tab.count !== undefined &amp;&amp; (&#10;                                &lt;span className=&quot;ml-2 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-0.5 rounded-full text-xs&quot;&gt;&#10;                                    {tab.count}&#10;                                &lt;/span&gt;&#10;                            )}&#10;                        &lt;/button&gt;&#10;                    ))}&#10;                &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/utils/debounce.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/utils/debounce.js" />
              <option name="updatedContent" value="// Debounce function to limit the rate of function calls&#10;export function debounce(func, delay) {&#10;  let timeout;&#10;  return function (...args) {&#10;    const context = this;&#10;    clearTimeout(timeout);&#10;    timeout = setTimeout(() =&gt; func.apply(context, args), delay);&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>