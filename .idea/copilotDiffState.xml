<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/add-reviews-to-all.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-all.js" />
              <option name="updatedContent" value="// Add reviews to ALL products that don't have any reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToAllProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get ALL products&#10;  const allProducts = await db.collection('products').find({}).toArray();&#10;  console.log(`Found ${allProducts.length} total products`);&#10;  &#10;  // Get all existing reviews&#10;  const existingReviews = await db.collection('reviews').find({}).toArray();&#10;  const reviewedProductIds = [...new Set(existingReviews.map(r =&gt; r.productId))];&#10;  console.log(`Found ${existingReviews.length} existing reviews for ${reviewedProductIds.length} products`);&#10;  &#10;  // Find products that have NO reviews&#10;  const productsWithoutReviews = allProducts.filter(product =&gt; &#10;    !reviewedProductIds.includes(product._id.toString())&#10;  );&#10;  &#10;  console.log(`Found ${productsWithoutReviews.length} products WITHOUT reviews`);&#10;  console.log('Products without reviews:');&#10;  productsWithoutReviews.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  // Add sample reviews to products without reviews&#10;  for (const product of productsWithoutReviews) {&#10;    const ratings = [4, 4.5, 5, 3.5, 4.5]; // Random good ratings&#10;    const numReviews = Math.floor(Math.random() * 3) + 2; // 2-4 reviews per product&#10;    &#10;    const sampleReviews = [];&#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = ratings[Math.floor(Math.random() * ratings.length)];&#10;      sampleReviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Wilson', 'David Brown'][i] || 'Anonymous',&#10;        rating: rating,&#10;        comment: [&#10;          `Great quality ${product.name}! Fresh and delicious.`,&#10;          `Excellent ${product.name}. Highly recommended!`,&#10;          `Good quality ${product.name}. Will buy again.`,&#10;          `Amazing ${product.name}! Worth every penny.`,&#10;          `Perfect ${product.name}. Fast delivery too!`&#10;        ][i] || `Nice ${product.name}!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added ${numReviews} reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log(`✅ Successfully added reviews to ${productsWithoutReviews.length} products!`);&#10;  await client.close();&#10;}&#10;&#10;addReviewsToAllProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-reviews-to-old.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-reviews-to-old.js" />
              <option name="updatedContent" value="// Add sample reviews to some old products that currently have no reviews&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addReviewsToOldProducts() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get old products that have no reviews (excluding mango and top grain)&#10;  const oldProducts = await db.collection('products').find({&#10;    _id: { &#10;      $nin: [&#10;        new ObjectId('6889cb7ab6d22dd651140bee'), // mango&#10;        new ObjectId('688affa63c35c3c0ff9c4925')  // top grain&#10;      ]&#10;    }&#10;  }).limit(5).toArray(); // Just add reviews to first 5 old products&#10;  &#10;  console.log(`Adding sample reviews to ${oldProducts.length} old products...\n`);&#10;  &#10;  const sampleReviewers = [&#10;    'Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', 'Emma Brown',&#10;    'Frank Miller', 'Grace Lee', 'Henry Taylor', 'Ivy Chen', 'Jack Anderson'&#10;  ];&#10;  &#10;  const sampleComments = [&#10;    'Excellent quality! Fresh and delicious.',&#10;    'Great product, will buy again.',&#10;    'Very satisfied with the freshness.',&#10;    'Good value for money.',&#10;    'Highly recommended!',&#10;    'Perfect quality, as expected.',&#10;    'Fresh and tasty!',&#10;    'Amazing product quality.',&#10;    'Will definitely order again.',&#10;    'Best quality I\'ve found!'&#10;  ];&#10;  &#10;  for (const product of oldProducts) {&#10;    const numReviews = Math.floor(Math.random() * 4) + 2; // 2-5 reviews per product&#10;    const reviews = [];&#10;    &#10;    for (let i = 0; i &lt; numReviews; i++) {&#10;      const rating = [4, 4.5, 5, 3.5, 4.5][Math.floor(Math.random() * 5)]; // Good ratings&#10;      const reviewer = sampleReviewers[Math.floor(Math.random() * sampleReviewers.length)];&#10;      const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];&#10;      &#10;      reviews.push({&#10;        productId: product._id.toString(),&#10;        userId: `sample-user-${i + 1}`,&#10;        reviewer: reviewer,&#10;        rating: rating,&#10;        comment: `${comment} ${product.name} exceeded my expectations!`,&#10;        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date within last 30 days&#10;        updatedAt: new Date()&#10;      });&#10;    }&#10;    &#10;    await db.collection('reviews').insertMany(reviews);&#10;    console.log(`✅ Added ${numReviews} reviews to ${product.name}`);&#10;  }&#10;  &#10;  console.log(`\n Successfully added reviews to ${oldProducts.length} old products!`);&#10;  console.log('Now refresh your products page - these products should show star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;addReviewsToOldProducts().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/add-sample-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/add-sample-reviews.js" />
              <option name="updatedContent" value="// Add sample reviews to existing products&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function addSampleReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get the first 3 existing products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  &#10;  console.log('Adding sample reviews to existing products...');&#10;  &#10;  for (const product of products) {&#10;    // Add 2-3 sample reviews for each product&#10;    const sampleReviews = [&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-1',&#10;        reviewer: 'John Doe',&#10;        rating: 4.5,&#10;        comment: `Great quality ${product.name}! Fresh and delicious.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-2', &#10;        reviewer: 'Jane Smith',&#10;        rating: 5,&#10;        comment: `Excellent ${product.name}. Highly recommended!`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      },&#10;      {&#10;        productId: product._id.toString(),&#10;        userId: 'sample-user-3',&#10;        reviewer: 'Mike Johnson', &#10;        rating: 4,&#10;        comment: `Good quality ${product.name}. Will buy again.`,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      }&#10;    ];&#10;    &#10;    await db.collection('reviews').insertMany(sampleReviews);&#10;    console.log(`✅ Added 3 reviews for ${product.name}`);&#10;  }&#10;  &#10;  console.log('✅ Sample reviews added successfully!');&#10;  await client.close();&#10;}&#10;&#10;addSampleReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/farmers/migrate/route.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/farmers/migrate/route.js" />
              <option name="updatedContent" value="import { NextResponse } from &quot;next/server&quot;;&#10;import clientPromise from &quot;@/lib/mongodb&quot;;&#10;&#10;export async function POST(request) {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    let migratedCount = 0;&#10;    let skippedCount = 0;&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;        migratedCount++;&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;        skippedCount++;&#10;      }&#10;    }&#10;&#10;    // Get final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      message: &quot;Farmer migration completed&quot;,&#10;      results: {&#10;        farmersFound: farmerUsers.length,&#10;        migrated: migratedCount,&#10;        skipped: skippedCount,&#10;        totalFarmersInCollection: totalFarmers&#10;      }&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;Migration error:&quot;, error);&#10;    return NextResponse.json(&#10;      { &#10;        success: false, &#10;        error: &quot;Failed to migrate farmers&quot;,&#10;        message: error.message &#10;      },&#10;      { status: 500 }&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/edit/[id]/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/edit/[id]/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { use } from &quot;react&quot;;&#10;import { useQueryClient } from &quot;@tanstack/react-query&quot;;&#10;import globalCache from &quot;@/lib/cache&quot;;&#10;import { sessionCache } from &quot;@/lib/cache&quot;;&#10;&#10;export default function EditProduct({ params }) {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;  const queryClient = useQueryClient();&#10;  const { id } = use(params); // Fix Next.js 15 params warning&#10;  const [loading, setLoading] = useState(false);&#10;  const [initialLoading, setInitialLoading] = useState(true);&#10;  const [imagePreviews, setImagePreviews] = useState([]);&#10;  const [imageFiles, setImageFiles] = useState([]);&#10;  const [formData, setFormData] = useState({&#10;    name: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    description: &quot;&quot;,&#10;    price: &quot;&quot;,&#10;    stock: &quot;&quot;,&#10;    unit: &quot;&quot;,&#10;    features: [],&#10;    images: [],&#10;    farmLocation: &quot;&quot;,&#10;    harvestDate: &quot;&quot;,&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      // Check if user is a farmer&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      if (userType !== &quot;farmer&quot;) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;&#10;      // Fetch product data for editing&#10;      if (id) {&#10;        fetchProductForEdit(id);&#10;      }&#10;    }&#10;  }, [session, status, router, id]);&#10;&#10;  const fetchProductForEdit = async (productId) =&gt; {&#10;    try {&#10;      setInitialLoading(true);&#10;      const response = await fetch(`/api/products/${productId}`);&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        const product = data.product;&#10;&#10;        // Pre-populate form with existing product data&#10;        setFormData({&#10;          name: product.name || &quot;&quot;,&#10;          category: product.category || &quot;&quot;,&#10;          description: product.description || &quot;&quot;,&#10;          price: product.price?.toString() || &quot;&quot;,&#10;          stock: product.stock?.toString() || &quot;&quot;,&#10;          unit: product.unit || &quot;&quot;,&#10;          features: product.features || [],&#10;          images: product.images || (product.image ? [product.image] : []),&#10;          farmLocation: product.farmLocation || &quot;&quot;,&#10;          harvestDate: product.harvestDate&#10;            ? product.harvestDate.split(&quot;T&quot;)[0]&#10;            : &quot;&quot;,&#10;        });&#10;&#10;        // Set image previews if product has images&#10;        if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;          setImagePreviews(product.images);&#10;        } else if (product.image) {&#10;          setImagePreviews([product.image]);&#10;        }&#10;      } else {&#10;        console.error(&quot;Failed to fetch product for editing&quot;);&#10;        alert(&quot;Failed to load product data. Redirecting to manage products.&quot;);&#10;        router.push(&quot;/manage&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching product for edit:&quot;, error);&#10;      alert(&quot;Error loading product data. Redirecting to manage products.&quot;);&#10;      router.push(&quot;/manage&quot;);&#10;    } finally {&#10;      setInitialLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleInputChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFormData((prev) =&gt; ({&#10;      ...prev,&#10;      [name]: value,&#10;    }));&#10;  };&#10;&#10;  const handleFeatureChange = (e) =&gt; {&#10;    const { value, checked } = e.target;&#10;    setFormData((prev) =&gt; ({&#10;      ...prev,&#10;      features: checked&#10;        ? [...prev.features, value]&#10;        : prev.features.filter((feature) =&gt; feature !== value),&#10;    }));&#10;  };&#10;&#10;  const handleImageChange = (e) =&gt; {&#10;    const files = Array.from(e.target.files);&#10;&#10;    // Check if adding new images would exceed the limit&#10;    const currentImageCount = imagePreviews.length;&#10;    const newImageCount = files.length;&#10;    const totalImages = currentImageCount + newImageCount;&#10;&#10;    if (totalImages &gt; 5) {&#10;      alert(&#10;        `You can only have a maximum of 5 images. You currently have ${currentImageCount} images. You can add ${5 - currentImageCount} more.`,&#10;      );&#10;      return;&#10;    }&#10;&#10;    // Validate each file&#10;    const validFiles = [];&#10;    const newPreviews = [];&#10;    const newBase64Images = [];&#10;&#10;    files.forEach((file) =&gt; {&#10;      // Validate file size (max 5MB)&#10;      if (file.size &gt; 5 * 1024 * 1024) {&#10;        alert(`Image ${file.name} is too large. Maximum size is 5MB`);&#10;        return;&#10;      }&#10;&#10;      // Validate file type&#10;      if (!file.type.startsWith(&quot;image/&quot;)) {&#10;        alert(`${file.name} is not a valid image file`);&#10;        return;&#10;      }&#10;&#10;      validFiles.push(file);&#10;      newPreviews.push(URL.createObjectURL(file));&#10;&#10;      // Convert image to base64 for storage&#10;      const reader = new FileReader();&#10;      reader.onload = (event) =&gt; {&#10;        newBase64Images.push(event.target.result);&#10;&#10;        // When all files are processed, append to existing images&#10;        if (newBase64Images.length === validFiles.length) {&#10;          setFormData((prev) =&gt; ({&#10;            ...prev,&#10;            images: [...prev.images, ...newBase64Images], // Append to existing&#10;          }));&#10;        }&#10;      };&#10;      reader.readAsDataURL(file);&#10;    });&#10;&#10;    // Append new files and previews to existing ones&#10;    setImageFiles((prev) =&gt; [...prev, ...validFiles]);&#10;    setImagePreviews((prev) =&gt; [...prev, ...newPreviews]);&#10;  };&#10;&#10;  const removeImage = (index) =&gt; {&#10;    const newPreviews = imagePreviews.filter((_, i) =&gt; i !== index);&#10;    const newFiles = imageFiles.filter((_, i) =&gt; i !== index);&#10;    const newImages = formData.images.filter((_, i) =&gt; i !== index);&#10;&#10;    setImagePreviews(newPreviews);&#10;    setImageFiles(newFiles);&#10;    setFormData((prev) =&gt; ({&#10;      ...prev,&#10;      images: newImages,&#10;    }));&#10;  };&#10;&#10;  const validateForm = () =&gt; {&#10;    if (!formData.name.trim()) {&#10;      alert(&quot;Product name is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.category) {&#10;      alert(&quot;Category is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.description.trim()) {&#10;      alert(&quot;Description is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.price || parseFloat(formData.price) &lt;= 0) {&#10;      alert(&quot;Valid price is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.stock || parseInt(formData.stock) &lt; 0) {&#10;      alert(&quot;Valid stock quantity is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.unit) {&#10;      alert(&quot;Unit is required&quot;);&#10;      return false;&#10;    }&#10;    return true;&#10;  };&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (!validateForm()) return;&#10;&#10;    setLoading(true);&#10;    try {&#10;      // Use the same user ID logic as in manage page&#10;      const userId = session.user.userId || session.user.id || session.user._id;&#10;      const userEmail = session.user.email;&#10;&#10;      const productData = {&#10;        ...formData,&#10;        price: parseFloat(formData.price),&#10;        stock: parseInt(formData.stock),&#10;        farmerId: userId,&#10;        farmerEmail: userEmail,&#10;        farmer: {&#10;          id: userId,&#10;          email: userEmail,&#10;          name: session.user.name,&#10;        },&#10;        status: &quot;active&quot;,&#10;        updatedAt: new Date().toISOString(),&#10;        // Keep backward compatibility with single image&#10;        image: formData.images[0] || &quot;&quot;,&#10;      };&#10;&#10;      console.log(&#10;        &quot; [Edit] Starting product update with optimistic strategy...&quot;,&#10;      );&#10;      console.log(&quot; [Edit] Product data:&quot;, productData);&#10;&#10;      // OPTIMISTIC UPDATE: Apply changes to cache immediately (same as bulk update)&#10;      const userIds = {&#10;        userId: session.user.userId || session.user.id || session.user._id,&#10;        userEmail: session.user.email,&#10;      };&#10;&#10;      console.log(&quot; [Edit] Applying optimistic cache update...&quot;);&#10;      queryClient.setQueryData(&#10;        [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;        (oldData) =&gt; {&#10;          if (!oldData) return oldData;&#10;&#10;          const updatedProducts = oldData.products.map((product) =&gt; {&#10;            return product._id === id || product.id === id&#10;              ? { ...product, ...productData }&#10;              : product;&#10;          });&#10;&#10;          console.log(&quot;✅ [Edit] Optimistic update applied to dashboard cache&quot;);&#10;          return {&#10;            ...oldData,&#10;            products: updatedProducts,&#10;          };&#10;        },&#10;      );&#10;&#10;      // Also update other product queries optimistically&#10;      queryClient.setQueryData([&quot;products&quot;], (oldData) =&gt; {&#10;        if (!oldData?.products) return oldData;&#10;&#10;        const updatedProducts = oldData.products.map((product) =&gt; {&#10;          return product._id === id || product.id === id&#10;            ? { ...product, ...productData }&#10;            : product;&#10;        });&#10;&#10;        console.log(&quot;✅ [Edit] Optimistic update applied to products cache&quot;);&#10;        return {&#10;          ...oldData,&#10;          products: updatedProducts,&#10;        };&#10;      });&#10;&#10;      console.log(&quot; [Edit] Making API call...&quot;);&#10;      const response = await fetch(`/api/products/${id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify(productData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const result = await response.json();&#10;        console.log(&quot;✅ [Edit] Product updated successfully:&quot;, result);&#10;&#10;        alert(&quot;Product updated successfully!&quot;);&#10;&#10;        // Clear API service caches (but keep React Query cache with our updates)&#10;        globalCache.clear();&#10;        sessionCache.clear();&#10;&#10;        console.log(&#10;          &quot; [Edit] API update completed, starting delayed background refresh...&quot;,&#10;        );&#10;&#10;        // Delay invalidation to allow UI to stabilize (same as bulk update)&#10;        setTimeout(() =&gt; {&#10;          console.log(&quot; [Edit] Starting gentle background cache refresh...&quot;);&#10;&#10;          // Use gentle invalidation that doesn't immediately refetch&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;            exact: true,&#10;            refetchType: &quot;none&quot;, // Don't refetch immediately&#10;          });&#10;&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;products&quot;],&#10;            exact: false,&#10;            refetchType: &quot;none&quot;,&#10;          });&#10;&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;farmers&quot;],&#10;            exact: false,&#10;            refetchType: &quot;none&quot;,&#10;          });&#10;&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;product&quot;, id],&#10;            exact: true,&#10;            refetchType: &quot;none&quot;,&#10;          });&#10;&#10;          console.log(&quot;✅ [Edit] Gentle background invalidation completed&quot;);&#10;        }, 1000); // Wait 1 second before invalidating&#10;&#10;        console.log(&quot;✅ [Edit] Product update completed successfully&quot;);&#10;&#10;        // Redirect to manage products page&#10;        router.push(&quot;/manage&quot;);&#10;      } else {&#10;        const errorData = await response.json();&#10;        console.error(&quot;❌ [Edit] Failed to update product:&quot;, errorData);&#10;&#10;        // Revert optimistic updates on error (same as bulk update)&#10;        console.log(&#10;          &quot; [Edit] Reverting optimistic updates due to API error...&quot;,&#10;        );&#10;        queryClient.invalidateQueries({&#10;          queryKey: [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;          exact: true,&#10;        });&#10;        queryClient.invalidateQueries({&#10;          queryKey: [&quot;products&quot;],&#10;          exact: false,&#10;        });&#10;&#10;        alert(&#10;          `Failed to update product: ${errorData.error || &quot;Unknown error&quot;}`,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;❌ [Edit] Error updating product:&quot;, error);&#10;&#10;      // Revert optimistic updates on error&#10;      const userIds = {&#10;        userId: session.user.userId || session.user.id || session.user._id,&#10;        userEmail: session.user.email,&#10;      };&#10;&#10;      console.log(&quot; [Edit] Reverting optimistic updates due to error...&quot;);&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;        exact: true,&#10;      });&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;products&quot;],&#10;        exact: false,&#10;      });&#10;&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || initialLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-spinner fa-spin text-4xl text-primary-600 mb-4&quot;&gt;&lt;/i&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading product data...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Breadcrumb */}&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;        &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;          &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;            &lt;li&gt;&#10;              &lt;Link href=&quot;/&quot; className=&quot;text-gray-500 hover:text-primary-600&quot;&gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;text-gray-500 hover:text-primary-600&quot;&#10;              &gt;&#10;                Manage Products&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li className=&quot;text-gray-900 dark:text-white&quot;&gt;Edit Product&lt;/li&gt;&#10;          &lt;/ol&gt;&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Edit Product Form */}&#10;      &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;bg-primary-600 text-white px-8 py-6&quot;&gt;&#10;            &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Edit Product&lt;/h1&gt;&#10;            &lt;p className=&quot;text-primary-100 mt-2&quot;&gt;&#10;              Update your product information&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Form */}&#10;          &lt;form onSubmit={handleSubmit} className=&quot;p-8 space-y-8&quot;&gt;&#10;            {/* Basic Information */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Basic Information&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;name&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Product Name *&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;name&quot;&#10;                    name=&quot;name&quot;&#10;                    value={formData.name}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;e.g., Fresh Tomatoes&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;category&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Category *&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    id=&quot;category&quot;&#10;                    name=&quot;category&quot;&#10;                    value={formData.category}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select Category&lt;/option&gt;&#10;                    &lt;option value=&quot;Vegetables&quot;&gt;Vegetables&lt;/option&gt;&#10;                    &lt;option value=&quot;Fruits&quot;&gt;Fruits&lt;/option&gt;&#10;                    &lt;option value=&quot;Grains&quot;&gt;Grains&lt;/option&gt;&#10;                    &lt;option value=&quot;Dairy&quot;&gt;Dairy&lt;/option&gt;&#10;                    &lt;option value=&quot;Herbs&quot;&gt;Herbs&lt;/option&gt;&#10;                    &lt;option value=&quot;Honey&quot;&gt;Honey&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;description&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Description *&#10;                  &lt;/label&gt;&#10;                  &lt;textarea&#10;                    id=&quot;description&quot;&#10;                    name=&quot;description&quot;&#10;                    rows={4}&#10;                    value={formData.description}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;Describe your product, growing methods, quality, etc.&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Pricing &amp; Inventory */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Pricing &amp; Inventory&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;price&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Price per Unit (৳) *&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;number&quot;&#10;                    id=&quot;price&quot;&#10;                    name=&quot;price&quot;&#10;                    min=&quot;0&quot;&#10;                    step=&quot;0.01&quot;&#10;                    value={formData.price}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;45.00&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;unit&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Unit *&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    id=&quot;unit&quot;&#10;                    name=&quot;unit&quot;&#10;                    value={formData.unit}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select Unit&lt;/option&gt;&#10;                    &lt;option value=&quot;kg&quot;&gt;Kilogram (kg)&lt;/option&gt;&#10;                    &lt;option value=&quot;g&quot;&gt;Gram (g)&lt;/option&gt;&#10;                    &lt;option value=&quot;piece&quot;&gt;Piece&lt;/option&gt;&#10;                    &lt;option value=&quot;bunch&quot;&gt;Bunch&lt;/option&gt;&#10;                    &lt;option value=&quot;liter&quot;&gt;Liter&lt;/option&gt;&#10;                    &lt;option value=&quot;ml&quot;&gt;Milliliter (ml)&lt;/option&gt;&#10;                    &lt;option value=&quot;dozen&quot;&gt;Dozen&lt;/option&gt;&#10;                    &lt;option value=&quot;bundle&quot;&gt;Bundle&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;stock&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Available Stock *&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;number&quot;&#10;                    id=&quot;stock&quot;&#10;                    name=&quot;stock&quot;&#10;                    min=&quot;0&quot;&#10;                    value={formData.stock}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;100&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Product Images */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Product Images&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;images&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Upload Images (Max 5 images)&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center hover:border-primary-500 transition&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;file&quot;&#10;                      id=&quot;images&quot;&#10;                      name=&quot;images&quot;&#10;                      multiple&#10;                      accept=&quot;image/*&quot;&#10;                      onChange={handleImageChange}&#10;                      className=&quot;hidden&quot;&#10;                    /&gt;&#10;                    &lt;label htmlFor=&quot;images&quot; className=&quot;cursor-pointer&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;p className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                        Click to upload new images&#10;                      &lt;/p&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        PNG, JPG, WebP up to 5MB each&#10;                      &lt;/p&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Image Previews */}&#10;                  {imagePreviews.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 mb-3&quot;&gt;&#10;                        Current Images ({imagePreviews.length}/5)&#10;                      &lt;/p&gt;&#10;                      &lt;div className=&quot;grid grid-cols-2 md:grid-cols-5 gap-4&quot;&gt;&#10;                        {imagePreviews.map((preview, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;relative group rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-700&quot;&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={preview}&#10;                              alt={`Product Image ${index + 1}`}&#10;                              width={200}&#10;                              height={150}&#10;                              className=&quot;w-full h-24 object-cover group-hover:scale-105 transition-transform duration-200&quot;&#10;                            /&gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-200 flex items-center justify-center&quot;&gt;&#10;                              &lt;button&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; removeImage(index)}&#10;                                className=&quot;opacity-0 group-hover:opacity-100 bg-red-500 hover:bg-red-600 text-white rounded-full w-8 h-8 flex items-center justify-center transition-all duration-200 shadow-lg&quot;&#10;                                title=&quot;Remove image&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-times text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;absolute bottom-1 left-1 bg-black bg-opacity-70 text-white text-xs px-1 py-0.5 rounded&quot;&gt;&#10;                              {index + 1}&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {/* Add more images placeholder */}&#10;                        {imagePreviews.length &lt; 5 &amp;&amp; (&#10;                          &lt;div&#10;                            className=&quot;border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg h-24 flex items-center justify-center cursor-pointer hover:border-primary-500 transition-colors&quot;&#10;                            onClick={() =&gt;&#10;                              document.getElementById(&quot;images&quot;).click()&#10;                            }&#10;                          &gt;&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-plus text-gray-400 text-xl mb-1&quot;&gt;&lt;/i&gt;&#10;                              &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                Add More&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Farm Information */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Farm Information&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;farmLocation&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Farm Location&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;farmLocation&quot;&#10;                    name=&quot;farmLocation&quot;&#10;                    value={formData.farmLocation}&#10;                    onChange={handleInputChange}&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;e.g., Sylhet, Bangladesh&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;harvestDate&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Harvest Date&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;date&quot;&#10;                    id=&quot;harvestDate&quot;&#10;                    name=&quot;harvestDate&quot;&#10;                    value={formData.harvestDate}&#10;                    onChange={handleInputChange}&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Product Features */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Product Features&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;                {[&#10;                  &quot;organic&quot;,&#10;                  &quot;pesticide-free&quot;,&#10;                  &quot;fresh&quot;,&#10;                  &quot;non-gmo&quot;,&#10;                  &quot;local&quot;,&#10;                  &quot;sustainable&quot;,&#10;                  &quot;fair-trade&quot;,&#10;                  &quot;gluten-free&quot;,&#10;                ].map((feature) =&gt; (&#10;                  &lt;label&#10;                    key={feature}&#10;                    className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                  &gt;&#10;                    &lt;input&#10;                      type=&quot;checkbox&quot;&#10;                      name=&quot;features&quot;&#10;                      value={feature}&#10;                      checked={formData.features.includes(feature)}&#10;                      onChange={handleFeatureChange}&#10;                      className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                    /&gt;&#10;                    &lt;span className=&quot;ml-2 text-sm capitalize&quot;&gt;&#10;                      {feature.replace(&quot;-&quot;, &quot; &quot;)}&#10;                    &lt;/span&gt;&#10;                  &lt;/label&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Submit Button */}&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;flex-1 py-3 px-6 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg font-semibold text-center hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                Cancel&#10;              &lt;/Link&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                disabled={loading}&#10;                className={`flex-1 py-3 rounded-lg font-semibold focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition ${&#10;                  loading&#10;                    ? &quot;bg-gray-400 cursor-not-allowed text-white&quot;&#10;                    : &quot;bg-primary-600 text-white hover:bg-primary-700&quot;&#10;                }`}&#10;              &gt;&#10;                {loading ? (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                    Updating Product...&#10;                  &lt;/&gt;&#10;                ) : (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-save mr-2&quot;&gt;&lt;/i&gt;&#10;                    Update Product&#10;                  &lt;/&gt;&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Footer */}&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import { use } from &quot;react&quot;;&#10;import { useQueryClient } from &quot;@tanstack/react-query&quot;;&#10;import globalCache from &quot;@/lib/cache&quot;;&#10;import { sessionCache } from &quot;@/lib/cache&quot;;&#10;&#10;export default function EditProduct({ params }) {&#10;  const { data: session, status } = useSession();&#10;  const router = useRouter();&#10;  const queryClient = useQueryClient();&#10;  const { id } = use(params); // Fix Next.js 15 params warning&#10;  const [loading, setLoading] = useState(false);&#10;  const [initialLoading, setInitialLoading] = useState(true);&#10;  const [imagePreviews, setImagePreviews] = useState([]);&#10;  const [imageFiles, setImageFiles] = useState([]);&#10;  const [formData, setFormData] = useState({&#10;    name: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;    description: &quot;&quot;,&#10;    price: &quot;&quot;,&#10;    stock: &quot;&quot;,&#10;    unit: &quot;&quot;,&#10;    features: [],&#10;    images: [],&#10;    farmLocation: &quot;&quot;,&#10;    harvestDate: &quot;&quot;,&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (status === &quot;unauthenticated&quot;) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    if (status === &quot;authenticated&quot; &amp;&amp; session?.user) {&#10;      // Check if user is a farmer&#10;      const userType = session.user.userType || session.user.role || &quot;user&quot;;&#10;      if (userType !== &quot;farmer&quot;) {&#10;        router.push(&quot;/&quot;);&#10;        return;&#10;      }&#10;&#10;      // Fetch product data for editing&#10;      if (id) {&#10;        fetchProductForEdit(id);&#10;      }&#10;    }&#10;  }, [session, status, router, id]);&#10;&#10;  const fetchProductForEdit = async (productId) =&gt; {&#10;    try {&#10;      setInitialLoading(true);&#10;      const response = await fetch(`/api/products/${productId}`);&#10;&#10;      if (response.ok) {&#10;        const data = await response.json();&#10;        const product = data.product;&#10;&#10;        // Pre-populate form with existing product data&#10;        setFormData({&#10;          name: product.name || &quot;&quot;,&#10;          category: product.category || &quot;&quot;,&#10;          description: product.description || &quot;&quot;,&#10;          price: product.price?.toString() || &quot;&quot;,&#10;          stock: product.stock?.toString() || &quot;&quot;,&#10;          unit: product.unit || &quot;&quot;,&#10;          features: product.features || [],&#10;          images: product.images || (product.image ? [product.image] : []),&#10;          farmLocation: product.farmLocation || &quot;&quot;,&#10;          harvestDate: product.harvestDate&#10;            ? product.harvestDate.split(&quot;T&quot;)[0]&#10;            : &quot;&quot;,&#10;        });&#10;&#10;        // Set image previews if product has images&#10;        if (product.images &amp;&amp; product.images.length &gt; 0) {&#10;          setImagePreviews(product.images);&#10;        } else if (product.image) {&#10;          setImagePreviews([product.image]);&#10;        }&#10;      } else {&#10;        console.error(&quot;Failed to fetch product for editing&quot;);&#10;        alert(&quot;Failed to load product data. Redirecting to manage products.&quot;);&#10;        router.push(&quot;/manage&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching product for edit:&quot;, error);&#10;      alert(&quot;Error loading product data. Redirecting to manage products.&quot;);&#10;      router.push(&quot;/manage&quot;);&#10;    } finally {&#10;      setInitialLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleInputChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFormData((prev) =&gt; ({&#10;      ...prev,&#10;      [name]: value,&#10;    }));&#10;  };&#10;&#10;  const handleFeatureChange = (e) =&gt; {&#10;    const { value, checked } = e.target;&#10;    setFormData((prev) =&gt; ({&#10;      ...prev,&#10;      features: checked&#10;        ? [...prev.features, value]&#10;        : prev.features.filter((feature) =&gt; feature !== value),&#10;    }));&#10;  };&#10;&#10;  const handleImageChange = (e) =&gt; {&#10;    const files = Array.from(e.target.files);&#10;&#10;    // Check if adding new images would exceed the limit&#10;    const currentImageCount = imagePreviews.length;&#10;    const newImageCount = files.length;&#10;    const totalImages = currentImageCount + newImageCount;&#10;&#10;    if (totalImages &gt; 5) {&#10;      alert(&#10;        `You can only have a maximum of 5 images. You currently have ${currentImageCount} images. You can add ${5 - currentImageCount} more.`,&#10;      );&#10;      return;&#10;    }&#10;&#10;    // Validate each file&#10;    const validFiles = [];&#10;    const newPreviews = [];&#10;    const newBase64Images = [];&#10;&#10;    files.forEach((file) =&gt; {&#10;      // Validate file size (max 5MB)&#10;      if (file.size &gt; 5 * 1024 * 1024) {&#10;        alert(`Image ${file.name} is too large. Maximum size is 5MB`);&#10;        return;&#10;      }&#10;&#10;      // Validate file type&#10;      if (!file.type.startsWith(&quot;image/&quot;)) {&#10;        alert(`${file.name} is not a valid image file`);&#10;        return;&#10;      }&#10;&#10;      validFiles.push(file);&#10;      newPreviews.push(URL.createObjectURL(file));&#10;&#10;      // Convert image to base64 for storage&#10;      const reader = new FileReader();&#10;      reader.onload = (event) =&gt; {&#10;        newBase64Images.push(event.target.result);&#10;&#10;        // When all files are processed, append to existing images&#10;        if (newBase64Images.length === validFiles.length) {&#10;          setFormData((prev) =&gt; ({&#10;            ...prev,&#10;            images: [...prev.images, ...newBase64Images], // Append to existing&#10;          }));&#10;        }&#10;      };&#10;      reader.readAsDataURL(file);&#10;    });&#10;&#10;    // Append new files and previews to existing ones&#10;    setImageFiles((prev) =&gt; [...prev, ...validFiles]);&#10;    setImagePreviews((prev) =&gt; [...prev, ...newPreviews]);&#10;  };&#10;&#10;  const removeImage = (index) =&gt; {&#10;    const newPreviews = imagePreviews.filter((_, i) =&gt; i !== index);&#10;    const newFiles = imageFiles.filter((_, i) =&gt; i !== index);&#10;    const newImages = formData.images.filter((_, i) =&gt; i !== index);&#10;&#10;    setImagePreviews(newPreviews);&#10;    setImageFiles(newFiles);&#10;    setFormData((prev) =&gt; ({&#10;      ...prev,&#10;      images: newImages,&#10;    }));&#10;  };&#10;&#10;  const validateForm = () =&gt; {&#10;    if (!formData.name.trim()) {&#10;      alert(&quot;Product name is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.category) {&#10;      alert(&quot;Category is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.description.trim()) {&#10;      alert(&quot;Description is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.price || parseFloat(formData.price) &lt;= 0) {&#10;      alert(&quot;Valid price is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.stock || parseInt(formData.stock) &lt; 0) {&#10;      alert(&quot;Valid stock quantity is required&quot;);&#10;      return false;&#10;    }&#10;    if (!formData.unit) {&#10;      alert(&quot;Unit is required&quot;);&#10;      return false;&#10;    }&#10;    return true;&#10;  };&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (!validateForm()) return;&#10;&#10;    setLoading(true);&#10;    try {&#10;      // Use the same user ID logic as in manage page&#10;      const userId = session.user.userId || session.user.id || session.user._id;&#10;      const userEmail = session.user.email;&#10;&#10;      const productData = {&#10;        ...formData,&#10;        price: parseFloat(formData.price),&#10;        stock: parseInt(formData.stock),&#10;        farmerId: userId,&#10;        farmerEmail: userEmail,&#10;        farmer: {&#10;          id: userId,&#10;          email: userEmail,&#10;          name: session.user.name,&#10;        },&#10;        status: &quot;active&quot;,&#10;        updatedAt: new Date().toISOString(),&#10;        // Keep backward compatibility with single image&#10;        image: formData.images[0] || &quot;&quot;,&#10;      };&#10;&#10;      console.log(&#10;        &quot; [Edit] Starting product update with optimistic strategy...&quot;,&#10;      );&#10;      console.log(&quot; [Edit] Product data:&quot;, productData);&#10;&#10;      // OPTIMISTIC UPDATE: Apply changes to cache immediately (same as bulk update)&#10;      const userIds = {&#10;        userId: session.user.userId || session.user.id || session.user._id,&#10;        userEmail: session.user.email,&#10;      };&#10;&#10;      console.log(&quot; [Edit] Applying optimistic cache update...&quot;);&#10;      queryClient.setQueryData(&#10;        [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;        (oldData) =&gt; {&#10;          if (!oldData) return oldData;&#10;&#10;          const updatedProducts = oldData.products.map((product) =&gt; {&#10;            return product._id === id || product.id === id&#10;              ? { ...product, ...productData }&#10;              : product;&#10;          });&#10;&#10;          console.log(&quot;✅ [Edit] Optimistic update applied to dashboard cache&quot;);&#10;          return {&#10;            ...oldData,&#10;            products: updatedProducts,&#10;          };&#10;        },&#10;      );&#10;&#10;      // Also update other product queries optimistically&#10;      queryClient.setQueryData([&quot;products&quot;], (oldData) =&gt; {&#10;        if (!oldData?.products) return oldData;&#10;&#10;        const updatedProducts = oldData.products.map((product) =&gt; {&#10;          return product._id === id || product.id === id&#10;            ? { ...product, ...productData }&#10;            : product;&#10;        });&#10;&#10;        console.log(&quot;✅ [Edit] Optimistic update applied to products cache&quot;);&#10;        return {&#10;          ...oldData,&#10;          products: updatedProducts,&#10;        };&#10;      });&#10;&#10;      console.log(&quot; [Edit] Making API call...&quot;);&#10;      const response = await fetch(`/api/products/${id}`, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        body: JSON.stringify(productData),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const result = await response.json();&#10;        console.log(&quot;✅ [Edit] Product updated successfully:&quot;, result);&#10;&#10;        alert(&quot;Product updated successfully!&quot;);&#10;&#10;        // CRITICAL FIX: Only clear API service cache patterns, not all cache&#10;        // This preserves our optimistic updates while preventing stale API data&#10;        console.log(&quot; [Edit] Clearing API service cache patterns only...&quot;);&#10;        &#10;        try {&#10;          // Clear specific patterns instead of all cache&#10;          globalCache.clearPattern(&quot;products&quot;);&#10;          globalCache.clearPattern(&quot;product&quot;);&#10;          globalCache.clearPattern(&quot;dashboard&quot;);&#10;          globalCache.clearPattern(&quot;farmers&quot;);&#10;          &#10;          sessionCache.clearPattern(&quot;products&quot;);&#10;          sessionCache.clearPattern(&quot;product&quot;);&#10;          sessionCache.clearPattern(&quot;dashboard&quot;);&#10;          sessionCache.clearPattern(&quot;farmers&quot;);&#10;          &#10;          // Clear browser storage&#10;          if (typeof window !== &quot;undefined&quot;) {&#10;            sessionStorage.removeItem(&quot;products-cache&quot;);&#10;            sessionStorage.removeItem(&quot;dashboard-cache&quot;);&#10;            sessionStorage.removeItem(&quot;farmfresh-products&quot;);&#10;            sessionStorage.removeItem(&quot;farmfresh-dashboard&quot;);&#10;          }&#10;        } catch (cacheError) {&#10;          console.warn(&quot;Cache clearing warning:&quot;, cacheError);&#10;        }&#10;&#10;        console.log(&quot; [Edit] API update completed, starting delayed background refresh...&quot;);&#10;&#10;        // Delay invalidation to allow UI to stabilize (same as bulk update)&#10;        setTimeout(() =&gt; {&#10;          console.log(&quot; [Edit] Starting gentle background cache refresh...&quot;);&#10;&#10;          // Use gentle invalidation that doesn't immediately refetch&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;            exact: true,&#10;            refetchType: &quot;none&quot;, // Don't refetch immediately&#10;          });&#10;&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;products&quot;],&#10;            exact: false,&#10;            refetchType: &quot;none&quot;,&#10;          });&#10;&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;farmers&quot;],&#10;            exact: false,&#10;            refetchType: &quot;none&quot;,&#10;          });&#10;&#10;          queryClient.invalidateQueries({&#10;            queryKey: [&quot;product&quot;, id],&#10;            exact: true,&#10;            refetchType: &quot;none&quot;,&#10;          });&#10;&#10;          console.log(&quot;✅ [Edit] Gentle background invalidation completed&quot;);&#10;        }, 5000); // Increase delay to 5 seconds for consistency with bulk update&#10;&#10;        console.log(&quot;✅ [Edit] Product update completed successfully&quot;);&#10;&#10;        // Redirect to manage products page&#10;        router.push(&quot;/manage&quot;);&#10;      } else {&#10;        const errorData = await response.json();&#10;        console.error(&quot;❌ [Edit] Failed to update product:&quot;, errorData);&#10;&#10;        // Revert optimistic updates on error (same as bulk update)&#10;        console.log(&#10;          &quot; [Edit] Reverting optimistic updates due to API error...&quot;,&#10;        );&#10;        queryClient.invalidateQueries({&#10;          queryKey: [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;          exact: true,&#10;        });&#10;        queryClient.invalidateQueries({&#10;          queryKey: [&quot;products&quot;],&#10;          exact: false,&#10;        });&#10;&#10;        alert(&#10;          `Failed to update product: ${errorData.error || &quot;Unknown error&quot;}`,&#10;        );&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;❌ [Edit] Error updating product:&quot;, error);&#10;&#10;      // Revert optimistic updates on error&#10;      const userIds = {&#10;        userId: session.user.userId || session.user.id || session.user._id,&#10;        userEmail: session.user.email,&#10;      };&#10;&#10;      console.log(&quot; [Edit] Reverting optimistic updates due to error...&quot;);&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;dashboard&quot;, userIds.userId, userIds.userEmail],&#10;        exact: true,&#10;      });&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;products&quot;],&#10;        exact: false,&#10;      });&#10;&#10;      alert(&quot;Failed to update product. Please try again.&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  if (status === &quot;loading&quot; || initialLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;i className=&quot;fas fa-spinner fa-spin text-4xl text-primary-600 mb-4&quot;&gt;&lt;/i&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Loading product data...&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Breadcrumb */}&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4&quot;&gt;&#10;        &lt;nav className=&quot;flex&quot; aria-label=&quot;Breadcrumb&quot;&gt;&#10;          &lt;ol className=&quot;flex items-center space-x-2 text-sm&quot;&gt;&#10;            &lt;li&gt;&#10;              &lt;Link href=&quot;/&quot; className=&quot;text-gray-500 hover:text-primary-600&quot;&gt;&#10;                Home&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;text-gray-500 hover:text-primary-600&quot;&#10;              &gt;&#10;                Manage Products&#10;              &lt;/Link&gt;&#10;            &lt;/li&gt;&#10;            &lt;li&gt;&#10;              &lt;i className=&quot;fas fa-chevron-right text-gray-400 text-xs&quot;&gt;&lt;/i&gt;&#10;            &lt;/li&gt;&#10;            &lt;li className=&quot;text-gray-900 dark:text-white&quot;&gt;Edit Product&lt;/li&gt;&#10;          &lt;/ol&gt;&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Edit Product Form */}&#10;      &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;bg-primary-600 text-white px-8 py-6&quot;&gt;&#10;            &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Edit Product&lt;/h1&gt;&#10;            &lt;p className=&quot;text-primary-100 mt-2&quot;&gt;&#10;              Update your product information&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Form */}&#10;          &lt;form onSubmit={handleSubmit} className=&quot;p-8 space-y-8&quot;&gt;&#10;            {/* Basic Information */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Basic Information&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;name&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Product Name *&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;name&quot;&#10;                    name=&quot;name&quot;&#10;                    value={formData.name}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;e.g., Fresh Tomatoes&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;category&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Category *&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    id=&quot;category&quot;&#10;                    name=&quot;category&quot;&#10;                    value={formData.category}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select Category&lt;/option&gt;&#10;                    &lt;option value=&quot;Vegetables&quot;&gt;Vegetables&lt;/option&gt;&#10;                    &lt;option value=&quot;Fruits&quot;&gt;Fruits&lt;/option&gt;&#10;                    &lt;option value=&quot;Grains&quot;&gt;Grains&lt;/option&gt;&#10;                    &lt;option value=&quot;Dairy&quot;&gt;Dairy&lt;/option&gt;&#10;                    &lt;option value=&quot;Herbs&quot;&gt;Herbs&lt;/option&gt;&#10;                    &lt;option value=&quot;Honey&quot;&gt;Honey&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;description&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Description *&#10;                  &lt;/label&gt;&#10;                  &lt;textarea&#10;                    id=&quot;description&quot;&#10;                    name=&quot;description&quot;&#10;                    rows={4}&#10;                    value={formData.description}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;Describe your product, growing methods, quality, etc.&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Pricing &amp; Inventory */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Pricing &amp; Inventory&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;price&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Price per Unit (৳) *&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;number&quot;&#10;                    id=&quot;price&quot;&#10;                    name=&quot;price&quot;&#10;                    min=&quot;0&quot;&#10;                    step=&quot;0.01&quot;&#10;                    value={formData.price}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;45.00&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;unit&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Unit *&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    id=&quot;unit&quot;&#10;                    name=&quot;unit&quot;&#10;                    value={formData.unit}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select Unit&lt;/option&gt;&#10;                    &lt;option value=&quot;kg&quot;&gt;Kilogram (kg)&lt;/option&gt;&#10;                    &lt;option value=&quot;g&quot;&gt;Gram (g)&lt;/option&gt;&#10;                    &lt;option value=&quot;piece&quot;&gt;Piece&lt;/option&gt;&#10;                    &lt;option value=&quot;bunch&quot;&gt;Bunch&lt;/option&gt;&#10;                    &lt;option value=&quot;liter&quot;&gt;Liter&lt;/option&gt;&#10;                    &lt;option value=&quot;ml&quot;&gt;Milliliter (ml)&lt;/option&gt;&#10;                    &lt;option value=&quot;dozen&quot;&gt;Dozen&lt;/option&gt;&#10;                    &lt;option value=&quot;bundle&quot;&gt;Bundle&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;stock&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Available Stock *&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;number&quot;&#10;                    id=&quot;stock&quot;&#10;                    name=&quot;stock&quot;&#10;                    min=&quot;0&quot;&#10;                    value={formData.stock}&#10;                    onChange={handleInputChange}&#10;                    required&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;100&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Product Images */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Product Images&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;images&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Upload Images (Max 5 images)&#10;                  &lt;/label&gt;&#10;                  &lt;div className=&quot;border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center hover:border-primary-500 transition&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;file&quot;&#10;                      id=&quot;images&quot;&#10;                      name=&quot;images&quot;&#10;                      multiple&#10;                      accept=&quot;image/*&quot;&#10;                      onChange={handleImageChange}&#10;                      className=&quot;hidden&quot;&#10;                    /&gt;&#10;                    &lt;label htmlFor=&quot;images&quot; className=&quot;cursor-pointer&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4&quot;&gt;&lt;/i&gt;&#10;                      &lt;p className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                        Click to upload new images&#10;                      &lt;/p&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                        PNG, JPG, WebP up to 5MB each&#10;                      &lt;/p&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Image Previews */}&#10;                  {imagePreviews.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4&quot;&gt;&#10;                      &lt;p className=&quot;text-sm font-medium text-gray-700 dark:text-gray-300 mb-3&quot;&gt;&#10;                        Current Images ({imagePreviews.length}/5)&#10;                      &lt;/p&gt;&#10;                      &lt;div className=&quot;grid grid-cols-2 md:grid-cols-5 gap-4&quot;&gt;&#10;                        {imagePreviews.map((preview, index) =&gt; (&#10;                          &lt;div&#10;                            key={index}&#10;                            className=&quot;relative group rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-700&quot;&#10;                          &gt;&#10;                            &lt;Image&#10;                              src={preview}&#10;                              alt={`Product Image ${index + 1}`}&#10;                              width={200}&#10;                              height={150}&#10;                              className=&quot;w-full h-24 object-cover group-hover:scale-105 transition-transform duration-200&quot;&#10;                            /&gt;&#10;                            &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-200 flex items-center justify-center&quot;&gt;&#10;                              &lt;button&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; removeImage(index)}&#10;                                className=&quot;opacity-0 group-hover:opacity-100 bg-red-500 hover:bg-red-600 text-white rounded-full w-8 h-8 flex items-center justify-center transition-all duration-200 shadow-lg&quot;&#10;                                title=&quot;Remove image&quot;&#10;                              &gt;&#10;                                &lt;i className=&quot;fas fa-times text-sm&quot;&gt;&lt;/i&gt;&#10;                              &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;absolute bottom-1 left-1 bg-black bg-opacity-70 text-white text-xs px-1 py-0.5 rounded&quot;&gt;&#10;                              {index + 1}&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {/* Add more images placeholder */}&#10;                        {imagePreviews.length &lt; 5 &amp;&amp; (&#10;                          &lt;div&#10;                            className=&quot;border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg h-24 flex items-center justify-center cursor-pointer hover:border-primary-500 transition-colors&quot;&#10;                            onClick={() =&gt;&#10;                              document.getElementById(&quot;images&quot;).click()&#10;                            }&#10;                          &gt;&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                              &lt;i className=&quot;fas fa-plus text-gray-400 text-xl mb-1&quot;&gt;&lt;/i&gt;&#10;                              &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                                Add More&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Farm Information */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Farm Information&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;farmLocation&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Farm Location&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;farmLocation&quot;&#10;                    name=&quot;farmLocation&quot;&#10;                    value={formData.farmLocation}&#10;                    onChange={handleInputChange}&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                    placeholder=&quot;e.g., Sylhet, Bangladesh&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&gt;&#10;                  &lt;label&#10;                    htmlFor=&quot;harvestDate&quot;&#10;                    className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&#10;                  &gt;&#10;                    Harvest Date&#10;                  &lt;/label&gt;&#10;                  &lt;input&#10;                    type=&quot;date&quot;&#10;                    id=&quot;harvestDate&quot;&#10;                    name=&quot;harvestDate&quot;&#10;                    value={formData.harvestDate}&#10;                    onChange={handleInputChange}&#10;                    className=&quot;w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Product Features */}&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-xl font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                Product Features&#10;              &lt;/h2&gt;&#10;              &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;                {[&#10;                  &quot;organic&quot;,&#10;                  &quot;pesticide-free&quot;,&#10;                  &quot;fresh&quot;,&#10;                  &quot;non-gmo&quot;,&#10;                  &quot;local&quot;,&#10;                  &quot;sustainable&quot;,&#10;                  &quot;fair-trade&quot;,&#10;                  &quot;gluten-free&quot;,&#10;                ].map((feature) =&gt; (&#10;                  &lt;label&#10;                    key={feature}&#10;                    className=&quot;flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700&quot;&#10;                  &gt;&#10;                    &lt;input&#10;                      type=&quot;checkbox&quot;&#10;                      name=&quot;features&quot;&#10;                      value={feature}&#10;                      checked={formData.features.includes(feature)}&#10;                      onChange={handleFeatureChange}&#10;                      className=&quot;rounded border-gray-300 text-primary-600 focus:ring-primary-500&quot;&#10;                    /&gt;&#10;                    &lt;span className=&quot;ml-2 text-sm capitalize&quot;&gt;&#10;                      {feature.replace(&quot;-&quot;, &quot; &quot;)}&#10;                    &lt;/span&gt;&#10;                  &lt;/label&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Submit Button */}&#10;            &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/manage&quot;&#10;                className=&quot;flex-1 py-3 px-6 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg font-semibold text-center hover:bg-gray-50 dark:hover:bg-gray-700 transition&quot;&#10;              &gt;&#10;                &lt;i className=&quot;fas fa-times mr-2&quot;&gt;&lt;/i&gt;&#10;                Cancel&#10;              &lt;/Link&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                disabled={loading}&#10;                className={`flex-1 py-3 rounded-lg font-semibold focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition ${&#10;                  loading&#10;                    ? &quot;bg-gray-400 cursor-not-allowed text-white&quot;&#10;                    : &quot;bg-primary-600 text-white hover:bg-primary-700&quot;&#10;                }`}&#10;              &gt;&#10;                {loading ? (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-spinner fa-spin mr-2&quot;&gt;&lt;/i&gt;&#10;                    Updating Product...&#10;                  &lt;/&gt;&#10;                ) : (&#10;                  &lt;&gt;&#10;                    &lt;i className=&quot;fas fa-save mr-2&quot;&gt;&lt;/i&gt;&#10;                    Update Product&#10;                  &lt;/&gt;&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Footer */}&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/farmer-dashboard/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/farmer-dashboard/page.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        City&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.city}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;city&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        State/Province&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.state}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;state&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        ZIP/Postal Code&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        value={farmerData.contactInfo.address.zipCode}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;zipCode&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Country&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={farmerData.contactInfo.address.country}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;contactInfo&quot;, &quot;address&quot;, &quot;country&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;&quot;&gt;Select Country&lt;/option&gt;&#10;                        &lt;option value=&quot;US&quot;&gt;United States&lt;/option&gt;&#10;                        &lt;option value=&quot;CA&quot;&gt;Canada&lt;/option&gt;&#10;                        &lt;option value=&quot;UK&quot;&gt;United Kingdom&lt;/option&gt;&#10;                        &lt;option value=&quot;AU&quot;&gt;Australia&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handleSaveChanges(&quot;contactInfo&quot;)}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Contact Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Settings Tab */}&#10;            {activeTab === &quot;settings&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Settings&#10;                &lt;/h3&gt;&#10;&#10;                {/* Notification Settings */}&#10;                &lt;div&gt;&#10;                  &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Notification Preferences&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.orderAlerts}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;orderAlerts&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        New order alerts&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.lowStockAlerts}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;lowStockAlerts&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Low stock alerts&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.customerMessages}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;customerMessages&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Customer messages&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.notifications.marketingUpdates}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;notifications&quot;, &quot;marketingUpdates&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Marketing updates&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Business Settings */}&#10;                &lt;div&gt;&#10;                  &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                    Business Settings&#10;                  &lt;/h4&gt;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.autoAcceptOrders}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;&quot;, &quot;autoAcceptOrders&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Auto-accept orders&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;&#10;                    &lt;label className=&quot;flex items-center&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        checked={farmerData.settings.showFarmLocation}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;settings&quot;, &quot;&quot;, &quot;showFarmLocation&quot;, e.target.checked)&#10;                        }&#10;                        className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                      /&gt;&#10;                      &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                        Show farm location to customers&#10;                      &lt;/span&gt;&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handleSaveChanges(&quot;settings&quot;)}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Settings&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/profile/farmer.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/profile/farmer.js" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useAuth } from &quot;../../contexts/AuthContext&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useTheme } from &quot;../../contexts/ThemeContext&quot;;&#10;&#10;export default function FarmerProfilePage() {&#10;  const { user, isAuthenticated, updateUser } = useAuth();&#10;  const { isDarkMode } = useTheme();&#10;  const router = useRouter();&#10;&#10;  const [activeTab, setActiveTab] = useState(&quot;personal&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [message, setMessage] = useState({ type: &quot;&quot;, text: &quot;&quot; });&#10;  const [profileData, setProfileData] = useState({&#10;    name: &quot;&quot;,&#10;    email: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    farmInfo: {&#10;      farmName: &quot;&quot;,&#10;      farmDescription: &quot;&quot;,&#10;      farmSize: &quot;&quot;,&#10;      farmType: &quot;&quot;,&#10;      certifications: [],&#10;      establishedYear: &quot;&quot;,&#10;      farmingMethods: [],&#10;    },&#10;    address: {&#10;      street: &quot;&quot;,&#10;      city: &quot;&quot;,&#10;      state: &quot;&quot;,&#10;      zipCode: &quot;&quot;,&#10;      country: &quot;&quot;,&#10;    },&#10;    businessInfo: {&#10;      businessLicense: &quot;&quot;,&#10;      taxId: &quot;&quot;,&#10;      deliveryRadius: &quot;&quot;,&#10;      minimumOrder: &quot;&quot;,&#10;      website: &quot;&quot;,&#10;      socialMedia: {&#10;        facebook: &quot;&quot;,&#10;        instagram: &quot;&quot;,&#10;        twitter: &quot;&quot;,&#10;      },&#10;    },&#10;    preferences: {&#10;      notifications: {&#10;        email: true,&#10;        sms: false,&#10;        orderUpdates: true,&#10;        lowStockAlerts: true,&#10;        customerMessages: true,&#10;        marketingUpdates: false,&#10;      },&#10;      language: &quot;en&quot;,&#10;      currency: &quot;USD&quot;,&#10;      autoAcceptOrders: false,&#10;      showFarmLocation: true,&#10;    },&#10;    security: {&#10;      currentPassword: &quot;&quot;,&#10;      newPassword: &quot;&quot;,&#10;      confirmPassword: &quot;&quot;,&#10;    },&#10;  });&#10;&#10;  // Redirect if not authenticated or not a farmer&#10;  useEffect(() =&gt; {&#10;    if (!isAuthenticated) {&#10;      router.push(&quot;/login&quot;);&#10;      return;&#10;    }&#10;&#10;    // Check if user is a farmer, if not redirect to regular profile&#10;    if (user &amp;&amp; user.role !== &quot;farmer&quot;) {&#10;      router.push(&quot;/profile&quot;);&#10;      return;&#10;    }&#10;&#10;    // Initialize profile data with user data&#10;    if (user) {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        name: user.name || &quot;&quot;,&#10;        email: user.email || &quot;&quot;,&#10;        phone: user.phone || &quot;&quot;,&#10;        address: user.address || prev.address,&#10;        farmInfo: user.farmInfo || prev.farmInfo,&#10;        businessInfo: user.businessInfo || prev.businessInfo,&#10;        preferences: user.preferences || prev.preferences,&#10;      }));&#10;    }&#10;  }, [user, isAuthenticated, router]);&#10;&#10;  const handleInputChange = (field, value) =&gt; {&#10;    setProfileData((prev) =&gt; ({&#10;      ...prev,&#10;      [field]: value,&#10;    }));&#10;  };&#10;&#10;  const handleNestedChange = (section, subsection, field, value) =&gt; {&#10;    if (subsection) {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        [section]: {&#10;          ...prev[section],&#10;          [subsection]: {&#10;            ...prev[section][subsection],&#10;            [field]: value,&#10;          },&#10;        },&#10;      }));&#10;    } else {&#10;      setProfileData((prev) =&gt; ({&#10;        ...prev,&#10;        [section]: {&#10;          ...prev[section],&#10;          [field]: value,&#10;        },&#10;      }));&#10;    }&#10;  };&#10;&#10;  const handleArrayChange = (section, field, value) =&gt; {&#10;    const arrayValue = value.split(&quot;,&quot;).map(item =&gt; item.trim()).filter(item =&gt; item);&#10;    setProfileData((prev) =&gt; ({&#10;      ...prev,&#10;      [section]: {&#10;        ...prev[section],&#10;        [field]: arrayValue,&#10;      },&#10;    }));&#10;  };&#10;&#10;  const handlePersonalInfoUpdate = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setMessage({ type: &quot;&quot;, text: &quot;&quot; });&#10;&#10;      const response = await fetch(&quot;/api/auth/users&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          name: profileData.name,&#10;          phone: profileData.phone,&#10;          address: profileData.address,&#10;          farmInfo: profileData.farmInfo,&#10;          businessInfo: profileData.businessInfo,&#10;          preferences: profileData.preferences,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        const updatedUser = await response.json();&#10;        updateUser(updatedUser.user);&#10;        setMessage({ type: &quot;success&quot;, text: &quot;Profile updated successfully!&quot; });&#10;&#10;        // Also update localStorage to persist data&#10;        localStorage.setItem(&#10;          &quot;farmfresh_user&quot;,&#10;          JSON.stringify(updatedUser.user),&#10;        );&#10;      } else {&#10;        const errorData = await response.json();&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: errorData.error || &quot;Failed to update profile&quot;,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      setMessage({&#10;        type: &quot;error&quot;,&#10;        text: &quot;An error occurred while updating profile&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handlePasswordChange = async () =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      setMessage({ type: &quot;&quot;, text: &quot;&quot; });&#10;&#10;      if (&#10;        profileData.security.newPassword !==&#10;        profileData.security.confirmPassword&#10;      ) {&#10;        setMessage({ type: &quot;error&quot;, text: &quot;New passwords don't match&quot; });&#10;        return;&#10;      }&#10;&#10;      if (profileData.security.newPassword.length &lt; 6) {&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: &quot;Password must be at least 6 characters long&quot;,&#10;        });&#10;        return;&#10;      }&#10;&#10;      const response = await fetch(&quot;/api/auth/users&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          currentPassword: profileData.security.currentPassword,&#10;          newPassword: profileData.security.newPassword,&#10;        }),&#10;      });&#10;&#10;      if (response.ok) {&#10;        setMessage({ type: &quot;success&quot;, text: &quot;Password updated successfully!&quot; });&#10;        setProfileData((prev) =&gt; ({&#10;          ...prev,&#10;          security: {&#10;            currentPassword: &quot;&quot;,&#10;            newPassword: &quot;&quot;,&#10;            confirmPassword: &quot;&quot;,&#10;          },&#10;        }));&#10;      } else {&#10;        const errorData = await response.json();&#10;        setMessage({&#10;          type: &quot;error&quot;,&#10;          text: errorData.error || &quot;Failed to update password&quot;,&#10;        });&#10;      }&#10;    } catch (error) {&#10;      setMessage({&#10;        type: &quot;error&quot;,&#10;        text: &quot;An error occurred while updating password&quot;,&#10;      });&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const tabs = [&#10;    { id: &quot;personal&quot;, label: &quot;Personal Info&quot;, icon: &quot;fas fa-user&quot; },&#10;    { id: &quot;farm&quot;, label: &quot;Farm Info&quot;, icon: &quot;fas fa-seedling&quot; },&#10;    { id: &quot;business&quot;, label: &quot;Business&quot;, icon: &quot;fas fa-building&quot; },&#10;    { id: &quot;address&quot;, label: &quot;Address&quot;, icon: &quot;fas fa-map-marker-alt&quot; },&#10;    { id: &quot;preferences&quot;, label: &quot;Preferences&quot;, icon: &quot;fas fa-cog&quot; },&#10;    { id: &quot;security&quot;, label: &quot;Security&quot;, icon: &quot;fas fa-shield-alt&quot; },&#10;  ];&#10;&#10;  if (!isAuthenticated) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-gray-900 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;&#10;            Farmer Profile Settings&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600 dark:text-gray-400&quot;&gt;&#10;            Manage your farmer account settings and farm information&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-lg shadow-sm&quot;&gt;&#10;          {/* Tab Navigation */}&#10;          &lt;div className=&quot;border-b border-gray-200 dark:border-gray-700&quot;&gt;&#10;            &lt;nav className=&quot;flex space-x-8 px-6 overflow-x-auto&quot;&gt;&#10;              {tabs.map((tab) =&gt; (&#10;                &lt;button&#10;                  key={tab.id}&#10;                  onClick={() =&gt; setActiveTab(tab.id)}&#10;                  className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 whitespace-nowrap ${&#10;                    activeTab === tab.id&#10;                      ? &quot;border-primary-500 text-primary-600 dark:text-primary-400&quot;&#10;                      : &quot;border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;i className={tab.icon}&gt;&lt;/i&gt;&#10;                  &lt;span&gt;{tab.label}&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              ))}&#10;            &lt;/nav&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Tab Content */}&#10;          &lt;div className=&quot;p-6&quot;&gt;&#10;            {message.text &amp;&amp; (&#10;              &lt;div&#10;                className={`mb-4 p-4 rounded-md ${&#10;                  message.type === &quot;success&quot;&#10;                    ? &quot;bg-green-50 dark:bg-green-900 text-green-700 dark:text-green-300 border border-green-200 dark:border-green-800&quot;&#10;                    : &quot;bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 border border-red-200 dark:border-red-800&quot;&#10;                }`}&#10;              &gt;&#10;                {message.text}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Personal Information Tab */}&#10;            {activeTab === &quot;personal&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Personal Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Full Name&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.name}&#10;                      onChange={(e) =&gt;&#10;                        handleInputChange(&quot;name&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Email Address&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;email&quot;&#10;                      value={profileData.email}&#10;                      disabled&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-gray-50 dark:bg-gray-600 text-gray-500 dark:text-gray-400&quot;&#10;                    /&gt;&#10;                    &lt;p className=&quot;mt-1 text-xs text-gray-500 dark:text-gray-400&quot;&gt;&#10;                      Email cannot be changed&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Phone Number&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;tel&quot;&#10;                      value={profileData.phone}&#10;                      onChange={(e) =&gt;&#10;                        handleInputChange(&quot;phone&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Changes&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Farm Information Tab */}&#10;            {activeTab === &quot;farm&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Farm Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Name *&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.farmName}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmName&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Green Valley Farm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Type&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={profileData.farmInfo.farmType}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmType&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select Farm Type&lt;/option&gt;&#10;                      &lt;option value=&quot;organic&quot;&gt;Organic Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;conventional&quot;&gt;Conventional Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;hydroponic&quot;&gt;Hydroponic Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;greenhouse&quot;&gt;Greenhouse Farm&lt;/option&gt;&#10;                      &lt;option value=&quot;mixed&quot;&gt;Mixed Farm&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Size (acres)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.farmInfo.farmSize}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmSize&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;10&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Established Year&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.farmInfo.establishedYear}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;establishedYear&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;2020&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farm Description&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={profileData.farmInfo.farmDescription}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;farmInfo&quot;, &quot;&quot;, &quot;farmDescription&quot;, e.target.value)&#10;                      }&#10;                      rows={4}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Tell customers about your farm, your farming philosophy, and what makes your products special...&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Certifications (comma-separated)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.certifications.join(&quot;, &quot;)}&#10;                      onChange={(e) =&gt;&#10;                        handleArrayChange(&quot;farmInfo&quot;, &quot;certifications&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Organic Certified, Non-GMO, USDA Organic&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Farming Methods (comma-separated)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.farmInfo.farmingMethods.join(&quot;, &quot;)}&#10;                      onChange={(e) =&gt;&#10;                        handleArrayChange(&quot;farmInfo&quot;, &quot;farmingMethods&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;Sustainable, Pesticide-free, Crop Rotation&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Farm Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Business Information Tab */}&#10;            {activeTab === &quot;business&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Business Information&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Business License&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.businessInfo.businessLicense}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;businessLicense&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Tax ID&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.businessInfo.taxId}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;taxId&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Delivery Radius (miles)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.businessInfo.deliveryRadius}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;deliveryRadius&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;25&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Minimum Order ($)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;number&quot;&#10;                      value={profileData.businessInfo.minimumOrder}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;minimumOrder&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;25&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Website&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.website}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;&quot;, &quot;website&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://yourfarm.com&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Social Media */}&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Facebook&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.facebook}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;facebook&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://facebook.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Instagram&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.instagram}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;instagram&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://instagram.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Twitter&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={profileData.businessInfo.socialMedia.twitter}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;businessInfo&quot;, &quot;socialMedia&quot;, &quot;twitter&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      placeholder=&quot;https://twitter.com/yourfarm&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Business Information&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Address Tab */}&#10;            {activeTab === &quot;address&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Farm Address&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                  &lt;div className=&quot;md:col-span-2&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Street Address&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.street}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;street&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      City&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.city}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;city&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      State/Province&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.state}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;state&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      ZIP/Postal Code&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={profileData.address.zipCode}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;zipCode&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Country&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={profileData.address.country}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;address&quot;, &quot;&quot;, &quot;country&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Select Country&lt;/option&gt;&#10;                      &lt;option value=&quot;US&quot;&gt;United States&lt;/option&gt;&#10;                      &lt;option value=&quot;CA&quot;&gt;Canada&lt;/option&gt;&#10;                      &lt;option value=&quot;UK&quot;&gt;United Kingdom&lt;/option&gt;&#10;                      &lt;option value=&quot;AU&quot;&gt;Australia&lt;/option&gt;&#10;                      &lt;option value=&quot;DE&quot;&gt;Germany&lt;/option&gt;&#10;                      &lt;option value=&quot;FR&quot;&gt;France&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Address&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Preferences Tab */}&#10;            {activeTab === &quot;preferences&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Preferences&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Notification Preferences&#10;                    &lt;/h4&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.email}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;email&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Email notifications&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.sms}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;sms&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          SMS notifications&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.orderUpdates}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;orderUpdates&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Order status updates&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.lowStockAlerts}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;lowStockAlerts&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Low stock alerts&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.customerMessages}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;customerMessages&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Customer messages&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.notifications.marketingUpdates}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;notifications&quot;, &quot;marketingUpdates&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Marketing updates&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;text-md font-medium text-gray-900 dark:text-white mb-4&quot;&gt;&#10;                      Business Preferences&#10;                    &lt;/h4&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.autoAcceptOrders}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;autoAcceptOrders&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Auto-accept orders&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;&#10;                      &lt;label className=&quot;flex items-center&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;checkbox&quot;&#10;                          checked={profileData.preferences.showFarmLocation}&#10;                          onChange={(e) =&gt;&#10;                            handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;showFarmLocation&quot;, e.target.checked)&#10;                          }&#10;                          className=&quot;rounded border-gray-300 text-primary-600 shadow-sm focus:border-primary-300 focus:ring focus:ring-primary-200 focus:ring-opacity-50&quot;&#10;                        /&gt;&#10;                        &lt;span className=&quot;ml-2 text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                          Show farm location to customers&#10;                        &lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Language&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={profileData.preferences.language}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;language&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;&#10;                        &lt;option value=&quot;es&quot;&gt;Spanish&lt;/option&gt;&#10;                        &lt;option value=&quot;fr&quot;&gt;French&lt;/option&gt;&#10;                        &lt;option value=&quot;de&quot;&gt;German&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                        Currency&#10;                      &lt;/label&gt;&#10;                      &lt;select&#10;                        value={profileData.preferences.currency}&#10;                        onChange={(e) =&gt;&#10;                          handleNestedChange(&quot;preferences&quot;, &quot;&quot;, &quot;currency&quot;, e.target.value)&#10;                        }&#10;                        className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;USD&quot;&gt;USD ($)&lt;/option&gt;&#10;                        &lt;option value=&quot;EUR&quot;&gt;EUR (€)&lt;/option&gt;&#10;                        &lt;option value=&quot;GBP&quot;&gt;GBP (£)&lt;/option&gt;&#10;                        &lt;option value=&quot;CAD&quot;&gt;CAD ($)&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={handlePersonalInfoUpdate}&#10;                  disabled={loading}&#10;                  className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {loading ? &quot;Saving...&quot; : &quot;Save Preferences&quot;}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Security Tab */}&#10;            {activeTab === &quot;security&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                  Security Settings&#10;                &lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;max-w-md space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Current Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.currentPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;currentPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      New Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.newPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;newPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2&quot;&gt;&#10;                      Confirm New Password&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;password&quot;&#10;                      value={profileData.security.confirmPassword}&#10;                      onChange={(e) =&gt;&#10;                        handleNestedChange(&quot;security&quot;, &quot;&quot;, &quot;confirmPassword&quot;, e.target.value)&#10;                      }&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;button&#10;                    onClick={handlePasswordChange}&#10;                    disabled={loading}&#10;                    className=&quot;bg-primary-600 text-white px-6 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    {loading ? &quot;Updating...&quot; : &quot;Update Password&quot;}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check-mismatch.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check-mismatch.js" />
              <option name="updatedContent" value="// Simple script to check the review-product mismatch&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function checkMismatch() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Checking product-review mismatch...\n');&#10;  &#10;  // Get all products&#10;  const products = await db.collection('products').find({}).toArray();&#10;  console.log(` Total products: ${products.length}`);&#10;  console.log('Product IDs:', products.slice(0, 5).map(p =&gt; p._id.toString()));&#10;  &#10;  // Get all reviews  &#10;  const reviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(`\n Total reviews: ${reviews.length}`);&#10;  console.log('Review product IDs:', reviews.map(r =&gt; r.productId));&#10;  &#10;  // Check for matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log(`\n✅ Matching product-review pairs: ${matches.length}`);&#10;  &#10;  if (matches.length &gt; 0) {&#10;    console.log('Matched IDs:', matches);&#10;    &#10;    // Show which products have reviews&#10;    for (const matchId of matches) {&#10;      const product = products.find(p =&gt; p._id.toString() === matchId);&#10;      const productReviews = reviews.filter(r =&gt; r.productId === matchId);&#10;      console.log(`- ${product.name}: ${productReviews.length} reviews`);&#10;    }&#10;  } else {&#10;    console.log('\n❌ No matches found!');&#10;    console.log('This means the existing reviews belong to products that no longer exist');&#10;    console.log('or have different IDs than the current products in the database');&#10;  }&#10;  &#10;  await client.close();&#10;}&#10;&#10;checkMismatch().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/tabs/DashboardTab.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/tabs/DashboardTab.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useMemo } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function DashboardTab({&#10;  orders,&#10;  products,&#10;  formatPrice,&#10;  formatDate,&#10;  handleRefresh,&#10;  bulkUpdateProducts, // Add this prop to receive the proper bulk update function&#10;}) {&#10;  const router = useRouter();&#10;  const [bulkUpdateModal, setBulkUpdateModal] = useState(false);&#10;  const [selectedProducts, setSelectedProducts] = useState([]);&#10;  const [bulkAction, setBulkAction] = useState(&quot;&quot;);&#10;  const [bulkValues, setBulkValues] = useState({&#10;    price: &quot;&quot;,&#10;    stock: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;  });&#10;  const [bulkLoading, setBulkLoading] = useState(false);&#10;&#10;  // Quick Farm Tools handlers&#10;  const handleQuickTool = (toolType) =&gt; {&#10;    switch (toolType) {&#10;      case &quot;bulk-update&quot;:&#10;        setBulkUpdateModal(true);&#10;        break;&#10;      case &quot;inventory-sync&quot;:&#10;        router.push(&quot;/manage?tab=products&amp;action=inventory&quot;);&#10;        break;&#10;      case &quot;price-optimizer&quot;:&#10;        router.push(&quot;/manage?tab=analytics&amp;tool=pricing&quot;);&#10;        break;&#10;      case &quot;harvest-planner&quot;:&#10;        router.push(&quot;/manage?tab=dashboard&amp;tool=planner&quot;);&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;  };&#10;&#10;  // Bulk update functionality&#10;  const handleBulkUpdate = async () =&gt; {&#10;    if (!selectedProducts.length || !bulkAction) {&#10;      alert(&quot;Please select products and an action to perform.&quot;);&#10;      return;&#10;    }&#10;&#10;    setBulkLoading(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      switch (bulkAction) {&#10;        case &quot;price&quot;:&#10;          if (!bulkValues.price) {&#10;            alert(&quot;Please enter a price value.&quot;);&#10;            return;&#10;          }&#10;          updateData.price = parseFloat(bulkValues.price);&#10;          break;&#10;        case &quot;stock&quot;:&#10;          if (!bulkValues.stock) {&#10;            alert(&quot;Please enter a stock value.&quot;);&#10;            return;&#10;          }&#10;          updateData.stock = parseInt(bulkValues.stock);&#10;          break;&#10;        case &quot;status&quot;:&#10;          if (!bulkValues.status) {&#10;            alert(&quot;Please select a status.&quot;);&#10;            return;&#10;          }&#10;          updateData.status = bulkValues.status;&#10;          break;&#10;        case &quot;category&quot;:&#10;          if (!bulkValues.category) {&#10;            alert(&quot;Please enter a category.&quot;);&#10;            return;&#10;          }&#10;          updateData.category = bulkValues.category;&#10;          break;&#10;      }&#10;&#10;      // Use the bulkUpdateProducts function from hook (includes cache invalidation like farmer updates)&#10;      console.log(&quot; [DashboardTab] Calling bulkUpdateProducts...&quot;);&#10;      console.log(&quot; [DashboardTab] Selected products:&quot;, selectedProducts);&#10;      console.log(&quot; [DashboardTab] Update data:&quot;, updateData);&#10;      console.log(&#10;        &quot; [DashboardTab] Current products before update:&quot;,&#10;        products,&#10;      );&#10;&#10;      // DEBUG: Check if selected products are valid IDs&#10;      console.log(&quot; [DashboardTab] Selected product IDs type check:&quot;, {&#10;        selectedProducts: selectedProducts,&#10;        areStrings: selectedProducts.map((id) =&gt; typeof id),&#10;        validObjectIds: selectedProducts.map((id) =&gt; id &amp;&amp; id.length === 24),&#10;        productsInData: products.map((p) =&gt; ({&#10;          id: p._id || p.id,&#10;          name: p.name,&#10;        })),&#10;      });&#10;&#10;      const result = await bulkUpdateProducts(selectedProducts, updateData);&#10;&#10;      console.log(&quot; [DashboardTab] Bulk update result:&quot;, result);&#10;&#10;      if (result.success) {&#10;        console.log(&quot;✅ [DashboardTab] Bulk update API call successful&quot;);&#10;&#10;        alert(&#10;          `Successfully updated ${result.data.updatedCount || 1} products!`,&#10;        );&#10;&#10;        // REMOVED: Don't call handleRefresh() as it overrides optimistic updates&#10;        // The bulkUpdateProducts function already handles cache updates properly&#10;        //&#10;        // // FORCE immediate refresh to ensure dashboard updates&#10;        // console.log(&#10;        //   &quot; [DashboardTab] Forcing immediate refresh after bulk update...&quot;,&#10;        // );&#10;        // console.log(&#10;        //   &quot; [DashboardTab] handleRefresh function exists:&quot;,&#10;        //   !!handleRefresh,&#10;        // );&#10;&#10;        // if (handleRefresh) {&#10;        //   console.log(&quot; [DashboardTab] Calling handleRefresh...&quot;);&#10;        //   await handleRefresh(); // Force refresh dashboard data&#10;        //   console.log(&quot;✅ [DashboardTab] handleRefresh completed&quot;);&#10;        // } else {&#10;        //   console.error(&#10;        //     &quot;❌ [DashboardTab] handleRefresh function not available!&quot;,&#10;        //   );&#10;        // }&#10;&#10;        // // Log products after refresh to see if they changed&#10;        // console.log(&#10;        //   &quot; [DashboardTab] Products after refresh (should update via React state):&quot;,&#10;        // );&#10;        // setTimeout(() =&gt; {&#10;        //   console.log(&#10;        //     &quot; [DashboardTab] Products state after refresh:&quot;,&#10;        //     products.map((p) =&gt; ({&#10;        //       id: p._id,&#10;        //       name: p.name,&#10;        //       stock: p.stock,&#10;        //       price: p.price,&#10;        //       status: p.status,&#10;        //     })),&#10;        //   );&#10;        // }, 1000);&#10;&#10;        // Dispatch custom event to notify products page of bulk update&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productsBulkUpdated&quot;, {&#10;            detail: {&#10;              productIds: selectedProducts,&#10;              updateData: updateData,&#10;              timestamp: Date.now(),&#10;              cacheCleared: result.cacheCleared,&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productsBulkUpdated&quot;,&#10;          JSON.stringify({&#10;            productIds: selectedProducts,&#10;            updateData: updateData,&#10;            timestamp: Date.now(),&#10;            cacheCleared: result.cacheCleared,&#10;          }),&#10;        );&#10;&#10;        // No need to force refresh - cache invalidation handles it automatically&#10;        // if (handleRefresh) {&#10;        //   handleRefresh(true); // Force refresh&#10;        // }&#10;&#10;        setBulkUpdateModal(false);&#10;        setSelectedProducts([]);&#10;        setBulkAction(&quot;&quot;);&#10;        setBulkValues({ price: &quot;&quot;, stock: &quot;&quot;, status: &quot;&quot;, category: &quot;&quot; });&#10;      } else {&#10;        throw new Error(result.error || &quot;Update failed&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      alert(`Error updating products: ${error.message}`);&#10;    } finally {&#10;      setBulkLoading(false);&#10;    }&#10;  };&#10;&#10;  const toggleProductSelection = (productId) =&gt; {&#10;    setSelectedProducts((prev) =&gt;&#10;      prev.includes(productId)&#10;        ? prev.filter((id) =&gt; id !== productId)&#10;        : [...prev, productId],&#10;    );&#10;  };&#10;&#10;  const selectAllProducts = () =&gt; {&#10;    if (selectedProducts.length === products.length) {&#10;      setSelectedProducts([]);&#10;    } else {&#10;      setSelectedProducts(products.map((p) =&gt; p._id));&#10;    }&#10;  };&#10;&#10;  // Calculate urgent action items&#10;  const actionItems = useMemo(() =&gt; {&#10;    const items = [];&#10;&#10;    // Low stock alerts&#10;    const lowStockProducts = products.filter(&#10;      (p) =&gt; p.stock &lt;= 5 &amp;&amp; p.stock &gt; 0,&#10;    );&#10;    if (lowStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;low-stock&quot;,&#10;        priority: &quot;high&quot;,&#10;        icon: &quot;fas fa-exclamation-triangle&quot;,&#10;        color: &quot;text-red-600&quot;,&#10;        bgColor: &quot;bg-red-50 dark:bg-red-900/20&quot;,&#10;        title: `${lowStockProducts.length} products low on stock`,&#10;        description: &quot;Restock needed to avoid stockouts&quot;,&#10;        action: &quot;View Products&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Out of stock alerts&#10;    const outOfStockProducts = products.filter((p) =&gt; p.stock === 0);&#10;    if (outOfStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;out-of-stock&quot;,&#10;        priority: &quot;critical&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;        color: &quot;text-red-700&quot;,&#10;        bgColor: &quot;bg-red-100 dark:bg-red-900/30&quot;,&#10;        title: `${outOfStockProducts.length} products out of stock`,&#10;        description: &quot;Products unavailable for purchase&quot;,&#10;        action: &quot;Restock Now&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Pending orders&#10;    const pendingOrders = orders.filter((o) =&gt; o.status === &quot;pending&quot;);&#10;    if (pendingOrders.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;pending-orders&quot;,&#10;        priority: &quot;medium&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;        color: &quot;text-yellow-600&quot;,&#10;        bgColor: &quot;bg-yellow-50 dark:bg-yellow-900/20&quot;,&#10;        title: `${pendingOrders.length} orders awaiting processing`,&#10;        description: &quot;New orders need your attention&quot;,&#10;        action: &quot;Process Orders&quot;,&#10;        link: &quot;#orders&quot;,&#10;      });&#10;    }&#10;&#10;    // Products without images&#10;    const productsWithoutImages = products.filter(&#10;      (p) =&gt; !p.images || p.images.length === 0,&#10;    );&#10;    if (productsWithoutImages.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;missing-images&quot;,&#10;        priority: &quot;low&quot;,&#10;        icon: &quot;fas fa-image&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;        bgColor: &quot;bg-blue-50 dark:bg-blue-900/20&quot;,&#10;        title: `${productsWithoutImages.length} products missing images`,&#10;        description: &quot;Add photos to boost sales&quot;,&#10;        action: &quot;Add Images&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    return items.sort((a, b) =&gt; {&#10;      const priorityOrder = { critical: 3, high: 2, medium: 1, low: 0 };&#10;      return priorityOrder[b.priority] - priorityOrder[a.priority];&#10;    });&#10;  }, [products, orders]);&#10;&#10;  // Real-time activity feed&#10;  const activityFeed = useMemo(() =&gt; {&#10;    const activities = [];&#10;&#10;    // Recent orders&#10;    orders.slice(0, 5).forEach((order) =&gt; {&#10;      // Extract customer name from various possible fields&#10;      let customerName =&#10;        order.customerName ||&#10;        order.customerInfo?.name ||&#10;        order.shippingAddress?.name ||&#10;        order.billingAddress?.name;&#10;&#10;      // If no name found but we have userId, format it better&#10;      if (!customerName &amp;&amp; order.userId) {&#10;        // Check if userId looks like a MongoDB ObjectId (24 hex characters)&#10;        if (order.userId.match(/^[0-9a-fA-F]{24}$/)) {&#10;          customerName = `Customer ${order.userId.slice(-6).toUpperCase()}`;&#10;        } else {&#10;          customerName = order.userId;&#10;        }&#10;      }&#10;&#10;      // Final fallback&#10;      if (!customerName) {&#10;        customerName = &quot;Anonymous Customer&quot;;&#10;      }&#10;&#10;      activities.push({&#10;        type: &quot;order&quot;,&#10;        icon: &quot;fas fa-shopping-cart&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;        title: `New order from ${customerName}`,&#10;        description: `${order.items?.length || 0} items • ${formatPrice(&#10;          order.total || 0,&#10;        )}`,&#10;        time: order.createdAt,&#10;        status: order.status,&#10;      });&#10;    });&#10;&#10;    return activities&#10;      .sort((a, b) =&gt; new Date(b.time) - new Date(a.time))&#10;      .slice(0, 8);&#10;  }, [orders, formatPrice]);&#10;&#10;  // Today's summary&#10;  const todaySummary = useMemo(() =&gt; {&#10;    const today = new Date().toISOString().split(&quot;T&quot;)[0];&#10;    const todayOrders = orders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt).toISOString().split(&quot;T&quot;)[0];&#10;      return orderDate === today;&#10;    });&#10;&#10;    const todayRevenue = todayOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    return {&#10;      ordersCount: todayOrders.length,&#10;      revenue: todayRevenue,&#10;      newCustomers: new Set(todayOrders.map((o) =&gt; o.customerEmail)).size,&#10;      topProduct: products.reduce((top, product) =&gt; {&#10;        const productOrdersToday = todayOrders.filter((order) =&gt;&#10;          order.items?.some(&#10;            (item) =&gt;&#10;              item.productId === product._id ||&#10;              item.product?._id === product._id,&#10;          ),&#10;        );&#10;        return productOrdersToday.length &gt; (top?.count || 0)&#10;          ? { ...product, count: productOrdersToday.length }&#10;          : top;&#10;      }, null),&#10;    };&#10;  }, [orders, products]);&#10;&#10;  // Seasonal recommendations&#10;  const seasonalRecommendations = useMemo(() =&gt; {&#10;    const currentMonth = new Date().getMonth();&#10;    const recommendations = [];&#10;&#10;    // Summer fruits and vegetables (June-August: months 5-7)&#10;    if (currentMonth &gt;= 5 &amp;&amp; currentMonth &lt;= 7) {&#10;      recommendations.push({&#10;        category: &quot;Summer Produce&quot;,&#10;        suggestion: &quot;Promote tomatoes, cucumbers, berries, and leafy greens&quot;,&#10;        icon: &quot;fas fa-sun&quot;,&#10;        color: &quot;text-orange-600&quot;,&#10;      });&#10;    }&#10;    // Fall harvest (September-November: months 8-10)&#10;    else if (currentMonth &gt;= 8 &amp;&amp; currentMonth &lt;= 10) {&#10;      recommendations.push({&#10;        category: &quot;Fall Harvest&quot;,&#10;        suggestion: &quot;Feature apples, pumpkins, root vegetables, and grains&quot;,&#10;        icon: &quot;fas fa-leaf&quot;,&#10;        color: &quot;text-orange-700&quot;,&#10;      });&#10;    }&#10;    // Winter storage crops (December-February: months 11, 0, 1)&#10;    else if (currentMonth === 11 || currentMonth &lt;= 1) {&#10;      recommendations.push({&#10;        category: &quot;Winter Storage&quot;,&#10;        suggestion:&#10;          &quot;Highlight preserved goods, winter squash, and dried products&quot;,&#10;        icon: &quot;fas fa-snowflake&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;      });&#10;    }&#10;    // Spring planting (March-May: months 2-4)&#10;    else {&#10;      recommendations.push({&#10;        category: &quot;Spring Fresh&quot;,&#10;        suggestion: &quot;Promote fresh herbs, early greens, and spring vegetables&quot;,&#10;        icon: &quot;fas fa-seedling&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;      });&#10;    }&#10;&#10;    return recommendations;&#10;  }, []);&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Today's Overview */}&#10;      &lt;div className=&quot;bg-gradient-to-r from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold&quot;&gt;Good morning, Farmer!&lt;/h2&gt;&#10;            &lt;p className=&quot;opacity-90&quot;&gt;&#10;              Here's what's happening on your farm today&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-right&quot;&gt;&#10;            &lt;p className=&quot;text-sm opacity-75&quot;&gt;&#10;              {new Date().toLocaleDateString()}&#10;            &lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold&quot;&gt;&#10;              {new Date().toLocaleDateString(&quot;en-US&quot;, { weekday: &quot;long&quot; })}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-shopping-cart text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;{todaySummary.ordersCount}&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Orders Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-dollar-sign text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {formatPrice(todaySummary.revenue)}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Revenue Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-users text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {todaySummary.newCustomers}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;New Customers&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-star text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-lg font-bold&quot;&gt;&#10;                  {todaySummary.topProduct?.name || &quot;None&quot;}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Top Product&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Action Items &amp; Quick Tools */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;        {/* Urgent Action Items */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bell text-orange-500 mr-2&quot;&gt;&lt;/i&gt;&#10;              Action Items&#10;            &lt;/h3&gt;&#10;            &lt;span className=&quot;bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;              {&#10;                actionItems.filter(&#10;                  (item) =&gt;&#10;                    item.priority === &quot;critical&quot; || item.priority === &quot;high&quot;,&#10;                ).length&#10;              }{&quot; &quot;}&#10;              urgent&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {actionItems.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-check-circle text-4xl text-green-500 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;All caught up!&lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-500&quot;&gt;&#10;                No urgent action items at the moment.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {actionItems.slice(0, 4).map((item, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className={`${item.bgColor} rounded-lg p-4 border-l-4 border-current`}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                    &lt;div className=&quot;flex items-start&quot;&gt;&#10;                      &lt;i&#10;                        className={`${item.icon} ${item.color} text-lg mr-3 mt-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.title}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                          {item.description}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button&#10;                      className={`${item.color} hover:underline text-sm font-medium`}&#10;                    &gt;&#10;                      {item.action}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Quick Farm Tools */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tools text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Quick Farm Tools&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-3&quot;&gt;&#10;            &lt;Link&#10;              href=&quot;/create&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg hover:bg-green-100 dark:hover:bg-green-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-plus text-green-600 dark:text-green-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Add Product&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={() =&gt; setBulkUpdateModal(true)}&#10;              className=&quot;flex flex-col items-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-layer-group text-blue-600 dark:text-blue-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Bulk Update&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href=&quot;/farmer-orders&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-clipboard-list text-purple-600 dark:text-purple-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Process Orders&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={handleRefresh}&#10;              className=&quot;flex flex-col items-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg hover:bg-orange-100 dark:hover:bg-orange-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-sync-alt text-orange-600 dark:text-orange-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Refresh Data&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Activity Feed &amp; Seasonal Tips */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Real-time Activity Feed */}&#10;        &lt;div className=&quot;lg:col-span-2 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-activity text-green-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Live Farm Activity&#10;          &lt;/h3&gt;&#10;&#10;          {activityFeed.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-calendar-day text-4xl text-gray-400 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                No recent activity&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-4 max-h-80 overflow-y-auto&quot;&gt;&#10;              {activityFeed.map((activity, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className=&quot;flex items-start space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div className={`${activity.color} mt-1`}&gt;&#10;                    &lt;i className={activity.icon}&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {activity.title}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      {activity.description}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-500 mt-1&quot;&gt;&#10;                      {formatDate(activity.time)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  {activity.status &amp;&amp; (&#10;                    &lt;span&#10;                      className={`px-2 py-1 rounded-full text-xs font-medium ${&#10;                        activity.status === &quot;pending&quot;&#10;                          ? &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                          : activity.status === &quot;processing&quot;&#10;                            ? &quot;bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300&quot;&#10;                            : &quot;bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                      }`}&#10;                    &gt;&#10;                      {activity.status}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Seasonal Recommendations */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-lightbulb text-yellow-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Farm Tips&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {seasonalRecommendations.map((rec, index) =&gt; (&#10;              &lt;div&#10;                key={index}&#10;                className=&quot;p-4 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 rounded-lg&quot;&#10;              &gt;&#10;                &lt;div className=&quot;flex items-start&quot;&gt;&#10;                  &lt;i&#10;                    className={`${rec.icon} ${rec.color} text-xl mr-3 mt-1`}&#10;                  &gt;&lt;/i&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {rec.category}&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {rec.suggestion}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg border border-blue-200 dark:border-blue-700&quot;&gt;&#10;              &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-blue-600 mr-2&quot;&gt;&lt;/i&gt;&#10;                Growth Tip&#10;              &lt;/h4&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                Products with photos sell 3x better! Add high-quality images to&#10;                boost your sales.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Enhanced Bulk Update Modal */}&#10;      {bulkUpdateModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 animate-in fade-in duration-300&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-900 rounded-3xl w-full max-w-5xl max-h-[95vh] overflow-hidden shadow-2xl border border-gray-200 dark:border-gray-700 animate-in zoom-in duration-300&quot;&gt;&#10;            {/* Enhanced Header */}&#10;            &lt;div className=&quot;relative bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white&quot;&gt;&#10;              &lt;div className=&quot;absolute inset-0 bg-black/10&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;relative flex justify-between items-center&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-white/20 rounded-xl backdrop-blur-sm&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-layer-group text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-bold&quot;&gt;Bulk Update Products&lt;/h3&gt;&#10;                    &lt;p className=&quot;text-blue-100 mt-1&quot;&gt;&#10;                      Update multiple products at once to save time&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setBulkUpdateModal(false)}&#10;                  className=&quot;p-2 hover:bg-white/20 rounded-xl transition-colors&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;p-8 max-h-[calc(95vh-200px)] overflow-y-auto space-y-8&quot;&gt;&#10;              {/* Step Indicator */}&#10;              &lt;div className=&quot;flex items-center justify-center space-x-4 mb-8&quot;&gt;&#10;                &lt;div&#10;                  className={`flex items-center space-x-2 px-4 py-2 rounded-full transition-all ${&#10;                    selectedProducts.length &gt; 0&#10;                      ? &quot;bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300&quot;&#10;                      : &quot;bg-gray-100 dark:bg-gray-700 text-gray-500&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div&#10;                    className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${&#10;                      selectedProducts.length &gt; 0&#10;                        ? &quot;bg-green-500 text-white&quot;&#10;                        : &quot;bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400&quot;&#10;                    }`}&#10;                  &gt;&#10;                    1&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Select Products&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`w-8 h-0.5 transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp; bulkAction&#10;                      ? &quot;bg-green-500&quot;&#10;                      : &quot;bg-gray-300 dark:bg-gray-600&quot;&#10;                  }`}&#10;                &gt;&lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`flex items-center space-x-2 px-4 py-2 rounded-full transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp; bulkAction&#10;                      ? &quot;bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300&quot;&#10;                      : &quot;bg-gray-100 dark:bg-gray-700 text-gray-500&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div&#10;                    className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${&#10;                      selectedProducts.length &gt; 0 &amp;&amp; bulkAction&#10;                        ? &quot;bg-green-500 text-white&quot;&#10;                        : &quot;bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400&quot;&#10;                    }`}&#10;                  &gt;&#10;                    2&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Choose Action&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`w-8 h-0.5 transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp;&#10;                    bulkAction &amp;&amp;&#10;                    (bulkValues.price ||&#10;                      bulkValues.stock ||&#10;                      bulkValues.status ||&#10;                      bulkValues.category)&#10;                      ? &quot;bg-green-500&quot;&#10;                      : &quot;bg-gray-300 dark:bg-gray-600&quot;&#10;                  }`}&#10;                &gt;&lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`flex items-center space-x-2 px-4 py-2 rounded-full transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp;&#10;                    bulkAction &amp;&amp;&#10;                    (bulkValues.price ||&#10;                      bulkValues.stock ||&#10;                      bulkValues.status ||&#10;                      bulkValues.category)&#10;                      ? &quot;bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300&quot;&#10;                      : &quot;bg-gray-100 dark:bg-gray-700 text-gray-500&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div&#10;                    className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${&#10;                      selectedProducts.length &gt; 0 &amp;&amp;&#10;                      bulkAction &amp;&amp;&#10;                      (bulkValues.price ||&#10;                        bulkValues.stock ||&#10;                        bulkValues.status ||&#10;                        bulkValues.category)&#10;                        ? &quot;bg-green-500 text-white&quot;&#10;                        : &quot;bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400&quot;&#10;                    }`}&#10;                  &gt;&#10;                    3&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Set Values&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Product Selection */}&#10;              &lt;div className=&quot;bg-gray-50 dark:bg-gray-800/50 rounded-2xl p-6&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;div className=&quot;p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-boxes text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Select Products&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {selectedProducts.length} of {products.length} products&#10;                        selected&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    {selectedProducts.length &gt; 0 &amp;&amp; (&#10;                      &lt;div className=&quot;px-3 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-sm font-medium&quot;&gt;&#10;                        {selectedProducts.length} selected&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    &lt;button&#10;                      onClick={selectAllProducts}&#10;                      className=&quot;px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-xl text-sm font-medium transition-colors flex items-center space-x-2&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${&#10;                          selectedProducts.length === products.length&#10;                            ? &quot;fa-minus&quot;&#10;                            : &quot;fa-check-double&quot;&#10;                        }`}&#10;                      &gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {selectedProducts.length === products.length&#10;                          ? &quot;Deselect All&quot;&#10;                          : &quot;Select All&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Products Grid Container with proper spacing and no horizontal scroll */}&#10;                &lt;div className=&quot;mt-8&quot;&gt;&#10;                  &lt;div className=&quot;max-h-80 overflow-y-auto overflow-x-hidden scrollbar-thin scrollbar-track-gray-100 dark:scrollbar-track-gray-800 scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 hover:scrollbar-thumb-gray-400 dark:hover:scrollbar-thumb-gray-500&quot;&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-1&quot;&gt;&#10;                      {products.map((product) =&gt; (&#10;                        &lt;div&#10;                          key={product._id}&#10;                          className={`group relative p-4 border-2 rounded-xl cursor-pointer transition-all duration-200 hover:shadow-lg ${&#10;                            selectedProducts.includes(product._id)&#10;                              ? &quot;border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-md scale-[1.02]&quot;&#10;                              : &quot;border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600&quot;&#10;                          }`}&#10;                          onClick={() =&gt; toggleProductSelection(product._id)}&#10;                        &gt;&#10;                          {/* Selection indicator */}&#10;                          &lt;div&#10;                            className={`absolute -top-2 -right-2 w-6 h-6 rounded-full flex items-center justify-center transition-all ${&#10;                              selectedProducts.includes(product._id)&#10;                                ? &quot;bg-blue-500 text-white scale-110&quot;&#10;                                : &quot;bg-gray-200 dark:bg-gray-600 text-gray-400 group-hover:bg-blue-100 dark:group-hover:bg-blue-900&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;i&#10;                              className={`fas ${&#10;                                selectedProducts.includes(product._id)&#10;                                  ? &quot;fa-check&quot;&#10;                                  : &quot;fa-plus&quot;&#10;                              } text-xs`}&#10;                            &gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                            &lt;div&#10;                              className={`w-12 h-12 rounded-xl flex items-center justify-center transition-all ${&#10;                                selectedProducts.includes(product._id)&#10;                                  ? &quot;bg-blue-100 dark:bg-blue-800 text-blue-600 dark:text-blue-300&quot;&#10;                                  : &quot;bg-gray-100 dark:bg-gray-700 text-gray-400 group-hover:bg-blue-50 dark:group-hover:bg-blue-900/30&quot;&#10;                              }`}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-box text-lg&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                              &lt;p className=&quot;font-semibold text-gray-900 dark:text-white truncate text-sm&quot;&gt;&#10;                                {product.name}&#10;                              &lt;/p&gt;&#10;                              &lt;div className=&quot;flex items-center space-x-2 mt-1&quot;&gt;&#10;                                &lt;span&#10;                                  className={`px-2 py-0.5 rounded-full text-xs font-medium ${&#10;                                    product.stock &gt; 10&#10;                                      ? &quot;bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                                      : product.stock &gt; 0&#10;                                        ? &quot;bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                                        : &quot;bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  {product.stock} in stock&#10;                                &lt;/span&gt;&#10;                                &lt;span className=&quot;text-xs text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                                  {formatPrice(product.price)}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Bulk Action Selection */}&#10;              {selectedProducts.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-magic text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Choose Action&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        Select what you want to update&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#10;                    {[&#10;                      {&#10;                        value: &quot;price&quot;,&#10;                        label: &quot;Update Price&quot;,&#10;                        icon: &quot;fas fa-dollar-sign&quot;,&#10;                        color: &quot;green&quot;,&#10;                        description: &quot;Change product prices&quot;,&#10;                      },&#10;                      {&#10;                        value: &quot;stock&quot;,&#10;                        label: &quot;Update Stock&quot;,&#10;                        icon: &quot;fas fa-box&quot;,&#10;                        color: &quot;blue&quot;,&#10;                        description: &quot;Adjust inventory levels&quot;,&#10;                      },&#10;                      {&#10;                        value: &quot;status&quot;,&#10;                        label: &quot;Update Status&quot;,&#10;                        icon: &quot;fas fa-toggle-on&quot;,&#10;                        color: &quot;purple&quot;,&#10;                        description: &quot;Enable/disable products&quot;,&#10;                      },&#10;                      {&#10;                        value: &quot;category&quot;,&#10;                        label: &quot;Update Category&quot;,&#10;                        icon: &quot;fas fa-tags&quot;,&#10;                        color: &quot;orange&quot;,&#10;                        description: &quot;Change product categories&quot;,&#10;                      },&#10;                    ].map((action) =&gt; (&#10;                      &lt;button&#10;                        key={action.value}&#10;                        onClick={() =&gt; setBulkAction(action.value)}&#10;                        className={`group relative p-6 border-2 rounded-2xl text-center transition-all duration-200 hover:shadow-lg ${&#10;                          bulkAction === action.value&#10;                            ? `border-${action.color}-500 bg-${action.color}-50 dark:bg-${action.color}-900/20 shadow-md scale-[1.02]`&#10;                            : &quot;border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {/* Selection indicator */}&#10;                        &lt;div&#10;                          className={`absolute -top-2 -right-2 w-6 h-6 rounded-full flex items-center justify-center transition-all ${&#10;                            bulkAction === action.value&#10;                              ? `bg-${action.color}-500 text-white scale-110`&#10;                              : &quot;bg-gray-200 dark:bg-gray-600 text-gray-400 group-hover:scale-110&quot;&#10;                          }`}&#10;                        &gt;&#10;                          &lt;i&#10;                            className={`fas ${&#10;                              bulkAction === action.value&#10;                                ? &quot;fa-check&quot;&#10;                                : &quot;fa-plus&quot;&#10;                            } text-xs`}&#10;                          &gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div&#10;                          className={`w-16 h-16 mx-auto mb-4 rounded-2xl flex items-center justify-center transition-all ${&#10;                            bulkAction === action.value&#10;                              ? `bg-${action.color}-100 dark:bg-${action.color}-800 text-${action.color}-600 dark:text-${action.color}-300`&#10;                              : &quot;bg-gray-100 dark:bg-gray-700 text-gray-400 group-hover:bg-gray-200 dark:group-hover:bg-gray-600&quot;&#10;                          }`}&#10;                        &gt;&#10;                          &lt;i className={`${action.icon} text-2xl`}&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h5 className=&quot;font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                          {action.label}&#10;                        &lt;/h5&gt;&#10;                        &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {action.description}&#10;                        &lt;/p&gt;&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Enhanced Input Fields */}&#10;              {bulkAction &amp;&amp; selectedProducts.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-2xl p-6 border border-indigo-200 dark:border-indigo-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-2 bg-indigo-100 dark:bg-indigo-900/30 rounded-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-edit text-indigo-600 dark:text-indigo-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Set New Value&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        This will be applied to all {selectedProducts.length}{&quot; &quot;}&#10;                        selected products&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;max-w-md&quot;&gt;&#10;                    {bulkAction === &quot;price&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-dollar-sign&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          step=&quot;0.01&quot;&#10;                          placeholder=&quot;0.00&quot;&#10;                          value={bulkValues.price}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              price: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Enter the new price for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;&#10;                    {bulkAction === &quot;stock&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          placeholder=&quot;0&quot;&#10;                          value={bulkValues.stock}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              stock: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Enter the new stock quantity for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;&#10;                    {bulkAction === &quot;status&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-toggle-on&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;select&#10;                          value={bulkValues.status}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              status: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        &gt;&#10;                          &lt;option value=&quot;&quot;&gt;Select status&lt;/option&gt;&#10;                          &lt;option value=&quot;active&quot;&gt; Active&lt;/option&gt;&#10;                          &lt;option value=&quot;inactive&quot;&gt; Inactive&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Choose the new status for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;&#10;                    {bulkAction === &quot;category&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-tags&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          placeholder=&quot;Category name&quot;&#10;                          value={bulkValues.category}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              category: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Enter the new category for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Enhanced Footer */}&#10;            &lt;div className=&quot;bg-gray-50 dark:bg-gray-800/50 px-8 py-6 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-center space-y-3 sm:space-y-0&quot;&gt;&#10;                &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  {selectedProducts.length &gt; 0 &amp;&amp;&#10;                  bulkAction &amp;&amp;&#10;                  (bulkValues.price ||&#10;                    bulkValues.stock ||&#10;                    bulkValues.status ||&#10;                    bulkValues.category) ? (&#10;                    &lt;span className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-info-circle text-blue-500&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        Ready to update {selectedProducts.length} products&#10;                      &lt;/span&gt;&#10;                    &lt;/span&gt;&#10;                  ) : (&#10;                    &lt;span&gt;Complete all steps to proceed with bulk update&lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setBulkUpdateModal(false)}&#10;                    className=&quot;px-6 py-3 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors font-medium&quot;&#10;                  &gt;&#10;                    Cancel&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={handleBulkUpdate}&#10;                    disabled={&#10;                      !selectedProducts.length ||&#10;                      !bulkAction ||&#10;                      bulkLoading ||&#10;                      !(&#10;                        bulkValues.price ||&#10;                        bulkValues.stock ||&#10;                        bulkValues.status ||&#10;                        bulkValues.category&#10;                      )&#10;                    }&#10;                    className=&quot;px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-semibold shadow-lg hover:shadow-xl disabled:shadow-none flex items-center space-x-2&quot;&#10;                  &gt;&#10;                    {bulkLoading ? (&#10;                      &lt;&gt;&#10;                        &lt;div className=&quot;w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin&quot;&gt;&lt;/div&gt;&#10;                        &lt;span&gt;Updating Products...&lt;/span&gt;&#10;                      &lt;/&gt;&#10;                    ) : (&#10;                      &lt;&gt;&#10;                        &lt;i className=&quot;fas fa-magic&quot;&gt;&lt;/i&gt;&#10;                        &lt;span&gt;Update {selectedProducts.length} Products&lt;/span&gt;&#10;                      &lt;/&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useMemo } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function DashboardTab({&#10;  orders,&#10;  products,&#10;  formatPrice,&#10;  formatDate,&#10;  handleRefresh,&#10;  updateBulkProductsInCache, // Restore this prop&#10;  bulkUpdateProducts,&#10;}) {&#10;  const router = useRouter();&#10;  const [bulkUpdateModal, setBulkUpdateModal] = useState(false);&#10;  const [selectedProducts, setSelectedProducts] = useState([]);&#10;  const [bulkAction, setBulkAction] = useState(&quot;&quot;);&#10;  const [bulkValues, setBulkValues] = useState({&#10;    price: &quot;&quot;,&#10;    stock: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;  });&#10;  const [bulkLoading, setBulkLoading] = useState(false);&#10;&#10;  // Quick Farm Tools handlers&#10;  const handleQuickTool = (toolType) =&gt; {&#10;    switch (toolType) {&#10;      case &quot;bulk-update&quot;:&#10;        setBulkUpdateModal(true);&#10;        break;&#10;      case &quot;inventory-sync&quot;:&#10;        router.push(&quot;/manage?tab=products&amp;action=inventory&quot;);&#10;        break;&#10;      case &quot;price-optimizer&quot;:&#10;        router.push(&quot;/manage?tab=analytics&amp;tool=pricing&quot;);&#10;        break;&#10;      case &quot;harvest-planner&quot;:&#10;        router.push(&quot;/manage?tab=dashboard&amp;tool=planner&quot;);&#10;        break;&#10;      default:&#10;        break;&#10;    }&#10;  };&#10;&#10;  // Bulk update functionality&#10;  const handleBulkUpdate = async () =&gt; {&#10;    if (!selectedProducts.length || !bulkAction) {&#10;      alert(&quot;Please select products and an action to perform.&quot;);&#10;      return;&#10;    }&#10;&#10;    setBulkLoading(true);&#10;    try {&#10;      const updateData = {};&#10;&#10;      switch (bulkAction) {&#10;        case &quot;price&quot;:&#10;          if (!bulkValues.price) {&#10;            alert(&quot;Please enter a price value.&quot;);&#10;            return;&#10;          }&#10;          updateData.price = parseFloat(bulkValues.price);&#10;          break;&#10;        case &quot;stock&quot;:&#10;          if (!bulkValues.stock) {&#10;            alert(&quot;Please enter a stock value.&quot;);&#10;            return;&#10;          }&#10;          updateData.stock = parseInt(bulkValues.stock);&#10;          break;&#10;        case &quot;status&quot;:&#10;          if (!bulkValues.status) {&#10;            alert(&quot;Please select a status.&quot;);&#10;            return;&#10;          }&#10;          updateData.status = bulkValues.status;&#10;          break;&#10;        case &quot;category&quot;:&#10;          if (!bulkValues.category) {&#10;            alert(&quot;Please enter a category.&quot;);&#10;            return;&#10;          }&#10;          updateData.category = bulkValues.category;&#10;          break;&#10;      }&#10;&#10;      // Use the bulkUpdateProducts function from hook (includes cache invalidation like farmer updates)&#10;      console.log(&quot; [DashboardTab] Calling bulkUpdateProducts...&quot;);&#10;      console.log(&quot; [DashboardTab] Selected products:&quot;, selectedProducts);&#10;      console.log(&quot; [DashboardTab] Update data:&quot;, updateData);&#10;      console.log(&#10;        &quot; [DashboardTab] Current products before update:&quot;,&#10;        products,&#10;      );&#10;&#10;      // DEBUG: Check if selected products are valid IDs&#10;      console.log(&quot; [DashboardTab] Selected product IDs type check:&quot;, {&#10;        selectedProducts: selectedProducts,&#10;        areStrings: selectedProducts.map((id) =&gt; typeof id),&#10;        validObjectIds: selectedProducts.map((id) =&gt; id &amp;&amp; id.length === 24),&#10;        productsInData: products.map((p) =&gt; ({&#10;          id: p._id || p.id,&#10;          name: p.name,&#10;        })),&#10;      });&#10;&#10;      const result = await bulkUpdateProducts(selectedProducts, updateData);&#10;&#10;      console.log(&quot; [DashboardTab] Bulk update result:&quot;, result);&#10;&#10;      if (result.success) {&#10;        console.log(&quot;✅ [DashboardTab] Bulk update API call successful&quot;);&#10;&#10;        alert(&#10;          `Successfully updated ${result.data.updatedCount || 1} products!`,&#10;        );&#10;&#10;        // REMOVED: Don't call handleRefresh() as it overrides optimistic updates&#10;        // The bulkUpdateProducts function already handles cache updates properly&#10;        //&#10;        // // FORCE immediate refresh to ensure dashboard updates&#10;        // console.log(&#10;        //   &quot; [DashboardTab] Forcing immediate refresh after bulk update...&quot;,&#10;        // );&#10;        // console.log(&#10;        //   &quot; [DashboardTab] handleRefresh function exists:&quot;,&#10;        //   !!handleRefresh,&#10;        // );&#10;&#10;        // if (handleRefresh) {&#10;        //   console.log(&quot; [DashboardTab] Calling handleRefresh...&quot;);&#10;        //   await handleRefresh(); // Force refresh dashboard data&#10;        //   console.log(&quot;✅ [DashboardTab] handleRefresh completed&quot;);&#10;        // } else {&#10;        //   console.error(&#10;        //     &quot;❌ [DashboardTab] handleRefresh function not available!&quot;,&#10;        //   );&#10;        // }&#10;&#10;        // // Log products after refresh to see if they changed&#10;        // console.log(&#10;        //   &quot; [DashboardTab] Products after refresh (should update via React state):&quot;,&#10;        // );&#10;        // setTimeout(() =&gt; {&#10;        //   console.log(&#10;        //     &quot; [DashboardTab] Products state after refresh:&quot;,&#10;        //     products.map((p) =&gt; ({&#10;        //       id: p._id,&#10;        //       name: p.name,&#10;        //       stock: p.stock,&#10;        //       price: p.price,&#10;        //       status: p.status,&#10;        //     })),&#10;        //   );&#10;        // }, 1000);&#10;&#10;        // Dispatch custom event to notify products page of bulk update&#10;        window.dispatchEvent(&#10;          new CustomEvent(&quot;productsBulkUpdated&quot;, {&#10;            detail: {&#10;              productIds: selectedProducts,&#10;              updateData: updateData,&#10;              timestamp: Date.now(),&#10;              cacheCleared: result.cacheCleared,&#10;            },&#10;          }),&#10;        );&#10;&#10;        // Also set localStorage flag for cross-tab communication&#10;        localStorage.setItem(&#10;          &quot;productsBulkUpdated&quot;,&#10;          JSON.stringify({&#10;            productIds: selectedProducts,&#10;            updateData: updateData,&#10;            timestamp: Date.now(),&#10;            cacheCleared: result.cacheCleared,&#10;          }),&#10;        );&#10;&#10;        // No need to force refresh - cache invalidation handles it automatically&#10;        // if (handleRefresh) {&#10;        //   handleRefresh(true); // Force refresh&#10;        // }&#10;&#10;        setBulkUpdateModal(false);&#10;        setSelectedProducts([]);&#10;        setBulkAction(&quot;&quot;);&#10;        setBulkValues({ price: &quot;&quot;, stock: &quot;&quot;, status: &quot;&quot;, category: &quot;&quot; });&#10;      } else {&#10;        throw new Error(result.error || &quot;Update failed&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Bulk update error:&quot;, error);&#10;      alert(`Error updating products: ${error.message}`);&#10;    } finally {&#10;      setBulkLoading(false);&#10;    }&#10;  };&#10;&#10;  const toggleProductSelection = (productId) =&gt; {&#10;    setSelectedProducts((prev) =&gt;&#10;      prev.includes(productId)&#10;        ? prev.filter((id) =&gt; id !== productId)&#10;        : [...prev, productId],&#10;    );&#10;  };&#10;&#10;  const selectAllProducts = () =&gt; {&#10;    if (selectedProducts.length === products.length) {&#10;      setSelectedProducts([]);&#10;    } else {&#10;      setSelectedProducts(products.map((p) =&gt; p._id));&#10;    }&#10;  };&#10;&#10;  // Calculate urgent action items&#10;  const actionItems = useMemo(() =&gt; {&#10;    const items = [];&#10;&#10;    // Low stock alerts&#10;    const lowStockProducts = products.filter(&#10;      (p) =&gt; p.stock &lt;= 5 &amp;&amp; p.stock &gt; 0,&#10;    );&#10;    if (lowStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;low-stock&quot;,&#10;        priority: &quot;high&quot;,&#10;        icon: &quot;fas fa-exclamation-triangle&quot;,&#10;        color: &quot;text-red-600&quot;,&#10;        bgColor: &quot;bg-red-50 dark:bg-red-900/20&quot;,&#10;        title: `${lowStockProducts.length} products low on stock`,&#10;        description: &quot;Restock needed to avoid stockouts&quot;,&#10;        action: &quot;View Products&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Out of stock alerts&#10;    const outOfStockProducts = products.filter((p) =&gt; p.stock === 0);&#10;    if (outOfStockProducts.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;out-of-stock&quot;,&#10;        priority: &quot;critical&quot;,&#10;        icon: &quot;fas fa-times-circle&quot;,&#10;        color: &quot;text-red-700&quot;,&#10;        bgColor: &quot;bg-red-100 dark:bg-red-900/30&quot;,&#10;        title: `${outOfStockProducts.length} products out of stock`,&#10;        description: &quot;Products unavailable for purchase&quot;,&#10;        action: &quot;Restock Now&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    // Pending orders&#10;    const pendingOrders = orders.filter((o) =&gt; o.status === &quot;pending&quot;);&#10;    if (pendingOrders.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;pending-orders&quot;,&#10;        priority: &quot;medium&quot;,&#10;        icon: &quot;fas fa-clock&quot;,&#10;        color: &quot;text-yellow-600&quot;,&#10;        bgColor: &quot;bg-yellow-50 dark:bg-yellow-900/20&quot;,&#10;        title: `${pendingOrders.length} orders awaiting processing`,&#10;        description: &quot;New orders need your attention&quot;,&#10;        action: &quot;Process Orders&quot;,&#10;        link: &quot;#orders&quot;,&#10;      });&#10;    }&#10;&#10;    // Products without images&#10;    const productsWithoutImages = products.filter(&#10;      (p) =&gt; !p.images || p.images.length === 0,&#10;    );&#10;    if (productsWithoutImages.length &gt; 0) {&#10;      items.push({&#10;        type: &quot;missing-images&quot;,&#10;        priority: &quot;low&quot;,&#10;        icon: &quot;fas fa-image&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;        bgColor: &quot;bg-blue-50 dark:bg-blue-900/20&quot;,&#10;        title: `${productsWithoutImages.length} products missing images`,&#10;        description: &quot;Add photos to boost sales&quot;,&#10;        action: &quot;Add Images&quot;,&#10;        link: &quot;#products&quot;,&#10;      });&#10;    }&#10;&#10;    return items.sort((a, b) =&gt; {&#10;      const priorityOrder = { critical: 3, high: 2, medium: 1, low: 0 };&#10;      return priorityOrder[b.priority] - priorityOrder[a.priority];&#10;    });&#10;  }, [products, orders]);&#10;&#10;  // Real-time activity feed&#10;  const activityFeed = useMemo(() =&gt; {&#10;    const activities = [];&#10;&#10;    // Recent orders&#10;    orders.slice(0, 5).forEach((order) =&gt; {&#10;      // Extract customer name from various possible fields&#10;      let customerName =&#10;        order.customerName ||&#10;        order.customerInfo?.name ||&#10;        order.shippingAddress?.name ||&#10;        order.billingAddress?.name;&#10;&#10;      // If no name found but we have userId, format it better&#10;      if (!customerName &amp;&amp; order.userId) {&#10;        // Check if userId looks like a MongoDB ObjectId (24 hex characters)&#10;        if (order.userId.match(/^[0-9a-fA-F]{24}$/)) {&#10;          customerName = `Customer ${order.userId.slice(-6).toUpperCase()}`;&#10;        } else {&#10;          customerName = order.userId;&#10;        }&#10;      }&#10;&#10;      // Final fallback&#10;      if (!customerName) {&#10;        customerName = &quot;Anonymous Customer&quot;;&#10;      }&#10;&#10;      activities.push({&#10;        type: &quot;order&quot;,&#10;        icon: &quot;fas fa-shopping-cart&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;        title: `New order from ${customerName}`,&#10;        description: `${order.items?.length || 0} items • ${formatPrice(&#10;          order.total || 0,&#10;        )}`,&#10;        time: order.createdAt,&#10;        status: order.status,&#10;      });&#10;    });&#10;&#10;    return activities&#10;      .sort((a, b) =&gt; new Date(b.time) - new Date(a.time))&#10;      .slice(0, 8);&#10;  }, [orders, formatPrice]);&#10;&#10;  // Today's summary&#10;  const todaySummary = useMemo(() =&gt; {&#10;    const today = new Date().toISOString().split(&quot;T&quot;)[0];&#10;    const todayOrders = orders.filter((order) =&gt; {&#10;      const orderDate = new Date(order.createdAt).toISOString().split(&quot;T&quot;)[0];&#10;      return orderDate === today;&#10;    });&#10;&#10;    const todayRevenue = todayOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    return {&#10;      ordersCount: todayOrders.length,&#10;      revenue: todayRevenue,&#10;      newCustomers: new Set(todayOrders.map((o) =&gt; o.customerEmail)).size,&#10;      topProduct: products.reduce((top, product) =&gt; {&#10;        const productOrdersToday = todayOrders.filter((order) =&gt;&#10;          order.items?.some(&#10;            (item) =&gt;&#10;              item.productId === product._id ||&#10;              item.product?._id === product._id,&#10;          ),&#10;        );&#10;        return productOrdersToday.length &gt; (top?.count || 0)&#10;          ? { ...product, count: productOrdersToday.length }&#10;          : top;&#10;      }, null),&#10;    };&#10;  }, [orders, products]);&#10;&#10;  // Seasonal recommendations&#10;  const seasonalRecommendations = useMemo(() =&gt; {&#10;    const currentMonth = new Date().getMonth();&#10;    const recommendations = [];&#10;&#10;    // Summer fruits and vegetables (June-August: months 5-7)&#10;    if (currentMonth &gt;= 5 &amp;&amp; currentMonth &lt;= 7) {&#10;      recommendations.push({&#10;        category: &quot;Summer Produce&quot;,&#10;        suggestion: &quot;Promote tomatoes, cucumbers, berries, and leafy greens&quot;,&#10;        icon: &quot;fas fa-sun&quot;,&#10;        color: &quot;text-orange-600&quot;,&#10;      });&#10;    }&#10;    // Fall harvest (September-November: months 8-10)&#10;    else if (currentMonth &gt;= 8 &amp;&amp; currentMonth &lt;= 10) {&#10;      recommendations.push({&#10;        category: &quot;Fall Harvest&quot;,&#10;        suggestion: &quot;Feature apples, pumpkins, root vegetables, and grains&quot;,&#10;        icon: &quot;fas fa-leaf&quot;,&#10;        color: &quot;text-orange-700&quot;,&#10;      });&#10;    }&#10;    // Winter storage crops (December-February: months 11, 0, 1)&#10;    else if (currentMonth === 11 || currentMonth &lt;= 1) {&#10;      recommendations.push({&#10;        category: &quot;Winter Storage&quot;,&#10;        suggestion:&#10;          &quot;Highlight preserved goods, winter squash, and dried products&quot;,&#10;        icon: &quot;fas fa-snowflake&quot;,&#10;        color: &quot;text-blue-600&quot;,&#10;      });&#10;    }&#10;    // Spring planting (March-May: months 2-4)&#10;    else {&#10;      recommendations.push({&#10;        category: &quot;Spring Fresh&quot;,&#10;        suggestion: &quot;Promote fresh herbs, early greens, and spring vegetables&quot;,&#10;        icon: &quot;fas fa-seedling&quot;,&#10;        color: &quot;text-green-600&quot;,&#10;      });&#10;    }&#10;&#10;    return recommendations;&#10;  }, []);&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Today's Overview */}&#10;      &lt;div className=&quot;bg-gradient-to-r from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold&quot;&gt;Good morning, Farmer!&lt;/h2&gt;&#10;            &lt;p className=&quot;opacity-90&quot;&gt;&#10;              Here's what's happening on your farm today&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-right&quot;&gt;&#10;            &lt;p className=&quot;text-sm opacity-75&quot;&gt;&#10;              {new Date().toLocaleDateString()}&#10;            &lt;/p&gt;&#10;            &lt;p className=&quot;text-lg font-semibold&quot;&gt;&#10;              {new Date().toLocaleDateString(&quot;en-US&quot;, { weekday: &quot;long&quot; })}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4&quot;&gt;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-shopping-cart text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;{todaySummary.ordersCount}&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Orders Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-dollar-sign text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {formatPrice(todaySummary.revenue)}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Revenue Today&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-users text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-2xl font-bold&quot;&gt;&#10;                  {todaySummary.newCustomers}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;New Customers&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white/10 rounded-lg p-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;i className=&quot;fas fa-star text-2xl mr-3&quot;&gt;&lt;/i&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-lg font-bold&quot;&gt;&#10;                  {todaySummary.topProduct?.name || &quot;None&quot;}&#10;                &lt;/p&gt;&#10;                &lt;p className=&quot;text-sm opacity-75&quot;&gt;Top Product&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Action Items &amp; Quick Tools */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;        {/* Urgent Action Items */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;              &lt;i className=&quot;fas fa-bell text-orange-500 mr-2&quot;&gt;&lt;/i&gt;&#10;              Action Items&#10;            &lt;/h3&gt;&#10;            &lt;span className=&quot;bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;              {&#10;                actionItems.filter(&#10;                  (item) =&gt;&#10;                    item.priority === &quot;critical&quot; || item.priority === &quot;high&quot;,&#10;                ).length&#10;              }{&quot; &quot;}&#10;              urgent&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {actionItems.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-check-circle text-4xl text-green-500 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;All caught up!&lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 dark:text-gray-500&quot;&gt;&#10;                No urgent action items at the moment.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {actionItems.slice(0, 4).map((item, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className={`${item.bgColor} rounded-lg p-4 border-l-4 border-current`}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                    &lt;div className=&quot;flex items-start&quot;&gt;&#10;                      &lt;i&#10;                        className={`${item.icon} ${item.color} text-lg mr-3 mt-1`}&#10;                      &gt;&lt;/i&gt;&#10;                      &lt;div&gt;&#10;                        &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                          {item.title}&#10;                        &lt;/h4&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                          {item.description}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button&#10;                      className={`${item.color} hover:underline text-sm font-medium`}&#10;                    &gt;&#10;                      {item.action}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Quick Farm Tools */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-tools text-blue-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Quick Farm Tools&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-3&quot;&gt;&#10;            &lt;Link&#10;              href=&quot;/create&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg hover:bg-green-100 dark:hover:bg-green-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-plus text-green-600 dark:text-green-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Add Product&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={() =&gt; setBulkUpdateModal(true)}&#10;              className=&quot;flex flex-col items-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-layer-group text-blue-600 dark:text-blue-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Bulk Update&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;&#10;            &lt;Link&#10;              href=&quot;/farmer-orders&quot;&#10;              className=&quot;flex flex-col items-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-clipboard-list text-purple-600 dark:text-purple-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Process Orders&#10;              &lt;/span&gt;&#10;            &lt;/Link&gt;&#10;&#10;            &lt;button&#10;              onClick={handleRefresh}&#10;              className=&quot;flex flex-col items-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg hover:bg-orange-100 dark:hover:bg-orange-900/40 transition text-center&quot;&#10;            &gt;&#10;              &lt;i className=&quot;fas fa-sync-alt text-orange-600 dark:text-orange-400 text-2xl mb-2&quot;&gt;&lt;/i&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                Refresh Data&#10;              &lt;/span&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Activity Feed &amp; Seasonal Tips */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Real-time Activity Feed */}&#10;        &lt;div className=&quot;lg:col-span-2 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-activity text-green-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Live Farm Activity&#10;          &lt;/h3&gt;&#10;&#10;          {activityFeed.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;i className=&quot;fas fa-calendar-day text-4xl text-gray-400 mb-3&quot;&gt;&lt;/i&gt;&#10;              &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;&#10;                No recent activity&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-4 max-h-80 overflow-y-auto&quot;&gt;&#10;              {activityFeed.map((activity, index) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className=&quot;flex items-start space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg&quot;&#10;                &gt;&#10;                  &lt;div className={`${activity.color} mt-1`}&gt;&#10;                    &lt;i className={activity.icon}&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {activity.title}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                      {activity.description}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-500 mt-1&quot;&gt;&#10;                      {formatDate(activity.time)}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  {activity.status &amp;&amp; (&#10;                    &lt;span&#10;                      className={`px-2 py-1 rounded-full text-xs font-medium ${&#10;                        activity.status === &quot;pending&quot;&#10;                          ? &quot;bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                          : activity.status === &quot;processing&quot;&#10;                            ? &quot;bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300&quot;&#10;                            : &quot;bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                      }`}&#10;                    &gt;&#10;                      {activity.status}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Seasonal Recommendations */}&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold text-gray-900 dark:text-white mb-4&quot;&gt;&#10;            &lt;i className=&quot;fas fa-lightbulb text-yellow-500 mr-2&quot;&gt;&lt;/i&gt;&#10;            Farm Tips&#10;          &lt;/h3&gt;&#10;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {seasonalRecommendations.map((rec, index) =&gt; (&#10;              &lt;div&#10;                key={index}&#10;                className=&quot;p-4 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 rounded-lg&quot;&#10;              &gt;&#10;                &lt;div className=&quot;flex items-start&quot;&gt;&#10;                  &lt;i&#10;                    className={`${rec.icon} ${rec.color} text-xl mr-3 mt-1`}&#10;                  &gt;&lt;/i&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white&quot;&gt;&#10;                      {rec.category}&#10;                    &lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                      {rec.suggestion}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg border border-blue-200 dark:border-blue-700&quot;&gt;&#10;              &lt;h4 className=&quot;font-medium text-gray-900 dark:text-white flex items-center&quot;&gt;&#10;                &lt;i className=&quot;fas fa-chart-line text-blue-600 mr-2&quot;&gt;&lt;/i&gt;&#10;                Growth Tip&#10;              &lt;/h4&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;                Products with photos sell 3x better! Add high-quality images to&#10;                boost your sales.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Enhanced Bulk Update Modal */}&#10;      {bulkUpdateModal &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 animate-in fade-in duration-300&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-gray-900 rounded-3xl w-full max-w-5xl max-h-[95vh] overflow-hidden shadow-2xl border border-gray-200 dark:border-gray-700 animate-in zoom-in duration-300&quot;&gt;&#10;            {/* Enhanced Header */}&#10;            &lt;div className=&quot;relative bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white&quot;&gt;&#10;              &lt;div className=&quot;absolute inset-0 bg-black/10&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;relative flex justify-between items-center&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;div className=&quot;p-3 bg-white/20 rounded-xl backdrop-blur-sm&quot;&gt;&#10;                    &lt;i className=&quot;fas fa-layer-group text-2xl&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-2xl font-bold&quot;&gt;Bulk Update Products&lt;/h3&gt;&#10;                    &lt;p className=&quot;text-blue-100 mt-1&quot;&gt;&#10;                      Update multiple products at once to save time&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setBulkUpdateModal(false)}&#10;                  className=&quot;p-2 hover:bg-white/20 rounded-xl transition-colors&quot;&#10;                &gt;&#10;                  &lt;i className=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;p-8 max-h-[calc(95vh-200px)] overflow-y-auto space-y-8&quot;&gt;&#10;              {/* Step Indicator */}&#10;              &lt;div className=&quot;flex items-center justify-center space-x-4 mb-8&quot;&gt;&#10;                &lt;div&#10;                  className={`flex items-center space-x-2 px-4 py-2 rounded-full transition-all ${&#10;                    selectedProducts.length &gt; 0&#10;                      ? &quot;bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300&quot;&#10;                      : &quot;bg-gray-100 dark:bg-gray-700 text-gray-500&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div&#10;                    className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${&#10;                      selectedProducts.length &gt; 0&#10;                        ? &quot;bg-green-500 text-white&quot;&#10;                        : &quot;bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400&quot;&#10;                    }`}&#10;                  &gt;&#10;                    1&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Select Products&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`w-8 h-0.5 transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp; bulkAction&#10;                      ? &quot;bg-green-500&quot;&#10;                      : &quot;bg-gray-300 dark:bg-gray-600&quot;&#10;                  }`}&#10;                &gt;&lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`flex items-center space-x-2 px-4 py-2 rounded-full transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp; bulkAction&#10;                      ? &quot;bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300&quot;&#10;                      : &quot;bg-gray-100 dark:bg-gray-700 text-gray-500&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div&#10;                    className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${&#10;                      selectedProducts.length &gt; 0 &amp;&amp; bulkAction&#10;                        ? &quot;bg-green-500 text-white&quot;&#10;                        : &quot;bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400&quot;&#10;                    }`}&#10;                  &gt;&#10;                    2&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Choose Action&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`w-8 h-0.5 transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp;&#10;                    bulkAction &amp;&amp;&#10;                    (bulkValues.price ||&#10;                      bulkValues.stock ||&#10;                      bulkValues.status ||&#10;                      bulkValues.category)&#10;                      ? &quot;bg-green-500&quot;&#10;                      : &quot;bg-gray-300 dark:bg-gray-600&quot;&#10;                  }`}&#10;                &gt;&lt;/div&gt;&#10;&#10;                &lt;div&#10;                  className={`flex items-center space-x-2 px-4 py-2 rounded-full transition-all ${&#10;                    selectedProducts.length &gt; 0 &amp;&amp;&#10;                    bulkAction &amp;&amp;&#10;                    (bulkValues.price ||&#10;                      bulkValues.stock ||&#10;                      bulkValues.status ||&#10;                      bulkValues.category)&#10;                      ? &quot;bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300&quot;&#10;                      : &quot;bg-gray-100 dark:bg-gray-700 text-gray-500&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;div&#10;                    className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${&#10;                      selectedProducts.length &gt; 0 &amp;&amp;&#10;                      bulkAction &amp;&amp;&#10;                      (bulkValues.price ||&#10;                        bulkValues.stock ||&#10;                        bulkValues.status ||&#10;                        bulkValues.category)&#10;                        ? &quot;bg-green-500 text-white&quot;&#10;                        : &quot;bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400&quot;&#10;                    }`}&#10;                  &gt;&#10;                    3&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;Set Values&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Product Selection */}&#10;              &lt;div className=&quot;bg-gray-50 dark:bg-gray-800/50 rounded-2xl p-6&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;div className=&quot;p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-boxes text-blue-600 dark:text-blue-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Select Products&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        {selectedProducts.length} of {products.length} products&#10;                        selected&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    {selectedProducts.length &gt; 0 &amp;&amp; (&#10;                      &lt;div className=&quot;px-3 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-sm font-medium&quot;&gt;&#10;                        {selectedProducts.length} selected&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    &lt;button&#10;                      onClick={selectAllProducts}&#10;                      className=&quot;px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-xl text-sm font-medium transition-colors flex items-center space-x-2&quot;&#10;                    &gt;&#10;                      &lt;i&#10;                        className={`fas ${&#10;                          selectedProducts.length === products.length&#10;                            ? &quot;fa-minus&quot;&#10;                            : &quot;fa-check-double&quot;&#10;                        }`}&#10;                      &gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        {selectedProducts.length === products.length&#10;                          ? &quot;Deselect All&quot;&#10;                          : &quot;Select All&quot;}&#10;                      &lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Products Grid Container with proper spacing and no horizontal scroll */}&#10;                &lt;div className=&quot;mt-8&quot;&gt;&#10;                  &lt;div className=&quot;max-h-80 overflow-y-auto overflow-x-hidden scrollbar-thin scrollbar-track-gray-100 dark:scrollbar-track-gray-800 scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 hover:scrollbar-thumb-gray-400 dark:hover:scrollbar-thumb-gray-500&quot;&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-1&quot;&gt;&#10;                      {products.map((product) =&gt; (&#10;                        &lt;div&#10;                          key={product._id}&#10;                          className={`group relative p-4 border-2 rounded-xl cursor-pointer transition-all duration-200 hover:shadow-lg ${&#10;                            selectedProducts.includes(product._id)&#10;                              ? &quot;border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-md scale-[1.02]&quot;&#10;                              : &quot;border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600&quot;&#10;                          }`}&#10;                          onClick={() =&gt; toggleProductSelection(product._id)}&#10;                        &gt;&#10;                          {/* Selection indicator */}&#10;                          &lt;div&#10;                            className={`absolute -top-2 -right-2 w-6 h-6 rounded-full flex items-center justify-center transition-all ${&#10;                              selectedProducts.includes(product._id)&#10;                                ? &quot;bg-blue-500 text-white scale-110&quot;&#10;                                : &quot;bg-gray-200 dark:bg-gray-600 text-gray-400 group-hover:bg-blue-100 dark:group-hover:bg-blue-900&quot;&#10;                            }`}&#10;                          &gt;&#10;                            &lt;i&#10;                              className={`fas ${&#10;                                selectedProducts.includes(product._id)&#10;                                  ? &quot;fa-check&quot;&#10;                                  : &quot;fa-plus&quot;&#10;                              } text-xs`}&#10;                            &gt;&lt;/i&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                            &lt;div&#10;                              className={`w-12 h-12 rounded-xl flex items-center justify-center transition-all ${&#10;                                selectedProducts.includes(product._id)&#10;                                  ? &quot;bg-blue-100 dark:bg-blue-800 text-blue-600 dark:text-blue-300&quot;&#10;                                  : &quot;bg-gray-100 dark:bg-gray-700 text-gray-400 group-hover:bg-blue-50 dark:group-hover:bg-blue-900/30&quot;&#10;                              }`}&#10;                            &gt;&#10;                              &lt;i className=&quot;fas fa-box text-lg&quot;&gt;&lt;/i&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                              &lt;p className=&quot;font-semibold text-gray-900 dark:text-white truncate text-sm&quot;&gt;&#10;                                {product.name}&#10;                              &lt;/p&gt;&#10;                              &lt;div className=&quot;flex items-center space-x-2 mt-1&quot;&gt;&#10;                                &lt;span&#10;                                  className={`px-2 py-0.5 rounded-full text-xs font-medium ${&#10;                                    product.stock &gt; 10&#10;                                      ? &quot;bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300&quot;&#10;                                      : product.stock &gt; 0&#10;                                        ? &quot;bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300&quot;&#10;                                        : &quot;bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300&quot;&#10;                                  }`}&#10;                                &gt;&#10;                                  {product.stock} in stock&#10;                                &lt;/span&gt;&#10;                                &lt;span className=&quot;text-xs text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                                  {formatPrice(product.price)}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Enhanced Bulk Action Selection */}&#10;              {selectedProducts.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-magic text-purple-600 dark:text-purple-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Choose Action&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        Select what you want to update&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4&quot;&gt;&#10;                    {[&#10;                      {&#10;                        value: &quot;price&quot;,&#10;                        label: &quot;Update Price&quot;,&#10;                        icon: &quot;fas fa-dollar-sign&quot;,&#10;                        color: &quot;green&quot;,&#10;                        description: &quot;Change product prices&quot;,&#10;                      },&#10;                      {&#10;                        value: &quot;stock&quot;,&#10;                        label: &quot;Update Stock&quot;,&#10;                        icon: &quot;fas fa-box&quot;,&#10;                        color: &quot;blue&quot;,&#10;                        description: &quot;Adjust inventory levels&quot;,&#10;                      },&#10;                      {&#10;                        value: &quot;status&quot;,&#10;                        label: &quot;Update Status&quot;,&#10;                        icon: &quot;fas fa-toggle-on&quot;,&#10;                        color: &quot;purple&quot;,&#10;                        description: &quot;Enable/disable products&quot;,&#10;                      },&#10;                      {&#10;                        value: &quot;category&quot;,&#10;                        label: &quot;Update Category&quot;,&#10;                        icon: &quot;fas fa-tags&quot;,&#10;                        color: &quot;orange&quot;,&#10;                        description: &quot;Change product categories&quot;,&#10;                      },&#10;                    ].map((action) =&gt; (&#10;                      &lt;button&#10;                        key={action.value}&#10;                        onClick={() =&gt; setBulkAction(action.value)}&#10;                        className={`group relative p-6 border-2 rounded-2xl text-center transition-all duration-200 hover:shadow-lg ${&#10;                          bulkAction === action.value&#10;                            ? `border-${action.color}-500 bg-${action.color}-50 dark:bg-${action.color}-900/20 shadow-md scale-[1.02]`&#10;                            : &quot;border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {/* Selection indicator */}&#10;                        &lt;div&#10;                          className={`absolute -top-2 -right-2 w-6 h-6 rounded-full flex items-center justify-center transition-all ${&#10;                            bulkAction === action.value&#10;                              ? `bg-${action.color}-500 text-white scale-110`&#10;                              : &quot;bg-gray-200 dark:bg-gray-600 text-gray-400 group-hover:scale-110&quot;&#10;                          }`}&#10;                        &gt;&#10;                          &lt;i&#10;                            className={`fas ${&#10;                              bulkAction === action.value&#10;                                ? &quot;fa-check&quot;&#10;                                : &quot;fa-plus&quot;&#10;                            } text-xs`}&#10;                          &gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div&#10;                          className={`w-16 h-16 mx-auto mb-4 rounded-2xl flex items-center justify-center transition-all ${&#10;                            bulkAction === action.value&#10;                              ? `bg-${action.color}-100 dark:bg-${action.color}-800 text-${action.color}-600 dark:text-${action.color}-300`&#10;                              : &quot;bg-gray-100 dark:bg-gray-700 text-gray-400 group-hover:bg-gray-200 dark:group-hover:bg-gray-600&quot;&#10;                          }`}&#10;                        &gt;&#10;                          &lt;i className={`${action.icon} text-2xl`}&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h5 className=&quot;font-bold text-gray-900 dark:text-white mb-2&quot;&gt;&#10;                          {action.label}&#10;                        &lt;/h5&gt;&#10;                        &lt;p className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          {action.description}&#10;                        &lt;/p&gt;&#10;                      &lt;/button&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Enhanced Input Fields */}&#10;              {bulkAction &amp;&amp; selectedProducts.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-2xl p-6 border border-indigo-200 dark:border-indigo-800&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;                    &lt;div className=&quot;p-2 bg-indigo-100 dark:bg-indigo-900/30 rounded-lg&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-edit text-indigo-600 dark:text-indigo-400&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;h4 className=&quot;text-lg font-bold text-gray-900 dark:text-white&quot;&gt;&#10;                        Set New Value&#10;                      &lt;/h4&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                        This will be applied to all {selectedProducts.length}{&quot; &quot;}&#10;                        selected products&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;max-w-md&quot;&gt;&#10;                    {bulkAction === &quot;price&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-dollar-sign&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          step=&quot;0.01&quot;&#10;                          placeholder=&quot;0.00&quot;&#10;                          value={bulkValues.price}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              price: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Enter the new price for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;&#10;                    {bulkAction === &quot;stock&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-box&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;input&#10;                          type=&quot;number&quot;&#10;                          placeholder=&quot;0&quot;&#10;                          value={bulkValues.stock}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              stock: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Enter the new stock quantity for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;&#10;                    {bulkAction === &quot;status&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-toggle-on&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;select&#10;                          value={bulkValues.status}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              status: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        &gt;&#10;                          &lt;option value=&quot;&quot;&gt;Select status&lt;/option&gt;&#10;                          &lt;option value=&quot;active&quot;&gt; Active&lt;/option&gt;&#10;                          &lt;option value=&quot;inactive&quot;&gt; Inactive&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Choose the new status for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;&#10;                    {bulkAction === &quot;category&quot; &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500&quot;&gt;&#10;                          &lt;i className=&quot;fas fa-tags&quot;&gt;&lt;/i&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          placeholder=&quot;Category name&quot;&#10;                          value={bulkValues.category}&#10;                          onChange={(e) =&gt;&#10;                            setBulkValues((prev) =&gt; ({&#10;                              ...prev,&#10;                              category: e.target.value,&#10;                            }))&#10;                          }&#10;                          className=&quot;w-full pl-10 pr-4 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white text-lg font-semibold transition-all&quot;&#10;                        /&gt;&#10;                        &lt;div className=&quot;mt-2 text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                          Enter the new category for all selected products&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Enhanced Footer */}&#10;            &lt;div className=&quot;bg-gray-50 dark:bg-gray-800/50 px-8 py-6 border-t border-gray-200 dark:border-gray-700&quot;&gt;&#10;              &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-center space-y-3 sm:space-y-0&quot;&gt;&#10;                &lt;div className=&quot;text-sm text-gray-600 dark:text-gray-400&quot;&gt;&#10;                  {selectedProducts.length &gt; 0 &amp;&amp;&#10;                  bulkAction &amp;&amp;&#10;                  (bulkValues.price ||&#10;                    bulkValues.stock ||&#10;                    bulkValues.status ||&#10;                    bulkValues.category) ? (&#10;                    &lt;span className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;i className=&quot;fas fa-info-circle text-blue-500&quot;&gt;&lt;/i&gt;&#10;                      &lt;span&gt;&#10;                        Ready to update {selectedProducts.length} products&#10;                      &lt;/span&gt;&#10;                    &lt;/span&gt;&#10;                  ) : (&#10;                    &lt;span&gt;Complete all steps to proceed with bulk update&lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setBulkUpdateModal(false)}&#10;                    className=&quot;px-6 py-3 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors font-medium&quot;&#10;                  &gt;&#10;                    Cancel&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={handleBulkUpdate}&#10;                    disabled={&#10;                      !selectedProducts.length ||&#10;                      !bulkAction ||&#10;                      bulkLoading ||&#10;                      !(&#10;                        bulkValues.price ||&#10;                        bulkValues.stock ||&#10;                        bulkValues.status ||&#10;                        bulkValues.category&#10;                      )&#10;                    }&#10;                    className=&quot;px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-semibold shadow-lg hover:shadow-xl disabled:shadow-none flex items-center space-x-2&quot;&#10;                  &gt;&#10;                    {bulkLoading ? (&#10;                      &lt;&gt;&#10;                        &lt;div className=&quot;w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin&quot;&gt;&lt;/div&gt;&#10;                        &lt;span&gt;Updating Products...&lt;/span&gt;&#10;                      &lt;/&gt;&#10;                    ) : (&#10;                      &lt;&gt;&#10;                        &lt;i className=&quot;fas fa-magic&quot;&gt;&lt;/i&gt;&#10;                        &lt;span&gt;Update {selectedProducts.length} Products&lt;/span&gt;&#10;                      &lt;/&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-old-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-old-reviews.js" />
              <option name="updatedContent" value="// Debug why old products with reviews aren't showing ratings on products page&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function debugOldProductReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  console.log(' Debugging old product reviews...\n');&#10;  &#10;  // Get all reviews&#10;  const allReviews = await db.collection('reviews').find({}).toArray();&#10;  console.log(` Total reviews in database: ${allReviews.length}`);&#10;  &#10;  // Get sample of old products (first 5)&#10;  const oldProducts = await db.collection('products').find({}).limit(5).toArray();&#10;  console.log(` Checking first 5 products:\n`);&#10;  &#10;  for (const product of oldProducts) {&#10;    const productId = product._id.toString();&#10;    const productReviews = allReviews.filter(review =&gt; review.productId === productId);&#10;    &#10;    console.log(`Product: ${product.name} (ID: ${productId})`);&#10;    console.log(`  Reviews found: ${productReviews.length}`);&#10;    if (productReviews.length &gt; 0) {&#10;      console.log(`  Sample review: ${productReviews[0].comment?.substring(0, 50)}...`);&#10;      console.log(`  Review rating: ${productReviews[0].rating}`);&#10;    }&#10;    console.log('');&#10;  }&#10;  &#10;  // Check the structure of all reviews&#10;  console.log(' All review product IDs:');&#10;  const reviewProductIds = [...new Set(allReviews.map(r =&gt; r.productId))];&#10;  reviewProductIds.forEach(id =&gt; {&#10;    const count = allReviews.filter(r =&gt; r.productId === id).length;&#10;    console.log(`  ${id}: ${count} reviews`);&#10;  });&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugOldProductReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="// Quick debug script to check reviews and products&#10;const { MongoClient } = require('mongodb');&#10;&#10;async function debugReviews() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  // Get sample products&#10;  const products = await db.collection('products').find({}).limit(3).toArray();&#10;  console.log('Sample products:');&#10;  products.forEach(p =&gt; console.log(`- ${p.name} (ID: ${p._id})`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Get sample reviews&#10;  const reviews = await db.collection('reviews').find({}).limit(5).toArray();&#10;  console.log('Sample reviews:');&#10;  reviews.forEach(r =&gt; console.log(`- Product ID: ${r.productId}, Rating: ${r.rating}, Comment: ${r.comment?.substring(0, 30)}...`));&#10;  &#10;  console.log('\n');&#10;  &#10;  // Check for ID matches&#10;  const productIds = products.map(p =&gt; p._id.toString());&#10;  const reviewProductIds = reviews.map(r =&gt; r.productId);&#10;  console.log('Product IDs:', productIds);&#10;  console.log('Review Product IDs:', reviewProductIds);&#10;  &#10;  const matches = productIds.filter(pid =&gt; reviewProductIds.includes(pid));&#10;  console.log('Matching IDs:', matches);&#10;  &#10;  await client.close();&#10;}&#10;&#10;debugReviews().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix-reviews.js" />
              <option name="originalContent" value="  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}&#10;" />
              <option name="updatedContent" value="// Check and fix review mess - remove duplicate reviews added by mistake&#10;const { MongoClient, ObjectId } = require(&quot;mongodb&quot;);&#10;&#10;async function fixReviewMess() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  console.log(&quot; Analyzing review situation...&quot;);&#10;&#10;  // Get all reviews&#10;  const allReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(`Total reviews in database: ${allReviews.length}`);&#10;&#10;  // Group reviews by product ID&#10;  const reviewsByProduct = {};&#10;  allReviews.forEach((review) =&gt; {&#10;    if (!reviewsByProduct[review.productId]) {&#10;      reviewsByProduct[review.productId] = [];&#10;    }&#10;    reviewsByProduct[review.productId].push(review);&#10;  });&#10;&#10;  console.log(&quot;\n Reviews per product:&quot;);&#10;  Object.entries(reviewsByProduct).forEach(([productId, reviews]) =&gt; {&#10;    const product = reviews[0]; // Just to get some context&#10;    console.log(`Product ID ${productId}: ${reviews.length} reviews`);&#10;&#10;    // Show reviewers to identify duplicates&#10;    const reviewers = reviews.map((r) =&gt; r.reviewer).join(&quot;, &quot;);&#10;    console.log(`  Reviewers: ${reviewers}`);&#10;&#10;    // Check for suspicious patterns (our sample review names)&#10;    const sampleReviewers = [&#10;      &quot;John Doe&quot;,&#10;      &quot;Jane Smith&quot;,&#10;      &quot;Mike Johnson&quot;,&#10;      &quot;Sarah Wilson&quot;,&#10;      &quot;David Brown&quot;,&#10;    ];&#10;    const hasSampleReviews = reviews.some((r) =&gt;&#10;      sampleReviewers.includes(r.reviewer),&#10;    );&#10;    if (hasSampleReviews) {&#10;      console.log(&#10;        `  ⚠️ This product has sample reviews that might need removal`,&#10;      );&#10;    }&#10;    console.log(&quot;&quot;);&#10;  });&#10;&#10;  // Ask what to do&#10;  console.log(&quot;\n What would you like to do?&quot;);&#10;  console.log(&#10;    &quot;1. Remove all reviews with sample reviewer names (John Doe, Jane Smith, etc.)&quot;,&#10;  );&#10;  console.log(&quot;2. Remove reviews created in the last hour (recent additions)&quot;);&#10;  console.log(&#10;    &quot;3. Show me the oldest vs newest reviews to identify which are original&quot;,&#10;  );&#10;  console.log(&quot;\nRun with parameter: node fix-reviews.js [1|2|3]&quot;);&#10;&#10;  await client.close();&#10;}&#10;&#10;// Handle command line arguments&#10;const action = process.argv[2];&#10;&#10;if (action === &quot;1&quot;) {&#10;  removeSampleReviews();&#10;} else if (action === &quot;2&quot;) {&#10;  removeRecentReviews();&#10;} else if (action === &quot;3&quot;) {&#10;  showReviewTimeline();&#10;} else {&#10;  fixReviewMess().catch(console.error);&#10;}&#10;&#10;async function removeSampleReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const sampleReviewers = [&#10;    &quot;John Doe&quot;,&#10;    &quot;Jane Smith&quot;,&#10;    &quot;Mike Johnson&quot;,&#10;    &quot;Sarah Wilson&quot;,&#10;    &quot;David Brown&quot;,&#10;  ];&#10;&#10;  console.log(&quot;️ Removing sample reviews...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    reviewer: { $in: sampleReviewers },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} sample reviews`);&#10;&#10;  // Check what's left&#10;  const remainingReviews = await db.collection(&quot;reviews&quot;).find({}).toArray();&#10;  console.log(` Remaining reviews: ${remainingReviews.length}`);&#10;  console.log(&quot;Your original reviews:&quot;);&#10;  remainingReviews.forEach((r) =&gt;&#10;    console.log(`- ${r.reviewer || &quot;Anonymous&quot;}: ${r.comment?.substring(0, 50)}...`),&#10;  );&#10;&#10;  await client.close();&#10;}&#10;&#10;async function removeRecentReviews() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);&#10;&#10;  console.log(&quot;️ Removing reviews created in the last hour...&quot;);&#10;  const result = await db.collection(&quot;reviews&quot;).deleteMany({&#10;    createdAt: { $gte: oneHourAgo },&#10;  });&#10;&#10;  console.log(`✅ Removed ${result.deletedCount} recent reviews`);&#10;  await client.close();&#10;}&#10;&#10;async function showReviewTimeline() {&#10;  const client = new MongoClient(&quot;mongodb://localhost:27017&quot;);&#10;  await client.connect();&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;&#10;  const reviews = await db&#10;    .collection(&quot;reviews&quot;)&#10;    .find({})&#10;    .sort({ createdAt: 1 })&#10;    .toArray();&#10;&#10;  console.log(&quot;\n Review timeline (oldest to newest):&quot;);&#10;  reviews.forEach((review, index) =&gt; {&#10;    console.log(&#10;      `${index + 1}. ${review.createdAt.toISOString()} - ${review.reviewer} - ${review.comment?.substring(0, 50)}...`,&#10;    );&#10;  });&#10;&#10;  await client.close();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hooks/useDashboardData.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hooks/useDashboardData.js" />
              <option name="originalContent" value="// hooks/useDashboardData.js&#10;&quot;use client&quot;;&#10;&#10;import { useQuery, useQueryClient } from &quot;@tanstack/react-query&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { apiService } from &quot;@/lib/api-service&quot;;&#10;import globalCache from &quot;@/lib/cache&quot;;&#10;&#10;export function useDashboardData() {&#10;  const { data: session } = useSession();&#10;  const queryClient = useQueryClient();&#10;&#10;  const getUserIdentifiers = () =&gt; {&#10;    if (!session?.user) return null;&#10;    const user = session.user;&#10;    return {&#10;      userId: user.userId || user.id || user._id,&#10;      userEmail: user.email,&#10;    };&#10;  };&#10;&#10;  const userIds = getUserIdentifiers();&#10;&#10;  const { data, isLoading, error, refetch, isRefetching } = useQuery({&#10;    queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;    queryFn: async () =&gt; {&#10;      console.log(&quot; Dashboard query executing - fetching fresh data...&quot;);&#10;&#10;      // FIX: Pass farmer filtering parameters to get only THIS farmer's products AND orders&#10;      const productsParams = {&#10;        includeInactive: true,&#10;        // Filter by farmer using their email or ID&#10;        farmerEmail: userIds?.userEmail,&#10;        // Remove limit to get all farmer's products (not just 12)&#10;        limit: 1000, // High limit to get all farmer's products&#10;      };&#10;&#10;      // FIX: Also filter orders by farmer to get only THIS farmer's orders&#10;      const ordersParams = {&#10;        farmerEmail: userIds?.userEmail,&#10;        limit: 1000, // High limit to get all farmer's orders&#10;      };&#10;&#10;      const [productsData, ordersData] = await Promise.all([&#10;        apiService.getProducts(productsParams),&#10;        apiService.getOrders(ordersParams), // Add farmer filtering to orders too&#10;      ]);&#10;&#10;      const dashboardData = {&#10;        products: productsData?.products || [],&#10;        orders: ordersData?.orders || [],&#10;        analytics: ordersData?.analytics || {},&#10;        meta: productsData?.meta || {},&#10;      };&#10;&#10;      console.log(&quot; Dashboard query result:&quot;, {&#10;        productsCount: dashboardData.products.length,&#10;        sampleProduct: dashboardData.products[0]&#10;          ? {&#10;              id: dashboardData.products[0]._id,&#10;              name: dashboardData.products[0].name,&#10;              stock: dashboardData.products[0].stock,&#10;              price: dashboardData.products[0].price,&#10;            }&#10;          : null,&#10;        timestamp: new Date().toISOString(),&#10;      });&#10;&#10;      // ADD DEBUG: Log ALL product data to see what we're actually getting&#10;      console.log(&#10;        &quot; [DEBUG] ALL Dashboard products received from API:&quot;,&#10;        dashboardData.products,&#10;      );&#10;&#10;      return {&#10;        products: dashboardData.products || [],&#10;        orders: dashboardData.orders || [],&#10;        analytics: dashboardData.analytics || {},&#10;        meta: dashboardData.meta || {},&#10;      };&#10;    },&#10;    staleTime: 30 * 1000, // Keep data fresh for 30 seconds to allow optimistic updates&#10;    gcTime: 5 * 60 * 1000, // Cache for 5 minutes&#10;    refetchOnMount: false, // Don't refetch when component mounts - use cache&#10;    refetchOnWindowFocus: false, // Don't refetch when window gets focus - use cache&#10;    retry: 3,&#10;    retryDelay: 1000,&#10;  });&#10;&#10;  // Add debug logging for the returned data&#10;  console.log(&#10;    &quot; [DEBUG] Dashboard hook returning products:&quot;,&#10;    data?.products?.length || 0,&#10;  );&#10;  if (data?.products?.length &gt; 0) {&#10;    console.log(&quot; [DEBUG] First product in dashboard:&quot;, {&#10;      id: data.products[0]._id || data.products[0].id,&#10;      name: data.products[0].name,&#10;      stock: data.products[0].stock,&#10;      price: data.products[0].price,&#10;    });&#10;  }&#10;&#10;  // Function to invalidate and refetch dashboard data&#10;  const refreshDashboard = () =&gt; {&#10;    return queryClient.invalidateQueries({&#10;      queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;    });&#10;  };&#10;&#10;  // Function to manually refetch&#10;  const refetchDashboard = () =&gt; {&#10;    return refetch();&#10;  };&#10;&#10;  // Function to update specific order in cache without full refetch&#10;  const updateOrderInCache = (orderId, newStatus, updatedOrder) =&gt; {&#10;    queryClient.setQueryData(&#10;      [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;      (oldData) =&gt; {&#10;        if (!oldData) return oldData;&#10;&#10;        const updatedOrders = oldData.orders.map((order) =&gt;&#10;          order._id === orderId || order.id === orderId&#10;            ? { ...order, status: newStatus, ...updatedOrder }&#10;            : order,&#10;        );&#10;&#10;        return {&#10;          ...oldData,&#10;          orders: updatedOrders,&#10;        };&#10;      },&#10;    );&#10;  };&#10;&#10;  // Function to update specific product in cache without full refetch&#10;  const updateProductInCache = (productId, updatedProduct) =&gt; {&#10;    queryClient.setQueryData(&#10;      [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;      (oldData) =&gt; {&#10;        if (!oldData) return oldData;&#10;&#10;        const updatedProducts = oldData.products.map((product) =&gt;&#10;          product._id === productId || product.id === productId&#10;            ? { ...product, ...updatedProduct }&#10;            : product,&#10;        );&#10;&#10;        return {&#10;          ...oldData,&#10;          products: updatedProducts,&#10;        };&#10;      },&#10;    );&#10;  };&#10;&#10;  // Function to update multiple products in cache (bulk update)&#10;  const updateBulkProductsInCache = (productIds, updateData) =&gt; {&#10;    queryClient.setQueryData(&#10;      [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;      (oldData) =&gt; {&#10;        if (!oldData) return oldData;&#10;&#10;        const updatedProducts = oldData.products.map((product) =&gt;&#10;          productIds.includes(product._id || product.id)&#10;            ? { ...product, ...updateData }&#10;            : product,&#10;        );&#10;&#10;        return {&#10;          ...oldData,&#10;          products: updatedProducts,&#10;        };&#10;      },&#10;    );&#10;  };&#10;&#10;  // Simple bulk update function - Fixed to properly invalidate all query types&#10;  const bulkUpdateProducts = async (productIds, updateData) =&gt; {&#10;    try {&#10;      console.log(&quot; [Dashboard] Starting bulk product update...&quot;);&#10;      console.log(&#10;        &quot; [Dashboard] Products BEFORE update:&quot;,&#10;        data?.products?.map((p) =&gt; ({&#10;          id: p._id,&#10;          name: p.name,&#10;          stock: p.stock,&#10;          price: p.price,&#10;        })),&#10;      );&#10;&#10;      // OPTIMISTIC UPDATE: Update the cache immediately to prevent UI flickering&#10;      console.log(&quot; [Dashboard] Applying optimistic cache update...&quot;);&#10;      queryClient.setQueryData(&#10;        [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;        (oldData) =&gt; {&#10;          if (!oldData) return oldData;&#10;&#10;          const updatedProducts = oldData.products.map((product) =&gt; {&#10;            const shouldUpdate = productIds.includes(product._id || product.id);&#10;            return shouldUpdate ? { ...product, ...updateData } : product;&#10;          });&#10;&#10;          console.log(&quot; [Dashboard] Optimistic update applied to cache&quot;);&#10;          return {&#10;            ...oldData,&#10;            products: updatedProducts,&#10;          };&#10;        },&#10;      );&#10;&#10;      // Call the API&#10;      const result = await apiService.bulkUpdateProducts(&#10;        productIds,&#10;        updateData,&#10;      );&#10;&#10;      console.log(&quot; [Dashboard] API update completed successfully&quot;);&#10;&#10;      // CRITICAL FIX: Force clear ALL caches immediately after API call&#10;      console.log(&#10;        &quot; [Dashboard] Clearing ALL caches to prevent stale data...&quot;,&#10;      );&#10;&#10;      // Clear API service caches with force flag to clear all layers&#10;      if (apiService.clearProductsCache) {&#10;        apiService.clearProductsCache();&#10;      }&#10;      if (apiService.clearFarmersCache) {&#10;        apiService.clearFarmersCache();&#10;      }&#10;      if (apiService.clearCache) {&#10;        apiService.clearCache();&#10;      }&#10;&#10;      // Clear the global and session caches directly&#10;      try {&#10;        globalCache?.clearPattern?.(&quot;products&quot;);&#10;        globalCache?.clearPattern?.(&quot;dashboard&quot;);&#10;        globalCache?.clearPattern?.(&quot;farmers&quot;);&#10;&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;          sessionStorage.removeItem(&quot;products-cache&quot;);&#10;          sessionStorage.removeItem(&quot;dashboard-cache&quot;);&#10;          sessionStorage.removeItem(&quot;farmfresh-products&quot;);&#10;          sessionStorage.removeItem(&quot;farmfresh-dashboard&quot;);&#10;        }&#10;      } catch (cacheError) {&#10;        console.warn(&quot;Cache clearing warning:&quot;, cacheError);&#10;      }&#10;&#10;      // Instead of gentle invalidation, do immediate refetch to ensure consistency&#10;      console.log(&#10;        &quot; [Dashboard] Invalidating and refetching all related queries...&quot;,&#10;      );&#10;&#10;      // Invalidate dashboard query with immediate refetch&#10;      await queryClient.invalidateQueries({&#10;        queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;        exact: true,&#10;        refetchType: &quot;active&quot;, // Force immediate refetch&#10;      });&#10;&#10;      // Invalidate all products queries&#10;      await queryClient.invalidateQueries({&#10;        queryKey: [&quot;products&quot;],&#10;        exact: false,&#10;        refetchType: &quot;active&quot;, // Force immediate refetch&#10;      });&#10;&#10;      // Invalidate farmers queries&#10;      await queryClient.invalidateQueries({&#10;        queryKey: [&quot;farmers&quot;],&#10;        exact: false,&#10;        refetchType: &quot;active&quot;, // Force immediate refetch&#10;      });&#10;&#10;      console.log(&#10;        &quot;✅ [Dashboard] Bulk update completed with comprehensive cache invalidation&quot;,&#10;      );&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;❌ [Dashboard] Bulk product update failed:&quot;, error);&#10;&#10;      // If API call failed, revert the optimistic update by force refetching&#10;      console.log(&quot; [Dashboard] Reverting optimistic update due to error...&quot;);&#10;      await queryClient.invalidateQueries({&#10;        queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;        exact: true,&#10;        refetchType: &quot;active&quot;, // Force refetch to get correct data&#10;      });&#10;&#10;      throw error;&#10;    }&#10;  };&#10;&#10;  return {&#10;    products: data?.products || [],&#10;    orders: data?.orders || [],&#10;    analytics: data?.analytics || {},&#10;    meta: data?.meta || {},&#10;    isLoading,&#10;    error,&#10;    isRefetching,&#10;    refetch: refetchDashboard,&#10;    refreshDashboard,&#10;    bulkUpdateProducts,&#10;    updateOrderInCache,&#10;    updateProductInCache,&#10;    updateBulkProductsInCache,&#10;  };&#10;}&#10;" />
              <option name="updatedContent" value="// hooks/useDashboardData.js&#10;&quot;use client&quot;;&#10;&#10;import { useQuery, useQueryClient } from &quot;@tanstack/react-query&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import { apiService } from &quot;@/lib/api-service&quot;;&#10;import globalCache from &quot;@/lib/cache&quot;;&#10;&#10;export function useDashboardData() {&#10;  const { data: session } = useSession();&#10;  const queryClient = useQueryClient();&#10;&#10;  const getUserIdentifiers = () =&gt; {&#10;    if (!session?.user) return null;&#10;    const user = session.user;&#10;    return {&#10;      userId: user.userId || user.id || user._id,&#10;      userEmail: user.email,&#10;    };&#10;  };&#10;&#10;  const userIds = getUserIdentifiers();&#10;&#10;  const { data, isLoading, error, refetch, isRefetching } = useQuery({&#10;    queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;    queryFn: async () =&gt; {&#10;      console.log(&quot; Dashboard query executing - fetching fresh data...&quot;);&#10;&#10;      // FIX: Pass farmer filtering parameters to get only THIS farmer's products AND orders&#10;      const productsParams = {&#10;        includeInactive: true,&#10;        // Filter by farmer using their email or ID&#10;        farmerEmail: userIds?.userEmail,&#10;        // Remove limit to get all farmer's products (not just 12)&#10;        limit: 1000, // High limit to get all farmer's products&#10;      };&#10;&#10;      // FIX: Also filter orders by farmer to get only THIS farmer's orders&#10;      const ordersParams = {&#10;        farmerEmail: userIds?.userEmail,&#10;        limit: 1000, // High limit to get all farmer's orders&#10;      };&#10;&#10;      const [productsData, ordersData] = await Promise.all([&#10;        apiService.getProducts(productsParams),&#10;        apiService.getOrders(ordersParams), // Add farmer filtering to orders too&#10;      ]);&#10;&#10;      const dashboardData = {&#10;        products: productsData?.products || [],&#10;        orders: ordersData?.orders || [],&#10;        analytics: ordersData?.analytics || {},&#10;        meta: productsData?.meta || {},&#10;      };&#10;&#10;      console.log(&quot; Dashboard query result:&quot;, {&#10;        productsCount: dashboardData.products.length,&#10;        sampleProduct: dashboardData.products[0]&#10;          ? {&#10;              id: dashboardData.products[0]._id,&#10;              name: dashboardData.products[0].name,&#10;              stock: dashboardData.products[0].stock,&#10;              price: dashboardData.products[0].price,&#10;            }&#10;          : null,&#10;        timestamp: new Date().toISOString(),&#10;      });&#10;&#10;      // ADD DEBUG: Log ALL product data to see what we're actually getting&#10;      console.log(&#10;        &quot; [DEBUG] ALL Dashboard products received from API:&quot;,&#10;        dashboardData.products,&#10;      );&#10;&#10;      return {&#10;        products: dashboardData.products || [],&#10;        orders: dashboardData.orders || [],&#10;        analytics: dashboardData.analytics || {},&#10;        meta: dashboardData.meta || {},&#10;      };&#10;    },&#10;    staleTime: 30 * 1000, // Keep data fresh for 30 seconds to allow optimistic updates&#10;    gcTime: 5 * 60 * 1000, // Cache for 5 minutes&#10;    refetchOnMount: false, // Don't refetch when component mounts - use cache&#10;    refetchOnWindowFocus: false, // Don't refetch when window gets focus - use cache&#10;    retry: 3,&#10;    retryDelay: 1000,&#10;  });&#10;&#10;  // Add debug logging for the returned data&#10;  console.log(&#10;    &quot; [DEBUG] Dashboard hook returning products:&quot;,&#10;    data?.products?.length || 0,&#10;  );&#10;  if (data?.products?.length &gt; 0) {&#10;    console.log(&quot; [DEBUG] First product in dashboard:&quot;, {&#10;      id: data.products[0]._id || data.products[0].id,&#10;      name: data.products[0].name,&#10;      stock: data.products[0].stock,&#10;      price: data.products[0].price,&#10;    });&#10;  }&#10;&#10;  // Function to invalidate and refetch dashboard data&#10;  const refreshDashboard = () =&gt; {&#10;    return queryClient.invalidateQueries({&#10;      queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;    });&#10;  };&#10;&#10;  // Function to manually refetch&#10;  const refetchDashboard = () =&gt; {&#10;    return refetch();&#10;  };&#10;&#10;  // Function to update specific order in cache without full refetch&#10;  const updateOrderInCache = (orderId, newStatus, updatedOrder) =&gt; {&#10;    queryClient.setQueryData(&#10;      [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;      (oldData) =&gt; {&#10;        if (!oldData) return oldData;&#10;&#10;        const updatedOrders = oldData.orders.map((order) =&gt;&#10;          order._id === orderId || order.id === orderId&#10;            ? { ...order, status: newStatus, ...updatedOrder }&#10;            : order,&#10;        );&#10;&#10;        return {&#10;          ...oldData,&#10;          orders: updatedOrders,&#10;        };&#10;      },&#10;    );&#10;  };&#10;&#10;  // Function to update specific product in cache without full refetch&#10;  const updateProductInCache = (productId, updatedProduct) =&gt; {&#10;    queryClient.setQueryData(&#10;      [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;      (oldData) =&gt; {&#10;        if (!oldData) return oldData;&#10;&#10;        const updatedProducts = oldData.products.map((product) =&gt;&#10;          product._id === productId || product.id === productId&#10;            ? { ...product, ...updatedProduct }&#10;            : product,&#10;        );&#10;&#10;        return {&#10;          ...oldData,&#10;          products: updatedProducts,&#10;        };&#10;      },&#10;    );&#10;  };&#10;&#10;  // Function to update multiple products in cache (bulk update)&#10;  const updateBulkProductsInCache = (productIds, updateData) =&gt; {&#10;    queryClient.setQueryData(&#10;      [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;      (oldData) =&gt; {&#10;        if (!oldData) return oldData;&#10;&#10;        const updatedProducts = oldData.products.map((product) =&gt;&#10;          productIds.includes(product._id || product.id)&#10;            ? { ...product, ...updateData }&#10;            : product,&#10;        );&#10;&#10;        return {&#10;          ...oldData,&#10;          products: updatedProducts,&#10;        };&#10;      },&#10;    );&#10;  };&#10;&#10;  // Simple bulk update function - Fixed to maintain optimistic updates properly&#10;  const bulkUpdateProducts = async (productIds, updateData) =&gt; {&#10;    try {&#10;      console.log(&quot; [Dashboard] Starting bulk product update...&quot;);&#10;      console.log(&#10;        &quot; [Dashboard] Products BEFORE update:&quot;,&#10;        data?.products?.map((p) =&gt; ({&#10;          id: p._id,&#10;          name: p.name,&#10;          stock: p.stock,&#10;          price: p.price,&#10;        })),&#10;      );&#10;&#10;      // OPTIMISTIC UPDATE: Update the cache immediately to prevent UI flickering&#10;      console.log(&quot; [Dashboard] Applying optimistic cache update...&quot;);&#10;      queryClient.setQueryData(&#10;        [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;        (oldData) =&gt; {&#10;          if (!oldData) return oldData;&#10;&#10;          const updatedProducts = oldData.products.map((product) =&gt; {&#10;            const shouldUpdate = productIds.includes(product._id || product.id);&#10;            return shouldUpdate ? { ...product, ...updateData } : product;&#10;          });&#10;&#10;          console.log(&quot; [Dashboard] Optimistic update applied to cache&quot;);&#10;          return {&#10;            ...oldData,&#10;            products: updatedProducts,&#10;          };&#10;        },&#10;      );&#10;&#10;      // Call the API&#10;      const result = await apiService.bulkUpdateProducts(&#10;        productIds,&#10;        updateData,&#10;      );&#10;&#10;      console.log(&quot; [Dashboard] API update completed successfully&quot;);&#10;      &#10;      // CRITICAL FIX: Only clear API service cache, NOT React Query cache to preserve optimistic updates&#10;      console.log(&quot; [Dashboard] Clearing API service cache to prevent stale data...&quot;);&#10;      &#10;      // Clear API service caches but keep React Query optimistic updates&#10;      if (apiService.clearProductsCache) {&#10;        apiService.clearProductsCache();&#10;      }&#10;      &#10;      // Set a delayed background refresh to sync with server data without disrupting UI&#10;      setTimeout(async () =&gt; {&#10;        console.log(&quot; [Dashboard] Background sync with server...&quot;);&#10;        &#10;        // Only invalidate with refetchType: &quot;none&quot; to mark as stale but keep current data&#10;        queryClient.invalidateQueries({&#10;          queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;          exact: true,&#10;          refetchType: &quot;none&quot; // Don't refetch immediately - keep optimistic updates&#10;        });&#10;&#10;        // Invalidate other product queries for consistency across the app&#10;        queryClient.invalidateQueries({&#10;          queryKey: [&quot;products&quot;],&#10;          exact: false,&#10;          refetchType: &quot;none&quot; // Don't refetch immediately&#10;        });&#10;&#10;        console.log(&quot;✅ [Dashboard] Background sync completed - optimistic updates preserved&quot;);&#10;      }, 5000); // Wait 5 seconds before background sync&#10;&#10;      console.log(&quot;✅ [Dashboard] Bulk update completed with optimistic updates preserved&quot;);&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;❌ [Dashboard] Bulk product update failed:&quot;, error);&#10;&#10;      // If API call failed, revert the optimistic update&#10;      console.log(&quot; [Dashboard] Reverting optimistic update due to error...&quot;);&#10;      await queryClient.invalidateQueries({&#10;        queryKey: [&quot;dashboard&quot;, userIds?.userId, userIds?.userEmail],&#10;        exact: true,&#10;        refetchType: &quot;active&quot;, // Force refetch to get correct data on error&#10;      });&#10;&#10;      throw error;&#10;    }&#10;  };&#10;&#10;  return {&#10;    products: data?.products || [],&#10;    orders: data?.orders || [],&#10;    analytics: data?.analytics || {},&#10;    meta: data?.meta || {},&#10;    isLoading,&#10;    error,&#10;    isRefetching,&#10;    refetch: refetchDashboard,&#10;    refreshDashboard,&#10;    bulkUpdateProducts,&#10;    updateOrderInCache,&#10;    updateProductInCache,&#10;    updateBulkProductsInCache,&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/api-service.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/api-service.js" />
              <option name="originalContent" value="import globalCache, { sessionCache } from &quot;./cache&quot;;&#10;&#10;// Request deduplication to prevent multiple identical API calls&#10;const ongoingRequests = new Map();&#10;&#10;// Optimized API service with caching and request deduplication&#10;export class ApiService {&#10;  constructor() {&#10;    this.baseURL = &quot;/api&quot;;&#10;  }&#10;&#10;  // Generic fetch with caching and deduplication&#10;  async fetchWithCache(endpoint, params = {}, options = {}) {&#10;    const {&#10;      ttl = 5 * 60 * 1000, // 5 minutes default&#10;      useSessionCache = true,&#10;      skipCache = false,&#10;      ...fetchOptions&#10;    } = options;&#10;&#10;    // Generate cache key&#10;    const cacheKey = globalCache.generateKey(endpoint, params);&#10;    const sessionKey = sessionCache.generateKey(endpoint, params);&#10;&#10;    // ONLY return cached data if NOT skipping cache&#10;    if (!skipCache) {&#10;      // Try memory cache first (fastest)&#10;      const memoryData = globalCache.get(cacheKey);&#10;      if (memoryData) {&#10;        console.log(` [API Service] Returning cached data for ${endpoint}`);&#10;        return memoryData;&#10;      }&#10;&#10;      // Try session cache (survives page reloads)&#10;      if (useSessionCache) {&#10;        const sessionData = sessionCache.get(sessionKey);&#10;        if (sessionData) {&#10;          console.log(&#10;            ` [API Service] Returning session cached data for ${endpoint}`,&#10;          );&#10;          // Also store in memory cache for faster subsequent access&#10;          globalCache.set(cacheKey, sessionData, ttl);&#10;          return sessionData;&#10;        }&#10;      }&#10;    } else {&#10;      console.log(&#10;        ` [API Service] Skipping cache for ${endpoint} - forcing fresh fetch`,&#10;      );&#10;    }&#10;&#10;    // Check if same request is already ongoing&#10;    const requestKey = `${endpoint}_${JSON.stringify(params)}`;&#10;    if (ongoingRequests.has(requestKey)) {&#10;      return ongoingRequests.get(requestKey);&#10;    }&#10;&#10;    // Build URL with params&#10;    const url = new URL(endpoint, window.location.origin);&#10;    Object.entries(params).forEach(([key, value]) =&gt; {&#10;      if (value !== null &amp;&amp; value !== undefined &amp;&amp; value !== &quot;&quot;) {&#10;        url.searchParams.append(key, value);&#10;      }&#10;    });&#10;&#10;    // Create the promise and store it to prevent duplicate requests&#10;    const requestPromise = fetch(url.toString(), {&#10;      method: &quot;GET&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        ...fetchOptions.headers,&#10;      },&#10;      ...fetchOptions,&#10;    })&#10;      .then(async (response) =&gt; {&#10;        if (!response.ok) {&#10;          throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;        return response.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        // Cache the successful response&#10;        if (!skipCache) {&#10;          globalCache.set(cacheKey, data, ttl);&#10;          if (useSessionCache) {&#10;            sessionCache.set(sessionKey, data, ttl);&#10;          }&#10;        }&#10;        return data;&#10;      })&#10;      .catch((error) =&gt; {&#10;        console.error(`API Error for ${endpoint}:`, error);&#10;        throw error;&#10;      })&#10;      .finally(() =&gt; {&#10;        // Remove from ongoing requests&#10;        ongoingRequests.delete(requestKey);&#10;      });&#10;&#10;    // Store the ongoing request&#10;    ongoingRequests.set(requestKey, requestPromise);&#10;&#10;    return requestPromise;&#10;  }&#10;&#10;  // Products API methods&#10;  async getProducts(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/products&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for products&#10;      useSessionCache: true,&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async getProduct(id) {&#10;    return this.fetchWithCache(&#10;      `/api/products/${id}`,&#10;      {},&#10;      {&#10;        ttl: 10 * 60 * 1000, // 10 minutes for individual products&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Categories API&#10;  async getCategories() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/categories&quot;,&#10;      {},&#10;      {&#10;        ttl: 30 * 60 * 1000, // 30 minutes for categories (rarely change)&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Farmers API methods&#10;  async getFarmers(options = {}) {&#10;    return this.fetchWithCache(&#10;      &quot;/api/farmers&quot;,&#10;      {},&#10;      {&#10;        ttl: 5 * 60 * 1000, // 5 minutes for farmers&#10;        useSessionCache: true,&#10;        ...options,&#10;      },&#10;    );&#10;  }&#10;&#10;  async updateFarmer(farmerId, farmerData) {&#10;    console.log(&quot; Starting enhanced farmer update process...&quot;);&#10;&#10;    // Step 1: Clear caches BEFORE the update to prevent race conditions&#10;    this.clearCache(); // Use the new comprehensive cache clearing method&#10;&#10;    // Step 2: Use PUT method with cache busting headers&#10;    const response = await fetch(&quot;/api/farmers&quot;, {&#10;      method: &quot;PUT&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;        Expires: &quot;0&quot;,&#10;        &quot;x-cache-bust&quot;: Date.now().toString(),&#10;        &quot;x-farmer-update&quot;: &quot;true&quot;, // Flag to identify farmer updates&#10;      },&#10;      body: JSON.stringify(farmerData),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to update farmer: ${response.status}`);&#10;    }&#10;&#10;    const result = await response.json();&#10;&#10;    // Step 3: Comprehensive cache clearing after successful update&#10;    this.clearCache(); // Clear all API service caches&#10;&#10;    // Step 4: Force React Query cache invalidation if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      console.log(&#10;        &quot; Force invalidating React Query caches after farmer update&quot;,&#10;      );&#10;&#10;      const queryClient = window.__REACT_QUERY_CLIENT__;&#10;&#10;      // Remove all cached data (most aggressive approach)&#10;      queryClient.clear();&#10;&#10;      // Then force fresh fetches for critical data&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;farmers&quot;],&#10;        refetchType: &quot;all&quot;,&#10;      });&#10;&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;products&quot;],&#10;        refetchType: &quot;all&quot;,&#10;      });&#10;    }&#10;&#10;    // Step 5: Clear browser caches completely&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      // Clear all storage that might contain cached data&#10;      try {&#10;        // Clear session storage&#10;        const sessionKeys = Object.keys(sessionStorage);&#10;        sessionKeys.forEach((key) =&gt; {&#10;          if (&#10;            key.includes(&quot;farmer&quot;) ||&#10;            key.includes(&quot;product&quot;) ||&#10;            key.includes(&quot;cache&quot;)&#10;          ) {&#10;            sessionStorage.removeItem(key);&#10;          }&#10;        });&#10;&#10;        // Clear local storage&#10;        const localKeys = Object.keys(localStorage);&#10;        localKeys.forEach((key) =&gt; {&#10;          if (&#10;            key.includes(&quot;farmer&quot;) ||&#10;            key.includes(&quot;product&quot;) ||&#10;            key.includes(&quot;cache&quot;)&#10;          ) {&#10;            localStorage.removeItem(key);&#10;          }&#10;        });&#10;&#10;        // Clear browser cache&#10;        if (&quot;caches&quot; in window) {&#10;          window.caches.keys().then((cacheNames) =&gt; {&#10;            cacheNames.forEach((cacheName) =&gt; {&#10;              window.caches.delete(cacheName);&#10;            });&#10;          });&#10;        }&#10;      } catch (error) {&#10;        console.warn(&quot;⚠️ Some cache clearing operations failed:&quot;, error);&#10;      }&#10;    }&#10;&#10;    console.log(&#10;      &quot;✅ Super aggressive cache clearing completed - farmer names will update immediately across all pages&quot;,&#10;    );&#10;&#10;    return result;&#10;  }&#10;&#10;  // Orders API methods&#10;  async getOrders(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/orders&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for orders (more dynamic data)&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async createOrder(orderData) {&#10;    const response = await fetch(&quot;/api/orders&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify(orderData),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to create order: ${response.status}`);&#10;    }&#10;&#10;    const result = await response.json();&#10;    this.clearOrdersCache();&#10;    this.clearProductsCache();&#10;&#10;    return result;&#10;  }&#10;&#10;  async getOrderById(orderId, options = {}) {&#10;    return this.fetchWithCache(`/api/orders/${orderId}`, {}, options);&#10;  }&#10;&#10;  async updateOrder(orderId, updateData) {&#10;    const response = await fetch(`/api/orders`, {&#10;      method: &quot;PATCH&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ orderId, ...updateData }),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to update order: ${response.status}`);&#10;    }&#10;&#10;    // Clear orders cache when updating&#10;    this.clearOrdersCache();&#10;    return response.json();&#10;  }&#10;&#10;  // Cache management for orders&#10;  clearOrdersCache() {&#10;    // Clear all order-related cache entries&#10;    const orderKeys = globalCache&#10;      .getStats()&#10;      .keys.filter((key) =&gt; key.includes(&quot;/api/orders&quot;));&#10;    orderKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;    // Clear session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.cleanup();&#10;    }&#10;&#10;    // Clear React Query orders cache if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      window.__REACT_QUERY_CLIENT__.invalidateQueries({&#10;        queryKey: [&quot;orders&quot;],&#10;        exact: false,&#10;      });&#10;    }&#10;  }&#10;&#10;  // Force clear all product-related cache&#10;  clearProductsCache() {&#10;    console.log(&quot; API Service: Clearing ALL products cache entries...&quot;);&#10;&#10;    // Clear memory cache with more aggressive pattern matching&#10;    globalCache.clearPattern(&quot;products&quot;);&#10;    globalCache.clearPattern(&quot;product&quot;);&#10;    globalCache.clearPattern(&quot;/api/products&quot;); // Clear by endpoint pattern&#10;&#10;    // Also clear any cache entries that might contain product data with parameters&#10;    if (globalCache.getStats) {&#10;      const stats = globalCache.getStats();&#10;      const productKeys = stats.keys.filter(&#10;        (key) =&gt;&#10;          key.includes(&quot;/api/products&quot;) ||&#10;          key.includes(&quot;products&quot;) ||&#10;          key.includes(&quot;dashboard&quot;), // Also clear dashboard-related cache&#10;      );&#10;      console.log(&quot; Clearing specific product cache keys:&quot;, productKeys);&#10;      productKeys.forEach((key) =&gt; globalCache.delete(key));&#10;    }&#10;&#10;    // Clear session cache with same aggressive approach&#10;    sessionCache.clearPattern(&quot;products&quot;);&#10;    sessionCache.clearPattern(&quot;product&quot;);&#10;    sessionCache.clearPattern(&quot;/api/products&quot;);&#10;&#10;    // Clear React Query cache if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      window.__REACT_QUERY_CLIENT__.invalidateQueries({&#10;        queryKey: [&quot;products&quot;],&#10;        exact: false,&#10;      });&#10;      // Also clear dashboard cache since it contains product data&#10;      window.__REACT_QUERY_CLIENT__.invalidateQueries({&#10;        queryKey: [&quot;dashboard&quot;],&#10;        exact: false,&#10;      });&#10;    }&#10;&#10;    console.log(&quot;✅ API Service: ALL products cache cleared&quot;);&#10;  }&#10;&#10;  // Clear farmers cache&#10;  clearFarmersCache() {&#10;    try {&#10;      // Clear memory cache using explicit key deletion (more reliable than clearPattern)&#10;      const stats = globalCache.getStats();&#10;      // Clear all farmer-related keys&#10;      const farmerKeys = stats.keys.filter(&#10;        (key) =&gt;&#10;          key.includes(&quot;/api/farmers&quot;) ||&#10;          key.includes(&quot;farmers&quot;) ||&#10;          key.includes(&quot;farmer&quot;) ||&#10;          key.includes(&quot;/api/products&quot;) || // Also clear products since they contain farmer info&#10;          key.includes(&quot;products&quot;),&#10;      );&#10;      farmerKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;      // Also use clearPattern as backup to ensure all related data is cleared&#10;      globalCache.clearPattern(&quot;farmers&quot;);&#10;      globalCache.clearPattern(&quot;farmer&quot;);&#10;      globalCache.clearPattern(&quot;products&quot;); // Clear products cache too&#10;      globalCache.clearPattern(&quot;product&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;❌ Error clearing memory cache:&quot;, error);&#10;      // Fallback to pattern clearing if stats approach fails&#10;      globalCache.clearPattern(&quot;farmers&quot;);&#10;      globalCache.clearPattern(&quot;farmer&quot;);&#10;      globalCache.clearPattern(&quot;products&quot;);&#10;      globalCache.clearPattern(&quot;product&quot;);&#10;    }&#10;&#10;    // Clear session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.cleanup(); // Use cleanup instead of clearPattern for more thorough clearing&#10;&#10;      // Also clear products from session cache&#10;      try {&#10;        sessionCache.clearPattern(&quot;products&quot;);&#10;        sessionCache.clearPattern(&quot;product&quot;);&#10;      } catch (error) {}&#10;    }&#10;  }&#10;&#10;  // Force refresh products with cache bypass&#10;  async forceRefreshProducts(params = {}) {&#10;    // Clear cache first&#10;    this.clearProductsCache();&#10;&#10;    // Add timestamp to force cache bypass&#10;    const paramsWithTimestamp = {&#10;      ...params,&#10;      _t: Date.now(),&#10;    };&#10;&#10;    return this.fetchWithCache(&quot;/api/products&quot;, paramsWithTimestamp, {&#10;      skipCache: true,&#10;      useSessionCache: false,&#10;      headers: {&#10;        &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;      },&#10;    });&#10;  }&#10;&#10;  // Clear all cache&#10;  clearAllCache() {&#10;    globalCache.clear();&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.clear();&#10;    }&#10;  }&#10;&#10;  // Simple generic cache clearing method - the one you were looking for!&#10;  clearCache() {&#10;    console.log(&quot; API Service: Clearing all cache via clearCache()...&quot;);&#10;&#10;    // Clear all memory cache&#10;    globalCache.clear();&#10;&#10;    // Clear all session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.clear();&#10;    }&#10;&#10;    // Clear React Query cache if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      console.log(&quot; API Service: Invalidating all React Query cache...&quot;);&#10;      window.__REACT_QUERY_CLIENT__.clear();&#10;    }&#10;&#10;    // Clear any ongoing requests&#10;    ongoingRequests.clear();&#10;&#10;    console.log(&quot;✅ API Service: All cache cleared via clearCache()&quot;);&#10;  }&#10;&#10;  // Optimized method for dashboard data - fetch both products and orders efficiently&#10;  async getDashboardData(userId, userEmail, options = {}) {&#10;    const { forceRefresh = false } = options;&#10;&#10;    try {&#10;      // Fetch products and orders in parallel with optimized parameters&#10;      const [productsData, ordersData] = await Promise.all([&#10;        this.getProducts(&#10;          {&#10;            limit: 200, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;            dashboard: &quot;true&quot;, // Add dashboard context to show inactive products&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;&#10;        this.getOrders(&#10;          {&#10;            limit: 100, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;      ]);&#10;&#10;      return {&#10;        products: productsData.products || [],&#10;        orders: ordersData.orders || [],&#10;        analytics: this.calculateAnalytics(&#10;          productsData.products || [],&#10;          ordersData.orders || [],&#10;        ),&#10;        meta: {&#10;          productsCount: productsData.products?.length || 0,&#10;          ordersCount: ordersData.orders?.length || 0,&#10;          fromCache: !forceRefresh,&#10;        },&#10;      };&#10;    } catch (error) {&#10;      console.error(&quot;Dashboard data fetch error:&quot;, error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Bulk update products - SIMPLE like farmer updates (no extra cache clearing)&#10;  async bulkUpdateProducts(productIds, updateData) {&#10;    console.log(&quot; Starting bulk product update...&quot;);&#10;    console.log(&quot; Debug - productIds:&quot;, productIds);&#10;    console.log(&quot; Debug - updateData:&quot;, updateData);&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/products/bulk-update&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;          &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;          Pragma: &quot;no-cache&quot;,&#10;          Expires: &quot;0&quot;,&#10;          &quot;x-cache-bust&quot;: Date.now().toString(),&#10;          &quot;x-bulk-update&quot;: &quot;true&quot;,&#10;        },&#10;        body: JSON.stringify({ productIds, updateData }),&#10;      });&#10;&#10;      console.log(&quot; Debug - Response status:&quot;, response.status);&#10;      console.log(&quot; Debug - Response ok:&quot;, response.ok);&#10;&#10;      if (!response.ok) {&#10;        const errorText = await response.text();&#10;        console.error(&quot;❌ Bulk update failed - Response:&quot;, errorText);&#10;        throw new Error(&#10;          `Failed to bulk update products: ${response.status} - ${errorText}`,&#10;        );&#10;      }&#10;&#10;      const result = await response.json();&#10;      console.log(&quot;✅ Bulk update API call completed successfully:&quot;, result);&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;❌ Bulk update error:&quot;, error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Calculate basic analytics for dashboard&#10;  calculateAnalytics(products, orders) {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    const totalProducts = products.length;&#10;    const activeProducts = products.filter(&#10;      (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== &quot;inactive&quot;,&#10;    ).length;&#10;&#10;    const totalOrders = orders.length;&#10;    const totalRevenue = validOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    const averageOrderValue =&#10;      validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;    return {&#10;      totalProducts,&#10;      activeProducts,&#10;      totalOrders,&#10;      totalRevenue,&#10;      averageOrderValue,&#10;    };&#10;  }&#10;}&#10;&#10;// Global API service instance&#10;export const apiService = new ApiService();&#10;&#10;// Make apiService globally accessible for debugging and cross-component access&#10;if (typeof window !== &quot;undefined&quot;) {&#10;  window.apiService = apiService;&#10;}&#10;&#10;// Hook for React components&#10;export function useApiService() {&#10;  return apiService;&#10;}&#10;" />
              <option name="updatedContent" value="import globalCache, { sessionCache } from &quot;./cache&quot;;&#10;&#10;// Request deduplication to prevent multiple identical API calls&#10;const ongoingRequests = new Map();&#10;&#10;// Optimized API service with caching and request deduplication&#10;export class ApiService {&#10;  constructor() {&#10;    this.baseURL = &quot;/api&quot;;&#10;  }&#10;&#10;  // Generic fetch with caching and deduplication&#10;  async fetchWithCache(endpoint, params = {}, options = {}) {&#10;    const {&#10;      ttl = 5 * 60 * 1000, // 5 minutes default&#10;      useSessionCache = true,&#10;      skipCache = false,&#10;      ...fetchOptions&#10;    } = options;&#10;&#10;    // Generate cache key&#10;    const cacheKey = globalCache.generateKey(endpoint, params);&#10;    const sessionKey = sessionCache.generateKey(endpoint, params);&#10;&#10;    // ONLY return cached data if NOT skipping cache&#10;    if (!skipCache) {&#10;      // Try memory cache first (fastest)&#10;      const memoryData = globalCache.get(cacheKey);&#10;      if (memoryData) {&#10;        console.log(` [API Service] Returning cached data for ${endpoint}`);&#10;        return memoryData;&#10;      }&#10;&#10;      // Try session cache (survives page reloads)&#10;      if (useSessionCache) {&#10;        const sessionData = sessionCache.get(sessionKey);&#10;        if (sessionData) {&#10;          console.log(&#10;            ` [API Service] Returning session cached data for ${endpoint}`,&#10;          );&#10;          // Also store in memory cache for faster subsequent access&#10;          globalCache.set(cacheKey, sessionData, ttl);&#10;          return sessionData;&#10;        }&#10;      }&#10;    } else {&#10;      console.log(&#10;        ` [API Service] Skipping cache for ${endpoint} - forcing fresh fetch`,&#10;      );&#10;    }&#10;&#10;    // Check if same request is already ongoing&#10;    const requestKey = `${endpoint}_${JSON.stringify(params)}`;&#10;    if (ongoingRequests.has(requestKey)) {&#10;      return ongoingRequests.get(requestKey);&#10;    }&#10;&#10;    // Build URL with params&#10;    const url = new URL(endpoint, window.location.origin);&#10;    Object.entries(params).forEach(([key, value]) =&gt; {&#10;      if (value !== null &amp;&amp; value !== undefined &amp;&amp; value !== &quot;&quot;) {&#10;        url.searchParams.append(key, value);&#10;      }&#10;    });&#10;&#10;    // Create the promise and store it to prevent duplicate requests&#10;    const requestPromise = fetch(url.toString(), {&#10;      method: &quot;GET&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        ...fetchOptions.headers,&#10;      },&#10;      ...fetchOptions,&#10;    })&#10;      .then(async (response) =&gt; {&#10;        if (!response.ok) {&#10;          throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;        return response.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        // Cache the successful response&#10;        if (!skipCache) {&#10;          globalCache.set(cacheKey, data, ttl);&#10;          if (useSessionCache) {&#10;            sessionCache.set(sessionKey, data, ttl);&#10;          }&#10;        }&#10;        return data;&#10;      })&#10;      .catch((error) =&gt; {&#10;        console.error(`API Error for ${endpoint}:`, error);&#10;        throw error;&#10;      })&#10;      .finally(() =&gt; {&#10;        // Remove from ongoing requests&#10;        ongoingRequests.delete(requestKey);&#10;      });&#10;&#10;    // Store the ongoing request&#10;    ongoingRequests.set(requestKey, requestPromise);&#10;&#10;    return requestPromise;&#10;  }&#10;&#10;  // Products API methods&#10;  async getProducts(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/products&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for products&#10;      useSessionCache: true,&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async getProduct(id) {&#10;    return this.fetchWithCache(&#10;      `/api/products/${id}`,&#10;      {},&#10;      {&#10;        ttl: 10 * 60 * 1000, // 10 minutes for individual products&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Categories API&#10;  async getCategories() {&#10;    return this.fetchWithCache(&#10;      &quot;/api/categories&quot;,&#10;      {},&#10;      {&#10;        ttl: 30 * 60 * 1000, // 30 minutes for categories (rarely change)&#10;        useSessionCache: true,&#10;      },&#10;    );&#10;  }&#10;&#10;  // Farmers API methods&#10;  async getFarmers(options = {}) {&#10;    return this.fetchWithCache(&#10;      &quot;/api/farmers&quot;,&#10;      {},&#10;      {&#10;        ttl: 5 * 60 * 1000, // 5 minutes for farmers&#10;        useSessionCache: true,&#10;        ...options,&#10;      },&#10;    );&#10;  }&#10;&#10;  async updateFarmer(farmerId, farmerData) {&#10;    console.log(&quot; Starting enhanced farmer update process...&quot;);&#10;&#10;    // Step 1: Clear caches BEFORE the update to prevent race conditions&#10;    this.clearCache(); // Use the new comprehensive cache clearing method&#10;&#10;    // Step 2: Use PUT method with cache busting headers&#10;    const response = await fetch(&quot;/api/farmers&quot;, {&#10;      method: &quot;PUT&quot;,&#10;      headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;        Expires: &quot;0&quot;,&#10;        &quot;x-cache-bust&quot;: Date.now().toString(),&#10;        &quot;x-farmer-update&quot;: &quot;true&quot;, // Flag to identify farmer updates&#10;      },&#10;      body: JSON.stringify(farmerData),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to update farmer: ${response.status}`);&#10;    }&#10;&#10;    const result = await response.json();&#10;&#10;    // Step 3: Comprehensive cache clearing after successful update&#10;    this.clearCache(); // Clear all API service caches&#10;&#10;    // Step 4: Force React Query cache invalidation if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      console.log(&#10;        &quot; Force invalidating React Query caches after farmer update&quot;,&#10;      );&#10;&#10;      const queryClient = window.__REACT_QUERY_CLIENT__;&#10;&#10;      // Remove all cached data (most aggressive approach)&#10;      queryClient.clear();&#10;&#10;      // Then force fresh fetches for critical data&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;farmers&quot;],&#10;        refetchType: &quot;all&quot;,&#10;      });&#10;&#10;      queryClient.invalidateQueries({&#10;        queryKey: [&quot;products&quot;],&#10;        refetchType: &quot;all&quot;,&#10;      });&#10;    }&#10;&#10;    // Step 5: Clear browser caches completely&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      // Clear all storage that might contain cached data&#10;      try {&#10;        // Clear session storage&#10;        const sessionKeys = Object.keys(sessionStorage);&#10;        sessionKeys.forEach((key) =&gt; {&#10;          if (&#10;            key.includes(&quot;farmer&quot;) ||&#10;            key.includes(&quot;product&quot;) ||&#10;            key.includes(&quot;cache&quot;)&#10;          ) {&#10;            sessionStorage.removeItem(key);&#10;          }&#10;        });&#10;&#10;        // Clear local storage&#10;        const localKeys = Object.keys(localStorage);&#10;        localKeys.forEach((key) =&gt; {&#10;          if (&#10;            key.includes(&quot;farmer&quot;) ||&#10;            key.includes(&quot;product&quot;) ||&#10;            key.includes(&quot;cache&quot;)&#10;          ) {&#10;            localStorage.removeItem(key);&#10;          }&#10;        });&#10;&#10;        // Clear browser cache&#10;        if (&quot;caches&quot; in window) {&#10;          window.caches.keys().then((cacheNames) =&gt; {&#10;            cacheNames.forEach((cacheName) =&gt; {&#10;              window.caches.delete(cacheName);&#10;            });&#10;          });&#10;        }&#10;      } catch (error) {&#10;        console.warn(&quot;⚠️ Some cache clearing operations failed:&quot;, error);&#10;      }&#10;    }&#10;&#10;    console.log(&#10;      &quot;✅ Super aggressive cache clearing completed - farmer names will update immediately across all pages&quot;,&#10;    );&#10;&#10;    return result;&#10;  }&#10;&#10;  // Orders API methods&#10;  async getOrders(params = {}, options = {}) {&#10;    return this.fetchWithCache(&quot;/api/orders&quot;, params, {&#10;      ttl: 3 * 60 * 1000, // 3 minutes for orders (more dynamic data)&#10;      ...options,&#10;    });&#10;  }&#10;&#10;  async createOrder(orderData) {&#10;    const response = await fetch(&quot;/api/orders&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify(orderData),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to create order: ${response.status}`);&#10;    }&#10;&#10;    const result = await response.json();&#10;    this.clearOrdersCache();&#10;    this.clearProductsCache();&#10;&#10;    return result;&#10;  }&#10;&#10;  async getOrderById(orderId, options = {}) {&#10;    return this.fetchWithCache(`/api/orders/${orderId}`, {}, options);&#10;  }&#10;&#10;  async updateOrder(orderId, updateData) {&#10;    const response = await fetch(`/api/orders`, {&#10;      method: &quot;PATCH&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ orderId, ...updateData }),&#10;    });&#10;&#10;    if (!response.ok) {&#10;      throw new Error(`Failed to update order: ${response.status}`);&#10;    }&#10;&#10;    // Clear orders cache when updating&#10;    this.clearOrdersCache();&#10;    return response.json();&#10;  }&#10;&#10;  // Cache management for orders&#10;  clearOrdersCache() {&#10;    // Clear all order-related cache entries&#10;    const orderKeys = globalCache&#10;      .getStats()&#10;      .keys.filter((key) =&gt; key.includes(&quot;/api/orders&quot;));&#10;    orderKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;    // Clear session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.cleanup();&#10;    }&#10;&#10;    // Clear React Query orders cache if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      window.__REACT_QUERY_CLIENT__.invalidateQueries({&#10;        queryKey: [&quot;orders&quot;],&#10;        exact: false,&#10;      });&#10;    }&#10;  }&#10;&#10;  // Force clear all product-related cache&#10;  clearProductsCache() {&#10;    console.log(&quot; API Service: Clearing ALL products cache entries...&quot;);&#10;&#10;    // Clear memory cache with more aggressive pattern matching&#10;    globalCache.clearPattern(&quot;products&quot;);&#10;    globalCache.clearPattern(&quot;product&quot;);&#10;    globalCache.clearPattern(&quot;/api/products&quot;); // Clear by endpoint pattern&#10;    globalCache.clearPattern(&quot;dashboard&quot;); // Also clear dashboard cache&#10;&#10;    // Also clear any cache entries that might contain product data with parameters&#10;    if (globalCache.getStats) {&#10;      const stats = globalCache.getStats();&#10;      const productKeys = stats.keys.filter(&#10;        (key) =&gt;&#10;          key.includes(&quot;/api/products&quot;) ||&#10;          key.includes(&quot;products&quot;) ||&#10;          key.includes(&quot;product&quot;) ||&#10;          key.includes(&quot;dashboard&quot;) || // Also clear dashboard-related cache&#10;          key.includes(&quot;farmers&quot;), // Clear farmers cache too as it may contain product data&#10;      );&#10;      console.log(&quot; Clearing specific product cache keys:&quot;, productKeys);&#10;      productKeys.forEach((key) =&gt; globalCache.delete(key));&#10;    }&#10;&#10;    // Clear session cache with same aggressive approach&#10;    sessionCache.clearPattern(&quot;products&quot;);&#10;    sessionCache.clearPattern(&quot;product&quot;);&#10;    sessionCache.clearPattern(&quot;/api/products&quot;);&#10;    sessionCache.clearPattern(&quot;dashboard&quot;);&#10;&#10;    // Force clear browser storage&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      try {&#10;        sessionStorage.removeItem(&quot;products-cache&quot;);&#10;        sessionStorage.removeItem(&quot;dashboard-cache&quot;);&#10;        sessionStorage.removeItem(&quot;farmfresh-products&quot;);&#10;        sessionStorage.removeItem(&quot;farmfresh-dashboard&quot;);&#10;        localStorage.removeItem(&quot;products-cache&quot;);&#10;        localStorage.removeItem(&quot;dashboard-cache&quot;);&#10;      } catch (e) {&#10;        console.warn(&quot;Storage clearing warning:&quot;, e);&#10;      }&#10;    }&#10;&#10;    // Clear React Query cache if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      window.__REACT_QUERY_CLIENT__.invalidateQueries({&#10;        queryKey: [&quot;products&quot;],&#10;        exact: false,&#10;      });&#10;      // Also clear dashboard cache since it contains product data&#10;      window.__REACT_QUERY_CLIENT__.invalidateQueries({&#10;        queryKey: [&quot;dashboard&quot;],&#10;        exact: false,&#10;      });&#10;    }&#10;&#10;    console.log(&quot;✅ API Service: ALL products cache cleared comprehensively&quot;);&#10;  }&#10;&#10;  // Clear farmers cache&#10;  clearFarmersCache() {&#10;    try {&#10;      // Clear memory cache using explicit key deletion (more reliable than clearPattern)&#10;      const stats = globalCache.getStats();&#10;      // Clear all farmer-related keys&#10;      const farmerKeys = stats.keys.filter(&#10;        (key) =&gt;&#10;          key.includes(&quot;/api/farmers&quot;) ||&#10;          key.includes(&quot;farmers&quot;) ||&#10;          key.includes(&quot;farmer&quot;) ||&#10;          key.includes(&quot;/api/products&quot;) || // Also clear products since they contain farmer info&#10;          key.includes(&quot;products&quot;),&#10;      );&#10;      farmerKeys.forEach((key) =&gt; globalCache.delete(key));&#10;&#10;      // Also use clearPattern as backup to ensure all related data is cleared&#10;      globalCache.clearPattern(&quot;farmers&quot;);&#10;      globalCache.clearPattern(&quot;farmer&quot;);&#10;      globalCache.clearPattern(&quot;products&quot;); // Clear products cache too&#10;      globalCache.clearPattern(&quot;product&quot;);&#10;    } catch (error) {&#10;      console.error(&quot;❌ Error clearing memory cache:&quot;, error);&#10;      // Fallback to pattern clearing if stats approach fails&#10;      globalCache.clearPattern(&quot;farmers&quot;);&#10;      globalCache.clearPattern(&quot;farmer&quot;);&#10;      globalCache.clearPattern(&quot;products&quot;);&#10;      globalCache.clearPattern(&quot;product&quot;);&#10;    }&#10;&#10;    // Clear session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.cleanup(); // Use cleanup instead of clearPattern for more thorough clearing&#10;&#10;      // Also clear products from session cache&#10;      try {&#10;        sessionCache.clearPattern(&quot;products&quot;);&#10;        sessionCache.clearPattern(&quot;product&quot;);&#10;      } catch (error) {}&#10;    }&#10;  }&#10;&#10;  // Force refresh products with cache bypass&#10;  async forceRefreshProducts(params = {}) {&#10;    // Clear cache first&#10;    this.clearProductsCache();&#10;&#10;    // Add timestamp to force cache bypass&#10;    const paramsWithTimestamp = {&#10;      ...params,&#10;      _t: Date.now(),&#10;    };&#10;&#10;    return this.fetchWithCache(&quot;/api/products&quot;, paramsWithTimestamp, {&#10;      skipCache: true,&#10;      useSessionCache: false,&#10;      headers: {&#10;        &quot;Cache-Control&quot;: &quot;no-cache&quot;,&#10;        Pragma: &quot;no-cache&quot;,&#10;      },&#10;    });&#10;  }&#10;&#10;  // Clear all cache&#10;  clearAllCache() {&#10;    globalCache.clear();&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.clear();&#10;    }&#10;  }&#10;&#10;  // Simple generic cache clearing method - the one you were looking for!&#10;  clearCache() {&#10;    console.log(&quot; API Service: Clearing all cache via clearCache()...&quot;);&#10;&#10;    // Clear all memory cache&#10;    globalCache.clear();&#10;&#10;    // Clear all session cache&#10;    if (typeof window !== &quot;undefined&quot;) {&#10;      sessionCache.clear();&#10;    }&#10;&#10;    // Clear React Query cache if available&#10;    if (typeof window !== &quot;undefined&quot; &amp;&amp; window.__REACT_QUERY_CLIENT__) {&#10;      console.log(&quot; API Service: Invalidating all React Query cache...&quot;);&#10;      window.__REACT_QUERY_CLIENT__.clear();&#10;    }&#10;&#10;    // Clear any ongoing requests&#10;    ongoingRequests.clear();&#10;&#10;    console.log(&quot;✅ API Service: All cache cleared via clearCache()&quot;);&#10;  }&#10;&#10;  // Optimized method for dashboard data - fetch both products and orders efficiently&#10;  async getDashboardData(userId, userEmail, options = {}) {&#10;    const { forceRefresh = false } = options;&#10;&#10;    try {&#10;      // Fetch products and orders in parallel with optimized parameters&#10;      const [productsData, ordersData] = await Promise.all([&#10;        this.getProducts(&#10;          {&#10;            limit: 200, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;            dashboard: &quot;true&quot;, // Add dashboard context to show inactive products&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;&#10;        this.getOrders(&#10;          {&#10;            limit: 100, // Reduced limit for dashboard&#10;            farmerId: userId,&#10;            farmerEmail: userEmail,&#10;          },&#10;          { skipCache: forceRefresh },&#10;        ),&#10;      ]);&#10;&#10;      return {&#10;        products: productsData.products || [],&#10;        orders: ordersData.orders || [],&#10;        analytics: this.calculateAnalytics(&#10;          productsData.products || [],&#10;          ordersData.orders || [],&#10;        ),&#10;        meta: {&#10;          productsCount: productsData.products?.length || 0,&#10;          ordersCount: ordersData.orders?.length || 0,&#10;          fromCache: !forceRefresh,&#10;        },&#10;      };&#10;    } catch (error) {&#10;      console.error(&quot;Dashboard data fetch error:&quot;, error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Bulk update products - SIMPLE like farmer updates (no extra cache clearing)&#10;  async bulkUpdateProducts(productIds, updateData) {&#10;    console.log(&quot; Starting bulk product update...&quot;);&#10;    console.log(&quot; Debug - productIds:&quot;, productIds);&#10;    console.log(&quot; Debug - updateData:&quot;, updateData);&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/products/bulk-update&quot;, {&#10;        method: &quot;PUT&quot;,&#10;        headers: {&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;          &quot;Cache-Control&quot;: &quot;no-cache, no-store, must-revalidate&quot;,&#10;          Pragma: &quot;no-cache&quot;,&#10;          Expires: &quot;0&quot;,&#10;          &quot;x-cache-bust&quot;: Date.now().toString(),&#10;          &quot;x-bulk-update&quot;: &quot;true&quot;,&#10;        },&#10;        body: JSON.stringify({ productIds, updateData }),&#10;      });&#10;&#10;      console.log(&quot; Debug - Response status:&quot;, response.status);&#10;      console.log(&quot; Debug - Response ok:&quot;, response.ok);&#10;&#10;      if (!response.ok) {&#10;        const errorText = await response.text();&#10;        console.error(&quot;❌ Bulk update failed - Response:&quot;, errorText);&#10;        throw new Error(&#10;          `Failed to bulk update products: ${response.status} - ${errorText}`,&#10;        );&#10;      }&#10;&#10;      const result = await response.json();&#10;      console.log(&quot;✅ Bulk update API call completed successfully:&quot;, result);&#10;      return result;&#10;    } catch (error) {&#10;      console.error(&quot;❌ Bulk update error:&quot;, error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Calculate basic analytics for dashboard&#10;  calculateAnalytics(products, orders) {&#10;    const validOrders = orders.filter(&#10;      (order) =&gt; order.status !== &quot;cancelled&quot; &amp;&amp; order.status !== &quot;returned&quot;,&#10;    );&#10;&#10;    const totalProducts = products.length;&#10;    const activeProducts = products.filter(&#10;      (p) =&gt; p.stock &gt; 0 &amp;&amp; p.status !== &quot;inactive&quot;,&#10;    ).length;&#10;&#10;    const totalOrders = orders.length;&#10;    const totalRevenue = validOrders.reduce(&#10;      (sum, order) =&gt; sum + (order.farmerSubtotal || order.total || 0),&#10;      0,&#10;    );&#10;&#10;    const averageOrderValue =&#10;      validOrders.length &gt; 0 ? totalRevenue / validOrders.length : 0;&#10;&#10;    return {&#10;      totalProducts,&#10;      activeProducts,&#10;      totalOrders,&#10;      totalRevenue,&#10;      averageOrderValue,&#10;    };&#10;  }&#10;}&#10;&#10;// Global API service instance&#10;export const apiService = new ApiService();&#10;&#10;// Make apiService globally accessible for debugging and cross-component access&#10;if (typeof window !== &quot;undefined&quot;) {&#10;  window.apiService = apiService;&#10;}&#10;&#10;// Hook for React components&#10;export function useApiService() {&#10;  return apiService;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/make-visible.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/make-visible.js" />
              <option name="updatedContent" value="// Make the products with reviews visible by marking them as featured&#10;const { MongoClient, ObjectId } = require('mongodb');&#10;&#10;async function makeReviewedProductsVisible() {&#10;  const client = new MongoClient('mongodb://localhost:27017');&#10;  await client.connect();&#10;  const db = client.db('farmfresh');&#10;  &#10;  const productIdsWithReviews = ['6889cb7ab6d22dd651140bee', '688affa63c35c3c0ff9c4925'];&#10;  &#10;  console.log(' Making products with reviews visible...\n');&#10;  &#10;  for (const productId of productIdsWithReviews) {&#10;    try {&#10;      const result = await db.collection('products').updateOne(&#10;        { _id: new ObjectId(productId) },&#10;        { &#10;          $set: { &#10;            featured: true,&#10;            status: 'active',&#10;            stock: Math.max(10, 0) // Ensure they have stock&#10;          } &#10;        }&#10;      );&#10;      &#10;      if (result.matchedCount &gt; 0) {&#10;        console.log(`✅ Updated product ${productId} to be featured and active`);&#10;      } else {&#10;        console.log(`❌ Product ${productId} not found`);&#10;      }&#10;    } catch (error) {&#10;      console.log(`❌ Error updating product ${productId}: ${error.message}`);&#10;    }&#10;  }&#10;  &#10;  console.log('\n Now check your homepage - the products with reviews should appear in the featured section with star ratings!');&#10;  &#10;  await client.close();&#10;}&#10;&#10;makeReviewedProductsVisible().catch(console.error);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/migrate-farmers.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/migrate-farmers.js" />
              <option name="updatedContent" value="// Script to migrate farmers from users collection to farmers collection&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function migrateFarmers() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    const usersCollection = db.collection(&quot;users&quot;);&#10;    const farmersCollection = db.collection(&quot;farmers&quot;);&#10;&#10;    // Find all users with userType &quot;farmer&quot;&#10;    const farmerUsers = await usersCollection.find({ userType: &quot;farmer&quot; }).toArray();&#10;    &#10;    console.log(`Found ${farmerUsers.length} farmer users to migrate`);&#10;&#10;    for (const user of farmerUsers) {&#10;      // Check if farmer already exists in farmers collection&#10;      const existingFarmer = await farmersCollection.findOne({ _id: user._id });&#10;      &#10;      if (!existingFarmer) {&#10;        // Create farmer document&#10;        const farmerData = {&#10;          _id: user._id,&#10;          name: user.name || `${user.firstName} ${user.lastName}`,&#10;          email: user.email,&#10;          phone: user.phone || &quot;&quot;,&#10;          location: user.address || &quot;&quot;,&#10;          farmName: user.farmDetails?.farmName || `${user.name}'s Farm`,&#10;          specializations: user.farmDetails?.specialization ? &#10;            Array.isArray(user.farmDetails.specialization) ? &#10;              user.farmDetails.specialization : &#10;              [user.farmDetails.specialization] : &#10;            [&quot;General Farming&quot;],&#10;          farmSize: user.farmDetails?.farmSize || null,&#10;          farmSizeUnit: user.farmDetails?.farmSizeUnit || &quot;acres&quot;,&#10;          bio: user.bio || &quot;&quot;,&#10;          profilePicture: user.profilePicture || null,&#10;          rating: 0,&#10;          totalReviews: 0,&#10;          verified: false,&#10;          joinedDate: user.createdAt || new Date(),&#10;          products: [],&#10;          orders: [],&#10;          availability: {&#10;            status: &quot;available&quot;,&#10;            schedule: {&#10;              monday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              tuesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              wednesday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              thursday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              friday: { start: &quot;09:00&quot;, end: &quot;17:00&quot;, available: true },&#10;              saturday: { start: &quot;09:00&quot;, end: &quot;15:00&quot;, available: true },&#10;              sunday: { start: &quot;10:00&quot;, end: &quot;14:00&quot;, available: false }&#10;            }&#10;          },&#10;          socialMedia: {&#10;            facebook: &quot;&quot;,&#10;            instagram: &quot;&quot;,&#10;            twitter: &quot;&quot;,&#10;            website: &quot;&quot;&#10;          },&#10;          certifications: [],&#10;          deliveryOptions: {&#10;            farmPickup: true,&#10;            localDelivery: false,&#10;            shipping: false,&#10;            deliveryRadius: 0&#10;          },&#10;          createdAt: user.createdAt || new Date(),&#10;          updatedAt: new Date()&#10;        };&#10;&#10;        // Insert farmer&#10;        await farmersCollection.insertOne(farmerData);&#10;        console.log(`✅ Migrated farmer: ${farmerData.name}`);&#10;      } else {&#10;        console.log(`⚠️  Farmer ${user.name} already exists in farmers collection`);&#10;      }&#10;    }&#10;&#10;    console.log(&quot;✅ Migration completed!&quot;);&#10;    &#10;    // Show final count&#10;    const totalFarmers = await farmersCollection.countDocuments();&#10;    console.log(` Total farmers in collection: ${totalFarmers}`);&#10;    &#10;  } catch (error) {&#10;    console.error(&quot;❌ Migration error:&quot;, error);&#10;  }&#10;}&#10;&#10;migrateFarmers();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/optimize-atlas-indexes.js" />
              <option name="updatedContent" value="// MongoDB Atlas Performance Optimization Script&#10;// Run this script to create optimized indexes for better Atlas performance&#10;&#10;import clientPromise from &quot;../lib/mongodb.js&quot;;&#10;&#10;async function createAtlasOptimizedIndexes() {&#10;  try {&#10;    const client = await clientPromise;&#10;    const db = client.db(&quot;farmfresh&quot;);&#10;    &#10;    console.log(&quot; Starting MongoDB Atlas index optimization...&quot;);&#10;&#10;    // Products Collection - Optimized for products page performance&#10;    const productsCollection = db.collection(&quot;products&quot;);&#10;    console.log(&quot; Optimizing products collection indexes...&quot;);&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, category: 1, featured: 1, createdAt: -1 },&#10;      { name: &quot;products_main_query_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, featured: 1, averageRating: -1 },&#10;      { name: &quot;products_featured_rating_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, price: 1 },&#10;      { name: &quot;products_price_filter_idx&quot;, background: true }&#10;    );&#10;    &#10;    await productsCollection.createIndex(&#10;      { status: 1, purchaseCount: -1 },&#10;      { name: &quot;products_popularity_idx&quot;, background: true }&#10;    );&#10;&#10;    // Orders Collection - Optimized for farmer dashboard and orders pages&#10;    const ordersCollection = db.collection(&quot;orders&quot;);&#10;    console.log(&quot; Optimizing orders collection indexes...&quot;);&#10;    &#10;    // Critical farmer query indexes&#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerId&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_orders_main_idx&quot;, background: true }&#10;    );&#10;    &#10;    await ordersCollection.createIndex(&#10;      { &quot;items.farmerEmail&quot;: 1, status: 1, createdAt: -1 },&#10;      { name: &quot;farmer_email_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Customer order indexes&#10;    await ordersCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;customer_orders_idx&quot;, background: true }&#10;    );&#10;    &#10;    // Status filtering&#10;    await ordersCollection.createIndex(&#10;      { status: 1, createdAt: -1 },&#10;      { name: &quot;status_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Reviews Collection - For faster review loading&#10;    const reviewsCollection = db.collection(&quot;reviews&quot;);&#10;    console.log(&quot;⭐ Optimizing reviews collection indexes...&quot;);&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { productId: 1, createdAt: -1 },&#10;      { name: &quot;product_reviews_idx&quot;, background: true }&#10;    );&#10;    &#10;    await reviewsCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_product_review_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    // Favorites Collection - For user favorites&#10;    const favoritesCollection = db.collection(&quot;favorites&quot;);&#10;    console.log(&quot;❤️ Optimizing favorites collection indexes...&quot;);&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, productId: 1 },&#10;      { name: &quot;user_favorites_idx&quot;, background: true, unique: true }&#10;    );&#10;    &#10;    await favoritesCollection.createIndex(&#10;      { userId: 1, createdAt: -1 },&#10;      { name: &quot;user_favorites_date_idx&quot;, background: true }&#10;    );&#10;&#10;    // Carts Collection - For cart operations&#10;    const cartsCollection = db.collection(&quot;carts&quot;);&#10;    console.log(&quot; Optimizing carts collection indexes...&quot;);&#10;    &#10;    await cartsCollection.createIndex(&#10;      { userId: 1 },&#10;      { name: &quot;user_cart_idx&quot;, background: true, unique: true }&#10;    );&#10;&#10;    console.log(&quot;✅ Atlas optimization complete!&quot;);&#10;    console.log(&quot; Performance improvements applied for:&quot;);&#10;    console.log(&quot;   • Products page - faster filtering and sorting&quot;);&#10;    console.log(&quot;   • Farmer dashboard - optimized order queries&quot;);&#10;    console.log(&quot;   • Farmer orders page - improved farmer-specific queries&quot;);&#10;    console.log(&quot;   • Reviews and favorites - faster user interactions&quot;);&#10;    &#10;    return true;&#10;  } catch (error) {&#10;    console.error(&quot;❌ Error optimizing indexes:&quot;, error);&#10;    return false;&#10;  }&#10;}&#10;&#10;// Atlas-specific query optimization hints&#10;async function optimizeAtlasQueries() {&#10;  console.log(&quot; Applying Atlas-specific optimizations...&quot;);&#10;  &#10;  const client = await clientPromise;&#10;  const db = client.db(&quot;farmfresh&quot;);&#10;  &#10;  // Enable collection-level read preferences for better performance&#10;  const collections = ['products', 'orders', 'reviews', 'favorites', 'carts'];&#10;  &#10;  for (const collectionName of collections) {&#10;    const collection = db.collection(collectionName);&#10;    &#10;    // Set read preference to secondary for read-heavy operations&#10;    collection.readPreference = 'secondaryPreferred';&#10;    &#10;    console.log(` Optimized read preference for ${collectionName}`);&#10;  }&#10;  &#10;  console.log(&quot;✅ Query optimizations applied!&quot;);&#10;}&#10;&#10;// Main execution function&#10;async function main() {&#10;  console.log(&quot; MongoDB Atlas Performance Optimization&quot;);&#10;  console.log(&quot;=========================================&quot;);&#10;  &#10;  const indexSuccess = await createAtlasOptimizedIndexes();&#10;  &#10;  if (indexSuccess) {&#10;    await optimizeAtlasQueries();&#10;    console.log(&quot; Your FarmFresh app is now optimized for Atlas!&quot;);&#10;    console.log(&quot; Expected performance improvements:&quot;);&#10;    console.log(&quot;   • Products page: 60-80% faster&quot;);&#10;    console.log(&quot;   • Farmer dashboard: 70-90% faster&quot;); &#10;    console.log(&quot;   • Order queries: 50-70% faster&quot;);&#10;  } else {&#10;    console.log(&quot;❌ Optimization failed. Check your MongoDB connection.&quot;);&#10;  }&#10;}&#10;&#10;// Run if called directly&#10;if (import.meta.url === `file://${process.argv[1]}`) {&#10;  main().catch(console.error);&#10;}&#10;&#10;export { createAtlasOptimizedIndexes, optimizeAtlasQueries };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>